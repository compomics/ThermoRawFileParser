<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThermoFisher.CommonCore.Data</name>
    </assembly>
    <members>
        <member name="T:ThermoFisher.CommonCore.Data.Business.AnalogInstrument">
            <summary>
            Encapsulates information about AnalogInstrument.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AnalogInstrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.AnalogInstrument"/> class.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.AnalogScanIndex">
            <summary>
            Defines the analog instrument data header for analog devices
            </summary>
            <seealso cref="T:ThermoFisher.CommonCore.Data.Interfaces.IAnalogScanIndex" />
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AnalogScanIndex.NumberOfChannels">
            <summary>
            Gets or sets the number of channels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AnalogScanIndex.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AnalogScanIndex.TIC">
            <summary>
            Gets or sets the tic.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.DataFilter">
            <summary>
            Specifies how positive and negative values are handled
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataFilter.AllData">
            <summary>
            Return all data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataFilter.PositiveOnly">
            <summary>
            Return strictly positive data (not zero)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataFilter.PositiveAndZero">
            <summary>
            Return zero and above
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Analytics">
            <summary>
            Class to get various statistics from raw data.
            Intended to gather data for bar charts.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Analytics.Filter">
            <summary>
            Gets or sets the scan filter string (sets "ScanFilter").
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Analytics.CompoundNames">
            <summary>
            Gets or sets the compound names, for filtering chromatograms.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Analytics.MaxTextCategories">
            <summary>
            Gets or sets the maximum number of unique strings which are shown as a bar category,
            for "text string" diagnostic items.
            Any additional strings are displayed as a bar labeled "Other".
            Valid range: 3-1000
            Default: 10
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Create an analyzer for raw data.
            </summary>
            <param name="file">the (open) raw file</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.BandSize(System.Double[],System.Int32)">
            <summary>
            Calculate the band size (bin size) needed to divide all data values into a given number of bands.
            The bands would usually represent "bars on a histogram".
            </summary>
            <param name="data">Data to analyze</param>
            <param name="bands">Number of bands needed</param>
            <returns>The width of each band</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.Average(System.Double[])">
            <summary>
            Gets the common average (mean) of a set of values, defined as 0 for "null or empty" data sets
            </summary>
            <param name="data">The data to analyze</param>
            <returns>the average</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.Mode(System.Double[],System.Int32)">
            <summary>
            Gets the modal band of a set of data, by grouping into a fixed number of bands.
            </summary>
            <param name="data">data to analyze</param>
            <param name="bands">The number of bands (groups) used to split the data</param>
            <returns>the center of the modal band (from 0 to bands-1). 0 for null or empty data</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.AverageDeltaTime(System.Collections.Generic.IList{System.Double})">
            <summary>
            Find the average delta between values in an array.
            </summary>
            <param name="data">the data</param>
            <returns>The average of the delta (d[x+1]-d[x])</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.DeltaTimes(System.Collections.Generic.IList{System.Double})">
            <summary>
            Find the deltas between values in an array.
            </summary>
            <param name="data">the data</param>
            <returns>The average of the delta (d[x+1]-d[x])</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.AverageDeltaTime">
            <summary>
            Find the average delta between start times of scans matching a filter (minutes).
            </summary>
            <returns>The average of the delta (d[x+1]-d[x]) in the start times</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.DeltaTimes">
            <summary>
            Find the delta between start times of scans matching a filter (minutes).
            </summary>
            <returns>The the deltas (d[x+1]-d[x]) in the start times</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.FilteredScanTimes">
            <summary>
            Gets the scan number and start time of scans matching a filter
            </summary>
            <returns>All scans which match this filter and their times.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.GetSignalForFilter">
            <summary>
            Get a chromatogram from a filter
            </summary>
            <returns>The chromatogram</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.CalculateAllScanTimes">
            <summary>
            Find the RT of all scans
            </summary>
            <returns>the RT of every scan in a raw file</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.ScanDurations">
            <summary>
            Find scan durations,in seconds.
            </summary>
            <returns>the set of durations, in seconds. returns "new double[0] if there is no MS data</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.ScanDurationsNoKey">
            <summary>
            Find scan durations, for files which do not have "ElapsedKey"
            </summary>
            <returns>the set of durations</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.ScanDurationsWithKey(System.String,System.Int32)">
            <summary>
            Find scan durations, for files which do have "ElapsedKey"
            </summary>
            <param name="filter">scan filter</param>
            <param name="indexOfKey">index into trailer extra for time key</param>
            <returns>the set of durations in seconds</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.IsLargeNumeric(ThermoFisher.CommonCore.Data.Business.GenericDataTypes)">
            <summary>
            Determine if this is a data type which needs banding.
            Small types (such as byte) can be mapped to a small array of results.
            For example: "unsigned byte" has only 256 states, so:
            we can collect data about each state.
            But: Float has infinite states, so must be banded.
            Note that "int" sometimes can handle all states, depending on the
            range of values, so is not considered "large" here
            </summary>
            <param name="dataType"></param>
            <returns>true if this is a large numeric type</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.TrailerValueTrendFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter)">
            <summary>
            Find a trend for the given trailer item
            </summary>
            <param name="indexOfKey">index into trailer extra for required item</param>
            <param name="dataMode">Determines how positive, zero and negative data are handled.</param>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for fasle/off/no</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.StatusValueTrendFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter)">
            <summary>
            Find a trend for the given status item. Calling code should select a device with a status log first.
            </summary>
            <param name="indexOfKey">index into status log for required item</param>
            <param name="dataMode">Determines how positive, zero and negative data are handled.</param>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for false/off/no</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.StatusValueTrendFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter,System.Int32@)">
            <summary>
            Find a trend for the given status item. Calling code should select a device with a status log first.
            </summary>
            <param name="indexOfKey">index into status log for required item</param>
            <param name="dataMode">Determines how positive, zero and negative data are handled.</param>
            <param name="startRecord">First record in the log to inspect. This is intended for incremental log reading (real time data).
            The value is updated to the next needed record number, such that repeated calls get new information as it arrives.</param>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for false/off/no.
            If there are no further records after "startRecord" or all records are "NaN" the result will be an empty array.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.TrailerValueSignalFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter)">
            <summary>
            Find a trend for the given trailer item
            </summary>
            <param name="indexOfKey">index into trailer extra for required item</param>
            <param name="dataMode">Determines how positive, zero and negative data are handled.</param>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for fasle/off/no</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.StatusValueSignalFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter)">
            <summary>
            Find a trend for the given status item. Calling code should select a device with a status log first.
            </summary>
            <param name="indexOfKey">index into trailer extra for required item</param>
            <param name="dataMode">Determines how positive, zero and negative data are handled.</param>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for false/off/no.
            If there are no further records after "startRecord" or all records are "NaN" the result will be an empty array.</returns>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for fasle/off/no</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.StatusValueSignalFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter,System.Int32@)">
            <summary>
            Find a trend for the given status item. Calling code should select a device with a status log first.
            </summary>
            <param name="indexOfKey">index into trailer extra for required item</param>
            <param name="dataMode">Determines how positive, zero and negative data are handled.</param>
            <param name="startRecord">First record in the log to inspect. This is intended for incremental log reading (real time data).
            The value is updated to the next needed record number, such that repeated calls get new information as it arrives.</param>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for false/off/no.
            If there are no further records after "startRecord" or all records are "NaN" the result will be an empty array.</returns>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for fasle/off/no</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.GetStatusNumericValueFromLog(System.Int32,ThermoFisher.CommonCore.Data.Business.HeaderItem,System.Int32,System.Double@,System.Collections.Generic.Dictionary{System.String,ThermoFisher.CommonCore.Data.Business.Analytics.NameData},System.Int32)">
            <summary>
            Get a status numeric value from a status log
            </summary>
            <param name="indexOfKey">Index of the item in status log header</param>
            <param name="recordFormat">status log format for this item</param>
            <param name="log">stats log record index</param>
            <param name="time">Time of this log entry</param>
            <param name="foundNames">list of names for "string" items</param>
            <param name="maxTextCategories">The max number of unique strings accepted</param>
            <returns>The numeric value for this log entry</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.GetStatusNumericValueFromSortedLog(System.Int32,ThermoFisher.CommonCore.Data.Business.HeaderItem,System.Int32,System.Double@,System.Collections.Generic.Dictionary{System.String,ThermoFisher.CommonCore.Data.Business.Analytics.NameData},System.Int32)">
            <summary>
            Get a status numeric value from a sorted status log
            </summary>
            <param name="indexOfKey">Index of the item in status log header</param>
            <param name="recordFormat">status log format for this item</param>
            <param name="log">stats log record index</param>
            <param name="time">Time of this log entry</param>
            <param name="foundNames">list of names for "string" items</param>
            <param name="maxTextCategories">The max number of unique strings accepted</param>
            <returns>The numeric value for this log entry</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.DecodeAllGenericNumerics(ThermoFisher.CommonCore.Data.Business.HeaderItem,System.Object,System.Collections.Generic.Dictionary{System.String,ThermoFisher.CommonCore.Data.Business.Analytics.NameData},System.Int32)">
            <summary>
            Return a numeric value from any generic data type.
            Numeric types (double,int etc.) return the encoded number.
            String types "count unique string states" and return a state number.
            </summary>
            <param name="recordFormat">generic record format</param>
            <param name="val">data to decode</param>
            <param name="foundNames">For string data: unique strings found so far</param>
            <param name="maxTextCategories">Max unique strings to accept</param>
            <returns>the value from this log entry</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.ValueForText(System.Object,System.Collections.Generic.Dictionary{System.String,ThermoFisher.CommonCore.Data.Business.Analytics.NameData},System.Int32)">
            <summary>
            Return a numeric value from any countable generic data type.
            Numeric types (short, byte etc.) return the encoded number.
            String types "count unique string states" and return a state number.
            </summary>
            <param name="val">data to decode</param>
            <param name="foundNames">For string data: unique strings found so far</param>
            <param name="maxTextCategories">Max unique strings to accept</param>
            <returns>the value from this log entry</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.ValidateMaxTextcategories">
            <summary>
            Silently ensure MaxTextCategories is in bounds, and fix if not
            </summary>
            <returns>the fixed max</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.GetSeriesNamesFromFormat(ThermoFisher.CommonCore.Data.Business.HeaderItem)">
            <summary>
            Get names for know "enum" formats.
            </summary>
            <param name="recordFormat">format of this field</param>
            <returns>string version of values</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.SmallStatusValueTrendFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter)">
            <summary>
            Find a trend for the given status log item. Calling code should select a device with a status log first.
            </summary>
            <param name="indexOfKey">index into trailer extra for required item</param>
            <param name="dataMode">Determines how positive, zero and negative data are handled.</param>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for fasle/off/no</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.SmallTrailerValueTrendFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter)">
            <summary>
            Find a trend for the given trailer item
            </summary>
            <param name="indexOfKey">index into trailer extra for required item</param>
            <param name="dataMode">Determines how positive, zero and negative data are handled.</param>
            <returns>the set of values. Items which are (True, false) or (On,Off)or (yes,no) return 1 for true/on/yes and 0 for fasle/off/no</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.DecodeSmallValue(ThermoFisher.CommonCore.Data.Business.GenericDataTypes,System.Object,System.Collections.Generic.Dictionary{System.String,ThermoFisher.CommonCore.Data.Business.Analytics.NameData},System.Int32)">
            <summary>
            Decode only small (countable) values from logs.
            </summary>
            <param name="recordFormat">Format of this field</param>
            <param name="val">Value to decode</param>
            <param name="foundNames">Categories found so far</param>
            <param name="maxTextCategories">maximum number of categories</param>
            <returns>The log value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.GetSmallStatusLogValueTrendFromKey(System.Int32,ThermoFisher.CommonCore.Data.Business.DataFilter,ThermoFisher.CommonCore.Data.Business.HeaderItem[])">
            <summary>
            Get a small (countable state) status log value trend, based on 
            index into the status log fields.
            </summary>
            <param name="indexOfKey">Index of field to read</param>
            <param name="dataMode">Filtering rule</param>
            <param name="header">Format of the log</param>
            <returns>The log value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.CollateNames(System.Collections.Generic.Dictionary{System.String,ThermoFisher.CommonCore.Data.Business.Analytics.NameData},System.Collections.Generic.List{System.Int32},System.String[])">
            <summary>
            Ensure that all trend items have a valid value.
            Assign values with "no saved name" as a category "other", valued 1 above the known names.
            </summary>
            <param name="foundNames">The set of names found (categories) in the log</param>
            <param name="trend">The data for the trend plot</param>
            <param name="names">The names for the numbered categories.</param>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.GetScanDurationBands(System.Int32)">
            <summary>
            Find the durations of scans, and bin them into a number of "millisecond" bands, ready for a histogram plot.
            </summary>
            <param name="bands">number of bands</param>
            <returns>analysis of scan times (milliseconds)</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.GetBandedData(System.Double[],System.Int32)">
            <summary>
            Get banded data for a bar chart.
            </summary>
            <param name="data">data to map into bands</param>
            <param name="bands">requested number of bands</param>
            <returns>banded data for a bar chart</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Analytics.GetBandedData(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Get banded data for a chart (histogram). If the data has a small enough range of values,
            then all values have their own bar.
            Each bar represents "the count of values within a given band".
            </summary>
            <param name="data">Data to band</param>
            <param name="defaultBands">If there are too many unique data values (> maxBands) then
            the data becomes banded (grouped) into this many bands</param>
            <param name="maxBands">The maximum number of unique categories before that data must be banded</param>
            <returns>The banded data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Analytics.NameData">
            <summary>
            Class to keep trace of numeric value (bar number) for each text string found in a log
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Analytics.NameData.Name">
            <summary>
            Name found in the log
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Analytics.NameData.Value">
            <summary>
            Assigned bar number
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus">
            <summary>
            Autofilter extensions for raw files
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.EnhancedAutoFilter(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Create an enhanced autofilter for this raw file
            </summary>
            <param name="file">raw file</param>
            <returns>enhanced auto filter</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.EnhancedAutoFilter(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Double,System.Double)">
            <summary>
            Create an enhanced autofilter for this raw file, uing cans over a specific time range.
            </summary>
            <param name="file">raw file</param>
            <param name="startTime">start retention time</param>
            <param name="endTime">end retention time</param>
            <returns>enhanced auto filter</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced">
            <summary>
            This class extends the functions of "auto filter".
            On construction, the "auto filter" list is obtained from the MS detector.
            methods are then called to construct a list of filters based on this data.
            The list can be searched for "items matching a given filter rule".
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.AddEmptyFilter">
            <summary>
            Adds the "empty filter" to the list.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.AddActivationTypeFilters">
            <summary>
            Searches for the activation types used.
            Adds "Activation type" to the list, for MS/MS data (MS2 or above).
            This can find CID, HCD, ETD, UVPD
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.Add(System.String)">
            <summary>
            Creates a filter from a string and adds it
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.AddMsOrderFilters(System.Boolean)">
            <summary>
            Adds "ms order filters" to the list
            this includes ms, ms2 etc up to ms10
            if any ms/ms is found msn is also added.
            </summary>
            <param name="addMsn">When true (default): if any ms/ms is found "MSn" is also added.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.IncludeCompoundNames">
            <summary>
            Gets or sets a value indicating whether compound names should be included.
            This only has an effect if the "Name" property is set for at least one filter.
            Results which have names are shown in sorted (alpha) order.
            Any other filters, which do not have a name, are then added after the 
            named items, in the original "auto filter" order.
            If a name appears for more than one filter, then an entry is created
            which only contains a compound name, such that a chromatogram
            can be created based on all data identified for that compound.
            Note that this "name only" list is excluded when a "unique filter list" is
            requested with a specific subset filter.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.CompoundNameSeparator">
            <summary>
            Gets or sets a separator which appears between a compound name and a filter.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.AddUniqueFilters(System.String)">
            <summary>
            Add all unique filter groups (auto filter).
            </summary>
            <param name="mustContain">If this is not empty: The filters must all contan this sub-filter.
            For example "d" for "only return data dependent"</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.MergeCvValues">
            <summary>
            Remove "CV" from filters, such that filters which have CV at different values are merged.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Boolean,System.Double,System.Double)">
            <summary>
            Create am emhaced auto filter for a raw file
            </summary>
            <param name="rawData"></param>
            <param name="applyTimeLimits">indicates whether time limits are used for the
             "auto filter" request from the raw file.
             If this is true:
             Only scans from minTime to maxTime are used
             else: all scans are used</param>
            <param name="minTime">the minimum retention time for getting a set of filters from the raw file.
            Only applied when applyTimeLimits is set.</param>
            <param name="maxTime">the maximum retention time for getting a set of filters from the raw file.
            Only applied when applyTimeLimits is set.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AutoFilterPlus.AutoFilterEnhanced.MergeCV(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Interfaces.IFilterWithString})">
            <summary>
            remove "CV" from all filters
            </summary>
            <param name="filterList">Filter to consolidate</param>
            <returns>Updated list</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation">
            <summary>
            The auto sampler information.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation.TrayIndex">
            <summary>
            Gets or sets the tray index, -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation.VialIndex">
            <summary>
            Gets or sets the vial index, -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation.VialsPerTray">
            <summary>
            Gets or sets the number of vials (or wells) per tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation.VialsPerTrayX">
            <summary>
            Gets or sets the number of vials (or wells) per tray, across the tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation.VialsPerTrayY">
            <summary>
            Gets or sets the number of vials (or wells) per tray, down the tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation.TrayShape">
            <summary>
            Gets or sets the shape.
            If this property returns "Invalid", no other values in this object
            contain usable information.
            Invalid data can occur for older raw file formats, before auto sampler data was added.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation.TrayShapeAsString">
            <summary>
            Gets the tray shape as a string
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.AutoSamplerInformation.TrayName">
            <summary>
            Gets or sets the tray name.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.AvalonSettings">
            <summary>
            Parameters for the Avalon integrator
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AvalonSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.AvalonSettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AvalonSettings.#ctor(ThermoFisher.CommonCore.Data.IAvalonSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.AvalonSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.AvalonSettings.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{ThermoFisher.CommonCore.Data.Business.IntegratorEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.AvalonSettings"/> class. 
            </summary>
            <param name="events">
            Integrator events to copy
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.BandedData">
            <summary>
            Results of banding algorithm.
            Data for a bar chart
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.BandedData.Bands">
            <summary>
            Gets or sets the number of bands.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.BandedData.BandWidth">
            <summary>
            Gets or sets the width of a band.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.BandedData.BandRange(System.Int32)">
            <summary>
            Calculates the range of a given band
            </summary>
            <param name="band">band whose range is needed</param>
            <returns>The range of value in this band</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.BandedData.BandCenters">
            <summary>
            Gets or sets the center of each band
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.BandedData.BandData">
            <summary>
            Gets or sets the data (height of the bar) for each band
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.BandedData.Banded">
            <summary>
            Gets or sets a value indicating whether this data got banded.
            For example: If a data set was integer, and contained "charges 1 to 7" then all 7 
            original data categories can be returned.
            If data is "double from 1..02-9000.6" then there are no fixed categories, and the data
            will be "sampled" into bands.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.CachedScanProvider">
            <summary>
            The cached scan provider.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CachedScanProvider.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.CachedScanProvider"/> class.
            </summary>
            <param name="capacity">
            The capacity.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CachedScanProvider.GetScanFromScanNumber(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Int32)">
            <summary>
            Get scan from a scan number.
            </summary>
            <param name="rawData">
            The raw data.
            </param>
            <param name="scanNumber">
            The scan number.
            </param>
            <returns>
            The scan at that scan number, or null if the scan number is out of range.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CachedScanProvider.GetScanAtTime(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Double)">
            <summary>
            The get scan at time.
            </summary>
            <param name="rawFile">
            The raw file.
            </param>
            <param name="time">
            The time.
            </param>
            <returns>
            The scan nearest the given time.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null raw file
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData">
            <summary>
            Data for the calibration curve.
            Included and excluded points, fitted curve and equation text.
            This is designed to help creating calibration curve plots.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData._excluded">
            <summary>
            The _excluded.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData._externalExcluded">
            <summary>
            The _external excluded.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData._externalIncluded">
            <summary>
            The _external included.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData._included">
            <summary>
            The included.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData._points">
            <summary>
            The points.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData._equation">
            <summary>
            The equation.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData._percentCv">
            <summary>
            The percent cv.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData._coefficientOfDetermination">
            <summary>
            The coefficient of determination (R squared).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRegression,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates},System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData"/> class.
            </summary>
            <param name="regression">
            The regression.
            </param>
            <param name="currentCalibrationLevels">
            The current calibration levels.
            </param>
            <param name="historicCalibrationLevels">
            The historic calibration levels.
            </param>
            <param name="isInternalStandard">
            The is internal standard.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.Equation">
            <summary>
            Gets or sets the equation text from the regression calculation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.Excluded">
            <summary>
            Gets the excluded replicates from current sequence data
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.ToReadOnly(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint})">
            <summary>
            Covert points to read only.
            </summary>
            <param name="points">
            The points.
            </param>
            <returns>
            The collection of points
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.ExcludedPoints">
            <summary>
            Gets the excluded replicates from current sequence data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.ExternalExcluded">
            <summary>
            Gets the excluded replicates from previously acquired  data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.ExternalExcludedPoints">
            <summary>
            Gets the excluded replicates from previously acquired  data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.ExternalIncluded">
            <summary>
            Gets the included replicates from previously acquired data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.ExternalIncludedPoints">
            <summary>
            Gets the included replicates from previously acquired data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FittedLinePoints">
            <summary>
            Gets the fitted line
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.Included">
            <summary>
            Gets the included replicates from current sequence data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.IncludedPoints">
            <summary>
            Gets the included replicates from current sequence data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.IsInternalStandard">
            <summary>
            Gets or sets a value indicating whether the fitted line is empty
            The curve data needs to be plotted as appropriate for
            an internal standard: Centered on the set of points,
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.PercentCv">
            <summary>
            Gets or sets the percentage coefficient of variance from the first calibration level.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.PercentRsd">
            <summary>
            Gets or sets the percentage relative standard deviation from the first calibration level.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.Points">
            <summary>
            Gets the fitted line
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.RSquared">
            <summary>
            Gets or sets the RSquared value from the regression calculation (-1 if not valid)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FromReplicates(ThermoFisher.CommonCore.Data.Interfaces.IRegression,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates},System.Boolean)">
            <summary>
            Create data for a calibration curve report from a replicate table.
            </summary>
            <param name="regression">
            The replicates for one component
            </param>
            <param name="calibrationLevels">
            Calibration replicates from the current sequence
            </param>
            <param name="isInternalStandard">
            If set: the data is for an internal standard,
            and does not contain a line of fit
            </param>
            <returns>
            X,Y points for included, excluded and fitted line
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FromReplicates(ThermoFisher.CommonCore.Data.Interfaces.IRegression,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates})">
            <summary>
            Create data for a calibration curve report from a replicate table.
            </summary>
            <param name="regression">
            The replicates for one component
            </param>
            <param name="calibrationLevels">
            Calibration replicates from the current sequence
            </param>
            <returns>
            X,Y points for included, excluded and fitted line
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FromReplicates(ThermoFisher.CommonCore.Data.Interfaces.IRegression,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates},System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates})">
            <summary>
            Create data for a calibration curve report from a replicate table.
            </summary>
            <param name="regression">
            The replicates for one component
            </param>
            <param name="currentCalibrationReplicates">
            Calibration replicates from the current sequence
            </param>
            <param name="historicCalibrationReplicates">
            Calibration replicates from previous sequences
            </param>
            <returns>
            X,Y points for included, excluded and fitted line
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FromReplicates(ThermoFisher.CommonCore.Data.Interfaces.IRegression,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates},System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates},System.Boolean)">
            <summary>
            Create data for a calibration curve report from a replicate table.
            </summary>
            <param name="regression">
            The replicates for one component
            </param>
            <param name="currentCalibrationReplicates">
            Calibration replicates from the current sequence
            </param>
            <param name="historicCalibrationReplicates">
            Calibration replicates from previous sequences
            </param>
            <param name="isInternalStandard">
            If set: the data is for an internal standard,
            and does not contain a line of fit
            </param>
            <returns>
            X,Y points for included, excluded and fitted line
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FromReplicates(ThermoFisher.CommonCore.Data.Interfaces.IRegression,ThermoFisher.CommonCore.Data.ItemCollection{ThermoFisher.CommonCore.Data.Business.LevelReplicates})">
            <summary>
            Create data for a calibration curve report from a replicate table.
            This version does not support "stats" for ISTD curves.
            </summary>
            <param name="regression">
            The replicates for one component
            </param>
            <param name="calibrationLevels">
            Calibration replicates from the current sequence
            </param>
            <returns>
            X,Y points for included, excluded and fitted line
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FromReplicates(ThermoFisher.CommonCore.Data.Interfaces.IRegression,ThermoFisher.CommonCore.Data.ItemCollection{ThermoFisher.CommonCore.Data.ILevelReplicates},ThermoFisher.CommonCore.Data.ItemCollection{ThermoFisher.CommonCore.Data.ILevelReplicates},System.Boolean)">
            <summary>
            Create data for a calibration curve report from a replicate table.
            This version does not support "stats" for ISTD curves.
            </summary>
            <param name="regression">
            The replicates for one component
            </param>
            <param name="currentCalibrationReplicates">
            Calibration replicates from the current sequence
            </param>
            <param name="historicCalibrationReplicates">
            Calibration replicates from previous sequences
            </param>
            <param name="isInternalStandard">
            If set: the data is for an internal standard,
            and does not contain a line of fit
            </param>
            <returns>
            X,Y points for included, excluded and fitted line
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.MakePoints(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.ILevelReplicates},System.Boolean)">
            <summary>
            Create a table of points to draw on a calibration curve
            </summary>
            <param name="calibrationLevels">
            Replicate table to convert into points
            </param>
            <param name="included">
            if true, create points for the included data, else create points for the excluded data
            </param>
            <returns>
            The list of points to plot
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FindMax(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint})">
            <summary>
            Find the max amount in the supplied points
            </summary>
            <param name="points">
            The points.
            </param>
            <returns>
            The max amount.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurveData.FindRsd(System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.ILevelReplicates})">
            <summary>
            Find the relative standard deviation
            </summary>
            <param name="calibrationLevels">
            The calibration levels.
            </param>
            <returns>
            The RSD.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint">
            <summary>
            class to represent calibration data, as may be drawn on a plot.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.Amount">
            <summary>
            Gets or sets the amount (x) on calibration curve
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.Response">
            <summary>
            Gets or sets the response (y) for the amount
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.Key">
            <summary>
            Gets or sets the a key to identify this point. For example, a file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.PeakKey">
            <summary>
            Gets or sets the a second key to identify this point. For example, a compound name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.op_Equality(ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint,ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint)">
            <summary>
            Test that two points are equal
            </summary>
            <param name="left">first point to compare</param>
            <param name="right">second point to compare</param>
            <returns>true if they have the same contents</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.op_Inequality(ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint,ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint)">
            <summary>
            Test that two spec points are not equal
            </summary>
            <param name="left">first point to compare</param>
            <param name="right">second point to compare</param>
            <returns>true if they do not have the same contents</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.Equals(System.Object)">
            <summary>
            Test two points for equality
            </summary>
            <param name="obj">
            point to compare
            </param>
            <returns>
            true if they are equal
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.GetHashCode">
            <summary>
            Gets a hash code <see>Object.GetHashCode</see>
            </summary>
            <returns>
            The has code <see>Object.GetHashCode</see>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationCurvePoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ICalibrationLevel">
            <summary>
            Defines interfaces for a calibration level.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICalibrationLevel.Name">
            <summary>
            Gets or sets the name for this calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICalibrationLevel.BaseAmount">
            <summary>
            Gets or sets the amount of calibration compound (usually a concentration) for this level
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ICalibrationLevel.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current level.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.CalibrationLevel">
            <summary>
            This class defines a calibration level.
            Each level has an amount BaseAmount and a name
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationLevel.NearZero">
            <summary>
            A values very close to zero
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationLevel._baseAmount">
            <summary>
            Anticipated amount of target compound in calibration of QC standard.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CalibrationLevel._name">
            <summary>
            Name for this calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationLevel.Name">
            <summary>
            Gets or sets the name for this calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CalibrationLevel.BaseAmount">
            <summary>
            Gets or sets the amount of calibration compound (usually a concentration) for this level
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationLevel.#ctor(ThermoFisher.CommonCore.Data.ICalibrationLevelAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.CalibrationLevel"/> class. 
            Create a copy of a calibration level
            </summary>
            <param name="level">
            Level to copy
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationLevel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.CalibrationLevel"/> class. 
            Default construction of calibration level
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationLevel.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.CalibrationLevel"/> class. 
            </summary>
            <param name="name">
            A name associated with the level
            </param>
            <param name="amount">
            The amount of calibration compound (usually a concentration) for this level
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CalibrationLevel.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current level.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.CentroidStream">
            <summary>
            Centroid data making a second stream with profile scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidStream._basePeakFound">
            <summary>
            this allows base peak mass and base peak intensity to search for the base value on first use
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidStream._basePeakIntensity">
            <summary>
            Intensity of largest peak (valid when _basePeakFound)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidStream._basePeakMass">
            <summary>
            Mass of largest peak
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidStream._basePeakNoise">
            <summary>
            Noise of largest peak (valid when _basePeakFound)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidStream._basePeakResolution">
            <summary>
            Resolution of largest peak (valid when _basePeakFound)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidStream._coefficents">
            <summary>
            Mass calibration coefficients
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.#ctor">
            <summary>
            Creates a new instance of CentroidStream
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.#ctor(ThermoFisher.CommonCore.Data.Business.CentroidStream)">
            <summary>
            Deep copy constructor
            </summary>
            <param name="labelData"></param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Baselines">
            <summary>
            Gets or sets the list of baseline at each peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.BasePeakIntensity">
            <summary>
            Gets the intensity of most intense peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.BasePeakMass">
            <summary>
            Gets the mass of most intense peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.BasePeakNoise">
            <summary>
            Gets the noise of most intense peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.BasePeakResolution">
            <summary>
            Gets the resolution of most intense peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Charges">
            <summary>
            Gets or sets the list of charge calculated for peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Coefficients">
            <summary>
            Gets or sets the calibration Coefficients
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.CoefficientsCount">
            <summary>
            Gets or sets the coefficients count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Flags">
            <summary>
            Gets or sets the flags for the peaks (such as reference)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Intensities">
            <summary>
            Gets or sets the list of Intensities for each centroid
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Length">
            <summary>
            Gets or sets the number of centroids
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Masses">
            <summary>
            Gets or sets the list of masses of each centroid
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Noises">
            <summary>
            Gets or sets the list of noise level near peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.Resolutions">
            <summary>
            Gets or sets resolution of each peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.CentroidStream.ScanNumber">
            <summary>
            Gets or sets the scan Number
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.BaseIntensity(ThermoFisher.CommonCore.Data.Business.Range[],ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Return the largest intensity (base value) in the ranges supplies
            </summary>
            <param name="ranges">Ranges of masses</param>
            <param name="toleranceOptions">If the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses</param>
            <returns>Largest intensity in all ranges</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.Clear">
            <summary>
            Clears all the data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.DeepClone">
            <summary>
            Make a deep clone of this object.
            </summary>
            <returns>An object containing all data in this, and no shared references</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.GetCentroids">
            <summary>
            Get the list centroids.
            </summary>
            <returns>
            The centroids in the scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.GetLabelPeak(System.Int32)">
            <summary>
            Convert the data for a given peak in this stream into a LabelPeak
            </summary>
            <param name="index">
            The index of the peak to convert.
            </param>
            <returns>
            Extracted data for the selected peak
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.GetLabelPeaks">
            <summary>
            Convert the data into LabelPeak objects
            </summary>
            <returns>An array of LabelsPeaks, converted from this class</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.RefreshBaseDetails">
            <summary>
            Forces re-computation of Base peaks , intensities.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.SetLabelPeaks(ThermoFisher.CommonCore.Data.Business.LabelPeak[])">
            <summary>
            Convert data into this object from an array of LabelPeaks
            </summary>
            <param name="labelPeaks">Data to populate the class</param>
            <returns>true on success. False if the labels peaks are null or empty</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.SumIntensities(ThermoFisher.CommonCore.Data.Business.Range[],ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Sum all masses within the ranges
            </summary>
            <param name="ranges">List of ranges to sum</param>
            <param name="toleranceOptions">If the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses</param>
            <returns>Sum of intensities in all ranges</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.SumMasses(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess[],System.Double)">
            <summary>
            Sum all masses within the ranges
            </summary>
            <param name="ranges">List of ranges to sum</param>
            <param name="tolerance">If the ranges have equal mass values,
            then tolerance is subtracted from low and added to high to search for matching masses</param>
            <returns>Sum of intensities in all ranges</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.ToSimpleScan">
            <summary>
            Convert to simple scan.
            Even though this class implements ISimpleScanAccess,
            there can be an advantage in doing this conversion, as when this object goes out of scope
            the converted object only holds the mass and intensity refs, and will need less memory.
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.SimpleScan"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.ToSegmentedScan">
            <summary>
            Convert to segmented scan.
            This feature is intended for use where an application or algorithm in "SegmentedScan" format,
            such as typical centroid data from ITMS, but the data in this scan came from an FTMS detector,
            which would have the profile data in "SegmentedScan" and the centroid data in this object.
            Data from this object is duplicated (deep copy),
            such that changing values in the returned object will not affect data in
            this object.
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.ToScan(ThermoFisher.CommonCore.Data.Business.ScanStatistics)">
            <summary>
            Convert to Scan.
            This feature is intended for use where an application or algorithm needs data in "Scan" format,
            with centroid information in the "SegmentedScan" property of the Scan.
            (such as typical centroid data from ITMS), but the data in this scan came from an FTMS detector,
            which would have the profile data in "SegmentedScan" and the centroid data in this object.
            The data is first converted to SegmentedScan format (using ToSegmentedScan) then a new Scan is made
            containing that data (with no data in "CentroidStream).
            Data from this object is duplicated (deep copy),
            such that changing values in the returned object will not affect data in
            this object.
            This initializes the returned scan's "ScanStatistics" based on the returned mass and intensity data.
            If the (optional) originalScanStats parameter is included, information from 
            that is used to initialize  RT, scan number and other fields
            which cannot be calculated from this data.
            The only values updated in the scan statistics are "BasePeakMass" and "BasePeakIntenity".
            All other values are either as copied from the supplied parameter, or defaults.
            Application should set any other values needed in the Scan,
            such as "ScansCombined, ToleranceUnit, MassResolution",
            which cannot be determined from the supplied parameters.
            </summary>
            <param name="originalScanStats">If this is supplied, the scan statistics are initialized as a deep clone
            of the supplied object (so that RT etc. get preserved) then the values of BasePeakMass and 
            BasePeakIntensity are updated from this object</param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.GetMassRange">
            <summary>
            Find the mass limits of this data
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.TryValidate">
            <summary>
            Test if this is a valid object (all streams are not null. All data has same length)
            </summary>
            <returns>
            true if the object has valid data in it.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.Validate">
            <summary>
            Test if this is a valid object (all streams are not null. All data has same length)
             </summary>
            <exception cref="T:System.ArgumentException">is thrown if this instance does not contain valid data.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.Resize(System.Int32)">
            <summary>
            Internal method, used to truncate long arrays
            </summary>
            <param name="newSize">The size to "resize" to</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.ResizeArray(ThermoFisher.CommonCore.Data.PeakOptions[],System.Int32)">
            <summary>
            Change the size of an array. This exists because "Array.Resize" cannot be directly called on an array property.
            </summary>
            <param name="options">
            The original data.
            </param>
            <param name="newSize">
            The new size.
            </param>
            <returns>
            The resized options
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.ResizeArray(System.Double[],System.Int32)">
            <summary>
            Change the size of an array. This exists because "Array.Resize" cannot be directly called on an array property.
            </summary>
            <param name="doubles">
            The original data.
            </param>
            <param name="newSize">
            The new size.
            </param>
            <returns>
            The resized array.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.FindBasePeak">
            <summary>
            Find the most intense peak
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.GetBaseValue(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,System.Double)">
            <summary>
            Find the largest value in a given mass range, and combine with the value passed in.
            </summary>
            <param name="fixedRange">
            The mass range to analyze
            </param>
            <param name="baseValue">
            The base value so far.
            </param>
            <returns>
            The largest of the base value passed in, and the base value in this mass range.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.LabelPeak(System.Int32)">
            <summary>
            Create a label peak from data at a given index.
            </summary>
            <param name="labelIndex">
            The label index.
            </param>
            <returns>
            The <see cref="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.LabelPeak(System.Int32)"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.SumMasses(System.Double,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess)">
            <summary>
            Calculate the sum of intensities, for peaks within a mass range, and add to previous sum
            </summary>
            <param name="sum">
            The sum so far
            </param>
            <param name="fixedRange">
            The mass range.
            </param>
            <returns>
            This sum passed in, plus the sum of intensities of all peaks in range.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CentroidStream.Slice(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess})">
            <summary>
            slice the data, using a set of mass ranges.
            </summary>
            <param name="compactedRange">Ranges of data to include</param>
            <returns>sA scan which only has data in the requested ranges</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator">
            <summary>
            The chromatogram aggregator.
            This can join together chromatograms form batches of scans,
            and return to caller when complete
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator.Batches">
            <summary>
            Gets or sets the number of batches of scans, that sub-divide this chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator.Generator">
            <summary>
            Gets the generator.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator.#ctor(ThermoFisher.CommonCore.Data.Business.IChromatogramGenerator,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader},System.Action{ThermoFisher.CommonCore.Data.Business.ChromatogramSignal})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator"/> class.
            </summary>
            <param name="generator">
            The tool to create chromatograms.
            </param>
            <param name="availableScans">The scan numbers and retention times</param>
            <param name="deliveryAction">Method called when the chromatogram is complete</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator.Initialize">
            <summary>
            Get the aggregator ready to hold result for "Batches" of data
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator.SignalReady(System.Int32,ThermoFisher.CommonCore.Data.Business.ISignalConvert)">
            <summary>
            Called when a signal is ready.
            That is: A set of scans has been combined to make a chromatogram.
            When the final batch is delivered, the chromatogram is sent to the client.
            </summary>
            <param name="batch">
            The batch number (which part of the overall chromatogram is this?).
            </param>
            <param name="signal">
            The signal.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator.Collate">
            <summary>
            Collate the signals
            </summary>
            <returns>
            The joined signals
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator">
            <summary>
            The chromatogram batch generator.
            This provides any number of chromatograms to a caller,
            using multiple threads.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.AvailableScans">
            <summary>
            Gets or sets the available scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.ScanReader">
            <summary>
            Gets or sets the scan reader.
            Given a scan number,
            Return the spectral data and scan event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.ParallelScanReader">
            <summary>
            Gets or sets the scan reader, for multiple scans
            Given a scan number array,
            Return the spectral data and scan event.
            Note: May be null, in which case "ScanReader" will be used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.ScansInChromatogramBatch">
            <summary>
            Gets or sets the scans in chromatogram batch.
            An optimal value will depend on the experiment type.
            For example: for SRM, with 20 or less centroid peaks per scan, this can be larger.
            For full scan experiments, with 500 or more centroids per scan, this may need to be smaller, especially on
            a 32 bit process.
            Default 400 for 32 bit, 1600 for 64 bit. Suggested range 100 to 3000.
            Setting this larger may increase efficiency (fewer small tasks to perform, in raw data with 100k scans),
            but is at the cost of possible increased memory usage for scans.
            This is intentionally "short". Values above 10,000 for this are discouraged, as that could
            lead to significant memory overheads, and possibly less efficient thread management.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.StrictTimeRange">
            <summary>
            Gets or sets a value indicating whether the chromatograms have a strict time range.
            By default, the retention time range of a chromatogram is considered as a "display range",
            such that the first value before the range, and the first value after the range is included
            in the data, permitting a continuous line, if plotted, to the edge of the time window.
            If this property is true, then only points which are within the supplied RT range are returned.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.MinConsumerThreads">
            <summary>
            The minimum permitted number of threads to work on generating chromatograms.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.ConsumerThreads">
            <summary>
            Gets or sets the maximum number of consumer threads to make.
            In other words: The maximum number of chromatograms the caller will
            be given to process in parallel.
            Default: Environment.ProcessorCount.
            Minimum : MinConsumerThreads
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.MaxWorkBacklog">
            <summary>
            Gets or sets the maximum work backlog, which controls how much
            work is kept in the pipeline, waiting for threads to become available.
            Default: 5 for 32 bit process, 20 for 64 bit.
            Setting a larger value may cause data reading from a raw file to be completed earlier,
            but at the expense of more memory overheads.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.AccuratePrecursors">
            <summary>
            Gets or sets a value indicating whether accurate precursor mass testing is done.
            If not: a tolerance of 0.4 AMU is used.
            All data dependent tests are done with 0.4 AMU tolerance.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.FilterMassPrecision">
            <summary>
            Gets or sets the precision (decimal places)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.GenerateChromatograms(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDelivery})">
            <summary>
            Generate chromatograms, returning the in progress tasks,
            which are processing the chromatograms.
            This permits async generation of chromatograms.
            This method returns after all required scan data has been
            read, and all work to process the chromatograms is queued.
            (The implied raw data file can be closed, as ScanReader will not be called again).
            </summary>
            <param name="chromatogramDeliveries">
            The chromatogram deliveries.
            These define the chromatogram settings, and a callback which will occur
            as soon as the data for that chromatogram is ready.
            </param>
            <returns>
            The in progress tasks. Assuming the result is saved as "taskList" Use "Task.WaitAll(taskList)"
            to wait for processing of these chromatograms to complete.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.ProcessWorkList(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem})">
            <summary>
            Process all items in a work list.
            </summary>
            <param name="workItemList">
            The work item list.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.AddWork(System.Collections.Concurrent.BlockingCollection{System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem}},System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem})">
            <summary>
            Add work to the work list.
            If there are insufficient background workers, assign more.
            </summary>
            <param name="work">Collection of work</param>
            <param name="item">New job to add</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.AddWorker(System.Collections.Concurrent.BlockingCollection{System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem}})">
            <summary>
            Add a worker thread.
            </summary>
            <param name="work">
            The work.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.CreateOrderedChromatograms(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDelivery})">
            <summary>
            Create partial chromatogram definitions, ordered by start scan.
            </summary>
            <param name="chromatogramDeliveries">requested chromatograms</param>
            <returns>Ordered partial chromatograms</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.CreateWorkItems(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest},System.Collections.Concurrent.BlockingCollection{System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem}})">
            <summary>
            Create work items.
            </summary>
            <param name="orderedByStartScan">
            The work request list, ordered by start scan.
            </param>
            <param name="work">
            The target work list.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.PublishPendingList(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem},System.Collections.Concurrent.BlockingCollection{System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem}})">
            <summary>
            Publish pending list of work, which has the same scan range
            </summary>
            <param name="pendingItemList">
            The pending item list.
            </param>
            <param name="work">
            The work.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.GenerateChromatogramChunks(System.Collections.Concurrent.BlockingCollection{System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem}})">
            <summary>
            Generate the chromatogram chunks, for all work items that this thread sees.
            </summary>
            <param name="work">
            The work items.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem">
            <summary>
            The work item.
            This consists of:
            The requested chromatogram.
            The set of scans needed to make a chromatogram.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem.#ctor(ThermoFisher.CommonCore.Data.Business.SimpleScanWindow,ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem"/> class. 
            Create a work item, ready to make chromatograms from scans
            </summary>
            <param name="buffer">
            The tool to read scans
            </param>
            <param name="request">
            The parameters for the chromatogram chunk
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem.Fragment">
            <summary>
            Gets the fragment.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem.Scans">
            <summary>
            Gets or sets the scans.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.WorkItem.Process">
            <summary>
            Process this work
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBatchGenerator.AllEvents">
            <summary>
            Gets or sets the scan events interface, which can be used to optimize filtering, if provided.
            This interface may be obtained from IRawDataPlus (ScanEvents property).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramBoundsFinder">
            <summary>
            Class to find which scans belong in the RT range of a chromatogram.
            This includes the feature that scans may be "entirely within" a given range, or go one scan beyond,
            such that the range is extended allowing a chromatogram plot can be generated over the entire range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBoundsFinder.AvailableScans">
            <summary>
            Gets or sets the available scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramBoundsFinder.StrictTimeRange">
            <summary>
            Gets or sets a value indicating whether the chromatograms have a strict time range.
            By default, the retention time range of a chromatogram is considered as a "display range",
            such that the first value before the range, and the first value after the range is included
            in the data, permitting a continuous line, if plotted, to the edge of the time window.
            If this property is true, then only points which are within the supplied RT range are returned.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBoundsFinder.FindIndexForTime(System.Double)">
            <summary>
            Find scan index for a given retention time.
            </summary>
            <param name="time">
            The time.
            </param>
            <returns>
            The index into the scan table for this time.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramBoundsFinder.FindIndexRangeForChromatogram(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess)">
            <summary>
            Find the scan index range for chromatogram, based on the retention time range.
            </summary>
            <param name="range">
            The RT range of the chromatogram.
            </param>
            <returns>
            The start and end index (items 1 and 2).
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentCreator">
            <summary>
            Class to analyze chromatogram requests, creating an ordered table
            of partial chromatograms, which can be used to optimize data reading for
            chromatogram generation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentCreator.ScansInChromatogramBatch">
            <summary>
            Gets or sets the scans in chromatogram batch.
            An optimal value will depend on the experiment type.
            For example: for SRM, with 20 or less centroid peaks per scan, this can be larger.
            For full scan experiments, with 500 or more centroids per scan, this may need to be smaller, especially on
            a 32 bit process.
            Default 400 for 32 bit, 1600 for 64 bit. Suggested range 100 to 3000.
            Setting this larger may increase efficiency (fewer small tasks to perform, in raw data with 100k scans),
            but is at the cost of possible increased memory usage for scans.
            This is intentionally "short". Values above 10,000 for this are discouraged, as that could
            lead to significant memory overheads, and possibly less efficient thread management.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentCreator.AccuratePrecursors">
            <summary>
            Gets or sets a value indicating whether accurate precursor mass testing is done.
            If not: a tolerance of 0.4 AMU is used.
            All data dependent tests are done with 0.4 AMU tolerance.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentCreator.FilterMassPrecision">
            <summary>
            Gets or sets the precision (decimal places)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentCreator.AllEvents">
            <summary>
            Gets or sets the scan events interface, which can be used to optimize filtering, if provided.
            This interface may be obtained from IRawDataPlus (ScanEvents property).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentCreator.CreateOrderedChromatograms(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDelivery})">
            <summary>
            Create ordered chromatograms.
            Creates a "time ordered" set of partial chromatogram requests,
            which can then be used for efficient chromatogram generation,
            by making a single pass over raw data.
            </summary>
            <param name="chromatogramDeliveries">
            The chromatograms to be delivered.
            </param>
            <returns>
            The ordered set of chromatogram requests.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentCreator.CreateRequestsForOneChromatogram(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest},ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDelivery)">
            <summary>
            Create requests for one chromatogram.
            </summary>
            <param name="requests">
            The requests.
            </param>
            <param name="delivery">
            The delivery.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentCreator.AddBatch(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest},ThermoFisher.CommonCore.Data.Business.ChromatogramAggregator,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add a batch of scans.
            </summary>
            <param name="requests">
                The requests.
            </param>
            <param name="aggregator">
                The aggregator.
            </param>
            <param name="startIndex">
                The start scan index.
            </param>
            <param name="endIndex">
                The end scan index.
            </param>
            <param name="isFinal">Set if this is the final batch for a chromatogram</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest">
            <summary>
            The chromatogram fragment request.
            A request to make a section of the overall chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest.Empty">
            <summary>
            Gets or sets a value indicating whether this is empty.
            Empty implies that the raw file has no scans in the RT range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest.Aggregator">
            <summary>
            Gets or sets the aggregator, which collates a set of partial chromatograms.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest.Batch">
            <summary>
            Gets or sets the batch.
            This is the batch index with the results table of the aggregator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest.StartIndex">
            <summary>
            Gets or sets the start scan index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest.EndIndex">
            <summary>
            Gets or sets the end scan index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest.IsFinal">
            <summary>
            Gets or sets a value indicating whether this is a final section of a chromatogram.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramFragmentRequest.ProcessScans(ThermoFisher.CommonCore.Data.Business.ScanAndIndex[])">
            <summary>
            Make a chromatogram from a batch of scans
            </summary>
            <param name="scans">The scans</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ISignalConvert">
            <summary>
            The SignalConvert interface.
            Defines an object which can be converted to signal
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ISignalConvert.ToSignal(System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader})">
            <summary>
            Convert to signal.
            The object implementing this would have the required intensity information,
            but limited other data (such as RT values) which can be pulled from "scans".
            </summary>
            <param name="scans">
            The scans.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess"/>.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ISignalConvert.Length">
            <summary>
            Gets the number of points in this data
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory">
            <summary>
            The chromatogram generator factory.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.CreateChromatogramGenerator(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest,System.Boolean,System.Int32,ThermoFisher.CommonCore.Data.Interfaces.IScanEvents)">
            <summary>
            Create a chromatogram generator.
            This configures the generator for optimal performance in checking scans.
            as there may be over 1000 components over 100k scans, that is 10m or more scan
            filtering tests (most of which fail). So: optimize that test
            use "for" and arrays (not foreach and IEnumerable) etc.
            </summary>
            <param name="request">
            The request.
            </param>
            <param name="accuratePrecursors">In this mode a tolerance matching for precursors is "accurate" (based on the precision value),
            except for data dependent scans.
            For all "non accurate" precursor selections, and for all data dependent scans a default (wide) tolerance is used.</param>
            <param name="filterMassPrecision">number of decimal places for masses in filter</param>
            <param name="allEvents">scan events interface, which can be used to optimize filtering, if provided.
            This interface may be obtained from IRawDataPlus (ScanEvents property).</param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.IChromatogramGenerator"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.CompressedChromatogram">
            <summary>
            The compressed chromatogram.
            This holds a "double intensity" and a "shot index offset" for each scan
            in the chromatogram, that is 10 bytes.
            Al alternative (scan number 4 bytes. plus RT 8 bytes, plus intensity 8 bytes is twice as much memory 20bytes).
            The data is expanded up on request.
            With 1k unfiltered chromatograms, over 100k scans, this saves 1k*100k*10=1GB ram.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.CompressedChromatogram.ToSignal(System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader})">
            <summary>
            Convert to signal.
            The object implementing this would have the required intensity information,
            but limited other data (such as RT values) which can be pulled from "scans".
            </summary>
            <param name="scans">
            The scans.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess"/>.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.CompressedChromatogram.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.CompressedChromatogram.#ctor(System.Int32,System.Int16[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.CompressedChromatogram"/> class.
            </summary>
            <param name="firstIndex">
            The first index.
            </param>
            <param name="indexOffsets">
            The index offsets.
            </param>
            <param name="intensities">
            The intensities.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.UnfilteredChromatogramGenerator">
            <summary>
            Create a chromatogram from a set of scans, with no filtering
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.UnfilteredChromatogramGenerator.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.UnfilteredChromatogramGenerator"/> class.
            </summary>
            <param name="request">
            The request.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.UnfilteredChromatogramGenerator.CreatePartialChromatogram(ThermoFisher.CommonCore.Data.Business.ScanAndIndex[])">
            <summary>
            Create a chromatogram.
            </summary>
            <param name="scans">
            The scans.
            </param>
            <returns>
            An interface to create a signal from the intensities which are calculated.
            Null if no scans.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.ChromatogramGeneratorWithNameFilter">
            <summary>
            Create a chromatogram from a set of scans
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.ChromatogramGeneratorWithNameFilter.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.ChromatogramGeneratorWithNameFilter"/> class.
            </summary>
            <param name="request">
            The request.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.ChromatogramGeneratorWithNameFilter.CreatePartialChromatogram(ThermoFisher.CommonCore.Data.Business.ScanAndIndex[])">
            <summary>
            Create a chromatogram.
            </summary>
            <param name="scans">
            The scans.
            </param>
            <returns>
            An interface to create a signal from the intensities which are calculated.
            Null if no scans passed the filter.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.ChromatogramGeneratorWithFilter">
            <summary>
            Create a chromatogram from a set of scans, where a filter is used for scan selection.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.ChromatogramGeneratorWithFilter.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest,System.Boolean,System.Int32,ThermoFisher.CommonCore.Data.Interfaces.IScanEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.ChromatogramGeneratorWithFilter"/> class.
            </summary>
            <param name="request">
            The request.
            </param>
            <param name="accuratePrecursors">In this mode a tolerance matching for precursors is "accurate" (based on the precision value),
            except for data dependent scans.
            For all "non accurate" precursor selections, and for all data dependent scans a default (wide) tolerance is used.</param>
            <param name="filterMassPrecision">number of decimal places for masses in filter</param>
            <param name="allEvents">scan events interface, which can be used to optimize filtering, if provided.
            This interface may be obtained from IRawDataPlus (ScanEvents property).</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramGeneratorFactory.ChromatogramGeneratorWithFilter.CreatePartialChromatogram(ThermoFisher.CommonCore.Data.Business.ScanAndIndex[])">
            <summary>
            Create a chromatogram.
            </summary>
            <param name="scans">
            The scans.
            </param>
            <returns>
            An interface to create a signal from the intensities which are calculated.
            Null if no scans passed the filter.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IChromatogramGenerator">
            <summary>
            The ChromatogramGenerator interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IChromatogramGenerator.CreatePartialChromatogram(ThermoFisher.CommonCore.Data.Business.ScanAndIndex[])">
            <summary>
            Create a chromatogram.
            </summary>
            <param name="scans">
            The scans.
            </param>
            <returns>
            An interface to create a signal from the intensities which are calculated.
            Null if no scans passed the filter.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory">
            <summary>
            Class to create objects to efficiently generate chromatogram points.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.CreatePointBuilder(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,ThermoFisher.CommonCore.Data.Interfaces.IScanSelect,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Interfaces.IChromatogramPointRequest})">
            <summary>
            create an object to efficiently generate chromatogram points.
            This analyzes the given arguments, and returns an interface which can most efficiently
            generate the chromatograms
            </summary>
            <param name="retentionTimeRange">Retention time range for this chromatogram</param>
            <param name="scanSelector">Method of selecting scans to be included</param>
            <param name="pointRequests">Methods to generate points from scans</param>
            <returns>Object to make chromatogram points</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderBase">
            <summary>
            Standard properties for chromatogram point builders
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderBase.RetentionTimeRange">
            <summary>
            Gets or sets the retention time range.
            Only scans within this range are included.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderBase.ScanSelector">
            <summary>
            Gets or sets the scan selector, which determines if a scan is in the chromatogram, or not
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilder">
            <summary>
            Implementation of IChromatogramRequest,
            which can generate chromatogram points for mass ranges.
            Version which supports multiple mass ranges.
            This version sums values for the listed ranges
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilder.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            Always true for this type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilder.PointRequests">
            <summary>
            Gets or sets the point requests.
            These determine how chromatogram points are created from a scan,
            by adding or subtracting data form multiple mass ranges.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilder.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Gets the value for scan.
            This function returns the chromatogram value for a scan.
            For example: An XIC from the scan data.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <returns>
            The chromatogram value of this scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.CreatePointBuilderMax(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,ThermoFisher.CommonCore.Data.Interfaces.IScanSelect,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Interfaces.IChromatogramPointRequest})">
            <summary>
            create an object to efficiently generate chromatogram points.
            This analyzes the given arguments, and returns an interface which can most efficiently
            generate the chromatograms.
            This version will find the "max value" from each of the supplied point requests (base peak)
            </summary>
            <param name="retentionTimeRange">Retention time range for this chromatogram</param>
            <param name="scanSelector">Method of selecting scans to be included</param>
            <param name="pointRequests">Methods to generate points from scans</param>
            <returns>Object to make chromatogram points</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramBasePeakMassRequest">
            <summary>
            This chromatogram request finds base peak mass and intensity data.
            It can return data for the full file or a mass range
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramBasePeakMassRequest.AllData">
            <summary>
            Gets or sets a value indicating whether all data in the scan is used
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramBasePeakMassRequest.MassRange">
            <summary>
            Get os sets the mass range analyzed, when not "AllData"
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramBasePeakMassRequest.DataForPoint(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Finds the Mass and Intsenty of the base peak
            </summary>
            <param name="scanWithHeader"></param>
            <returns>touple containin mass, intensity</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramBasePeakMassRequest.BasePeakMassOverMassRangeRequest(System.Double,System.Double)">
            <summary>
            Create a request to make an "base peak" mass chromatogram, based on a mass range.
            That is: returns the mass of most intense peak over a given range.
            </summary>
            <param name="lowMass">
            The low mass.
            </param>
            <param name="highMass">
            The high mass.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.CreatePointBuilderMassOfMax(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,ThermoFisher.CommonCore.Data.Interfaces.IScanSelect,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramBasePeakMassRequest})">
            <summary>
            create an object to efficiently generate chromatogram points.
            This analyzes the given arguments, and returns an interface which can most efficiently
            generate the chromatograms.
            This version will find the "max value" from each of the supplied point requests (base peak)
            </summary>
            <param name="retentionTimeRange">Retention time range for this chromatogram</param>
            <param name="scanSelector">Method of selecting scans to be included</param>
            <param name="pointRequests">Methods to generate points from scans</param>
            <returns>Object to make chromatogram points</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderMax">
            <summary>
            Implementation of IChromatogramRequest,
            which can generate chromatogram points for mass ranges.
            Version which supports multiple mass ranges.
            This version finds the Max of the values for all range (base peak)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderMax.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            Always true for this type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderMax.PointRequests">
            <summary>
            Gets or sets the point requests.
            These determine how chromatogram points are created from a scan,
            by adding or subtracting data form multiple mass ranges.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderMax.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Gets the value for scan.
            This function returns the chromatogram value for a scan.
            For example: An XIC from the scan data.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <returns>
            The chromatogram value of this scan.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderMassOfMax">
            <summary>
            Implementation of IChromatogramRequest,
            which can generate chromatogram points for mass ranges.
            Version which supports multiple mass ranges.
            This version finds the Max of the values for all range (base peak)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderMassOfMax.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            Always true for this type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderMassOfMax.PointRequests">
            <summary>
            Gets or sets the point requests.
            These determine how chromatogram points are created from a scan,
            by adding or subtracting data form multiple mass ranges.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.ChromatogramPointBuilderMassOfMax.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Gets the value for scan.
            This function returns the chromatogram value for a scan.
            For example: An XIC from the scan data.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <returns>
            The chromatogram value of this scan.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.SimpleChromatogramPointBuilder">
            <summary>
            Implementation of IChromatogramRequest,
            which can generate chromatogram points for mass ranges.
            Simplified version for one mass range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.SimpleChromatogramPointBuilder.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            Always true for this type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.SimpleChromatogramPointBuilder.PointRequest">
            <summary>
            Gets or sets the point requests
            Determine how a chromatogram point is created from a scan.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.SimpleChromatogramPointBuilder.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Gets the value for scan.
            This function returns the chromatogram value for a scan.
            For example: An XIC from the scan data.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <returns>
            The chromatogram value of this scan.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.SimpleChromatogramPointBuilderUnscaled">
            <summary>
            Implementation of IChromatogramRequest,
            which can generate chromatogram points for mass ranges.
            Simplified version for one mass range, and no scaling
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.SimpleChromatogramPointBuilderUnscaled.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            Always true for this type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.SimpleChromatogramPointBuilderUnscaled.PointRequest">
            <summary>
            Gets or sets the point requests
            Determine how a chromatogram point is created from a scan.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointBuilderFactory.SimpleChromatogramPointBuilderUnscaled.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Gets the value for scan.
            This function returns the chromatogram value for a scan.
            For example: An XIC from the scan data.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <returns>
            The chromatogram value of this scan.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest">
            <summary>
            Request to create a point in a chromatogram, based on mass/intensity data in a scan.
            Use the static methods to make common chromatogram types.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.AllData">
            <summary>
            Gets or sets a value indicating whether all data
            in the scan is used, or just a mass range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.Scale">
            <summary>
            Gets or sets the scale.
            This can be 1 to "add data in a mass range" or
            -1 to "subtract data a mass range",
            or any other value to apply scaling to a range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.MassRange">
            <summary>
            Gets or sets the mass range.
            If an application has a center mass +/ tolerance,
            then the static method <see cref="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.SingleIonRequest(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.ToleranceMode)"/> may be useful to format the range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.PointMode">
            <summary>
            Gets or sets the rule for how a chromatogram point is created from a mass range.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.DataForPoint(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <inheritdoc />
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.SingleIonRequest(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.ToleranceMode)">
            <summary>
            Create a request to make an "XIC" chromatogram, based on one ion plus mass tolerance.
            </summary>
            <param name="mass">
            The mass.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <param name="mode">
            The tolerance mode.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.MassRangeRequest(System.Double,System.Double)">
            <summary>
            Create a request to make an "XIC" chromatogram, based on a mass range
            </summary>
            <param name="lowMass">
            The low mass.
            </param>
            <param name="highMass">
            The high mass.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.TotalIonRequest">
            <summary>
            Create a request to make a "TIC" chromatogram.
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.BasePeakRequest">
            <summary>
            Create a request to make a "base peak in scan" chromatogram.
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.BasePeakOverMassRangeRequest(System.Double,System.Double)">
            <summary>
            Create a request to make an "base peak" chromatogram, based on a mass range.
            That is: returns the most intense peak over a given range.
            </summary>
            <param name="lowMass">
            The low mass.
            </param>
            <param name="highMass">
            The high mass.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.BasePeakMassOverMassRangeRequest(System.Double,System.Double)">
            <summary>
            Create a request to make an "base peak" mass chromatogram, based on a mass range.
            That is: returns the mass of most intense peak over a given range.
            </summary>
            <param name="lowMass">
            The low mass.
            </param>
            <param name="highMass">
            The high mass.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.BasePeakMassRequest">
            <summary>
            Create a request to make a "mass of base peak in scan" chromatogram.
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest"/> class. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.ToleranceFactor(System.Double,ThermoFisher.CommonCore.Data.Business.ToleranceMode)">
            <summary>
            Calculate tolerance factor, applied to supplied tolerance value, based on mode.
            </summary>
            <param name="mass">
            The mass.
            </param>
            <param name="mode">
            The mode.
            </param>
            <returns>
            The factor to apply.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramPointRequest.FragmentRequest(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Create a request to make a "neutral fragment" chromatogram.
            If this is a "fixed fragment" based on a given MS/MS scan filter,
            the lowMass is positive, and the range is assumed to be "filter MS/MS mass - neutral mass".
            If the chromatogram has no MS/MS mass, then
            the lowMass = -neural -0.5 and the highMass is -neutral +0.5
            To get amass range for a given scan,
            the MS/MS mass from that scan's event must be added to both low and high masses
            </summary>
            <param name="lowMass">Low mass of range</param>
            <param name="highMass">High mass of range</param>
            <param name="toleranceOptions">Mass tolerance (applied to precursor in target scan). Defaults to 0.5 amu when null</param>
            <returns>Interface to generate a neural fragment chromatogram point</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal">
            <summary>
                This represents the data for a chromatogram
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ToChromatogramDataPlus(ThermoFisher.CommonCore.Data.Business.ChromatogramSignal[])">
            <summary>
                Convert chromatogram signals to ChromatogramDataPlus interface
            </summary>
            <param name="signals">An array of signals</param>
            <returns>interface to chromatogram data</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.FromTimeAndIntensity(System.Double[],System.Double[])">
            <summary>
            Create a Chromatogram signal, from time and intensity arrays
            </summary>
            <param name="time">array of retention times</param>
            <param name="intensity">array of intensities at each time</param>
            <returns>The constructed signal, or null if either of the inputs are null, or the inputs are not the same length</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.FromTimeIntensityScan(System.Double[],System.Double[],System.Int32[])">
            <summary>
            Create a Chromatogram signal, from time,  intensity and scan arrays
            </summary>
            <param name="time">array of retention times</param>
            <param name="intensity">array of intensities at each time</param>
            <param name="scan">array of scan numbers for each time</param>
            <returns>The constructed signal, or null if either of the inputs are null, or the inputs are not the same length</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.FromTimeIntensityScanBasePeak(System.Double[],System.Double[],System.Int32[],System.Double[])">
            <summary>
                Create a Chromatogram signal, from time,  intensity, scan and base peak arrays
            </summary>
            <param name="time">array of retention times</param>
            <param name="intensity">array of intensities at each time</param>
            <param name="scan">array of scan numbers for each time</param>
            <param name="basePeak">Array of base peak masses for each time</param>
            <returns>The constructed signal, or null if either of the inputs are null, or the inputs are not the same length</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.FromChromatogramData(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramData)">
            <summary>
                Create an array of signals from <paramref name="chromatogramData" />. The Interface
                <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramData" />
                describes data read from a file (if using IRawData). This constructor converts to an array of type Signal,
                simplifying use of individual chromatograms with Peak integration.
            </summary>
            <param name="chromatogramData">data (usually read from file) to convert into signals</param>
            <returns>The constructed signals, or null if the input is null</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ToChromatogramData(ThermoFisher.CommonCore.Data.Business.ChromatogramSignal[])">
            <summary>
                Create chromatogram data interface from <paramref name="signals" />. The Interface <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramData" />
                describes data read from a file (if using IRawData).
            </summary>
            <param name="signals">data (usually read from file) to convert into signals</param>
            <returns>The constructed signals, or null if the input is null</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.WrappedChromatogramData">
            <summary>
                The wrapped chromatogram data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.WrappedChromatogramData.#ctor(ThermoFisher.CommonCore.Data.Business.ChromatogramSignal[])">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.WrappedChromatogramData" /> class.
            </summary>
            <param name="signals">
                The data to wrap
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.WrappedChromatogramData.BasePeakArray">
            <summary>
                Gets the base peak array.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.WrappedChromatogramData.IntensitiesArray">
            <summary>
                Gets the intensities array.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.WrappedChromatogramData.Length">
            <summary>
                Gets the length.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.WrappedChromatogramData.PositionsArray">
            <summary>
                Gets the positions array.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.WrappedChromatogramData.ScanNumbersArray">
            <summary>
                Gets the scan numbers array.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal._signalTimes">
            <summary>
                The signal times.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal._signalBasePeakMasses">
            <summary>
                The signal base peak masses.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal._signalIntensities">
            <summary>
                The signal intensities.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal._signalScans">
            <summary>
                The signal scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.SignalTimes">
            <summary>
                Gets or sets the signal times.
            </summary>
            <value>The signal times.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.Times">
            <summary>
                Gets the times.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.SignalIntensities">
            <summary>
                Gets or sets the signal intensities.
            </summary>
            <value>The signal intensities.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.Intensities">
            <summary>
                Gets the intensities.
            </summary>
            <value>The signal intensities.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.SignalScans">
            <summary>
                Gets or sets the signal scans.
            </summary>
            <value>The signal scans.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.Scans">
            <summary>
                Gets the signal scans.
            </summary>
            <value>The signal scans.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.SignalBasePeakMasses">
            <summary>
                Gets or sets the signal base peak masses.
            </summary>
            <value>The signal times.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.BasePeakMasses">
            <summary>
                Gets the signal base peak masses.
            </summary>
            <value>The signal base peak masses. May be null (should not be used) when HasBasePeakData returns false</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.EndTime">
            <summary>
                Gets the time at the end of the signal
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.StartTime">
            <summary>
                Gets the time at the start of the signal
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.TimeRange">
            <summary>
            Gets the time range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.Length">
            <summary>
                Gets the number of points in the signal
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.HasBasePeakData">
            <summary>
                Gets a value indicating whether there is any base peak data in this signal
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.Clone">
            <summary>
                Creates a new object that is a (deep) copy of the current instance.
            </summary>
            <returns>
                A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ToMulti(System.Double[])">
            <summary>
            covert array to multi dimension.
            </summary>
            <param name="data">
            The data.
            </param>
            <returns>
            The converted array.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ToMulti(System.Int32[])">
            <summary>
            covert array to multi dimension.
            </summary>
            <param name="data">
            The data.
            </param>
            <returns>
            The converted array.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ThermoFisher#CommonCore#Data#Interfaces#IChromatogramData#PositionsArray">
            <summary>
                Gets times in minutes for each chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ThermoFisher#CommonCore#Data#Interfaces#IChromatogramData#ScanNumbersArray">
            <summary>
                Gets the scan numbers for data points in each chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ThermoFisher#CommonCore#Data#Interfaces#IChromatogramData#IntensitiesArray">
            <summary>
                Gets the intensities for each chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ThermoFisher#CommonCore#Data#Interfaces#IChromatogramData#Length">
            <summary>
                Gets the number of chromatograms in this object
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.Valid">
            <summary>
                Test if the signal is valid
            </summary>
            <returns>True if both times and intensities have been set, and are the same length</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess)">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal" /> class.
            </summary>
            <param name="signal">Clone from this interface</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.#ctor(System.Double[],System.Double[])">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal" /> class.
            </summary>
            <param name="times">
                The times.
            </param>
            <param name="intensities">
                The intensities.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.#ctor(System.Double[],System.Double[],System.Int32[])">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal" /> class.
            </summary>
            <param name="times">
                The times.
            </param>
            <param name="intensities">
                The intensities.
            </param>
            <param name="scans">
                The scans.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.#ctor(System.Double[],System.Double[],System.Int32[],System.Double[])">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal" /> class.
            </summary>
            <param name="times">
                The times.
            </param>
            <param name="intensities">
                The intensities.
            </param>
            <param name="scans">
                The scans.
            </param>
            <param name="basePeaks">
                The base peaks.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal" /> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ValidateData(System.Double[],System.Double[])">
            <summary>
                Test if the data is contained in valid arrays of the same size
            </summary>
            <param name="times">
                The times.
            </param>
            <param name="intensities">
                The intensities.
            </param>
            <returns>
                True if both times and intensities have been set, and are the same length
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ValidateData(System.Double[],System.Double[],System.Int32[])">
            <summary>
                Test if the data is contained in valid arrays of the same size
            </summary>
            <param name="times">
                The times.
            </param>
            <param name="intensities">
                The intensities.
            </param>
            <param name="scans">
                The scans.
            </param>
            <returns>
                True if all of times intensities and scans have been set, and are the same length
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.ValidateData(System.Double[],System.Double[],System.Int32[],System.Double[])">
            <summary>
                Test if the data is contained in valid arrays of the same size
            </summary>
            <param name="times">
                The times.
            </param>
            <param name="intensities">
                The intensities.
            </param>
            <param name="scans">
                The scans.
            </param>
            <param name="basePeaks">
                The base Peaks.
            </param>
            <returns>
                True if all of times intensities and scans have been set, and are the same length
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramSignal.Delay(System.Double)">
            <summary>
            Add a delay to all times. This is intended to support "detector delays" where
            multiple detector see the same sample at different times.
            </summary>
            <param name="delay">
            The delay.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings">
            <summary>
            Setting to define a chromatogram Trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings._delayInMin">
            <summary>
            The delay in minutes.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings._filter">
            <summary>
            The scan filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings._fragmentMass">
            <summary>
            The fragment mass.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings._includeReference">
            <summary>
            Flag for including reference and exception peaks.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings._massRanges">
            <summary>
            The mass ranges.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings._trace">
            <summary>
            The trace.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings" /> class.
            Default constructor creates a new instance of ChromatogramSettings
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.#ctor(ThermoFisher.CommonCore.Data.Business.TraceType)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings" /> class.
            Constructor creates a new instance of ChromatogramSettings and
            sets the type of trace to construct.
            </summary>
            <param name="traceType">
            The type of trace to construct;  see <see cref="T:ThermoFisher.CommonCore.Data.Business.TraceType" /> for possible values
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.#ctor(ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings" /> class.
            Constructor creates a new instance of ChromatogramSettings based on a read only interface
            </summary>
            <param name="access">
            Access to the read only parameters
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.#ctor(System.String,ThermoFisher.CommonCore.Data.Business.Range[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings" /> class.
            Initialize settings for a mass chromatogram. Makes "TraceType.MassRange"
            </summary>
            <param name="filter">
            scan filter
            </param>
            <param name="ranges">
            The mass range(s)
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.#ctor(System.String,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings" /> class.
            Initialize settings for a mass chromatogram. Makes "TraceType.MassRange"
            </summary>
            <param name="filter">
            scan filter
            </param>
            <param name="ranges">
            The mass range(s)
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings" /> class.
            Clones available data from the supplied interface.
            </summary>
            <param name="settings">
            The chromatogram settings.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.CopyRange(ThermoFisher.CommonCore.Data.Business.Range,System.Int32)">
            <summary>
            copy range.
            </summary>
            <param name="old">
            from (old value).
            </param>
            <param name="i">
            The index.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.CompoundNames">
            <summary>
            Gets or sets the compound names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.DelayInMin">
            <summary>
            Gets or sets the delay in minutes.
            </summary>
            <value>Floating point delay in minutes</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.Filter">
            <summary>
            Gets or sets the filter used in searching scans during trace build
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.FragmentMass">
            <summary>
            Gets or sets the fragment mass for neutral fragment filters.
            </summary>
            <value>Floating point fragment mass for neutral fragment filters</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.IncludeReference">
            <summary>
            Gets or sets a value indicating whether reference and exception peaks are included
            in this chromatogram trace
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.MassRangeCount">
            <summary>
            Gets or sets the number of mass ranges, or wavelength ranges for PDA.
            </summary>
            <remarks>
            If <see cref="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.Trace" /> is MassRange then mass range values are used to build trace.
            </remarks>
            <value>Numeric count of mass ranges</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.MassRanges">
            <summary>
            Gets or sets the mass ranges.
            </summary>
            <remarks>
            If <see cref="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.Trace" /> is MassRange then mass range values are used to build trace.
            </remarks>
            <value>Array of mass ranges</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.Trace">
            <summary>
            Gets or sets the type of trace to construct
            </summary>
            <value>see <see cref="T:ThermoFisher.CommonCore.Data.Business.TraceType" /> for more details</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.FromChromatogramSettings(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Convert from interface chromatogram settings.
            Note: This method is available as static converter, not
            a constructor overload, to avoid ambiguity with exiting overloads.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.Clone">
            <summary>
            Copies all of the items to from this object into the returned object.
            </summary>
            <returns>
            The clone.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.GetMassRange(System.Int32)">
            <summary>
            Gets a range value at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.MassRangeCount" /> to find out the count of mass ranges.
            <para>
            </para>
            If <see cref="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.Trace" /> is MassRange then mass range values are used to build trace.
            </remarks>
            <param name="index">
            Index at which to retrieve the range
            </param>
            <returns>
            <see cref="T:ThermoFisher.CommonCore.Data.Business.Range" /> value at give index
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.SetMassRange(System.Int32,ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Sets a range value at 0-based index.
            </summary>
            <remarks>
            Set count of mass ranges using <see cref="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.MassRangeCount" /> before setting any mass ranges.
            <para>
            </para>
            If <see cref="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.Trace" /> is MassRange then mass range values are used to build trace.
            </remarks>
            <param name="index">
            Index at which new range value is to be set
            </param>
            <param name="range">
            New <see cref="T:ThermoFisher.CommonCore.Data.Business.Range" /> value to be set
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.CommonData">
            <summary>
            Defines the definitions required to reading the data files.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.LowResolutionSpectrum">
            <summary>
            Low Resolution spectrum packet type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.LowResolutionSpectrumType2">
            <summary>
            Low Resolution spectrum packet type2.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.HighResolutionSpectrum">
            <summary>
            High Resolution spectrum packet type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ProfileIndexType">
            <summary>
            Spectrum profileIndex type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.CentroidType">
            <summary>
            FTMS data type (centroids)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.FTProfileType">
            <summary>
            FTMS data type (profiles)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.LowResolutionCompressedProfile">
            <summary>
             Compressed profile format for MAT95
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.HighResolutionCompressedProfile">
            <summary>
            Compressed profile format for MAT95 (high-res)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.LowResolutionSpectrumType3">
            <summary>
            LowResolution Spectrum Type (early quantum version).
            Also referred to as LR_SP_TYPE3 in some parts of FileIO.
            Used for centroid data from quantum about 2000, 2001 instruments.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.LowResolutionSpectrumType">
            <summary>
            LowResolution Spectrum Type.
            Also referred to as LR_SP_TYPE4 in some parts of FileIO.
            Used for centroid data from quantum and some other post 2002 instruments.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ProfileSpectrumType">
            <summary>
            Profile Spectrum Type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ProfileSpectrumType2">
            <summary>
            Profile Spectrum Type2
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ProfileSpectrumType3">
            <summary>
            Profile Spectrum Type3
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.AcquisitionMassProfile">
            <summary>
            Mass profile scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ChannelPacketType">
            <summary>
            PDA UV  discrete channel packet type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ChannelIndexHeader">
            <summary>
            PDA UV  discrete channel index header type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ScannedSpectrumHeader">
            <summary>
            PDA UV  scanned spectrum header packet type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ScannedSpectrumHeaderIndex">
            <summary>
            PDA UV  scanned spectrum header index header type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.UVChannelPacket">
            <summary>
            UV  channel packet type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.LTProfile">
            <summary>
            LT combined data type (profiles).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.LTCombinedCentroids">
            <summary>
            LT Combined Centroids.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CommonData.HIWord(System.Int32)">
            <summary>
            Bitwise left shift operator, to get high 16 bits.
            </summary>
            <param name="number">Number to shift</param>
            <returns>the high 16 bits of a 32 bit value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CommonData.LOWord(System.Int32)">
            <summary>
            Get the low 16 bits of a 32 bit value.
            </summary>
            <param name="number">Number to mask</param>
            <returns>The low 16 bits</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.CommonData.IsProfileScan(System.Int32)">
            <summary>
            Helper function to identifying the profile scan based on the given packet type.
            </summary>
            <param name="packetType">packet type</param>
            <returns>True if this is a profile packet type</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.CommonData.ScanData">
            <summary>
            EH - The reason for the separation of packet type into profile/centroid and scan type is to
            support legacy LCQ code that utilized the packet type to determine whether or not a scan
            is profile or centroid. This becomes a problem with data converted from ICIS, for example,
            which may store profile data in the centroid packet format. Setting this value is only necessary
            where profile or centroid is written to a packet type that is not assumed to be of that
            data type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ScanData.AnyScanData">
            <summary>
            default is to use the packet type to determine profile/centroid
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ScanData.Centroid">
            <summary>
            Centroid type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CommonData.ScanData.Profile">
            <summary>
            profile type.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.DefaultScanProvider">
            <summary>
            The default scan provider.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.DefaultScanProvider.GetScanFromScanNumber(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Int32)">
            <summary>
            Get a scan from a scan number.
            </summary>
            <param name="rawData">
            The raw data.
            </param>
            <param name="scanNumber">
            The scan number.
            </param>
            <returns>
            The scan at "scan number"
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.DefaultScanProvider.GetScanAtTime(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Double)">
            <summary>
            The get scan at time.
            </summary>
            <param name="rawFile">
            The raw file.
            </param>
            <param name="time">
            The time.
            </param>
            <returns>
            The scan nearest to the given time.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.DeviceMethodFactory">
            <summary>
            This static factory class provides method to create a device method for an instrument method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.DeviceMethodFactory.CreateDeviceMethod(ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodDataAccess)">
            <summary>
            Creates the device method.
            </summary>
            <param name="deviceData">Optional: Data for the device</param>
            <returns>The IDeviceMethod instance.</returns>
            <exception cref="T:System.ArgumentNullException">name;Device method name cannot be empty.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.DeviceMethodFactory.CreateDeviceMethodFactory">
            <summary>
            Creates the device method factory.
            </summary>
            <returns>Device method writer factory object.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IsotopeConsolidation">
            <summary>
            IsotopeConsolidation - which function will be used for isotope consolidation
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IsotopeConsolidation.RemoveAllIsotopes">
            <summary>
            RemoveAllIsotopes - use function that strips all the isotopes during processing
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IsotopeConsolidation.KeepNonBaseIsotopes">
            <summary>
            KeepNonBaseIsotopes - use function that keeps non-base isotopes in the formula
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters">
            <summary>
            Settings for the elemental compositions (formula searching) algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.DoElementalComposition">
            <summary>
            Gets or sets a value indicating whether all features of elemental composition should be used. When false, all other settings are ignored
            and results of searches should be returned as an empty collection.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MonoIsotopicMassPacketLowLimit">
            <summary>
            Gets or sets the Lowest mass for use in mono isotopic mass searching
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MonoIsotopicMassPacketHighLimit">
            <summary>
            Gets or sets the Highest mass for mono isotopic mass searching
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.UseMonoIsotopicMass">
            <summary>
            Gets or sets a value indicating whether to use the calculated mono isotopic mass, otherwise use the mass passed in.
            Applies when "CalculateCompositionForMass" is called.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MonoIsotopicSearchIntensityThreshold">
            <summary>
            Gets or sets the minimum percentage threshold from the base peak for the mono isotopic mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MonoIsotopicSearchMassThreshold">
            <summary>
            Gets or sets the tolerance (in amu) around the value <see cref="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.AmuValue"/> to set limits when searching for mono isotopic mass.
            Mass of mono isotopic peak must be within a limit of:
            <see cref="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.AmuValue"/>-MonoIsotopicSearchMassThreshold to <see cref="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.AmuValue"/>+MonoIsotopicSearchMassThreshold
            from the mass of a spectral peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.AmuValue">
            <summary>
            Gets or sets the center of search range for mono isotopic mass
            as a delta from the mass of a peak being analyzed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.SpectralFitCentroidAlgorithmAsString">
            <summary>
            Gets or sets a string representation of the centroiding algorithm (for use on the UI)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.SpectralFitMissingPeakPenaltyModeAsString">
            <summary>
            Gets or sets a string representation of Missing Penalty Mode (for use in UI)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.SpectralFitNormalizationModeAsString">
            <summary>
            Gets or sets String representation of the SpectralFitNormalizationMode (for use in UI)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MassToleranceModeAsString">
            <summary>
            Gets or sets a string representation of <see cref="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MassToleranceMode"/> (for use in UI)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsMsMassToleranceModeAsString">
            <summary>
            Gets or sets a string representation of <see cref="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MassToleranceMode"/> (for use in UI)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MassToleranceMode">
            <summary>
            Gets or sets a value which determines how the masses are compared. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MassToleranceValue">
            <summary>
            Gets or sets a value which determines the maximum error in mass for something to pass tolerance, in the selected units.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsMsMassToleranceMode">
            <summary>
            Gets or sets a value which determines how the fragment masses are compared. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsMsMassToleranceValue">
            <summary>
            Gets or sets a value which determines the maximum error in MSMS mass for something to pass tolerance, in the selected units.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsMsCharge">
            <summary>
            Gets or sets the charge state of the fragmented ion
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.NitrogenRuleForBinding">
            <summary>
            Gets or sets the String representation of <see cref="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.NitrogenRule"/> (for use in UI)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.ElementsSubset">
            <summary>
            Gets or sets a collection of elemental isotopes, and mix/max expected counts in formulae
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.UseRepresentativeElements">
            <summary>
            Gets or sets a value indicating whether the element abundance table "Representative" should be use.
            If it is not set, the "Protein" abundance table should be used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.UseSpectralFitting">
            <summary>
            Gets or sets a value indicating whether elemental compositions to be based on fitting against the supplied scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.IncludeReferenceExceptionPeaks">
            <summary>
            Gets or sets a value indicating whether calibration reference data should be included in the scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MissingPacketPenaltyMode">
            <summary>
            Gets or sets the penalty (in units of spectral distance) that is
            applied to a missing packet. A packet is missing if it exists in the theoretical pattern (above threshold)
            but is not found in the measured spectrum (or too far away)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.AutomaticIntensityThreshold">
            <summary>
            Gets or sets a value indicating whether the distances are normalized to have a max of 1.0 per packet (TrueDistance=false)
            or of 1.414 (<c>sqrt(2.0)</c> per packet (TrueDistance=true) 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.IntensityThresholdPercentTheory">
            <summary>
            Gets or sets a threshold which determines the smallest packets that are processed. It is applied to the
            theoretical isotope pattern of an elemental composition candidate. Note that it is
            not applied to the input spectrum.
            Therefore a small pattern (BPI of pattern is smaller than 100% of input pattern
            intensity) may still give good fits.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.AbsoluteIntensityError">
            <summary>
            Gets or sets a value indicating whether the intensity error is taken absolute. This means that an intensity
            that is expected to be 10% but is 9% has an error of 1%. If false, the
            intensity error is taken relative. This means that an intensity that is
            expected to be 10% but is 9% has an error of 10%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.WeightIntensityErrorByAbundance">
            <summary>
            Gets or sets a value indicating whether the spectral distance of an isotope packet is scaled with its intensity.
            I.e: the intensity deviation of a small packet counts less
            than the same deviation of a large packet.
            see also <c>WeightMassErrorByAbundance</c> property.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.WeightMassErrorByAbundance">
            <summary>
            Gets or sets a value indicating whether the spectral distance of an isotope packet is scaled with its intensity.
            I.e: the mass deviation of a small packet counts less
            than the same deviation of a large packet.
            See also <c>WeightIntensityErrorByAbundance</c> property.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.HundredFitExpectedError">
            <summary>
            Gets or sets the error in units of standard deviation that is defined to give a 100% Spectral
            Identity value. Together with the property ZeroFitExpectedError, these
            two values define the scale of a 0 to 100 % error.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.ZeroFitExpectedError">
            <summary>
            Gets or sets the error in units of standard deviation that is defined to give a 0% Spectral
            Identity value. Together with the property HundredFitExpectedError, these
            two values define the scale of a 0 to 100 % error.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.ExpectedIntensityError">
            <summary>
            Gets or sets The expected intensity error in units of standard deviation.
            A standard deviation is defined such that 68% of all events are in the range <c>X ± stddev</c>.
            95% of all events are in the range <c>X± 2*stddev</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.ExpectedMassError">
            <summary>
            Gets or sets the expected mass error in units of standard deviation.
            A standard deviation is defined such that 68% of all events are in the range <c>X ± stddev</c>.
            95% of all events are in the range <c>X± 2*stddev</c>.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.Charge">
            <summary>
            Gets or sets the charge of the mass for which an
            elemental composition is to be calculated.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.KeepBest">
            <summary>
            Gets or sets the number of elemental compositions
            that are to be saved. If the number of fits
            found is bigger than "Best", only the best
            "Best" ( judged by their deviation from the
            specified mass) are saved in the result array.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.CentroidAlgorithm">
            <summary>
            Gets or sets the centroid algorithm that is used to calculate isotope
            pattern masses from their isotopic distribution
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MinRdbLimit">
            <summary>
            Gets or sets The lowest acceptable RDB for a formula
            Note that this property returns the RDB value for instances that contain
            absolute RDB values. It returns RDB / 100 amu for instances that contain relative values.
            Rather use GetRDB_LimitLow(). That one works for both absolute and relative limits
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MaxRdbLimit">
            <summary>
            Gets or sets maximum RDB (ring double bond equivalence) for returned formulae.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.Validate">
            <summary>
            Validates the ElementalCompositionParameters values
            </summary>
            <exception cref="T:System.InvalidOperationException">
            if parameters are invalid
            </exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.Resolution">
            <summary>
            Gets or sets the resolution that is used to calculate the theoretical isotope patterns.
            This should be the same resolution with which the measured spectrum was acquired.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.NitrogenRule">
            <summary>
            Gets or sets a value which determines if the nitrogen rule should be used. <see>NitrogenRule</see> enum for details
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.NormalizationMode">
            <summary>
            Gets or sets the theoretical and measured isotope for the Spectral Distance calculation, 
            patterns must be normalized. There are three different normalization modes available.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.AutomaticDynamicRange">
            <summary>
            Gets or sets a value indicating whether to use auto dynamic range, for spectral distance
            isotope simulations. If this is true (default) then the property "DynamicRange" is automatically adjusted,
            each time spectral distance is calculated, based on the value of the theoretical peak intensity threshold,
            which may also be auto calculated, or set to <see cref="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.IntensityThresholdPercentTheory"/>
            depending on the value of <see cref="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.AutomaticIntensityThreshold"/>.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.DynamicA0Recalibration">
            <summary>
            Gets or sets a value indicating whether to apply dynamic A0 recalibration for spectral distance.  
            It is set to false by default. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsMsSignalToNoiseThreshold">
            <summary>
            Gets or sets MSMS SignalToNoise threshold for MSMS spectral processing
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsMsSFitCutoff">
            <summary>
            Gets or sets SpectralFit score cutoff for which formulas MSMS ranking will not be computed - will be set as 1
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.SetIsotopeConsolidation">
            <summary>
            Gets or sets which function will be used for isotope consolidation - 0 - RemoveAllIsotopes, 1 -KeepNonBaseIsotopes
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.SpectralFitWeight">
            <summary>
            Gets or sets the weight applied to Spectral Fit in the re-ranking algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsCoverageWeight">
            <summary>
            Gets or sets the weight applied to MsCoverage in the re-ranking algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsMsCoverageWeight">
            <summary>
            Gets or sets the weight applied to MsMsCoverage in the re-ranking algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.PatternCoverageWeight">
            <summary>
            Gets or sets the weight applied to PatternCoverageWeight in the re-ranking algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.MsMsShiftMeasureWeight">
            <summary>
            Gets or sets the weight applied to MsMsShiftMeasure in the re-ranking algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.ReRankSpectralDistanceResults">
            <summary>
            Gets or sets a value indicating whether or not re-ranking will be performed
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionParameters.PerformDefaultSettings">
            <summary>
            Creates a default list of elements for searching
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult">
            <summary>
            A single possible result (formula) for elemental composition of a mass
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._mass">
            <summary>
            The _mass.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._combinedFit">
            <summary>
            The _combined fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._deltaMass">
            <summary>
            The _delta mass.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._formula">
            <summary>
            The _formula.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._patternFit">
            <summary>
            The _pattern fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._rdbEquivalents">
            <summary>
            The RDB equivalents.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._spectralDistance">
            <summary>
            The _spectral distance.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._massDeviation">
            <summary>
            The _mass deviation.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._score">
            <summary>
            The _score.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._composition">
            <summary>
            The _composition.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult._isotopePackets">
            <summary>
            The _isotopePackets
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.Score">
            <summary>
            Gets or sets the fit value in percent.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.Composition">
            <summary>
            Gets or sets the Elemental composition formula, with subscript style digits for elemental quantities.
            This formula defines the istope of the peak which was matched with the sample.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.FormulaAsSimulated">
            <summary>
            Gets or sets the Elemental composition formula, with subscript style digits for elemental quantities.
            This is the formula which contains the peak from the sample as one of it's istopes.
            It can be used to redraw the isotope plot.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.Mass">
            <summary>
            Gets or sets the mass of Composition (the mass of the calculated formula)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.CombinedFit">
            <summary>
            Gets or sets the combined fit factor [range from 0% to 100%]. This is a linear
            combination between pattern fit and mass deviation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.DeltaMass">
            <summary>
            Gets or sets the difference between the mass of the formula and the mass being searched.
            This is the mass difference in amu "mass to search for" - "mass of this formula".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.Formula">
            <summary>
            Gets or sets the elemental formula (plain text)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.PatternFit">
            <summary>
            Gets or sets the fit factor [range from 0% to 100%] that indicates fit between theoretical and
            measured isotope pattern.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.RdbEquivalents">
            <summary>
            Gets or sets the calculated RDB for the found formula
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.SpectralDistance">
            <summary>
            Gets or sets the Spectral Distance. This is the distance between a theoretical
            and a measured isotope pattern of n packets in an n-dimensional space.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MassDeviation">
            <summary>
            Gets or sets the deviation in mass, using the same tolerance mode used when searching
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePackets">
            <summary>
            Gets or sets the IsotopePackets.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MatchedPeaks">
            <summary>
            Gets or sets the number of peaks matched to an isotope by spectral distance algorithm,
            that is: All peaks which contributed to the scoring (even if the peak was out of mass and intensity
            tolerance box).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopesTested">
            <summary>
            Gets or sets the number of isotopes in the pattern tested for match against sample peaks
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.NoPenaltyPeaks">
            <summary>
            Gets or sets the number of isotopes in the pattern which were matched
            against a sample peak, and were within mass/intensity tolerance limits
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.BroadSearchMatches">
            <summary>
            Gets or sets the number of isotopes where there is at least one sample peak
            within 10* mass tolerance
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsCoverage">
            <summary>
            Gets or sets the coverage of experimental spectrum by isotopic pattern
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.PatternCoverage">
            <summary>
            Gets or sets the coverage of theoretical spectrum by isotopic pattern
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsCoverage">
            <summary>
            Gets or sets the computed coverage of MsMs spectrum
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsShiftMeasure">
            <summary>
            Gets or sets the computed measure of matches with average shift comparing to the precursor shift
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsMatchedPeaks">
            <summary>
            Gets or sets the number of matched peaks in MSMS spectrum
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsMatchedFragments">
            <summary>
            Gets or sets the list of matched fragments
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.CombinedScore">
            <summary>
            Gets or sets Combined score used for re-ranking results based on supplied weights
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.Rank">
            <summary>
            Gets or sets Rank of the candidate formula based on Combined score
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket">
            <summary>
            isotope packet 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.MassTheory">
            <summary>
            Gets or sets Mass of theoretical isotope
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.MassMeasured">
            <summary>
            Gets or sets Mass of measured centroid
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.IntensityTheory">
            <summary>
            Gets or sets Intensity of theoretical isotope
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.IntensityMeasured">
            <summary>
            Gets or sets Intensity of measured centroid
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.OriginalPeakIndex">
            <summary>
            Gets or sets the index into the original scan for the matched peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.Matched">
            <summary>
            Gets or sets a value indicating whether Theory has a close match with Measured
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.MatchMode">
            <summary>
            Gets or sets the match mode. Defines the quality of the match.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket"/> class. 
            default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.IsotopePacket"/> class. 
            constructor
            </summary>
            <param name="intensityMeasured">
            The intensityMeasured
            </param>
            <param name="intensityTheory">
            The intensityTheory
            </param>
            <param name="massMeasured">
            The massMeasured
            </param>
            <param name="massTheory">
            The massTheory
            </param>
            <param name="matched">
            The matched
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment">
            <summary>
            Class containing assignments of formulas to masses to the fragmentation spectrum
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment.Mass">
            <summary>
            Gets or sets mass in fragmentation spectrum
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment.Formula">
            <summary>
            Gets or sets formula matched to the Mass in the fragmentation spectrum
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment.DeltaMass">
            <summary>
            Gets or sets DeltaMass of assigned formula from the observed m/z
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment.Intensity">
            <summary>
            Gets or sets Intensity of the fragment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment.SignalToNoise">
            <summary>
            Gets or sets Signal to noise ratio of the fragment
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment.#ctor(System.Double,System.String)">
            <summary>
             Initializes a new instance of the  <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment"/> class
            </summary>
            <param name="mass">assigned mass</param>
            <param name="formula">assigned formula</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment.#ctor(System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the  <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.MsMsFragment"/> class
            </summary>
            <param name="mass">assigned mass</param>
            <param name="formula">assigned formula</param>
            <param name="deltaMass">observed delta mass</param>
            <param name="intensity">observed intensity</param>
            <param name="signalToNoise">observed signal to noise</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult"/> class. 
            default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.#ctor(System.Double,System.Double,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult"/> class. 
            Construct from values. (Faster than constructing and setting properties, as property setters in this
            class may be instrumented with change notification).
            </summary>
            <param name="combinedFit">
            Sets CombinedFit property
            </param>
            <param name="deltaMass">
            Sets DeltaMass property
            </param>
            <param name="formula">
            Sets Formula property
            </param>
            <param name="mass">
            Sets Mass property
            </param>
            <param name="massDeviation">
            Sets MassDeviation property
            </param>
            <param name="patternFit">
            Sets PatternFit property
            </param>
            <param name="rdbEquivalents">
            Sets RdbEquivalents property
            </param>
            <param name="spectralDistance">
            Sets SpectralDistance property
            </param>
            <param name="score">
            Sets Score property
            </param>
            <param name="matchedPeaks">
            Sets MatchedPeaks property
            </param>
            <param name="noPenaltyPeaks">
            Sets NoPenaltyPeaks property
            </param>
            <param name="broadSearchMatches">
            Sets BroadSearchMatches property
            </param>
            <param name="isotopesTested">
            Sets IsotopesTested property
            </param>
            <param name="composition">
            Sets Composition property. The is the isotope composition matched to the experminal peak
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.AddIsotope(System.Double,System.Double,System.Double,System.Double,System.Boolean,ThermoFisher.CommonCore.Data.Business.PacketMatchMode,System.Int32)">
            <summary>
            Add isotope packet into the ElementalCompositionResult
            </summary>
            <param name="intensityMeasured">
            The intensityMeasured
            </param>
            <param name="intensityTheory">
            The intensityTheory
            </param>
            <param name="massMeasured">
            The massMeasured
            </param>
            <param name="massTheory">
            The massTheory
            </param>
            <param name="matched">
            The matched
            </param>
            <param name="matchMode">How the isotope was matched (within the mass and intensity limits)</param>
            <param name="originalPeakIndex">Index of the matched peak in the original scan</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult.Equals(ThermoFisher.CommonCore.Data.Business.ElementalCompositionResult)">
            <summary>
            Compares only the formula for equality
            </summary>
            <param name="result">
            The Result who's formula is compared.
            </param>
            <returns>
            True if equal
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ElementsSubsetCollection">
            <summary>
            A collection of element subsets.
            Used to supply data to the elemental composition algorithm.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementsSubsetCollection.AddElement(ThermoFisher.CommonCore.Data.Business.ElementSubset)">
            <summary>
            Add an element to the end of the collection.
            </summary>
            <param name="element">
            Element to add
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementsSubsetCollection.AddElementByOrder(ThermoFisher.CommonCore.Data.Business.ElementSubset)">
            <summary>
            Add an element, keeping the list in nominal mass order.
            </summary>
            <param name="element">
            Element to add
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementsSubsetCollection.Remove(System.String)">
            <summary>
            Remove all element subsets with a given sign
            </summary>
            <param name="sign">
            If the subset has this sign, it is removed
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementsSubsetCollection.ResetUseRatio(System.Boolean)">
            <summary>
            Reset the "UseRatio" flag for all subsets in the collection to a given value.
            </summary>
            <param name="set">
            Value to set all "UseRatio" flags.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementsSubsetCollection.Contains(System.String)">
            <summary>
            Test if there is any <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementSubset"/> in the collection with a given sign
            </summary>
            <param name="sign">
            Sign to look for
            </param>
            <returns>
            true if at least one <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementSubset"/> in this collection has the given Sign
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementsSubsetCollection.ResetInUse(System.Boolean)">
            <summary>
            Reset the "in use" flag for all subsets in the collection to a given value.
            </summary>
            <param name="set">
            Value to set all "in use" flags.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ElementSubset">
            <summary>
            Defines an isotope of an element, and quantity limits of that isotope.
            This is an input parameter to elemental composition searching.
            <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementsSubsetCollection"/>
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._sign">
            <summary>
            The chemical symbol.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._minAbs">
            <summary>
            The min abs count of this isotope.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._maxAbs">
            <summary>
            The max abs count of this isotope
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._minRel">
            <summary>
            The min relative count of this isotope.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._maxRel">
            <summary>
            The max relative count of this isotope
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._useRatio">
            <summary>
            If "relative" values (ratios) should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._inUse">
            <summary>
            Is this isotope used?
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._nominal">
            <summary>
            The nominal mass
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ElementSubset._mass">
            <summary>
            The isotope mass.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementSubset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementSubset"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ElementSubset.#ctor(System.String,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ElementSubset"/> class. 
            Construct from all possible settings
            (Obsolete form, use initializer, as many of the values have the same type,
            and this is not "order safe").
            </summary>
            <param name="sign">
            The sign.
            </param>
            <param name="mass">
            The mass.
            </param>
            <param name="nominal">
            The nominal.
            </param>
            <param name="minAbs">
            The min Abs.
            </param>
            <param name="maxAbs">
            The max Abs.
            </param>
            <param name="minRelative">
            The min Relative.
            </param>
            <param name="maxRelative">
            The max Relative.
            </param>
            <param name="useRatio">
            The use Ratio.
            </param>
            <param name="inUse">
            The in Use.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.Sign">
            <summary>
            Gets or sets the chemical symbol for the element
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.Maximum">
            <summary>
            Gets or sets the maximum count of this isotope in returned formula
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.Minimum">
            <summary>
            Gets or sets the maximum count of this element in the returned formula
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.MaximumAbs">
            <summary>
            Gets or sets the maximum count of this isotope in returned formulae
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.MinimumAbs">
            <summary>
            Gets or sets the minimum count of this isotope in returned formulae
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.MaximumRelative">
            <summary>
            Gets or sets the minimum relative amount of this isotope
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.MinimumRelative">
            <summary>
            Gets or sets the maximum relative amount of this isotope
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.NominalMass">
            <summary>
            Gets or sets the nominal mass of this isotope
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.SymbolForBinding">
            <summary>
            Gets the isotope including its nominal mass. For example "12 C" or "13 C".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.Mass">
            <summary>
            Gets or sets the exact mass of the isotope
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.InUse">
            <summary>
            Gets or sets a value indicating whether this element is used for searching.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ElementSubset.UseRatio">
            <summary>
            Gets or sets a value indicating whether the "Relative" min and max count of isotopes is used.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.BarcodeStatusType">
            <summary>
            Enumeration of possible bar code status values
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BarcodeStatusType.NotRead">
            <summary>
            NotRead status.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BarcodeStatusType.Read">
            <summary>
            Read status. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BarcodeStatusType.Unreadable">
            <summary>
            Unreadable status. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BarcodeStatusType.Error">
            <summary>
            Error status.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BarcodeStatusType.Wait">
            <summary>
            Wait status.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SampleType">
            <summary>
            Enumeration of sample types
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.Unknown">
            <summary>
            Unknown sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.Blank">
            <summary>
            Blank sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.QC">
            <summary>
            QC sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.StdClear">
            <summary>
            Standard Clear (None) sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.StdUpdate">
            <summary>
            Standard Update (None) sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.StdBracket">
            <summary>
            Standard Bracket (Open) sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.StdBracketStart">
            <summary>
            Standard Bracket Start (multiple brackets) sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.StdBracketEnd">
            <summary>
            Standard Bracket End (multiple brackets) sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.Program">
            <summary>
            Program sample
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.SolventBlank">
            <summary>
            A sample which only contains solvent
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.MatrixBlank">
            <summary>
            Blank which includes internal standard only.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.MatrixSpike">
            <summary>
            Matrix sample with known amounts of surrogates
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleType.MatrixSpikeDuplicate">
            <summary>
            Matrix sample with known amounts of target.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Device">
            <summary>
            Data acquisition device
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Device.None">
            <summary>
            No instrument
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Device.MS">
            <summary>
            Mass spectrometer
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Device.MSAnalog">
            <summary>
            Data collected from an analog input connected to a mass spectrometer.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Device.Analog">
            <summary>
            An A to D device
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Device.UV">
            <summary>
            UV/Vis detector
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Device.Pda">
            <summary>
            PDA (UV detector)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Device.Other">
            <summary>
            Unknown detector type or instrument which collects only status
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.TraceType">
            <summary>
            Enumeration of trace types, for chromatograms.
            Note: legacy C++ file reader does not support
            analog trace numbers above "4" or UV above "channel D".
            Traces are organized in blocks of 10
            For example: 
            <c>
            StartAnalogChromatogramTraces=10    (not a valid trace type, just a limit)
            Analog1 to Analog8 = 11 to 18
            EndAnalogChromatogramTraces =19     (not a valid trace type, just a limit)
            Next block:
            StartPDAChromatogramTraces = 20
            Etc.
            </c>
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.StartMSChromatogramTraces">
            <summary>
            Marks the start of the MS trace types (this enum value +1)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.MassRange">
            <summary>
            Chromatogram summing between two masses
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.TIC">
            <summary>
            Total Ion Current
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.BasePeak">
            <summary>
            Largest peak in scan (or mass range in scan)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Fragment">
            <summary>
            Neutral fragment 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.EndMSChromatogramTraces">
            <summary>
            Marks the end of the MS trace types (this enum value -1)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.StartAnalogChromatogramTraces">
            <summary>
            Marks the start of the Analog trace types (this enum value +1)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Analog1">
            <summary>
            Analog channel 1
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Analog2">
            <summary>
            Analog channel 2
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Analog3">
            <summary>
            Analog channel 3
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Analog4">
            <summary>
            Analog channel 4
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Analog5">
            <summary>
            Analog channel 5
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Analog6">
            <summary>
            Analog channel 6
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Analog7">
            <summary>
            Analog channel 6
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.Analog8">
            <summary>
            Analog channel 6
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.EndAnalogChromatogramTraces">
            <summary>
            Marks the end of the Analog trace types (this enum value -1)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.StartPDAChromatogramTraces">
            <summary>
            Marks the start of the PDA trace types (this enum value +1)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.WavelengthRange">
            <summary>
            Sum of values over a range of wavelengths
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.TotalAbsorbance">
            <summary>
            Average of all values in PDA scan
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.SpectrumMax">
            <summary>
            Largest value in scan (or wavelength range in scan)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.EndPDAChromatogramTraces">
            <summary>
            Marks the end of the PDA trace types (this enum value -1)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.StartUVChromatogramTraces">
            <summary>
            Marks the start of the UV trace types (this enum value +1)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChannelA">
            <summary>
            UV Channel A
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChannelB">
            <summary>
            UV Channel B
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChannelC">
            <summary>
            UV Channel C
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChannelD">
            <summary>
            UV Channel D
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChannelE">
            <summary>
            UV Channel E
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChannelF">
            <summary>
            UV Channel F
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChannelG">
            <summary>
            UV Channel G
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChannelH">
            <summary>
            UV Channel H
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.EndUVChromatogramTraces">
            <summary>
            Marks the end of the UV trace types (this enum value -1)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.StartPCA2DChromatogramTraces">
            <summary>
            A to D converter channels start at this +1
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.A2DChannel1">
            <summary>
            A to D channel 1
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.A2DChannel2">
            <summary>
            A to D channel 2
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.A2DChannel3">
            <summary>
            A to D channel 3
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChromatogramA2DChannel3">
            <summary>
            A to D channel 3 (old naming convention)
            use "A2DChannel3" in new code
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.A2DChannel4">
            <summary>
            A to D channel 4
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.ChromatogramA2DChannel4">
            <summary>
            A to D channel 4 (old naming convention)
            use "A2DChannel4" in new code
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.A2DChannel5">
            <summary>
            A to D channel 5
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.A2DChannel6">
            <summary>
            A to D channel 6
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.A2DChannel7">
            <summary>
            A to D channel 7
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.A2DChannel8">
            <summary>
            A to D channel 8
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.EndPCA2DChromatogramTraces">
            <summary>
            A to D converter channels end at this -1
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TraceType.EndAllChromatogramTraces">
            <summary>
            Marks the start of all trace types (this enum value -1)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.GenericDataTypes">
            <summary>
            enumeration for data type for the fields used by
            records of TuneData, StatusLog, TrailerExtra
            These are upper case names, so that they don't clash with standard
            type names.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.NULL">
            <summary> Null data type. No data is available (just a label) </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.CHAR">
            <summary> character data type (1 byte) </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.TRUEFALSE">
            <summary> true/false data type/ Similar to boolean, 1 byte of data displayed as True or False</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.YESNO">
            <summary> Yes/No data type. 1 byte of data displayed as Yes or No</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.ONOFF">
            <summary> ON/OFF data type. 1 byte of data displayed as On or Off </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.UCHAR">
            <summary> unsigned char data type </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.SHORT">
            <summary> short data type </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.USHORT">
            <summary>unsigned short data type </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.LONG">
            <summary>
            <para>long data type</para>
            Note: this is referred as a long (4-byte) in C++. It's not the same size as long in C#.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.ULONG">
            <summary>
            <para>unsigned log data type </para>
            Note: this is referred as an unsigned long (4-byte) in C++. It's not the same size as unsigned long in C#.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.FLOAT">
            <summary>float data type </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.DOUBLE">
            <summary>double data type </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.CHAR_STRING">
            <summary>string data type (single byte chars) </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenericDataTypes.WCHAR_STRING">
            <summary>string data type (wide chars, unicode)</summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.EventCode">
            <summary>
            enumeration of all initial and Timed events.
            Note. The Threshold and Bunch Factor parameters are the most important ones
            in controlling peak detection.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.NoCode">
            <summary>
            No peak detector event
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.StartThreshold">
            <summary>
            Directly related to the RMS noise in the chromatogram,
            this is Threshold, the fundamental control used for peak detection.
            Set the threshold at the start of a peak
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.EndThreshold">
            <summary>
            Directly related to the RMS noise in the chromatogram,
            this is Threshold, the fundamental control used for peak detection.
            Set the threshold at the end of a peak.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.AreaThreshold">
            <summary>
            Controls the area cutoff.
            Any peaks with a final area less than the area threshold will not be detected.
            This control is in units of area for the data. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.PPResolution">
            <summary>
            The peak to peak resolution threshold controls how much peak overlap must be present
            before two or more adjacent peaks create a peak cluster.
            Peak clusters will have a baseline drop instead of valley to valley baselines.
            This is specified as a percent of peak height overlap. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.NegativePeaks">
            <summary>
            Permit detection of a negative going peak.
            Automatically resets after a negative peak has been found. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.BunchFactor">
            <summary>
            The Bunch Factor is the number of points grouped together during peak detection.
            It controls the bunching of chromatographic points during integration and does not
            affect the final area calculation of the peak.
            The Bunch Factor must be an integer between 1 and 6;
            a high bunch factor groups peaks into clusters.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.Tension">
            <summary>
            Controls how closely the baseline should follow the overall shape of the chromatogram.
            A lower tension traces the baseline to follow changes in the chromatogram more closely.
            A high baseline tension follows the baseline less closely,
            over longer time intervals. Set in minutes. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.TangentSkim">
            <summary>
            Using this event, you can tangent skim any peak clusters.
            By default, it chooses the tallest peak in a cluster as the parent.
            You can also identify which peak in the cluster is the parent.
            Tangent skim peaks are detected on either side (or both sides) of the parent peak.
            Tangent skim automatically resets at the end of the peak cluster. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.ShouldersOn">
            <summary>
            Allows peak shoulders to be detected (peaks which are separated by an inflection rather than a valley)
            Sets a threshold for the derivative.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.ShouldersOff">
            <summary>
            Disables peak shoulder detection.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.AvalonOff">
            <summary>
            Stop detecting peaks, until the next on event.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.AvalonOn">
            <summary>
            Start detecting peaks again.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.ForceClusterOn">
            <summary>
            Force the following peaks to be treated as a cluster (single peak).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.ForceClusterOff">
            <summary>
            End the forced clustering of peaks.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.DisableClusterOn">
            <summary>
            Prevent any peaks from being clustered.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventCode.DisableClusterOff">
            <summary>
            Permit clusters to occur again.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IonRatioWindowType">
            <summary>
            Determines if ion ratio checks are based on an absolute or relative window, from the expected percentage.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IonRatioWindowType.Absolute">
            <summary>
            Window is an absolute % range. For example: 50% +/- absolute 10% gives 40-60%
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IonRatioWindowType.Relative">
            <summary>
            Window is a relative range, for example: 50% +/ relative 10% gives 45%-55%.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Polarity">
            <summary>
            Defines electrical polarity
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Polarity.Positive">
            <summary>
            Positive charge
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.Polarity.Negative">
            <summary>
            Negative charge
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ValleyDefinition">
            <summary>
            Specifies how the valley between resolved peaks is measured (in what units)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ValleyDefinition.FWHM">
            <summary>
            Peaks are measured at full with half maximum.
            This implies that two close peaks will both hit half maximum at the valley,
            and is equivalent to 100% valley height (no valley), or just starting to be resolved.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ValleyDefinition.TenPercent">
            <summary>
            Valley between two resolved peaks is 10% of peak height.
            Used for most accurate mass instruments.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PeakShape">
            <summary>
            The shape of the peaks to simulate, when making a profile out of an isotope pattern.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PeakShape.Gaussian">
            <summary>
            Create Profile with a Gaussian peak shape.
            (Legacy mode, as used in common core 2.0)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PeakShape.Cosine">
            <summary>
            Create profile with a cosine peak shape
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PeakShape.Triangular">
            <summary>
            Create profile with a triangular peak shape
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PeakShape.Lorentzian">
            <summary>
            Create profile with a Lorentzian peaks shape
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PeakShape.GaussianNew">
            <summary>
            Use: Updated Gaussian table
            This table is designed to allow slightly higher 
            precision in simulation and higher performance
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.CentroidAlgorithm">
            <summary>
            Specifies a method of calculation centroids from a profile.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidAlgorithm.TSQ">
            <summary>
             used in LCQ, TSQ, Quantum
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidAlgorithm.GCQ">
            <summary>
            Austin tweaking of TSQ algorithm
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidAlgorithm.MAT">
            <summary>
            used in MAT95 and DFS products
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.CentroidAlgorithm.FTORBITRAP">
            <summary>
            used in Orbitrap and FT analyzers
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ToleranceMode">
            <summary>
            Specifies units for measuring mass tolerance.
            <para>Tolerance is used to determine if a results should be kept,
            in formula search. If the exact mass of a formula is not within tolerance
            of a measured mass from an instrument, then the formula is not considered a valid result.</para>
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ToleranceMode.None">
            <summary>
            No tolerance mode
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ToleranceMode.Amu">
            <summary>
            Atomic mass units (or Daltons)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ToleranceMode.Mmu">
            <summary>
            Milli Mass Units (1/1000 Dalton)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ToleranceMode.Ppm">
            <summary>
            Parts Per Million
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MissingPacketPenaltyMode">
            <summary>
            If a packet of a theoretical pattern is not found in the measured pattern, this causes
            a penalty. This enum defines the magnitude of the penalty
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MissingPacketPenaltyMode.Penalty1StdDevMode">
            <summary>
            The penalty is one standard deviation
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MissingPacketPenaltyMode.Penalty4StdDevMode">
            <summary>
            The penalty is four standard deviations
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MissingPacketPenaltyMode.Penalty16StdDevMode">
            <summary>
            The penalty is sixteen standard deviations
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MissingPacketPenaltyMode.PenaltyClosestMatchMode">
            <summary>
            The penalty is the spectral distance to the closest packet
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MissingPacketPenaltyMode.PenaltyAutomaticMode">
            <summary>
            The penalty is selected automatically. According to S/N
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MissingPacketPenaltyMode.PenaltyIonStatistic">
            <summary>
            The penalty is selected automatically. According to S/N and ion statistic 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PatternNormalizationMode">
            <summary>
            For the Spectral Distance calculation, the theoretical and measured isotope
            patterns must be normalized. There are three different normalization modes available.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PatternNormalizationMode.NormModeBasePeak">
            <summary>
            Base peak normalization means that base
            peak intensities are assumed to be identical.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PatternNormalizationMode.NormModeLinear">
            <summary>
            If the mode is LINEAR, both theoretical and measured
            spectrum are normalized such that the sum of their
            intensity differences is minimized.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PatternNormalizationMode.NormModeQuadratic">
            <summary>
            If the mode is QUADRATIC, both theoretical and measured
            spectrum are normalized such that the sum of their
            squared intensity differences is minimized.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.NitrogenRule">
            <summary>
            The N-Rule builds on the fact that any compound
            containing C,H,O,N,S elements has an even number
            of N atoms if its molecular weight is even and
            has an odd number of N atoms if its molecular
            weight is odd. So if you want possible elemental
            compositions for an molecular ion that has an even
            mass, it makes no sense to display elemental composition
            candidates with an odd number of N-atoms.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.NitrogenRule.DoNotUse">
            <summary>
            No limitations are imposed on results based on this rule.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.NitrogenRule.EvenElectronIons">
            <summary>
            For the EvenElectronIons mode, elemental compositions
            containing N-atoms are only displayed if their RDB
            ( Ring and double bond equivalent ) has an integer value
            ( -1.0 0.0 1.0 2.0 … ); compositions containing N-atoms
            with an RDB value of -0.5 0.5 1.5.. are not displayed.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.NitrogenRule.OddElectronIons">
            <summary>
            For the OddElectronIons mode, elemental compositions
            containing N-atoms are only displayed if their RDB
            ( Ring and double bond equivalent ) has an non-integer value
            ( -0.5 0.5 1.5.. ); compositions containing N-atoms
            with an RDB value of -1.0 0.0 1.0 2.0 … are not displayed.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.DataUnits">
            <summary>
            Units of data from a UV or analog devices (if known).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataUnits.None">
            <summary>
            No units or unknown units
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataUnits.AbsorbanceUnits">
            <summary>
            straight AU
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataUnits.MilliAbsorbanceUnits">
            <summary>
            Milli AU
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataUnits.MicroAbsorbanceUnits">
            <summary>
            micro AU
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataUnits.Volts">
            <summary>
            Units are Volts
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataUnits.MilliVolts">
            <summary>
            Units are Millivolts
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.DataUnits.MicroVolts">
            <summary>
            micro volts
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PacketMatchMode">
            <summary>
            Gives orientation whether or not a packet is inside the expected mass and intensity window (= Expectation rectangle)
            If it is outside: it tells where the packet lies:
            North: intensity too big.
            South: Intensity too small
            West: Mass too low.
            East: Mass too big.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideUnknown">
            <summary>
            Unknown or not initialized yet
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideNorthWest">
            <summary>
            Packet has lower mass and higher intensity than expected
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideWest">
            <summary>
             Packet has lower mass than expected but correct intensity 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideSouthWest">
            <summary>
            Packet has lower mass and lower  intensity than expected 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideSouth">
            <summary>
             Packet has correct mass but lower intensity than expected
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideSouthEast">
            <summary>
             Packet has higher mass and lower intensity than expected
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideEast">
            <summary>
            Packet has correct intensity but mass but higher mass than expected
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideNorthEast">
            <summary>
            Packet has higher mass and higher intensity than expected
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.OutsideNorth">
            <summary>
             Packet has correct mass and higher intensity than expected
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PacketMatchMode.Inside">
            <summary>
            Packet is inside expected error limits
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType">
            <summary>
            The spectrum packet types.
            Internally, within raw files, these are defined simply as "a short integer packet type"
            These are then mapped to "constants".
            It is possible that types may be returned by from raw data, or other transmissions, which
            are outside of this range.
            These types define original compression formats from instruments.
            Note that most data values are returned as "double", when using IRawDataPlus
            regardless of the compressed file format used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.NoPacketType">
            <summary>
            No packet type is being specified.
            This can be used as a method parameter to mean "use default".
            This value is not valid when in a data record within a raw file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.ProfileSpectrum">
            <summary>
            Format for basic profiles (especially: 1990s San Jose instruments).
            Packet Type 0.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.LowResolutionSpectrum">
            <summary>
            Format for low resolution centroids (especially: 1990s San Jose instruments).
            Packet Type 1.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.HighResolutionSpectrum">
            <summary>
            Format for high resolution centroids (especially: 1990s San Jose instruments).
            Packet Type 2.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.ProfileIndex">
            <summary>
            Profile index.
            Index into multiple segment profile data. Legacy flag, not returned within scans.
            Packet Type 3.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.CompressedAccurateSpectrum">
            <summary>
            Compressed accurate mass spectrum, legacy mass lab instruments.
            Packet type 4
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.StandardAccurateSpectrum">
            <summary>
            Standard accurate mass spectrum, legacy mass lab instruments.
            Packet type 5
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.StandardUncalibratedSpectrum">
            <summary>
            Standard uncalibrated spectrum, legacy mass lab instruments.
            Packet type 6
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.AccurateMassProfileSpectrum">
            <summary>
            Accurate Mass Profile Spectrum, legacy mass lab instruments.
            Packet type 7
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.PdaUvDiscreteChannel">
            <summary>
            PDA UV  discrete channel packet type.
            Packet type 8
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.PdaUvDiscreteChannelIndex">
            <summary>
            PDA UV discrete channel index header type.
            (Typical for multi channel UV)
            Packet type 9
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.PdaUvScannedSpectrum">
            <summary>
            PDA UV scanned spectrum header packet type
            (Typical diode array detector format)
            Packet type 10
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.PdaUvScannedSpectrumIndex">
            <summary>
            PDA UV  scanned spectrum header index header type
            Packet type 11.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.UvChannel">
            <summary>
            UV  channel packet type
            Packet type 12
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.MassSpecAnalog">
            <summary>
            MS Analog channel packet type
            Packet type 13
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.ProfileSpectrumType2">
            <summary>
            Profile spectrum type 2. Older San Jose instruments (LCQ) format.
            Packet type 14.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.LowResolutionSpectrumType2">
            <summary>
            Low resolution spectrum type 2. Older San Jose instruments (LCQ) format.
            Packet type 15.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.ProfileSpectrumType3">
            <summary>
            Profile spectrum type 2. Quantum format.
            Packet type 16.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.LowResolutionSpectrumType3">
            <summary>
            Low resolution spectrum type 3. Quantum format.
            Packet type 17.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.LinearTrapCentroid">
            <summary>
            Linear Trap (centroids).
            This format may also return extended data from "Centroid stream".
            Packet type 18.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.LinearTrapProfile">
            <summary>
            Linear Trap (profiles).
            This format may also return extended data from "Centroid stream".
            Packet type 19.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.FtCentroid">
            <summary>
            FTMS data type (centroids)
            This format may also return extended data from "Centroid stream".
            Packet type 20.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.FtProfile">
            <summary>
            FTMS data type (profiles)
            This format may also return extended data from "Centroid stream".
            Packet type 21.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.HighResolutionCompressedProfile">
            <summary>
            Compressed profile format for MAT95 (high-res)
            Packet type 22.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.LowResolutionCompressedProfile">
            <summary>
            Compressed profile format for MAT95
            Packet type 23.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.LowResolutionSpectrumType4">
            <summary>
            Low Resolution Packet type 4 (Quantum) Centroid + Flags
            Packet type 24.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SpectrumPacketType.InvalidPacket">
            <summary>
            Not a known type
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.BracketType">
            <summary>
            Specifies a sequence bracket type.
            This determines which groups of samples use the same calibration curve.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BracketType.Unspecified">
            <summary>
            No bracket type specified.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BracketType.Overlapped">
            <summary>
            Standards are Overlapped with adjacent brackets.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BracketType.None">
            <summary>
            There is no bracketing. All samples in a sequence are a single group with one calibration curve.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BracketType.NonOverlapped">
            <summary>
            Multiple groups which are not overlapped (do not share standards).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.BracketType.Open">
            <summary>
            Groups of samples are automatically determined, based on sample types of each row.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.EventCollection">
            <summary>
            Event list, includes both initial events and timed events.
            <para>Initial events are similar to properties of the peak detector.
            They are always at the start of the list, and are not time triggered.</para>
            <para>Timed events modify the initial values for a limited duration,
            or control special features, such a detecting the next peak as "negative".</para>
            The additional functions are intended to assist in editing the list.
            <para>The initial events are at the start of the list</para>
            <para>The timed events are in order</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.EventCollection.Events">
            <summary>
            Gets the List of time events
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.EventCollection.CountTimedEvents">
            <summary>
            Count the number of timed (as opposed to initial) events
            </summary>
            <returns>The number of timed events</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.EventCollection.FirstTimedEvent">
            <summary>
            Step past any initial events, and find the first time event
            </summary>
            <returns>The node for the first timed event</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.EventCollection.FindEventValue(ThermoFisher.CommonCore.Data.Business.EventCode,System.Int32@)">
            <summary>
            Find the first event matching a specific event code
            </summary>
            <param name="code">The code to search for</param>
            <param name="eventNumber">(returned) the number of the event in the list</param>
            <returns>The node containing the first event matching the supplied event code</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.EventCollection.FindEventValue(ThermoFisher.CommonCore.Data.Business.EventKind,ThermoFisher.CommonCore.Data.Business.EventCode,System.Int32@)">
            <summary>
            Find the first event matching a specific event code and kind
            </summary>
            <param name="kind">Initial or timed version</param>
            <param name="code">The code to search for</param>
            <param name="eventNumber">(returned) the number of the event in the list</param>
            <returns>The node containing the first event matching the supplied event code</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.EventCollection.ResetToDefaults">
            <summary>
            Creates the initial default events for the collection
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.EventCollection.Clone">
            <summary>
            Make a copy of the current event collection
            </summary>
            <returns>A copy of the event collection</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ExtendedScan">
            <summary>
            Extends the "Scan" object to provide charge envolope information,
            which is available from certain instrumnets.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ExtendedScan.#ctor(ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Creates a new ExtendedScan from a Scan.
            All extended data is empty
            </summary>
            <param name="scan"></param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ExtendedScan.DeepClone">
            <summary>
            Make a deep clone of this extended scan.
            </summary>
            <returns>
            An object containing all data in the input, and no shared references
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ExtendedScan.#ctor">
            <summary>
            Default constructor for Extended Scan
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ExtendedScan.FromFile(ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtended,System.Int32)">
            <summary>
            Create an extended scan object from a file and a scan number.
            </summary>
            <param name="rawFile">
            File to read from
            </param>
            <param name="scanNumber">
            Scan number to read
            </param>
            <returns>
            The scan read, or null of the scan number if not valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ExtendedScan.ReadFromFileExtended(ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtended,System.Int32,ThermoFisher.CommonCore.Data.Business.ScanStatistics)">
            <summary>
            read extended scan data from file.
            </summary>
            <param name="rawFile">
            The raw file.
            </param>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="stats">
            The stats.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ExtendedScan.Slice(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess[],System.Boolean,System.Boolean)">
            <summary>
            Return a slice of a scan which only contains data within the supplied mass Range or ranges.
            For example: For a scan with data from m/z 200 to 700, and a single mass range of 300 to 400:
            This returns a new scan containing all data with the range 300 to 400.
            All annotaion and charge envolope data is discarded, as peaks whcih make up envelopes are 
            not guranteed to be in any slice.
            </summary>
            <param name="massRanges">The mass ranges, where data should be retained. When multiple ranges are supplied,
            all data which is in at least one range is included in the returned scan</param>
            <param name="trimMassRange">If this is true, then the scan will reset the
            scan's mass range to the bounds of the supplied mass ranges </param>
            <param name="expandProfiles">This setting only applies when the scan has both profile and centroid data.
            If true: When there isa centroid near the start or end of a range, and the first or
            final "above zero" section of the profile includes that peak, then the profile is extended, to include the points
            which contribute to that peak. A maximum of 10 points may be added</param>
            <returns>A copy of the scan, with only the data in the supplied ranges</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ExtendedScan.ExtendedCentroidsAccess">
            <summary>
            Gets centroids with additional charge envelope information (when available)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ExtendedScan.HasChargeEnvelopes">
            <summary>
            Gets a value indicating whether charge envelope data 
            was recorded for this scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ExtendedScan.Annotations">
            <summary>
            Gets additional annotations per peak, related to change envelopes
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ExtendedScan.ChargeEnvelopes">
            <summary>
            Gets the change envelopes. This include overall information
            about the envelope, plus the set of included peaks, 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.FileHeader">
            <summary>
            The file header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.WhoCreatedId">
            <summary>
            Gets or sets the creator Id. The creator Id is the full text user name of the user
            when the file is created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.WhoCreatedLogon">
            <summary>
            Gets or sets the creator Login name.
            The creator login name is the user name of the user
            when the file is created, as entered at the "user name, password" screen in windows.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.WhoModifiedId">
            <summary>
            Gets or sets the creator Id. The creator Id is the full text user name of the user
            when the file is created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.WhoModifiedLogon">
            <summary>
            Gets or sets the creator Login name.
            The creator login name is the user name of the user
            when the file is created, as entered at the "user name, password" screen in windows.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.FileType">
            <summary>
            Gets or sets the type of the file.
            If the file is not recognized, the value of the FileType will be set to "Not Supported" 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.Revision">
            <summary>
            Gets or sets the file format revision
            Note: this does not refer to revisions of the content.
            It defines revisions of the binary files structure.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.CreationDate">
            <summary>
            Gets or sets the file creation date in local time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.ModifiedDate">
            <summary>
            Gets or sets the modified date in local time.
            File changed audit information (most recent change)
            </summary>
            <value>
            The modified date.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.NumberOfTimesModified">
            <summary>
            Gets or sets the number of times modified.
            </summary>
            <value>
            The number of times the file has been modified.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.NumberOfTimesCalibrated">
            <summary>
            Gets or sets the number of times calibrated.
            </summary>
            <value>
            The number of times calibrated.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FileHeader.FileDescription">
            <summary>
            Gets or sets the file description.
            User's narrative description of the file, 512 unicode characters (1024 bytes)
            </summary>
            <value>
            The file description.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.FileHeaderReaderFactory">
            <summary>
            Provides a means of reading headers from Xcalibur files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FileHeaderReaderFactory.CreateReader">
            <summary>
            Creates the reader.
            </summary>
            <returns>File header reader factory object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FileHeaderReaderFactory.ReadFile(System.String)">
            <summary>
            Read a file header.
            The file header contents are returned. The file is not kept open.
            </summary>
            <param name="fileName">Name of file to read</param>
            <returns>Access to the contents of the file header.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.FilteredScans">
            <summary>
            This class is designed to allow iteration
            through MS data in a file, based on a filter.
            To use this, first open a raw file then
            create this object based on the open file.
            To process all the matching scans:
            <code>
            FilteredScans scans=new FilteredScans(myFile,"MS2");
            int next=scans.NextSpectrumNumber;
            while(next > 0)
            {
               scans.MoveSpectrumPosition (next);
               var scan=myFile.GetSegmentedScanFromScanNumber(next,null);
               //process the scan, then move to the next
               next=scans.NextSpectrumNumber;
            }
            </code>
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilteredScans.IsOpen">
            <summary>
            Test if the file is open
            </summary>
            <returns>
            True if it is open.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilteredScans.SetFilter(System.String)">
            <summary>
            Set the filter used for iterating over spectra. 
            This can be used with the <see cref="P:ThermoFisher.CommonCore.Data.Business.FilteredScans.NextSpectrumNumber"/> method to iterate over scans with a certain filter
            </summary>
            <param name="filter">an object containing the Filter to be used for iterating over spectra</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilteredScans.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.FilteredScans"/> class. 
            Creates an iterator to step through the selected file
            </summary>
            <param name="file">
            The file.
            </param>
            <param name="filter">
            The scan filter.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilteredScans.MoveFirst">
             <summary>
             Move the iterator to the start of the list. 
             Permitting this loop to process all matching scans
             <c>
             int next = iterate.MoveFirst();
             int count = 0;
            
             while (next > 0)
             {
                // add your application code to 
                // fetch and process scan "next" 
                // end of application code block
             
                iterate.SpectrumPosition = next;
                count++;
                next = iterate.NextSpectrumNumber;
             }
             </c>
             </summary>
             <returns>The first valid spectrum number, or -1 if not scans match the given filter</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilteredScans.MoveLast">
            <summary>
            Move the iterator to the end of the list
            </summary>
            <returns>The last valid spectrum number, or -1 if not scans match the given filter</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilteredScans.SpectrumFilterString">
            <summary>
            Gets the filter used for iterating over spectra, in string form. 
            This can be used with the <see cref="P:ThermoFisher.CommonCore.Data.Business.FilteredScans.NextSpectrumNumber"/> method to iterate over scans with a certain filter
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilteredScans.PreviousSpectrumNumber">
            <summary>
            Gets the Previous Spectrum, matching the filter
            <returns>returns the previous spectrum number in file. 0 if there is no file open</returns>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilteredScans.NextSpectrumNumber">
            <summary>
            Gets the Next Spectrum, matching the filter
            <returns>returns the next spectrum number in file. 0 if there is no file open</returns>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilteredScans.SpectrumPosition">
            <summary>
            Sets the CurrentSpectrumNumber to the new Spectrum Number
            <returns>The Set property has no return value</returns>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilteredScans.HasPreviousSpectrum">
            <summary>
            Gets a value indicating whether there may be spectra before the current scan.
            Note that this does not check if this scan matches the filter.
            <returns>returns true if there is an Previous spectrum in file. Otherwise false</returns>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilteredScans.HasNextSpectrum">
            <summary>
            Gets a value indicating whether there are more scans after the current scan
            Note that this does not check if this scan matches the filter.
            <returns>returns true if there is an Next spectrum in file. Otherwise false</returns>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.FilterExtensions">
            <summary>
            The filter extensions.
            These are internal, as they are only
            supported for use by the ScanEventHelper class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilterExtensions.FilterMassResolution(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Calculate the filter mass resolution.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilterExtensions.NumMassesEx(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Calculates the number of masses, corrected for multiple activations.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilterExtensions.CompensationVoltageValueIsValid(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Int32)">
            <summary>
            Test if the compensation voltage value is valid.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <param name="i">
            The i.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.FilterWithString">
            <summary>
            Defines a combination of plain text and interface defintions of filters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilterWithString.Filter">
            <summary>
            Gets a Standard (parsable) text form of the filter. This does not include any compound names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilterWithString.ScanFilter">
            <summary>
            Gets the scan filer (as accessable fields)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilterWithString.FilterWithName">
            <summary>
            Gets a string which combines the compound name and the filter text.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilterWithString.Name">
            <summary>
            Gets the compound name
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilterWithString.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String)">
            <summary>
            Creates a new instance of FilterWithString, parsing the filter based on 
            a supplied raw file.
            </summary>
            <param name="rawData">The raw data, used to parse this filter</param>
            <param name="text">The text form of the filter</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FilterWithString.#ctor">
            <summary>
            Creates a new instance of FilterWithString.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FilterWithString.NameOnly">
            <summary>
            Gets a value indicating whether this object only has a compound name,
            and does not have any filter text or filter interface defined.
            When this is set: Only the Name property should be used.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.FindResult">
            <summary>
            Results of the find algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.Scan">
            <summary>
            Gets or sets the scan number for this result
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.PredictedScan">
            <summary>
            Gets or sets the scan number predicted for this peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.FoundRT">
            <summary>
            Gets or sets the retention time of the peak which has been found
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.FindScore">
            <summary>
            Gets or sets a score based on both forward and reverse matching factors
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.ForwardScore">
            <summary>
            Gets or sets the score from forward search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.ReverseScore">
            <summary>
            Gets or sets the score from reverse search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.ChromatogramIntensity">
            <summary>
            Gets or sets the intensity of the supplied chromatogram at this result
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.MatchScore">
            <summary>
            Gets or sets the score from Match algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindResult.FoundPeak">
            <summary>
            Gets or sets the peak found for this result
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FindResult.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>
            An exact copy of the current collection.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FindResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.FindResult"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FindResult.#ctor(ThermoFisher.CommonCore.Data.IFindResultAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.FindResult"/> class. 
            Copy constructor
            </summary>
            <param name="access">
            object to copy
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.FindSettings">
            <summary>
            Settings for the spectrum find algorithm.
            This algorithm validates a detected peak,
            by proving that the masses in the supplied spectrum for the peak
            maximize near the peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindSettings.ForwardThreshold">
            <summary>
            Gets or sets the forward threshold for find algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindSettings.MatchThreshold">
            <summary>
            Gets or sets the match threshold for find algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindSettings.ReverseThreshold">
            <summary>
            Gets or sets the reverse threshold for find algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindSettings.SpecPoints">
            <summary>
            Gets or sets the spec points.
            </summary>
            <value>The spec points.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.FindSettings.ThermoFisher#CommonCore#Data#IFindSettingsAccess#SpecPoints">
            <summary>
            Gets the spec points.
            </summary>
            <value>The spec points.</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FindSettings.GetFindSpectrum">
            <summary>
            Get a copy of the find spectrum
            </summary>
            <returns>
            A copy of the find spectrum.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FindSettings.SetFindSpectrum(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.SpectrumPoint})">
            <summary>
            Update the spectrum (for the find algorithm)
            </summary>
            <param name="spectrum">The spectrum to find
            </param>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.FindSettings._forwardThreshold">
            <summary>
            The forward threshold.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.FindSettings._matchThreshold">
            <summary>
            The match threshold.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.FindSettings._reverseThreshold">
            <summary>
            The reverse threshold.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.FindSettings._findSpectrum">
            <summary>
            The find spectrum.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FindSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.FindSettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FindSettings.#ctor(ThermoFisher.CommonCore.Data.IFindSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.FindSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.FindSettings.Clone">
            <summary>
            Make a copy of this object
            </summary>
            <returns>a copy of this object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.GenesisSettings">
            <summary>
            User parameters for the Genesis peak integration algorithm.
            These settings determine how the chromatogram is integrated.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.ConstrainPeak">
            <summary>
            Gets or sets a value indicating whether to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.ExpectedPeakWidth">
            <summary>
            Gets or sets the expected peak width (seconds).
            This controls the minimum width that a peak is expected to have (seconds)
            if valley detection is enabled. The property is expressed as a window.
            With valley detection enabled,
            any valley points nearer than  [expected width]/2
            to the top of the peak are ignored.
            If a valley point is found outside the expected peak width,
            Genesis terminates the peak at that point.
            Genesis always terminates a peak when the signal reaches the baseline,
            independent of the value set for the ExpectedPeakWidth.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.PeakHeightPercent">
            <summary>
            Gets or sets the percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the <c>ConstrainPeak</c> is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.SignalToNoiseThreshold">
            <summary>
            Gets or sets the edge detection Signal to Noise threshold.
            This displayed as "S/N Threshold" in product UI.
            Larger values cause peaks to become narrower.
            A peak is considered ended if the following condition is met:
            <c>height &lt;= (BaseNoise * SignalToNoiseThreshold))</c>
            Where BaseNoise is the calculated noise on the fitted baseline,
            and height is the height above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.TailingFactor">
            <summary>
            Gets or sets the Tailing Factor, which controls how Genesis integrates the tail of a peak.
            This factor is the maximum ratio of the trailing edge to the leading side of a constrained peak.
            This applies only when the <see cref="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.ConstrainPeak"/> is true.
            The valid range is 0.5 through 9.0. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.ValleyDetection">
            <summary>
            Gets or sets a value indicating whether to perform base to base integration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.PeakSignalToNoiseRatioCutoff">
            <summary>
            Gets or sets a value determining how far down from the peak apex a valley must be.
            The peak edge is set to values below this defined ratio. 
            This test assumes an edge of a peak is found when the baseline adjusted height of the edge is less than
            the ratio of the baseline adjusted apex height and the peak S/N cutoff ratio. 
            If the S/N at the apex is 500 and the peak S/N cutoff value is 200,
            Genesis defines the right and left edges of the peak when the S/N reaches a value less than 200.
            Range: 50.0 to 10000.0. 
            Technical equation:<c>if height &lt; (1/PeakSignalToNoiseRatioCutoff)*height(apex) => valley here</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.RisePercent">
            <summary>
            Gets or sets the percentage of the valley bottom
            that the peak trace can rise above a baseline (before or after the peak). 
            If the trace exceeds RisePercent,
            Genesis applies valley detection peak integration criteria. 
            This method drops a vertical line from the apex of the valley between unresolved
            peaks to the baseline.
            The intersection of the vertical line and the baseline defines the end of the first
            peak and the beginning of the second peak. 
            This test is applied to both the left and right edges of the peak. 
            The RisePercent criteria is useful for integrating peaks with long tails.
            Useful range: 0.1 to 50
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.ValleyDepth">
            <summary>
            Gets or sets a value determining how deep a valley must be.
            The range is 1.0 to 100.0. for valley detection.
            Technical equation:<c>height(here +/- VALLEY_WIDTH) &gt; ValleyDepth*SNR+height(here) =&gt; valley here</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.CalculateNoiseAsRms">
            <summary>
            Gets or sets a value indicating whether to enable RMS noise calculation.
            If not set, noise is calculated peak to peak.
            It is set by default.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.BaselineNoiseTolerance">
            <summary>
            Gets or sets the Baseline noise tolerance.
            controls how the baseline is drawn in the noise data.
            The higher the baseline noise tolerance value,
            the higher the baseline is drawn through the noise data.
            The valid range is 0.0 to 100.0
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.MinScansInBaseline">
            <summary>
            Gets or sets the minimum number of scans that Genesis uses to calculate a baseline.
            A larger number includes more data in determining an averaged baseline.
            The valid range is 2 to 100.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.BaselineNoiseRejectionFactor">
            <summary>
            Gets or sets a factor which controls the width of the RMS noise band above and below the peak detection baseline
            and is applied to the raw RMS noise values to raise the effective RMS noise during peak detection.
            The left and right peak boundaries are assigned above the noise and, therefore,
            closer to the peak apex value in minutes. 
            This action effectively raises the peak integration baseline above the RMS noise level. 
            Range: 0.1 to 10.0.
            Default: 2.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.BackgroundUpdateRate">
            <summary>
            Gets or sets the minutes between background scan recalculations.
            Baseline is refitted each time this interval elapses. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.BaseSignalToNoiseRatio">
            <summary>
            Gets or sets the smallest permitted signal to noise ratio.
            Peaks are rejected if they have a lower signal to noise ratio than this.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.PercentLargestPeak">
            <summary>
            Gets or sets the lowest permitted percentage of the largest peak.
            Do not return peaks which are less than this % of the highest peak above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.GenesisSettings.FilterByRelativePeakHeight">
            <summary>
            Gets or sets a value indicating whether peaks are filtered by relative signal height
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._constrainPeak">
            <summary>
            Constrain the width of the peak. Default false
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._expectedPeakWidth">
            <summary>
            Expected peak width (seconds). default 0.0
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._peakHeightPercent">
            <summary>
            Percent of the total peak height (100%) that a signal needs to be above the baseline. Default 5%.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._signalToNoiseThreshold">
            <summary>
            edge detection Signal to Noise threshold. default 0.5
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._tailingFactor">
            <summary>
            which controls how Genesis integrates the tail of a peak. default 1.0
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._valleyDetection">
            <summary>
            perform base to base integration? default false
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._peakSignalToNoiseRatioCutoff">
            <summary>
             how far down from the peak apex a valley must be. default 200
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._risePercent">
            <summary>
            percentage of the valley bottom
            that the peak trace can rise above a baseline (before or after the peak). default 10%
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._valleyDepth">
            <summary>
             How deep a valley must be. default 1.0
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._calculateNoiseAsRms">
            <summary>
            Should noise be calculated as RMS? default true
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._baselineNoiseTolerance">
            <summary>
            The higher the baseline noise tolerance value,
            the higher the baseline is drawn through the noise data. default 10.0
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._minScansInBaseline">
            <summary>
            minimum number of scans that Genesis uses to calculate a baseline. default 16.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._baselineNoiseRejectionFactor">
            <summary>
            controls the width of the RMS noise band above and below the peak detection baseline.  default 2.0
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._backgroundUpdateRate">
            <summary>
            minutes between background scan recalculations. default 5.0
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._baseSignalToNoiseRatio">
            <summary>
            The smallest permitted signal to noise ratio. Default 0.5. range in UI 0.0 to 999.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._percentLargestPeak">
            <summary>
            lowest permitted percentage of the largest peak. Default 10.0.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.GenesisSettings._filterByRelativePeakHeight">
            <summary>
             peaks are filtered by relative signal height? default false.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.GenesisSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.GenesisSettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.GenesisSettings.#ctor(ThermoFisher.CommonCore.Data.IGenesisSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.GenesisSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.GenesisSettings.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.GenesisSettings"/> class.
            Maps settings from an Xcalibur processing method.
            </summary>
            <param name="access">
            The access.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.GenesisSettings.Clone">
            <summary>
            make a copy of this object
            </summary>
            <returns>A copy of this object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.HeaderItem">
            <summary>
            Defines the format of a log entry, including label (name of the field), data type, and numeric formatting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.HeaderItem.Label">
            <summary>
            Gets or sets the display label for the field.
            For example: If this a temperature, this label may be "Temperature" and the DataType may be "GenericDataTypes.FLOAT"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.HeaderItem.DataType">
            <summary>
            Gets or sets the data type for the field
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.HeaderItem.StringLengthOrPrecision">
            <summary>
            Gets or sets the precision, if the data type is float or double,
            or string length of string fields.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.HeaderItem.IsScientificNotation">
            <summary>
            Gets or sets a value indicating whether a number should be displayed in scientific notation
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.HeaderItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.HeaderItem"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.HeaderItem.#ctor(System.String,ThermoFisher.CommonCore.Data.Business.GenericDataTypes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.HeaderItem"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="dataType">Type of the data.</param>
            <param name="stringLengthOrPrecision">The string length or precision.</param>
            <param name="isScientificNotation">This indicates whether a number should be displayed in scientific notation. Optional parameter has a default value = false.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.HeaderItem.IsNumeric">
            <summary>
            Gets a value indicating whether this is considered numeric data.
            This is the same test as performed for <c>StatusLogPlottableData</c>".
            Integer types: short and long (signed and unsigned) and
            floating types: float and double are defined as numeric.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.HeaderItem.IsVariableHeader(System.Int32)">
            <summary>
            Tests whether this is a variable header.
            A "variable header", if present as the first field in a table of
            headers, defines that each record has a variable number of valid fields.
            The first field in each data record will then be converted to "validity flags"
            which determine which of the fields in a data record have valid values.
            </summary>
            <param name="fields">
            The number of fields in the header.
            </param>
            <returns>
            True if this specifies that "variable length" records are used.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.HeaderItem.FormatValue(System.String)">
            <summary>
            Re-formats the specified value per the current header's settings.
            </summary>
            <param name="value">
            The value, as a string.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.HeaderItem.FormatBoolValue(System.String,System.String,System.String)">
            <summary>
            Format a bool string based on the header.
            </summary>
            <param name="value">
            The value to format.
            </param>
            <param name="trueValue">
            The true string value.
            </param>
            <param name="falseValue">
            The false string value.
            </param>
            <returns>
            The formatted bool value.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.HeaderItem.FormatNumericValue(System.String)">
            <summary>
            Format a numeric value.
            </summary>
            <param name="value">
            The value to format.
            </param>
            <returns>
            The formatted numeric value.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ICentroidPeak">
            <summary>
            The centroid peak interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidPeak.Mass">
            <summary>
            Gets or sets mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidPeak.Intensity">
            <summary>
            Gets or sets intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidPeak.Resolution">
            <summary>
            Gets or sets resolution.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidPeak.Baseline">
            <summary>
            Gets or sets base Line.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidPeak.Noise">
            <summary>
            Gets or sets noise.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidPeak.Charge">
            <summary>
            Gets or sets charge.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidPeak.Flag">
            <summary>
            Gets or sets Peak Options Flag.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidPeak.SignalToNoise">
            <summary>
            Gets or sets the signal to noise.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IChromatogramPointBuilder">
            <summary>
            Methods for creating a value for one scan in a chromatogram.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IChromatogramPointBuilder.SumIntensities(ThermoFisher.CommonCore.Data.Business.Range[],ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Sum all masses within the ranges
            </summary>
            <param name="ranges">
            List of ranges to sum
            </param>
            <param name="toleranceOptions">
            If the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses
            </param>
            <returns>
            Sum of intensities in all ranges
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IChromatogramPointBuilder.BaseIntensity(ThermoFisher.CommonCore.Data.Business.Range[],ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Return the largest intensity (base value) in the ranges supplied
            </summary>
            <param name="ranges">
            Ranges of positions (masses, wavelengths)
            </param>
            <param name="toleranceOptions">
            If the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses
            </param>
            <returns>
            Largest intensity in all ranges
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IcisSettings">
            <summary>
            User parameters for the ICIS peak integration algorithm.
            These settings determine how the chromatogram is integrated.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.BaselineWindow">
            <summary>
            Gets or sets the number of scans.
            Each scan is checked to see if it should be considered a baseline scan.
            This is determined by looking at a number of scans (BaselineWindow) before
            and after the a data point. If it is the lowest point in the group it will be
            marked as a "baseline" point.
            Range: 1 - 500
            Default: 40
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.AreaNoiseFactor">
            <summary>
            Gets or sets the Noise level multiplier.
            This determines the peak edge after the location of the possible peak,
            allowing the peak to narrow or broaden without affecting the baseline. 
            Range: 1 - 500
            Default multiplier: 5
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.PeakNoiseFactor">
            <summary>
            Gets or sets the noise level multiplier (a minimum S/N ratio).
            This determines the potential peak signal threshold. 
            Range: 1 - 1000
            Default multiplier: 10
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.ConstrainPeakWidth">
            <summary>
            Gets or sets a value indicating whether to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.PeakHeightPercentage">
            <summary>
            Gets or sets the percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the ConstrainPeak is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.TailingFactor">
            <summary>
            Gets or sets the tailing factor.
            This controls how Genesis integrates the tail of a peak.
            This factor is the maximum ratio of the trailing edge to the leading side of a constrained peak.
            This applies only when the ConstrainPeak is true.
            The valid range is 0.5 through 9.0. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.MinimumPeakWidth">
            <summary>
            Gets or sets the minimum number of scans required in a peak. 
            Range: 0 to 100. 
            Default: 3. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.MultipletResolution">
            <summary>
             Gets or sets the minimum separation in scans between the apexes of two potential peaks.
             This is a criterion to determine if two peaks are resolved.
             Enter a larger number in a noisy environment when the signal is bouncing around.
             Range: 1 to 500.
             Default: 10 scans. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.AreaScanWindow">
            <summary>
            Gets or sets the number of scans on each side of the peak apex to be allowed. 
            Range: 0 to 100.
            Default: 0 scans.
            0 specifies that all scans from peak-start to peak-end are to be included in the area integration.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.AreaTailExtension">
            <summary>
            Gets or sets the number of scans past the peak endpoint to use in averaging the intensity.
            Range: 0 to 100. 
            Default: 5 scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.CalculateNoiseAsRms">
            <summary>
            Gets or sets a value indicating whether noise is calculated using an RMS method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IcisSettings.NoiseMethod">
            <summary>
            Gets or sets a value which determines how the ICIS peak detector  determines which signals are noise.
            The selected points can  determine a noise level, or be fed into an RMS calculator,
            depending on the RMS setting.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IcisSettings._baselineWindow">
            <summary>
            The _baseline window.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IcisSettings._areaNoiseFactor">
            <summary>
            The _area noise factor.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IcisSettings._peakNoiseFactor">
            <summary>
            The _peak noise factor.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IcisSettings._constrainPeakWidth">
            <summary>
            The _constrain peak width.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IcisSettings._peakHeightPercentage">
            <summary>
            The _peak height percentage.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.IcisSettings._tailingFactor">
            <summary>
            The _tailing factor.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IcisSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IcisSettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IcisSettings.#ctor(ThermoFisher.CommonCore.Data.IIcisSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IcisSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IcisSettings.Clone">
            <summary>
            make a copy of this object
            </summary>
            <returns>a copy of this object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Instrument">
            <summary>
            Contains common instrument information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Instrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Instrument"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.DeviceType">
            <summary>
            Gets or sets the type of the device.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.BaseUri">
            <summary>
            Gets or sets the base URI.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.Name">
            <summary>
            Gets or sets the name of the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.Model">
            <summary>
            Gets or sets the Model of instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.SerialNumber">
            <summary>
            Gets or sets the Serial number of instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.SoftwareVersion">
            <summary>
            Gets or sets the Software version of instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.HardwareVersion">
            <summary>
            Gets or sets the Hardware version of instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.Units">
            <summary>
            Gets or sets Units of UV or analog data (not used for MS instruments)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.RunHeader">
            <summary>
            Gets or sets the run header of the instrument.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.AutoFilters">
            <summary>
            Gets or sets the list of auto filters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.TrailerExtraHeaders">
            <summary>
            Gets or sets the list of instrument methods.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.TuneData">
            <summary>
            Gets or sets the tune data for the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.StatusLogData">
            <summary>
            Gets or sets the Status log data for the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.SegmentEventTable">
            <summary>
            Gets or sets the segment event table for the current instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Instrument.ChannelLabels">
            <summary>
            Gets or sets names for channels (for UV or analog data)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.InstrumentData">
            <summary>
            Data about an instrument, for example, instrument name
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.Name">
            <summary>
            Gets or sets the name of the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.Model">
            <summary>
            Gets or sets the model of instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.SerialNumber">
            <summary>
            Gets or sets the serial number of instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.SoftwareVersion">
            <summary>
            Gets or sets the software version of instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.HardwareVersion">
            <summary>
            Gets or sets the hardware version of instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.ChannelLabels">
            <summary>
            Gets or sets the Names for the channels, for UV or analog data: 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.Units">
            <summary>
            Gets or sets the units of the Signal, for UV or analog
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.Flags">
            <summary>
            Gets or sets additional information about this instrument.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.AxisLabelX">
            <summary>
            Gets or sets Device suggested label of X axis
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.AxisLabelY">
            <summary>
            Gets or sets Device suggested label of Y axis (name for units of data, such as "°C")
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.IsValid">
            <summary>
            Gets or sets a value indicating whether the instrument is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentData.HasAccurateMassPrecursors">
            <summary>
            Gets a value indicating whether this file has accurate mass precursors
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.InstrumentData"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentData.#ctor(ThermoFisher.CommonCore.Data.IInstrumentDataAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.InstrumentData"/> class. 
            Construct by copying fields from interface
            </summary>
            <param name="from">
            Interface to copy from
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentData.IsTsqQuantumFile">
            <summary>
            Test if this is a TSQ quantum series file.
            Such files may have more accurate precursor mass selection.
            </summary>
            <returns>True if this is a raw file from a TSQ Quantum</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.InstrumentMethodExporterFactory">
            <summary>
            This static factory class provides methods for exporting instrument method from a raw file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentMethodExporterFactory.ReadFile(System.String)">
            <summary>
            Creates the instrument method exporter with an input raw file name.<para/>
            It returns an interface which can be used to export an instrument method from a raw file.<para/>
            <c>
            <para/>Example:
            <para/>using (var exporter = InstrumentMethodExporterFactory.ReadFile(rawFile))
            <para/>{
            <para/>    if (!exporter.HasError &amp;&amp; exporter.HasInstrumentMethod)
            <para/>    {
            <para/>        exporter.ExportInstrumentMethod("Export instrument method file name", false);
            <para/>    }
            <para/>}
            </c>
            </summary>
            <param name="fileName">Name of the raw file.</param>
            <returns>Interface object for exporting the instrument method.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentMethodExporterFactory.CreateExporter">
            <summary>
            create a reader for instrument methods
            </summary>
            <returns>
            A factory to read instrument methods.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.InstrumentMethodReaderFactory">
            <summary>
            Provides a means of opening instrument methods.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentMethodReaderFactory.CreateReader">
            <summary>
            create a reader for instrument methods
            </summary>
            <returns>
            A factory to read instrument methods.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentMethodReaderFactory.ReadFile(System.String)">
            <summary>
            Read an instrument method.
            The file contents are returned. The file is not kept open.
            Because this reads a file, try catch is suggested around this activity.
            Caller must test IsError after opening to obtain any detected error conditions in the file.
            </summary>
            <param name="fileName">Name of file to read</param>
            <returns>Access to the contents of the file.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.InstrumentMethodWriterExtensions">
            <summary>
            Instrument Method Writer Extension Methods
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentMethodWriterExtensions.WriteSection(ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter,System.Byte[],System.String,System.String)">
            <summary>
            Creates a device section with the given device name and writes the binary data
            and text data to it. If the same device name is already exist, it will get
            overwritten.
            </summary>
            <param name="writer">The instrument method writer object.</param>
            <param name="binaryData">The instrument method in binary format.</param>
            <param name="textData">The instrument method in text string.</param>
            <param name="deviceName">The device name</param>
            <returns>True if </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.InstrumentMethodWriterFactory">
            <summary>
            This static factory class provides methods to create an instrument method writer for creating/updating an instrument method file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentMethodWriterFactory.CreateInstrumentMethodWriter(System.String)">
            <summary>
            Creates the instrument method writer with an input file name.<para/>
            The method should open a file if it exists and loads the data into internal structure and then close the file;
            otherwise, a new in-memory method file should be created (since it's in-memory, the data isn't persisted to a file yet). <para/>
            After editing the device method, caller should use either the "Save" or "SaveAs" method to persist the data to a file.
            </summary>
            <param name="fileName">Name of the instrument method file.</param>
            <returns>Instrument method writer object.</returns>
            <exception cref="T:System.ArgumentNullException">Null or empty file name argument.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentMethodWriterFactory.CreateInstrumentMethodWriter">
            <summary>
            Because there is no input file name, this method will create an "Unnamed" in-memory instrument method
            file (since it's in-memory, the data isn't persisted to a file yet).<para/>
            After editing the device method, caller should use the "SaveAs" method with a valid file name to save the data to a file.
            </summary>
            <returns>Instrument method writer object.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentMethodWriterFactory.CreateInstrumentMethodWriterFactory">
            <summary>
            Creates the instrument method writer factory.
            </summary>
            <returns>Instrument method writer factory object.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.InstrumentSelection">
            <summary>
            Defines which instrument is selected in a file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InstrumentSelection.#ctor(System.Int32,ThermoFisher.CommonCore.Data.Business.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.InstrumentSelection"/> class.
            </summary>
            <param name="instrumentIndex">Index of the instrument.</param>
            <param name="deviceType">Type of the device.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentSelection.InstrumentIndex">
            <summary>
            Gets the Stream number (instance of this instrument type).
            Stream numbers start from 1
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentSelection.DeviceType">
            <summary>
            Gets the Category of instrument
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.InstrumentTypeMap">
            <summary>
            A Metadata class represents key/value pair of Index and InstrumentType of an instrument in the raw file. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentTypeMap.Index">
            <summary>
            Gets or sets the index of the Instrument.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.InstrumentTypeMap.InstrumentType">
            <summary>
            Gets or sets the type of the instrument.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IntegratedChromatogram">
            <summary>
            Holds the results of integrating a single chromatogram.
            The results are a peak list and the chromatogram data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegratedChromatogram.Chromatogram">
            <summary>
            Gets or sets the data read from the raw file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegratedChromatogram.Peaks">
            <summary>
            Gets or sets the peaks found in the chromatogram
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegratedChromatogram.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IntegrationSettings">
            <summary>
            Setting for all peak integrators, plus selection of integrator to use
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.Avalon">
            <summary>
            Gets or sets settings for Avalon integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.Genesis">
            <summary>
            Gets or sets settings for genesis integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.Icis">
            <summary>
            Gets or sets settings for ICIS integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.PeakDetector">
            <summary>
            Gets or sets choice of integrator to use
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.ThermoFisher#CommonCore#Data#IIntegrationSettingsAccess#Avalon">
            <summary>
            Gets Avalon.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.ThermoFisher#CommonCore#Data#IIntegrationSettingsAccess#Genesis">
            <summary>
            Gets Genesis.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.ThermoFisher#CommonCore#Data#IIntegrationSettingsAccess#Icis">
            <summary>
            Gets ICIS settings.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IntegrationSettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IntegrationSettings"/> class. 
            Constructor, which should be used when not serializing, with the parameter set "true"
            </summary>
            <param name="initialize">
            When true: default events are added to the Avalon integrator.
            This is not needed when the object is about to be used by a serializer, as in that
            case the initial settings will already be in the serialized object
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.#ctor(ThermoFisher.CommonCore.Data.IIntegrationSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IntegrationSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IntegrationSettings"/> class.
            </summary>
            <param name="access">
            The access.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegrationSettings.Clone">
            <summary>
            Make a deep copy of this object
            </summary>
            <returns>
            deep copy of peak detection settings
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.EventKind">
            <summary>
            Events are either at the start of peak detection (Initial) or part way through the data (Timed)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventKind.Initial">
            <summary>
            Event value before any peak detection begins.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.EventKind.Timed">
            <summary>
            An event which occurs at a specific time in the chromatogram.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IntegratorEvent">
            <summary>
            Class for initial and timed events.
            Includes the event, any attributes and the event time.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegratorEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IntegratorEvent"/> class. 
            Create an empty event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegratorEvent.Opcode">
            <summary>
            Gets or sets the event which is occurring (for example "start cluster")
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegratorEvent.Kind">
            <summary>
            Gets or sets a value which determines if this is an initial value, or a timed event.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegratorEvent.Time">
            <summary>
            Gets or sets the event time.
            If this is a timed event, this is the time the event occurs, in minutes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegratorEvent.Value1">
            <summary>
            Gets or sets the first data value associated with the event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IntegratorEvent.Value2">
            <summary>
            Gets or sets the second data value associated with the event
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegratorEvent.SetInitialValue(ThermoFisher.CommonCore.Data.Business.EventCode,System.Int32)">
            <summary>
            Set the initial value of a timed event.
            This sets an event at time=0.
            </summary>
            <param name="eventCode">
            The event being programmed
            </param>
            <param name="value">
            initial value of the event
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IntegratorEvent.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>
            An exact copy of the current collection.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException">
            <summary>
            Exception filter string with invalid format
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException"/> class. 
            Basic analysis exception, no specified reason.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
            <param name="inner">
            Trapped inner exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException"/> class. 
            Construct an exception, with serialization.
            </summary>
            <param name="info">
            Data to serialize this object
            </param>
            <param name="context">
            Stream for serializing
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings">
            <summary>
            Parameters to the Ion Ratio confirmation algorithm, for a single mass. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings"/> class. 
            Constructor, which should be used when not serializing, with the parameter set "true"
            </summary>
            <param name="initialize">
            When true: default events are added to the Avalon integrator.
            This is not needed when the object is about to be used by a serializer, as in that
            case the initial settings will already be in the serialized object
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.Construct(System.Boolean)">
            <summary>
            The construct.
            </summary>
            <param name="initialize">
            The initialize.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.#ctor(ThermoFisher.CommonCore.Data.IIonRatioConfirmationMassSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.#ctor(ThermoFisher.CommonCore.Data.IIonRatioConfirmationTestAccess,ThermoFisher.CommonCore.Data.IIntegrationSettingsAccess,ThermoFisher.CommonCore.Data.ISmoothingSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings"/> class.
            </summary>
            <param name="access">
            The access to mass test.
            </param>
            <param name="integrationSettings">Peak integration settings</param>
            <param name="smoothingSettings">Smoothing settings</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.SmoothingData">
            <summary>
            Gets or sets the smoothing data for the ion ratio peak calculation.
            This is the only interaction with m_smoothingPoints.  This class is only
            a place holder.  Other  users of this class will fill this data item and
            use the settings.
            </summary>
            <value>The smoothing points.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.IntegrationSettings">
            <summary>
            Gets the integration choice item.  This is the only interaction 
            with m_integrationChoice. This class is only a place holder.  Other
            users of this class will fill this data item and use the settings.
            </summary>
            <value>The integration choice item.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.IntegrationChoiceItem">
            <summary>
            Gets or sets the integration choice item.  This is the only interaction 
            with m_integrationChoice. This class is only a place holder. Other
            users of this class will fill this data item and use the settings.
            </summary>
            <value>The integration choice item.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.ThermoFisher#CommonCore#Data#IIonRatioConfirmationMassSettingsAccess#SmoothingData">
            <summary>
            Gets the smoothing data for the ion ratio peak calculation.
            This is the only interaction with m_smoothingPoints.  This class is only
            a place holder.  Other  users of this class will fill this data item and
            use the settings.
            </summary>
            <value>The smoothing points.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.MZ">
            <summary>
            Gets or sets mass to be tested
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.TargetRatio">
            <summary>
            Gets or sets the Expected ratio 
            The ratio of the qualifier ion response to the component ion response. 
            Range: 0 - 200%
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.WindowPercent">
            <summary>
            Gets or sets a Window determine how accurate the match must be
            The ratio must be +/- this percentage.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.CopyTo(ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings)">
            <summary>
            Copy all settings from this object to another
            </summary>
            <param name="settings">
            Destination of copy
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.CopyFrom(ThermoFisher.CommonCore.Data.IIonRatioConfirmationMassSettingsAccess)">
            <summary>
            Copy all settings to this object from another
            </summary>
            <param name="massListSettings">
            Source of copy
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationMassSettings.Clone">
            <summary>
            Copies the base values.
            Creates a deep copy.
            </summary>
            <returns>
            Cloned object
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings">
            <summary>
            Ion Ratio Confirmation settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.QualifierIonCoelution">
            <summary>
            Gets or sets Qualifier Ion Coelution
            The time the retention time can vary from the expected retention time for the ion to still be considered confirmed.
            Units: minutes
            Bounds: 0.000 - 0.100  
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.Enable">
            <summary>
            Gets or sets a value indicating whether this Ion Ratio Confirmation is enabled.
            </summary>
            <value><c>true</c> if enable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.WindowsType">
            <summary>
            Gets or sets the type of the windows.
            </summary>
            <value>The type of the windows.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.QualifierIons">
            <summary>
            Gets or sets the qualifier ions.
            </summary>
            <value>The qualifier ions.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.ThermoFisher#CommonCore#Data#IIonRatioConfirmationSettingsAccess#QualifierIons">
            <summary>
            Gets the qualifier ions.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.#ctor(ThermoFisher.CommonCore.Data.IIonRatioConfirmationSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioConfirmationSettings"/> class.
            </summary>
            <param name="component">
            The component.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult">
            <summary>
            This class encapsulates the results of an ion ratio test for one ion.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.PassedIonCoelutionTest">
            <summary>
            Gets or sets a value indicating whether the coelution test has passed for this ion
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.MeasuredCoelution">
            <summary>
            Gets or sets the results of the coelution test
            targetCompoundPeak.Apex.RetentionTime - ion.Apex.RetentionTime;
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.MeasuredRatio">
            <summary>
            Gets or sets the measured ion ratio, as a percentage
            <code>(qualifierIonResponse * 100) / targetCoumpoundResponce</code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.AbsWindow">
            <summary>
            Gets or sets the Window in absolute % used to bound this test
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.PassedIonRatioTest">
            <summary>
            Gets or sets a value indicating whether the ratio test passed for this ion
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.Mass">
            <summary>
            Gets or sets the Mass which was tested
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.DetectedPeak">
            <summary>
            Gets or sets The peak which was found in the IRC chromatogram
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current Result.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult.#ctor(ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.IonRatioTestResult"/> class. 
            Copy constructor
            </summary>
            <param name="access">
            Object to copy
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IReaction">
            <summary>
            The Reaction interface.
            Defines a reaction for fragmenting an ion (an MS/MS stage).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.PrecursorMass">
            <summary>
            Gets the precursor mass (mass acted on)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.CollisionEnergy">
            <summary>
            Gets the collision energy of this reaction
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.IsolationWidth">
            <summary>
            Gets the isolation width of the precursor mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.PrecursorRangeIsValid">
            <summary>
            Gets a value indicating whether precursor range is valid.
            If this is true, then <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.PrecursorMass"/> is still the center of
            the range, but the values <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.FirstPrecursorMass"/> and <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.LastPrecursorMass"/>
            define the limits of the precursor mass range
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.FirstPrecursorMass">
            <summary>
            Gets the start of the precursor mass range (only if <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.PrecursorRangeIsValid"/>)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.LastPrecursorMass">
            <summary>
            Gets the end of the precursor mass range (only if <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.PrecursorRangeIsValid"/>)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.CollisionEnergyValid">
            <summary>
            Gets a value indicating whether collision energy is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.ActivationType">
            <summary>
            Gets the activation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.MultipleActivation">
            <summary>
            Gets a value indicating whether this is a multiple activation.
            In a table of reactions, a multiple activation is a second, or further,
            activation (fragmentation method) applied to the same precursor mass.
            Precursor mass values should be obtained from the original activation, and may not
            be returned by subsequent multiple activations.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IReaction.IsolationWidthOffset">
            <summary>
            Gets the isolation width offset.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IScanReader">
            <summary>
            Methods to read a scan from a file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IScanReader.GetScanFromScanNumber(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Int32)">
            <summary>
            Create a scan object from a file and a scan number.
            </summary>
            <param name="rawData">
            File to read from
            </param>
            <param name="scanNumber">
            Scan number to read
            </param>
            <returns>
            The scan read, or null of the scan number if not valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.IScanReader.GetScanAtTime(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Double)">
            <summary>
            Create a scan object from a file and a retention time.
            </summary>
            <param name="rawData">
            File to read from
            </param>
            <param name="time">
            time of Scan number to read
            </param>
            <returns>
            The scan read, or null if no scan was read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Label">
            <summary>
            Will be used with Channel labels. Currently not implemented. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Label"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Label.#ctor(ThermoFisher.CommonCore.Data.Business.Label)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Label"/> class.
            </summary>
            <param name="source">The source to copy the values from.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Label.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Label.Text">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.LabelPeak">
            <summary>
            Label Peak Information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LabelPeak.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.LabelPeak"/> class. 
            Default Constructor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LabelPeak.Mass">
            <summary>
            Gets or sets mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LabelPeak.Intensity">
            <summary>
            Gets or sets intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LabelPeak.Resolution">
            <summary>
            Gets or sets resolution.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LabelPeak.Baseline">
            <summary>
            Gets or sets base Line.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LabelPeak.Noise">
            <summary>
            Gets or sets noise.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LabelPeak.Charge">
            <summary>
            Gets or sets charge.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LabelPeak.Flag">
            <summary>
            Gets or sets Peak Options Flag.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LabelPeak.SignalToNoise">
            <summary>
            Gets or sets the signal to noise.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.LevelReplicates">
            <summary>
            This class defines table of replicates for a calibration level
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.LevelReplicates"/> class. 
            Default construction of replicates
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.#ctor(ThermoFisher.CommonCore.Data.ICalibrationLevelAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.LevelReplicates"/> class. 
            Create a new replicate table for a calibration level.
            </summary>
            <param name="level">
            Level to base this replicate table on
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.#ctor(ThermoFisher.CommonCore.Data.Business.ICalibrationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.LevelReplicates"/> class. 
            Create a new replicate table for a calibration level.
            </summary>
            <param name="level">
            Level to base this replicate table on
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LevelReplicates.ReplicateCollection">
            <summary>
            Gets or sets the Replicate Collection.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LevelReplicates.Replicates">
            <summary>
            Gets the number of replicates for this level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LevelReplicates.ThermoFisher#CommonCore#Data#ILevelReplicatesAccess#ReplicateCollection">
            <summary>
            Gets the replicates of this calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LevelReplicates.Item(System.Int32)">
            <summary>
            array access operator to return Replicate array element.
            </summary>
            <param name="index">Index into the array</param>
            <returns>The requested replicate</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LevelReplicates.ThermoFisher#CommonCore#Data#ILevelReplicatesAccess#Item(System.Int32)">
            <summary>
            array access operator to return Replicate array element.
            </summary>
            <param name="index">Index into the array</param>
            <returns>The requested replicate</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.AddReplicate(ThermoFisher.CommonCore.Data.Business.Replicate)">
            <summary>
            Add a replicate to the list of replicates.
            If the supplied replicate has keys which match a
            keyed item in the current collection, then the matching record is replaced.
            </summary>
            <param name="replicate">An additional replicate of this calibration level</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.AddReplicates(ThermoFisher.CommonCore.Data.ItemCollection{ThermoFisher.CommonCore.Data.Business.Replicate})">
            <summary>
            Add a replicate collection to the list of replicates.
            If any of the supplied replicates has keys which match a
            keyed item in the current collection, then the matching record is replaced.
            </summary>
            <param name="collection">The collection to add</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.AddReplicates(ThermoFisher.CommonCore.Data.Business.LevelReplicates)">
            <summary>
            Add all replicates from this collection to the list of replicates.
            This addition only succeeds if the collections have the same calibration level
            If any of the supplied replicates has keys which match a
            keyed item in the current collection, then the matching record is replaced.
            </summary>
            <param name="levelReplicates">The replicates to add</param>
            <returns>
            true if the collection was added,
            false if the calibration levels do not match.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current sample.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.CountReplicates(System.Int32@,System.Int32@)">
            <summary>
            Count all included/excluded replicates.
            <para>
                The included and excluded counts are incremented by the number of included
                and excluded points. These counters are not set to zero,
                allowing this method to be called repeatedly, for example to count
                replicates for all levels.
            </para>
            </summary>
            <param name="included">(updated) included counter</param>
            <param name="excluded">(updated) excluded counter</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.DeleteAllReplicates">
            <summary>
            delete all replicates from the list of replicates.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.FindReplicateWithAmountAndResponse(System.Double,System.Double)">
            <summary>
            Finds the replicate with amount and response.
            </summary>
            <param name="amount">Amount to match</param>
            <param name="response">Response to match</param>
            <returns>the matching replicate</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.FindReplicateWithKey(System.String)">
            <summary>
            Find the first replicate which matches the given key, and has no second key
            </summary>
            <param name="key">Key to find</param>
            <returns>Found replicate, or null</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.FindReplicateWithKeys(System.String,System.String)">
            <summary>
            Find the replicate which matches a given key and <paramref name="peakKey" />
            </summary>
            <param name="key">First key (for example file or sample name)</param>
            <param name="peakKey">Key for this peak (for example component name)</param>
            <returns>The replicate which matches a given key and peak key, or null if not found.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.FindReplicateWithSameKeys(ThermoFisher.CommonCore.Data.Business.Replicate)">
            <summary>
            Find the replicate which matches a the keys in a given replicate
            </summary>
            <param name="replicate">replicate to match</param>
            <returns>The matching replicate, or null if not found.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.GetResponseHighBound">
            <summary>
            Return the highest included response. Any excluded points are ignored.
            </summary>
            <returns>The highest response included in the calibration curve</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.GetResponseLowBound">
            <summary>
            Return the lowest included response. Any excluded points are ignored.
            </summary>
            <returns>The lowest response included in the calibration curve</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LevelReplicates.CountReplicates(ThermoFisher.CommonCore.Data.IReplicate,System.Int32@,System.Int32@)">
            <summary>
            Update the count of included and excluded replicates.
            <para>
                The included counter is incremented if this is an included
                point, otherwise the excluded counter is incremented. These counters are not set to zero,
                allowing this method to be called repeatedly, for example to count
                replicates for all calibration levels.
            </para>
            </summary>
            <param name="replicate">Replicate to count</param>
            <param name="included">(updated) included counter</param>
            <param name="excluded">(updated) excluded counter</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.LocatedPeak">
            <summary>
            The results of finding a single peak from a list.
            This includes the peak that is found, how it was found,
            and in the case of spectral searching, the spectral search results.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LocatedPeak.DetectedPeak">
            <summary>
            Gets or sets the peak which best matches the location rules.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LocatedPeak.ThermoFisher#CommonCore#Data#ILocatedPeakAccess#DetectedPeak">
            <summary>
            Gets the peak which best matches the location rules.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LocatedPeak.Method">
            <summary>
            Gets or sets a record of how this peak was found.
            The find results are only valid when this is set to "Spectrum".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LocatedPeak.ValidRTReference">
            <summary>
            Gets or sets a value indicating whether RT adjustments could be made to the RT reference.
            This flag is only meaningful when RT reference adjustments are made based on
            a reference peak (see the locate class).
            If a valid reference peak is supplied, then the expected RT can be adjusted based on the reference.
            If no reference peak is found (a null peak) then the expected RT cannot be adjusted, and this flag will be false.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LocatedPeak.FindResults">
            <summary>
            Gets or sets the Find Results.
            When using spectrum LocateMethod this will contain the best matching peaks and find scores.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LocatedPeak.ThermoFisher#CommonCore#Data#ILocatedPeakAccess#FindResults">
            <summary>
            Gets the peak which best matches the location rules.
            </summary>
            <returns>The results for this peak, or empty list</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LocatedPeak.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.LocatedPeak"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LocatedPeak.#ctor(ThermoFisher.CommonCore.Data.ILocatedPeakAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.LocatedPeak"/> class. 
            Copy constructor
            </summary>
            <param name="access">
            The object to copy
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LocatedPeak.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current collection.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.LocatePeakResult">
            <summary>
            Holds the results of locating a single peak from chromatogram.
            The results are a <see cref="T:ThermoFisher.CommonCore.Data.Business.LocatedPeak"/> and the chromatogram data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LocatePeakResult.Chromatogram">
            <summary>
            Gets or sets the data read from the raw file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LocatePeakResult.Peak">
            <summary>
            Gets or sets the peaks found in the chromatogram
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LocatePeakResult.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.LocatePeakResult.CopyTo(ThermoFisher.CommonCore.Data.Business.LocatePeakResult)">
            <summary>
            Copy these results
            </summary>
            <param name="results">Object to fill with the results</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.LogEntry">
            <summary>
            Represents a single log.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LogEntry.Labels">
            <summary>
            Gets or sets the labels in this log.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LogEntry.Values">
            <summary>
            Gets or sets the values in this log.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.LogEntry.Length">
            <summary>
            Gets or sets the length of the log.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ManualBaseline">
            <summary>
            Information returned when a peak baseline is manually adjusted on a chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ManualBaseline.LeftTime">
            <summary>
            Gets or sets x (time) of new baseline start point (left of peak)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ManualBaseline.RightTime">
            <summary>
            Gets or sets x (time) of new baseline end point (right of peak)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ManualBaseline.LeftIntensity">
            <summary>
            Gets or sets y (intensity) of new baseline start point (left of peak)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ManualBaseline.RightIntensity">
            <summary>
            Gets or sets y (intensity) of new baseline end point (right of peak)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ManualBaseline.Clone">
            <summary>
            Copy this object
            </summary>
            <returns>copy of object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MassOptions">
            <summary>
            Contains the options for displaying and calculating the masses.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MassOptions.IntialTolerance">
            <summary>
            The initial tolerance.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MassOptions.IntialPrecision">
            <summary>
            The initial precision.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.MassOptions.IntialToleranceUnits">
            <summary>
            The initial tolerance units.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MassOptions"/> class. 
            Default Constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassOptions.#ctor(System.Double,ThermoFisher.CommonCore.Data.ToleranceUnits,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MassOptions"/> class. 
            Parameter Constructor
            </summary>
            <param name="tolerance">
            tolerance value
            </param>
            <param name="toleranceUnits">
            units of tolerance value
            </param>
            <param name="precision">
            precision (decimal places)
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassOptions.#ctor(ThermoFisher.CommonCore.Data.IMassOptionsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MassOptions"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassOptions.Tolerance">
            <summary>
            Gets or sets the tolerance value.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassOptions.Precision">
            <summary>
            Gets or sets the precision (decimal places).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassOptions.ToleranceUnits">
            <summary>
            Gets or sets the tolerance units.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassOptions.ToleranceString">
            <summary>
            Gets the tolerance string of the current toleranceUnits setting.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassOptions.GetToleranceString(ThermoFisher.CommonCore.Data.ToleranceUnits)">
            <summary>
            Gets the tolerance string from the enumeration strings resource.
            </summary>
            <param name="toleranceUnits">
            The tolerance units.
            </param>
            <returns>
            The tolerance units as a string.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassOptions.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current object.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassOptions.GetToleranceAtMass(System.Double)">
            <summary>
            Get the tolerance window around a specific mass
            </summary>
            <param name="mass">
            Mass about which window is needed
            </param>
            <returns>
            The distance (in amu) from the mass which is within tolerance.
            For example: myWindow=GetToleranceAtMass(myMass);
            accept data between "myMass-myWindow" and "myMass+myWindow"
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MassSpecGenericHeaders">
            <summary>
            Contains the generic header definitions of the Status log header, Trailer extra header and Tune header.
            If caller is not intended to use any one of these headers, caller should either pass a null argument or zero length array.<para/>
            i.e. TrailerExtraHeaders = null or TrailerExtraHeaders = new IHeaderItem[0]<para/>
            </summary>
            <seealso cref="T:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecGenericHeaders" />
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassSpecGenericHeaders.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MassSpecGenericHeaders"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassSpecGenericHeaders.StatusLogHeader">
            <summary>
            Gets or sets the status log headers.
            Optional property, it has a default value of no header items (zero length array)
            </summary>
            <value>
            The status log headers.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassSpecGenericHeaders.TrailerExtraHeader">
            <summary>
            Gets or sets the trailer extra headers.
            Optional property, it has a default value of no header items (zero length array)
            </summary>
            <value>
            The trailer extra headers.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassSpecGenericHeaders.TuneHeader">
            <summary>
            Gets or sets the tune headers.
            Optional property, it has a default value of no header items (zero length array)
            </summary>
            <value>
            The tune headers.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MassSpecRunHeaderInfo">
            <summary>
            Information about the mass spec device data stream
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassSpecRunHeaderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MassSpecRunHeaderInfo"/> class.
            Default field values:
            Comment1 = "";
            Comment2 = "";
            ExpectedRunTime = 0;
            MassResolution = 0.5;
            Precision = 2;
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassSpecRunHeaderInfo.ExpectedRunTime">
            <summary>
            Gets or sets the expected run time. The value should be greater than zero.
            The expected run time. All devices MUST do this so that the real-time update can display a sensible Axis.
            </summary>
            <value>
            The expected run time.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassSpecRunHeaderInfo.MassResolution">
            <summary>
            Gets or sets the mass resolution (width of the half peak).
            Optional property, it has a default value of 0.5.
            </summary>
            <value>
            The mass resolution.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassSpecRunHeaderInfo.Comment1">
            <summary>
            Gets or sets the first comment about this data stream.
            Optional property, it has a default value of empty string.
            The comment is for "Sample Name" in Chromatogram view title (max 39 chars).
            </summary>
            <value>
            The comment1.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassSpecRunHeaderInfo.Comment2">
            <summary>
            Gets or sets the second comment about this data stream.
            Optional property, it has a default value of empty string.
            This comment is for "Comment" in Chromatogram view title (max 63 chars).
            </summary>
            <value>
            The comment2.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassSpecRunHeaderInfo.Precision">
            <summary>
            Gets or sets the number of digits of precision suggested for formatting masses.
            Optional property, it has a default value of 2.
            </summary>
            <value>
            The precision.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter">
            <summary>
            Class which includes the coefficients for
            mass calibration from a particular scan, and means to convert between mass and frequency
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.Coefficient1">
            <summary>
            Gets or sets the coefficient 1.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.Coefficient2">
            <summary>
            Gets or sets the coefficient 2.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.Coefficient3">
            <summary>
            Gets or sets the coefficient 3.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.BaseFrequency">
            <summary>
            Gets or sets the base frequency.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.DeltaFrequency">
            <summary>
            Gets or sets the delta frequency.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.ConvertFrequenceToMass(System.Int32)">
            <summary>
            Converts the given frequency to it's corresponding mass.
            </summary>
            <param name="sample">sample number to convert</param>
            <returns>converted mass.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.ConvertMassToFrequency(System.Double)">
            <summary>
            Converts the given mass to frequency.
            </summary>
            <param name="mass">The mass to convert</param>
            <returns>converted frequency</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.HighestMass">
            <summary>
            Gets or sets the highest mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter.SegmentRange">
            <summary>
            Gets or sets the (largest) segment range of the scans processed.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MathHelpers">
            <summary>
            General math routines
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MathHelpers.CalculateRealFFT(System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the discrete Fourier transform of a set of  real-valued data points.
            <para>
            Calculates the FFT of a set of dataPointsCount real-valued data points.
            The routine replaces the input data stored in data[0..dataPointsCount-1]
            by the positive frequency half of its complex Fourier transform.
            The real-valued first and last components of the complex transform 
            are returned as elements data[0] and data[1], respectively.
            dataPointsCount MUST be a power of 2. 
            This routine also calculates the inverse transform of a complex 
            data array if it is the transform of real data (the result in this
            case must be multiplied with 2/n).
            </para>
            </summary>
            <param name="data">
            The input array of real-valued data points.
            </param>
            <param name="dataPointsCount">
            The number of data points in the array (must be a power of 2).
            </param>
            <param name="sign">
            Flag indicating to calculate the FFT (sign=1) or the inverse FFT (sign=-1).
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MathHelpers.CalculateFFT(System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the discrete Fourier transform of a set of data points.
            <para>
            Calculates the discrete Fourier transform of a set of data points.
            The routine replaces data[0..2*dataPointsCount-1] by its discrete Fourier
            transform, if sign is input as 1; or replaces data[0..2*dataPointsCount-1]
            by dataPointsCount times its inverse discrete Fourier transform, if sign
            is input as -1.
            data is a complex array of length dataPointsCount or (i.e. dataPointsCount real/imaginary 
            pairs, which make up dataPointsCount array elements), equivalently, a real
            array of length 2*dataPointsCount. 
            dataPointsCount MUST be an integer power of 2.
            </para>
            </summary>
            <param name="data">
            Data to transform, as real and imaginary pairs (index 0= real, 1=imaginary etc.)
            </param>
            <param name="dataPointsCount">
            Number of valid points in the data.
            </param>
            <param name="sign">Sign of the data
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MathHelpers.Swap(System.Double[],System.Int32,System.Int32)">
            <summary>
            Swap array elements
            </summary>
            <param name="data">
            The array to swap.
            </param>
            <param name="source">
            The source
            </param>
            <param name="dest">
            The destination.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MSAnalogInstrument">
            <summary>
            Encapsulates information about MSAnalogInstrument.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MSAnalogInstrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MSAnalogInstrument"/> class.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MSInstrument">
            <summary>
            Represents the MassSpec instrument. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MSInstrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MSInstrument"/> class.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MsInstrumentData">
            <summary>
            The MS instrument data.
            This class provides a default implementation of IMsInstrumentData
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsInstrumentData.CentroidData">
            <summary>
            Gets or sets the centroid data. It's a second stream with profile scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsInstrumentData.EventData">
            <summary>
            Gets or sets the event data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsInstrumentData.Frequencies">
            <summary>
            Gets or sets the frequencies (for LT/FT).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsInstrumentData.NoiseData">
            <summary>
            Gets or sets the noise data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsInstrumentData.ScanData">
            <summary>
            Gets or sets or sets the scan data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsInstrumentData.StatisticsData">
            <summary>
            Gets or sets the statistics data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MsInstrumentData.FromScanAndEvent(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            Initialize MS Instrument data from a scan and a scan event.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <param name="scanEvent">
            The scan event.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.MsInstrumentData"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MsOrderTable">
            <summary>
            Class to manage the MS order information in a filter.
            Simplifies the reaction tables into one entry per MS/MS stage.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MsOrderTable.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MsOrderTable"/> class. 
            Construct an MS Order table from a filter or event
            </summary>
            <param name="filter">
            filter or event to analyze
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsOrderTable.Stages">
            <summary>
            Gets the reaction data for all MS/MS stages
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MsOrderTable.CreateReactions(ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase)">
            <summary>
            create reactions table
            </summary>
            <param name="filter">Data from raw file</param>
            <returns>Table of reactions</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MsOrderTable.CreateStages(ThermoFisher.CommonCore.Data.Business.IReaction[])">
            <summary>
            Create a list of MS/MS stages (one per parent)
            </summary>
            <param name="reactions">Reactions, which may have multiple per stage</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MsOrderTable.FormatMsOrder(ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase)">
            <summary>
            format the MS order.
            </summary>
            <param name="scanFilter">
            The scan filter.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MsReaction">
            <summary>
            The MS reaction. 
            This is reaction to fragment a precursor mass.
            Reactions are used for MS/MS, Parent and Neutral scan types.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.PrecursorMass">
            <summary>
            Gets or sets the precursor mass (mass acted on).
            For a product ion scan, this would be a parent mass.
            For a parent ion scan, this would be the fragment mass.
            If this is a multiple reaction, this value is not used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.CollisionEnergy">
            <summary>
            Gets or sets the collision energy of this reaction
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.IsolationWidth">
            <summary>
            Gets or sets the isolation width of the precursor mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.PrecursorRangeIsValid">
            <summary>
            Gets or sets a value indicating whether precursor range is valid.
            If this is true, then <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.PrecursorMass"/> is still the center of
            the range, but the values <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.FirstPrecursorMass"/> and <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.LastPrecursorMass"/>
            define the limits of the precursor mass range
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.FirstPrecursorMass">
            <summary>
            Gets or sets the start of the precursor mass range (only if <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.PrecursorRangeIsValid"/>)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.LastPrecursorMass">
            <summary>
            Gets or sets the end of the precursor mass range (only if <see cref="P:ThermoFisher.CommonCore.Data.Business.IReaction.PrecursorRangeIsValid"/>)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.CollisionEnergyValid">
            <summary>
            Gets or sets a value indicating whether collision energy is valid.
            When not valid "CollisionEnergy" should not be tested or displayed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.ActivationType">
            <summary>
            Gets or sets the activation type.
            This defines how an ion is fragmented.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.MultipleActivation">
            <summary>
            Gets or sets a value indicating whether this is a multiple activation.
            In a table of reactions, a multiple activation is a second, or further,
            activation (fragmentation method) applied to the same precursor mass.
            Precursor mass values should be obtained from the original activation, and may not
            be returned by subsequent multiple activations.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsReaction.IsolationWidthOffset">
            <summary>
            Gets or sets the isolation width offset.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.MsStage">
            <summary>
            Defines one stage of MS/MS, which may have multiple reactions.
            For a parent or neutral scan, one stage is required.
            For an MS/MS scan, one stage per MS/MS level is needed.
            For example: define 2 stages for an MS3 experiment.
            Each stage must have one or more reactions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsStage.Reactions">
            <summary>
            Gets or sets the set of reactions done at an MS stage.
            There must be at least one reaction for a valid stage.
            The first reaction of a stage must not have the MultipleActivation property set.
            Subsequent reactions of a stage must have the MultipleActivation property set.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.MsStage.PrecursorMass">
            <summary>
            Gets the precursor mass for this MS/MS stage.
            This is the precursor mass of the first reaction, and is defined as "0"
            if no reactions have been added yet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.MsStage.#ctor(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.IReaction})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.MsStage"/> class. 
            Construct an MS stage from a list of reactions
            </summary>
            <param name="reactions">
            Reactions for this stage
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.NamespaceDoc">
            <summary>
            Contains objects containing data, related to "MS data systems".
            Used as an interchange between various common core DLLs.
            Several types are just "default get/set" implementations of interfaces
            Some types have business logic in them.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.NeutralChromatogramPointRequest">
            <summary>
            A request for a Neutral loss chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.NeutralChromatogramPointRequest.Tolerance">
            <summary>
            Gets or sets tolerance applied to precursor mass
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NeutralChromatogramPointRequest.DataForPoint(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Find the data for one scan.
            </summary>
            <param name="scanWithHeader">
            The scan, including header and scan event.
            </param>
            <returns>
            The chromatogram point value for this scan.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException">
            <summary>
            Exception for data reading. Thrown when a newer file format is detected.
            This is usually because an appliction has been compiled against an older generation file reader DLL.
            The application must be upgraded to use newer tools, which can decode this file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException"/> class. 
            Basic analysis exception, no specified reason.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
            <param name="inner">
            Trapped inner exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NewerFileFormatException"/> class. 
            Construct an exception, with serialization.
            </summary>
            <param name="info">
            Data to serialize this object
            </param>
            <param name="context">
            Stream for serializing
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.NoiseAndBaseline">
            <summary>
            Defines noise and baseline at a given mass
            (Part of support for reading orbitrap data)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.NoiseAndBaseline.Mass">
            <summary>
            Gets or sets the mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.NoiseAndBaseline.Noise">
            <summary>
            Gets or sets the noise.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.NoiseAndBaseline.Baseline">
            <summary>
            Gets or sets the baseline.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">
            <summary>
            Exception for raw data reading. Called when a Device specific method is made
            without first selecting a Device. For example: requesting a chromatogram
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException"/> class. 
            Basic analysis exception, no specified reason.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
            <param name="inner">
            Trapped inner exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException"/> class. 
            Construct an exception, with serialization.
            </summary>
            <param name="info">
            Data to serialize this object
            </param>
            <param name="context">
            Stream for serializing
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">
            <summary>
            Exception for raw data reading. Called when a MS specific method is made
            without first selecting the MS data.
            For example: Requesting "scan filters" from UV data.
            These should all be handled in the code (never intentionally thrown to caller)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException"/> class. 
            Basic analysis exception, no specified reason.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
            <param name="inner">
            Trapped inner exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException"/> class. 
            Construct an exception, with serialization.
            </summary>
            <param name="info">
            Data to serialize this object
            </param>
            <param name="context">
            Stream for serializing
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory">
            <summary>
            Factory to create objects which make MS chromatograms in parallel.
            Chromatograms are delivered on threads, such that action methods to perform
            peak integration etc. can be performed in parallel, and while other chromatograms,
            if they end at a later time, are still being generated from the raw file
            Chromatograms are generated from scans read from the raw file.
            Each scan is read only once.
            Data from the scans is reduced to mass and intensity information only, to reduce memory consumed.
            If the data is "FT format" with a set of supplied centroids, then the data is generated from
            the centroids only (no profiles are read from the raw file).
            If the data is not FT format then the regular "segmented scan" data is used.
            Scans are read in increasing scan number order.
            Scans which are outside of the required ranges to build the chromatograms are not read.
            Methods to "get chromatograms" are not called directly on supplied raw data interfaces.
            This also supports async reading from multiple raw files, as the returned information is a thread array,
            which the caller must sync (with "WaitAll") to complete operations on a given file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.FromRawData(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator,ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Attach data sources to a Chromatogram batch generator (for MS chromatograms),
            based in data available via IRawDataPlus.
            This method has an IO overhead, as it configures a ChromatogramBatchGenerator, with a table
            of "scan number and RT", which is read from the raw data.
            It requires that the "rawData" interface supplied has an efficient implementation of RetentionTimeFromScanNumber.
            </summary>
            <param name="generator">
            Tool to generate chromatograms
            </param>
            <param name="rawData">
            The raw data.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if there is no available MS data.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.MsScanList(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Create the list of all MS scans.
            </summary>
            <param name="data">
            The data.
            </param>
            <returns>
            The list of scan headers.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.ScanWithSimpleDataLocal">
            <summary>
            Defines an implementation of "IScanWithSimpleData",
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.ScanWithSimpleDataLocal.ScanEvent">
            <summary>
            Gets or sets the scan event.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.ScanWithSimpleDataLocal.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.FastScanFromRawData">
            <summary>
            The fast scan from raw data class, which supplies code needed for the
            chromatogram batch generator to get from the IRawDataPlus interface.
            Enhanced version uses methods which only return mass and intensity data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.FastScanFromRawData.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.FastScanFromRawData"/> class.
            </summary>
            <param name="rawData">
              The raw data.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ParallelChromatogramFactory.FastScanFromRawData.Reader(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader)">
            <summary>
            The scan reader.
            </summary>
            <param name="scanIndex">
            The scan index, to the available scans.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PDAInstrument">
            <summary>
            Encapsulates information about PDA Instrument.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PDAInstrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PDAInstrument"/> class.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PdaScanIndex">
            <summary>
            Defines the PDA scan header and wavelength settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PdaScanIndex.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PdaScanIndex.TIC">
            <summary>
            Gets or sets the TIC.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PdaScanIndex.LongWavelength">
            <summary>
            Gets or sets the long wavelength.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PdaScanIndex.ShortWavelength">
            <summary>
            Gets or sets the short wavelength.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PdaScanIndex.WavelengthStep">
            <summary>
            Gets or sets the wave length step.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PdaScanIndex.AUScale">
            <summary>
            Gets or sets the Absorbance Unit's scale.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Peak">
            <summary>
            This class encapsulates a peak. (the result of peak detection)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Peak.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Peak"/> class. 
            default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Peak.#ctor(ThermoFisher.CommonCore.Data.IPeakAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Peak"/> class. 
            copy constructor
            </summary>
            <param name="copyFromPeak">
            The peak to copy from.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Peak.CreateFromPeak(ThermoFisher.CommonCore.Data.IPeakAccess)">
            <summary>
            Create by copying a peak.
            </summary>
            <param name="copyFromPeak">
            The peak to copy.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.MergePeaks">
            <summary>
            Gets or sets the list of peaks that have been merged
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.MergedPeaks">
            <summary>
            Gets the list of peaks that have been merged
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.NoiseResult">
            <summary>
            Gets a value which determines how signal to noise has been calculated.
            When this returns <see cref="T:ThermoFisher.CommonCore.Data.NoiseClassification"/>.Value, a numeric value can
            be obtained from <see cref="P:ThermoFisher.CommonCore.Data.Business.Peak.SignalToNoise"/>.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.SignalToNoise">
            <summary>
            Gets the signal to noise ratio. If <see cref="P:ThermoFisher.CommonCore.Data.Business.Peak.NoiseResult"/> is <see cref="T:ThermoFisher.CommonCore.Data.NoiseClassification"/>.Value, then this property returns the signal to noise ratio.
            Otherwise this should not be used. Use <see cref="T:ThermoFisher.CommonCore.Data.EnumFormat"/>.ToString(<see cref="P:ThermoFisher.CommonCore.Data.Business.Peak.NoiseResult"/>) instead.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Left">
            <summary>
            Gets or sets the position, height, baseline at left limit
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Apex">
            <summary>
            Gets or sets the position, height, baseline  at peak apex
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Right">
            <summary>
            Gets or sets the position, height, baseline at right limit
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Area">
            <summary>
            Gets or sets the Integrated peak area
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.BasePeakMass">
            <summary>
            Gets or sets the Mass of the base peak from the apex scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.MassToCharge">
            <summary>
            Gets or sets the Mass to charge ratio of peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.ExpectedRT">
            <summary>
            Gets or sets the expected RT after making any RT adjustments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Noise">
            <summary>
            Gets or sets the Noise measured in detected peak (for signal to noise calculation)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.RmsNoise">
            <summary>
            Gets or sets a value indicating whether the "Noise" value was calculated by an RMS algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.ScanAtApex">
            <summary>
            Gets or sets the scan number at peak apex.
            The apex of the peak corresponds to a particular signal.
            This gives the scan number of that signal.
            If no scan numbers are sent with the peak detection signal, then
            the scan number = "signal index at apex +1".
            Note that there is no guarantee that left and right edges will always be exactly on a scan, even
            though most peak detectors behave that way, so this is not added as a property of <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakPoint"/>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Name">
            <summary>
            Gets or sets a Name for this peak (for example, compound name)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Scans">
            <summary>
            Gets or sets the number of scans integrated
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.LeftEdge">
            <summary>
            Gets or sets a value which describes why the peak started. It is only set by the Genesis Detector.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.RightEdge">
            <summary>
            Gets or sets a value which describes why the peak ended. It is only set by the Genesis Detector.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Valid">
            <summary>
            Gets or sets a value indicating whether this is a valid peak.
            Peaks are assumed to have valid data, but may be marked invalid by
            an integrator, if failing certain tests.
            Invalid peaks should never be returned to a calling application
            by an integrator algorithm.
            Invalid peaks must never be: Drawn in a plot, listed in a report etc.
            An application should indicate "Peak not found" when a peak is flagged as "Invalid".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Saturated">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ThermoFisher.CommonCore.Data.Business.Peak"/> is saturated.
            </summary>
            <value>true when integration/mass range has saturation.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.ValleyDetect">
            <summary>
            Gets or sets a value indicating whether valley detection was used when detecting this peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Direction">
            <summary>
            Gets or sets the Direction of peak (Positive or Negative)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Fit">
            <summary>
            Gets or sets the chi-squared error in fitting the peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.FittedWidth">
            <summary>
            Gets or sets the calculated width, or 'gamma_r'.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.FittedIntensity">
            <summary>
            Gets or sets the calculated intensity, or 'gamma_A'.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.FittedRT">
            <summary>
            Gets or sets the calculated position, or 'gamma_t0'.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.FittedAsymmetry">
            <summary>
            Gets or sets the calculated fourth parameter for gamma (gamma_M) or EMG functions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.FittedFunction">
            <summary>
            Gets or sets the peak shape used in the fitting procedure.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.FittedPoints">
            <summary>
            Gets or sets the number of data points used in the fit.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Peak.Baseline(System.Double)">
            <summary>
            Find baseline height for a peak at specified time
            </summary>
            <param name="retentionTime">Retention time to use for interpolation</param>
            <returns>Interpolated baseline height at <paramref name="retentionTime"/></returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.NegativeDataPermitted">
            <summary>
            Gets or sets a value indicating whether calculated values (such as height) may return negative numbers.
            If false: negative calculated numbers are returned as 0
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.Purity">
            <summary>
            Gets or sets peak Purity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.PurityLowTime">
            <summary>
            Gets Low time from peak purity calculation
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.PurityHighTime">
            <summary>
            Gets High time from peak purity calculation
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.AmountLow">
            <summary>
            Gets or sets the Low value of the retention time range, after a peak purity calculation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Peak.AmountHigh">
            <summary>
            Gets or sets the High value of the retention time range, after a peak purity calculation..
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Peak.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current Peak.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings">
            <summary>
            Class to hold chromatogram settings of a peak
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings"/> class. 
            Constructor for PeakChromatogramSettings
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.#ctor(ThermoFisher.CommonCore.Data.IPeakChromatogramSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings"/> class. 
            Construct this object from read only interface
            </summary>
            <param name="settings">The settings to copy from
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.Filter">
            <summary>
            Gets or sets the scan filter.
            This determines which scans are included in the chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#ChroSettings">
            <summary>
            Gets the chromatogram settings.
            This defines how data for a chromatogram point is constructed from a scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#ChroSettings2">
            <summary>
            Gets the chromatogram settings
            When there is a trace operator set,
            This defines how data for a chromatogram point is constructed from a scan for the chromatogram
            to be added or subtracted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.ChroSettings">
            <summary>
            Gets or sets the chromatogram settings.
            This defines how data for a chromatogram point is constructed from a scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.ChroSettings2">
            <summary>
            Gets or sets the chromatogram settings
            When there is a trace operator set,
            This defines how data for a chromatogram point is constructed from a scan for the chromatogram
            to be added or subtracted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.Instrument">
            <summary>
            Gets or sets the device type.
            This defines which data stream within the raw file is used. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.InstrumentIndex">
            <summary>
            Gets the instrument index (starting from 1).
            For example: "3" for the third UV detector.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.TraceOperator">
            <summary>
            Gets or sets the trace operator.
            If the operator is not "None" then a second chromatogram can be added to or subtracted from the first.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakChromatogramSettings.Clone">
            <summary>
            Create a deep copy of this object
            </summary>
            <returns>Copy of object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings">
            <summary>
            These settings detail how a peak is to be identified from the
            list of possible peaks found by integrating a chromatogram.
            The peak is expected at a certain time, which may be adjusted using a retention time reference.
            The peak is then selected from possible peaks within a window around the selected time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.AdjustExpectedRT">
            <summary>
            Gets or sets a value indicating whether retention time should be adjusted based on a reference peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.UserEnteredRT">
            <summary>
            Gets or sets the expected time, as in the method (before any adjustments)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.LocateMethod">
            <summary>
            Gets or sets a value which determine how a single peak is found from the list of
            returned peaks from integrating the chromatogram.
            For example: Highest peak in time window.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.SearchWindow">
            <summary>
            Gets or sets the window, centered around the peak, in minutes.
            The located peak must be within a window of expected +/- width.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.BaselineAndNoiseWindow">
            <summary>
            Gets or sets a setting which is used to restrict the chromatogram.
            Only scans within the range "adjusted expected RT" +/- Window are processed.
            For example: a 1 minute window setting implies 2 minutes of data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.FindSettings">
            <summary>
            Gets or sets settings for finding a peak based on spectral fit
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.ThermoFisher#CommonCore#Data#IPeakLocationSettingsAccess#FindSettings">
            <summary>
            Gets settings for finding a peak based on spectral fit
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.SignalToNoiseThreshold">
            <summary>
            Gets or sets a rejection parameter for peaks
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.#ctor(ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakLocationSettings.Clone">
            <summary>
            make a copy of this object
            </summary>
            <returns>a copy of this object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PeakPoint">
            <summary>
            A record of the signal at a certain point in a detected peak.
            For example, the Apex.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakPoint"/> struct. 
            Create A new point on a detected peak
            </summary>
            <param name="retentionTime">
            Retention time at this point
            </param>
            <param name="height">
            The signal height at this point above the baseline (signal.intensity - baseline)
            </param>
            <param name="baseline">
            baseline height at retentionTime
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPoint.RetentionTime">
            <summary>
            Gets or sets the retention time at this point, in minutes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPoint.HeightAboveBaseline">
            <summary>
            Gets or sets the intensity minus baseline at RT
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPoint.BaselineHeight">
            <summary>
            Gets or sets the baseline height at RT
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakPoint.op_Equality(ThermoFisher.CommonCore.Data.Business.PeakPoint,ThermoFisher.CommonCore.Data.Business.PeakPoint)">
            <summary>
            Test that two peak points are equal
            </summary>
            <param name="left">first point to compare</param>
            <param name="right">second point to compare</param>
            <returns>true if they have the same contents</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakPoint.op_Inequality(ThermoFisher.CommonCore.Data.Business.PeakPoint,ThermoFisher.CommonCore.Data.Business.PeakPoint)">
            <summary>
            Test that two peak points are not equal
            </summary>
            <param name="left">first point to compare</param>
            <param name="right">second point to compare</param>
            <returns>true if they do not have the same contents</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakPoint.Equals(System.Object)">
            <summary>
            Test two peaks for equality
            </summary>
            <param name="obj">
            peak to compare
            </param>
            <returns>
            true if they are equal
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakPoint.GetHashCode">
            <summary>
            <see>Object.GetHashCode</see>
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings">
            <summary>
            Settings PDA peak purity calculations
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.DesiredPeakCoverage">
            <summary>
            Gets or sets the % of the detected baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.EnableDetection">
            <summary>
            Gets or sets a value indicating whether to compute Peak Purity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.LimitWavelengthRange">
            <summary>
            Gets or sets a value indicating whether to use the enclosed wavelength range, not the total scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.MaximumWavelength">
            <summary>
            Gets or sets the high limit of the scan over which to compute
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.MinimumWavelength">
            <summary>
            Gets or sets the low limit of the scan over which to compute
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.ScanThreshold">
            <summary>
            Gets or sets the max of a scan must be greater than this to be included
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.#ctor(ThermoFisher.CommonCore.Data.IPeakPuritySettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakPuritySettings.Clone">
            <summary>
            Make a copy of this object
            </summary>
            <returns>a copy of this object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability">
            <summary>
            Defines a peak which has included system suitability results.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.#ctor(ThermoFisher.CommonCore.Data.IPeakAccess,ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability"/> class.
            Initializes from a peak and system suitability results.
            This clones data from the passed in interfaces.
            </summary>
            <param name="peak">
            The peak.
            </param>
            <param name="suitabilityResults">
            The suitability results.
            </param>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability._suitabilityResults">
            <summary>
            Gets or sets the suitability results.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.MeasuredResolution">
            <summary>
            Gets the resolution of the peak (from other peaks)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedResolutionChecks">
            <summary>
            Gets a value indicating whether the resolution test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedSymmetryChecks">
            <summary>
            Gets a value indicating whether the symmetry test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedPeakWidth">
            <summary>
            Gets a value indicating whether the peak width test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedTailing">
            <summary>
            Gets a value indicating whether the peak tailing test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedColumnOverload">
            <summary>
            Gets a value indicating whether the column overload test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedNoise">
            <summary>
            Gets a value indicating whether the signal to noise test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedSaturated">
            <summary>
            Gets a value indicating whether the saturation test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedConcave">
            <summary>
            Gets a value indicating whether the concave peak test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PassedBaselineClipped">
            <summary>
            Gets a value indicating whether the baseline clipping test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.ResolutionChecksPerformed">
            <summary>
            Gets a value indicating whether the following values have been calculated:
            <c>PassedResolutionChecks</c>, <c>MeasuredResolution</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.SymmetryChecksPerformed">
            <summary>
            Gets a value indicating whether the following values have been calculated:
            <c>PassedSymmetryChecks</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.ClassificationChecksPerformed">
            <summary>
            Gets a value indicating whether the following values have been calculated:
            <c>PassedPeakWidth</c>, <c>PassedTailing</c>, <c>PassedColumnOverload</c>, <c>PassedNoise</c>, <c>PassedSaturated</c>,
            <c>PassedConcave</c>, <c>PassedBaselineClipped</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.ResolutionCheckStatus">
            <summary>
            Gets a value indicating whether the ResolutionCheck was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.SymmetryCheckStatus">
            <summary>
            Gets a value indicating whether the SymmetryCheck was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.PeakWidthStatus">
            <summary>
            Gets a value indicating whether the PeakWidth test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.TailingStatus">
            <summary>
            Gets a value indicating whether the Tailing test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.ColumnOverloadStatus">
            <summary>
            Gets a value indicating whether the ColumnOverload test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.NoiseStatus">
            <summary>
            Gets a value indicating whether the Noise test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.SaturatedStatus">
            <summary>
            Gets a value indicating whether the Saturated test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.ConcaveStatus">
            <summary>
            Gets a value indicating whether the Concave test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.PeakWithSuitability.BaselineClippedStatus">
            <summary>
            Gets a value indicating whether the BaselineClipped test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Precursor">
            <summary>
            Defines a precursor mass, and means of fragmenting it
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Precursor.Mass">
            <summary>
            Gets or sets the mass of the precursor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Precursor.ActivationCode">
            <summary>
            Gets or sets the method used to fragment the precursor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Precursor.ActivationEnergy">
            <summary>
            Gets or sets the level of activation to fragment the precursor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Precursor.Precision">
            <summary>
            Gets or sets the precision of this value (number of decimal places found when parsing)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Precursor.CompareTo(ThermoFisher.CommonCore.Data.Business.Precursor)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This object is less than the <paramref name="other"/> parameter.
                                Zero 
                                This object is equal to <paramref name="other"/>. 
                                Greater than zero 
                                This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">
            An object to compare with this object.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ProcessingMethodReaderFactory">
            <summary>
            Provides a means of opening processing methods.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ProcessingMethodReaderFactory.CreateReader">
            <summary>
            create reader.
            </summary>
            <returns>
            The reader
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ProcessingMethodReaderFactory.ReadFile(System.String)">
            <summary>
            Read a processing method.
            The file contents are returned. The file is not kept open.
            </summary>
            <param name="fileName">Name of file to read</param>
            <returns>Access to the contents of the file.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.QualityControlLevel">
            <summary>
            This class defines a QC level.
            This is based on a calibration level, with a name and expected amount (base amount)
            The QC level add a TestPercent and a means of testing
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.QualityControlLevel.TestPercent">
            <summary>
            Gets or sets the QC test standard: <code>100 * (yobserved-ypredicted)/ypreditced</code>
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.QualityControlLevel.#ctor(ThermoFisher.CommonCore.Data.IQualityControlLevelAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.QualityControlLevel"/> class. 
            Create a copy of a QC level
            </summary>
            <param name="level">
            Level to copy
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.QualityControlLevel.Passes(System.Double)">
            <summary>
            Test if an amount passes the QC test for this level
            </summary>
            <param name="amount">
            The calculated amount for the QC
            </param>
            <returns>
            true if the QC test passes, within tolerance
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.QualityControlLevel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.QualityControlLevel"/> class. 
            Default construction of QC level
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.QualityControlLevel.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current level.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.QualityControlLevel.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.QualityControlLevel"/> class. 
            Create a quality control level
            </summary>
            <param name="name">
            A name associated with the level
            </param>
            <param name="baseAmount">
            The amount of calibration compound (usually a concentration) for this level
            </param>
            <param name="testPercent">
            QC test standard: <code>100 * (yobserved-ypredicted)/ypreditced</code>
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Range">
            <summary>
            A range of double Low, High.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.op_Equality(ThermoFisher.CommonCore.Data.Business.Range,ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.op_Inequality(ThermoFisher.CommonCore.Data.Business.Range,ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.CreateFromCenterAndDelta(System.Double,System.Double)">
            <summary>
            Create an immutable (constant) range from center and delta, such that the range is center +/- delta.
            </summary>
            <param name="center">
            The center.
            </param>
            <param name="delta">
            The delta.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.Create(System.Double,System.Double)">
            <summary>
            Create an immutable (constant) range from low and high.
            </summary>
            <param name="low">
            The low.
            </param>
            <param name="high">
            The high.
            </param>
            <returns>
            The range.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/> class. 
            Construct a range from limits
            </summary>
            <param name="low">
            low limit of range
            </param>
            <param name="high">
            High limit of range
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/> class. 
            Construct a range from another range, adding a tolerance if ends are the same
            </summary>
            <param name="from">
            range to copy
            </param>
            <param name="tolerance">
            If limits are same (with 1e-10)
            this is subtracted from low and added to high of the new range
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/> class. 
            Construct a range from another range, adding a tolerance if ends are the same
            (within 1.0E-10).
            </summary>
            <param name="from">
            range to copy
            </param>
            <param name="toleranceOptions">
            If limits are same (within 1e-10)
            the tolerance is subtracted from low and added to high of the new range
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/> class. 
            Construct a range from another range.
            </summary>
            <param name="from">
            range to copy
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Range.Low">
            <summary>
            Gets or sets the low end of range
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Range.High">
            <summary>
            Gets or sets the high end of range
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.Includes(System.Double)">
            <summary>
            Test for inclusion.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            True if in range
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.CompareTo(ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This object is less than the <paramref name="other"/> parameter.
                                Zero 
                                This object is equal to <paramref name="other"/>. 
                                Greater than zero 
                                This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Range.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.RangeFactory">
            <summary>
            Factory to produce immutable ranges of double
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RangeFactory.Create(System.Double,System.Double)">
            <summary>
            Create an immutable (constant) range from low and high.
            </summary>
            <param name="low">
            The low.
            </param>
            <param name="high">
            The high.
            </param>
            <returns>
            The range.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RangeFactory.CreateFromCenterAndDelta(System.Double,System.Double)">
            <summary>
            Create an immutable (constant) range from center and delta, such that the range is center +/- delta.
            </summary>
            <param name="center">
            The center.
            </param>
            <param name="delta">
            The delta.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RangeFactory.CreateFromRangeAndTolerance(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Construct a range from another range, adding a tolerance if ends are the same
            (within 1.0E-10).
            </summary>
            <param name="from">
            range to copy
            </param>
            <param name="toleranceOptions">
            If limits are same (within 1e-10)
            the tolerance is subtracted from low and added to high of the new range
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RangeFactory.CreateFromRangeAndTolerance(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,System.Double)">
            <summary>
            Construct a range from another range, adding a tolerance if ends are the same
            </summary>
            <param name="from">
            range to copy
            </param>
            <param name="tolerance">
            If limits are same (with 1e-10)
            this is subtracted from low and added to high of the new range
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.RawFile">
            <summary>
            Encapsulates raw file data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.RawFile"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.CreationDate">
            <summary>
            Gets or sets the date when this data was created
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.FileName">
            <summary>
            Gets or sets the name of acquired file (excluding path)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.CreatorId">
            <summary>
            Gets or sets the name of person creating data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.SchemaVersion">
            <summary>
            Gets or sets the xml schema version for this file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.AllInstrumentNamesFromInstrumentMethod">
            <summary>
            Gets or sets all instrument names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.SampleInformation">
            <summary>
            Gets or sets the information about the sample.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.MSInstruments">
            <summary>
            Gets or sets the MS instruments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.UVInstruments">
            <summary>
            Gets or sets the UV instruments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.PDAInstruments">
            <summary>
            Gets or sets the PDA instruments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.MSAnalogInstruments">
            <summary>
            Gets or sets the PDA instruments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.AnalogInstruments">
            <summary>
            Gets or sets the PDA instruments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.InstrumentTypes">
            <summary>
            Gets or sets the instrument types map. This metadata is used to support GetInstrumentTypes method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.InstrumentMethods">
            <summary>
            Gets or sets the list of instrument methods.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RawFile.InstrumentCount">
            <summary>
            Gets The number of instruments (data streams) in this file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFile.GetInstrumentCountOfType(ThermoFisher.CommonCore.Data.Business.Device)">
            <summary>
            get the number of instruments (data streams) of a certain classification.
            For example: the number of UV devices which logged data into this file
            </summary>
            <param name="type">
            The device type to count
            </param>
            <returns>
            The number of devices of this type
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.RawFileFactory">
            <summary>
            Class to read raw files
            New code should not use this class directly.
            Use only the static class: "RawFileReaderFactory" 
            Catch exceptions from the construction, which will be thrown if
            the DLLs are missing.
            Call the "OpenFile" method to open a raw file.
            The returned interface from OpenFile is "IRawDataPlus".
            The IRawDataPlus interface implements the IRawData interface,
            so the returned object can also be passed to code expecting IRawData.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFileFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.RawFileFactory"/> class. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFileFactory.Initialize">
            <summary>
            Initialize: Load the required DLLs.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFileFactory.OpenFile(System.String)">
            <summary>
            Open the requested raw file
            </summary>
            <param name="rawFileName">Name of file to open</param>
            <returns>Interface to read the raw data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.RawFileReaderFactory">
            <summary>
            Class to read raw files, using 64 bit technology.
            Call the "ReadFile" method to open a raw file.
            The returned interface from ReadFile is "IRawDataPlus".
            The IRawDataPlus interface implements the IRawData interface,
            so the returned object can also be passed to code expecting IRawData.
            To access data for the same file from multiple threads, see <see cref="M:ThermoFisher.CommonCore.Data.Business.RawFileReaderFactory.CreateThreadManager(System.String)"/>
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFileReaderFactory.CreateManager">
            <summary>
            create a thread manager.
            </summary>
            <returns>
            The thread manager
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFileReaderFactory.CreateReader">
            <summary>
            create reader.
            </summary>
            <returns>
            The factory
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFileReaderFactory.ReadFile(System.String)">
            <summary>
            Open a raw file for reading.
            </summary>
            <param name="fileName">Name of file to read</param>
            <returns>Access to the contents of the file.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RawFileReaderFactory.CreateThreadManager(System.String)">
            <summary>
            Open a raw file for reading, creating a manager tool, such that
            multiple threads can access the same open file.
            </summary>
            <param name="fileName">Name of file to read</param>
            <returns>Access to the contents of the file.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Replicate">
            <summary>
            A replicate is a measurement of a single calibration peak in 1 file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Replicate.Amount">
            <summary>
            Gets or sets the amount of target compound in calibration or QC standard.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Replicate.Response">
            <summary>
            Gets or sets the response of this sample, for example: Ratio of target peak area to ISTD peak area
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Replicate.RetentionTime">
            <summary>
            Gets or sets the retention time of this replicate, for drift calculations
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Replicate.ExcludeFromCalibration">
            <summary>
            Gets or sets a value indicating whether to exclude this data point from the calibration curve.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Replicate.Key">
            <summary>
            Gets or sets the first key name associated with this replicate (for example a file name)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Replicate.PeakKey">
            <summary>
            Gets or sets the second key name associated with this replicate (for example a peak or compound name)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Replicate.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>An exact copy of the current Replicate.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException">
            <summary>
            Exception for raw data reading. Called when a Chromatogram reading method is made
            without first selecting a devices with chromatographic data. For example: requesting a chromatogram
            from a device of type "Other" (such a an auto sampler).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException"/> class. 
            Basic analysis exception, no specified reason.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException"/> class. 
            Exception, with reason as text, which application can display or log
            </summary>
            <param name="message">
            Reason for exception
            </param>
            <param name="inner">
            Trapped inner exception
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException"/> class. 
            Construct an exception, with serialization.
            </summary>
            <param name="info">
            Data to serialize this object
            </param>
            <param name="context">
            Stream for serializing
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.RunHeader">
            <summary>
            The run header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.FirstSpectrum">
            <summary>
            Gets or sets the number for the first scan in this stream (usually 1)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.LastSpectrum">
            <summary>
            Gets or sets the number for the last scan in this stream
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.StartTime">
            <summary>
            Gets or sets the time of first scan in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.EndTime">
            <summary>
            Gets or sets the time of last scan in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.LowMass">
            <summary>
            Gets or sets the lowest recorded mass in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.HighMass">
            <summary>
            Gets or sets the highest recorded mass in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.MassResolution">
            <summary>
            Gets or sets the mass resolution value recorded for the current instrument. 
            The value is returned as one half of the mass resolution. 
            For example, a unit resolution controller would return a value of 0.5.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.ExpectedRuntime">
            <summary>
            Gets or sets the expected acquisition run time for the current instrument.
            </summary>double ExpectedRunTime { get; }
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.MaxIntegratedIntensity">
            <summary>
            Gets or sets the max integrated intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.MaxIntensity">
            <summary>
            Gets or sets the max intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.RunHeader.ToleranceUnit">
            <summary>
            Gets or sets the tolerance unit.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SampleInformation">
            <summary>
            Encapsulates various information about sample.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.SampleInformation.MaxUserTextColumnCount">
            <summary>
            Max number of user text column count (20)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SampleInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SampleInformation"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.Comment">
            <summary>
            Gets or sets the comment about sample (from user).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.SampleId">
            <summary>
            Gets or sets the Code to identify sample.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.SampleName">
            <summary>
            Gets or sets the description of sample.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.Vial">
            <summary>
            Gets or sets the vial or well form auto sampler.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.InjectionVolume">
            <summary>
            Gets or sets the amount of sample injected.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.Barcode">
            <summary>
            Gets or sets bar code from scanner (if attached).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.BarcodeStatus">
            <summary>
            Gets or sets the bar code status.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.CalibrationLevel">
            <summary>
            Gets or sets a name to identify the Calibration or QC level associated with this sample.
            Empty if this sample does not contain any calibration compound.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.DilutionFactor">
            <summary>
            Gets or sets the bulk dilution factor (volume correction) of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.InstrumentMethodFile">
            <summary>
            Gets or sets the instrument method filename of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.RawFileName">
            <summary>
            Gets or sets the name of acquired file (excluding path).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.CalibrationFile">
            <summary>
            Gets or sets the name of calibration file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.IstdAmount">
            <summary>
            Gets or sets the ISTD amount of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.RowNumber">
            <summary>
            Gets or sets the row number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.Path">
            <summary>
            Gets or sets the path to original data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.ProcessingMethodFile">
            <summary>
            Gets or sets the processing method filename of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.SampleType">
            <summary>
            Gets or sets the type of the sample.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.SampleVolume">
            <summary>
            Gets or sets the sample volume of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.SampleWeight">
            <summary>
            Gets or sets the sample weight of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SampleInformation.UserText">
            <summary>
            Gets or sets the collection of user text.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SampleInformation.DeepCopy">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Scan">
            <summary>
            Class to represent a scan
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Scan"/> class.
            Default construction.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.#ctor(ThermoFisher.CommonCore.Data.Business.MassToFrequencyConverter,ThermoFisher.CommonCore.Data.Business.NoiseAndBaseline[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.Scan"/> class.
            Overload for processed data (such as averaged or subtracted)
            </summary>
            <param name="converter">
                The converter from mass to frequency (used by FT data averaging and exporting).
            </param>
            <param name="rawFileNoise">Optional: Noise and baseline table</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.#ctor(ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Copy scan data. This protected method is inteded for derived object use only.
            It is not a "deep clone" of a scan.
            </summary>
            <param name="scan">Scan to copy</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.CentroidScan">
            <summary>
            Gets or sets A second data stream for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.CentroidStreamAccess">
            <summary>
            Gets A second data stream for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.HasCentroidStream">
            <summary>
            Gets a value indicating whether this scan has a centroid stream.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.HasNoiseTable">
            <summary>
            Gets a value indicating whether this scan has a noise table.
            This will be true only if the scan was constructed with the overload containing this table.
            Note that this is not related to having "noise and baseline" values with centroid stream data.
            This is a separate table, used for spectrum averaging and subtraction of orbitrap data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.IsUserTolerance">
            <summary>
            Gets or sets a value indicating whether the User Tolerance value is being used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.MassResolution">
            <summary>
            Gets or sets the mass resolution for all scan arithmetic operations
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferCentroids">
            <summary>
            Gets or sets a value indicating whether, when requesting "Preferred data", the centroid stream will be returned.
            For example "<see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredMasses"/>", "<see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredIntensities"/>".
            If this property is false, or there is no centroid stream, then these methods will return
            the data from <see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.SegmentedScan"/>. For greater efficiency, callers should cache the return of "<see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredMasses"/>".
            Typically data processing, such as elemental compositions, should use these methods.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredBasePeakIntensity">
            <summary>
            Gets peak flags (such as saturated) for default data stream (usually centroid stream, if present).
            Falls back to <see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredBasePeakMass">
            <summary>
            Gets Mass of base peak default data stream (usually centroid stream, if present).
            Falls back to <see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredBasePeakNoise">
            <summary>
            Gets Noise of base peak for default data stream (usually centroid stream, if present).
            Falls back to zero if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredBasePeakResolution">
            <summary>
            Gets Resolution of base peak for default data stream (usually centroid stream, if present).
            Falls back to zero if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredFlags">
            <summary>
            Gets peak flags (such as saturated) for default data stream (usually centroid stream, if present).
            Falls back to <see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredIntensities">
            <summary>
            Gets Intensity for default data stream (usually centroid stream, if present).
            Falls back to <see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredMasses">
            <summary>
            Gets the Mass for default data stream (usually centroid stream, if present).
            Falls back to <see cref="P:ThermoFisher.CommonCore.Data.Business.Scan.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredNoises">
            <summary>
            Gets Noises for default data stream (usually centroid stream, if present).
            Returns an empty array if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredBaselines">
            <summary>
            Gets Baselines for default data stream (usually centroid stream, if present).
            Returns an empty array if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.PreferredResolutions">
            <summary>
            Gets Resolutions for default data stream (usually centroid stream, if present).
            Returns an empty array if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.ScansCombined">
            <summary>
            Gets or sets the number of scans which were combined to create this scan.
            For example: By the scan averager.
            This can be zero if this is a "scan read from a file"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.ScanStatistics">
            <summary>
            Gets or sets Header information for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.ScanStatisticsAccess">
            <summary>
            Gets Header information for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.ScanType">
            <summary>
            Gets or sets Type of scan (for filtering)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.SegmentedScan">
            <summary>
            Gets or sets The data for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.SegmentedScanAccess">
            <summary>
            Gets The data for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.SubtractionPointer">
            <summary>
            Gets or sets IScanSubtract interface pointer.
            </summary>
            <returns>Interface to perform subtraction</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.ScanAdder">
            <summary>
            Gets or sets IScanAdd interface.
            This delegates addition of FT profile scans.
            </summary>
            <returns>Interface to perform addition</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.ToleranceUnit">
            <summary>
            Gets or sets the Tolerance value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.AlwaysMergeSegments">
            <summary>
            Get or sets a value indicating whether scan + and - operators will merge data from scans
            which were not scanned over a similar range.
            Only applicable when scans only have a single segment.
            By default: Scans are considered incompatible if:
            The span of the scanned mass range differs by 10%
            The start or end of the scanned mass range differs by 10%
            If this is set as "true" then any mass ranges will be merged.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.AtTime(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Double)">
            <summary>
            Create a scan object from a file and a retention time.
            </summary>
            <param name="rawFile">
            File to read from
            </param>
            <param name="time">
            time of Scan number to read
            </param>
            <returns>
            The scan read, or null of the scan number if not valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CanMergeScan(System.Boolean@,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            test if 2 scans can be averaged or subtracted.
            </summary>
            <param name="identicalFlag">
            Returned as "true" if all segments are the same
            </param>
            <param name="currentScan">
            Current scan object
            </param>
            <param name="toMerge">
            The scan to possibly add
            </param>
            <returns>
            true if scans can be merged
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CreateScanReader(System.Int32)">
            <summary>
            Create an object which can be used to read scans from a file, with optional caching.
            This is valuable if repeated operations (such as averaging) are expected over the same region of data.
            Scans returned from each call are unique objects, even if called repeatedly with the same scan number.
            </summary>
            <param name="cacheSize">
            Number of scans cached. 
            When set to 1 or more, this creates a FIFO, keeping track of the most recently read scans.
            If a scan in the FIFO is requested again, it is pulled from the cache.
            If a scan is not in the cache, then a new scan is read from the file.
            If the cache is full, the oldest scan is dropped. The newly read scan is that added to the FIFO cache.
            If size is set to 0, this makes a trivial object
            with no overheads, that directly gets scans from the file.
            </param>
            <returns>
            Object to read scans from a file
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.FromFile(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Int32)">
            <summary>
            Create a scan object from a file and a scan number.
            </summary>
            <param name="rawFile">
            File to read from
            </param>
            <param name="scanNumber">
            Scan number to read
            </param>
            <returns>
            The scan read, or null of the scan number if not valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.op_Addition(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Merge the two scans.
            </summary>
            <param name="currentScanObject">current scan object(this).</param>
            <param name="inputScan">scan object to merge.</param>
            <returns>returns the sum of two scans.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.op_Division(ThermoFisher.CommonCore.Data.Business.Scan,System.Double)">
            <summary>
            Averages the two scans.
            </summary>
            <param name="inputScan">scan object to average.</param>
            <param name="size">divider (or) common factor.</param>
            <returns>returns the average scan.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.op_Subtraction(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Subtract method for MS data.
            </summary>
            <param name="currentScanObject">current scan object.</param>
            <param name="inputScan">scan object to subtract.</param>
            <returns>returns the subtracted scan object.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ToCentroid(ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Converts the segmented scan to centroid scan.
            Used to centroid profile data.
            </summary>
            <param name="currentScan">
            The scan to centroid
            </param>
            <returns>The centroided version of the scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.DeepClone">
            <summary>
            Make a deep clone of this scan.
            </summary>
            <returns>
            An object containing all data in the input, and no shared references
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.DeepCopyFrom(ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Deep Copy all data from another scan into this scan.
            Intended to assist in cloning derived objects.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.Slice(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess[],System.Boolean,System.Boolean)">
            <summary>
            Return a slice of a scan which only contains data within the supplied mass Range or ranges.
            For example: For a scan with data from m/z 200 to 700, and a single mass range of 300 to 400:
            This returns a new scan containing all data with the range 300 to 400.
            </summary>
            <param name="massRanges">The mass ranges, where data should be retained. When multiple ranges are supplied,
            all data which is in at least one range is included in the returned scan</param>
            <param name="trimMassRange">If this is true, then the scan will reset the
            scan's mass range to the bounds of the supplied mass ranges </param>
            <param name="expandProfiles">This setting only applies when the scan has both profile and centroid data.
            If true: When there isa centroid near the start or end of a range, and the first or
            final "above zero" section of the profile includes that peak, then the profile is extended, to include the points
            which contribute to that peak. A maximum of 10 points may be added</param>
            <returns>A copy of the scan, with only the data in the supplied ranges</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.OrderByLowest(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess)">
            <summary>
            Order mass ranges by lowest mass.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.GenerateFrequencyTable">
            <summary>
            generate frequency table for this scan.
            This method only applied to "FT" format scans
            which have mass to frequency calibration data.
            When a scan in constructed from processing algorithms, such 
            as averaging, a frequency to mass converter is used to
            create this scan. This same converter can be used to create
            a frequency table, which would be needed when writing averaged (or subtracted) data to a raw file.
            </summary>
            <returns>
            The frequency table.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.GenerateNoiseTable">
            <summary>
            Generates a "noise and baseline table".
            This table is only relevant to FT format data.
            For other data, an empty list is returned.
            This table is intended for use when exporting processed (averaged, subtracted) scans to a raw file.
            If this scan is the result of a calculation such as "average of subtract" it may be constructed using
            an overload which includes a noise and baseline table.
            If so: that tale is returned.
            Otherwise, a table is generated by extracting data from the scan.
            </summary>
            <returns>
            The nose and baseline data
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.AddCentroids(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            The add centroids.
            </summary>
            <param name="currentScan">
                The current scan.
            </param>
            <param name="inputScan">
                The input scan.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.AddFtCentroidData(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Addition of FTMS centroid scans (called by operator +=)
            </summary>
            <param name="currentScan">
            current scan object(this).
            </param>
            <param name="rightScan">
            scan to right of + operator (that)
            </param>
            <returns>
            The sum of the two scans
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.AddScanStats(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.ScanStatistics,System.Double,System.Double)">
            <summary>
            The add scan stats.
            </summary>
            <param name="leftScan">
            The left scan.
            </param>
            <param name="rightScan">
            The right scan.
            </param>
            <param name="scanStats">
            The scan stats.
            </param>
            <param name="baseHeight">
            The base height.
            </param>
            <param name="baseMass">
            The base mass.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.AddSegment(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32,ThermoFisher.CommonCore.Data.Business.SegmentedScan[],System.Double@,System.Double@,System.Boolean)">
            <summary>
            The add segment.
            </summary>
            <param name="leftScan">
            The left scan.
            </param>
            <param name="leftSegment">
            The left segment.
            </param>
            <param name="rightSegment">
            The right segment.
            </param>
            <param name="iterator">
            The segment number.
            </param>
            <param name="resultScanSegments">
            The result scan segments.
            </param>
            <param name="baseHeight">
            The base height.
            </param>
            <param name="baseMass">
            The base mass.
            </param>
            <param name="processSegments">
            The process segments.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.AddSegments(System.Boolean,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan,System.Boolean)">
            <summary>
            Add segments.
            </summary>
            <param name="identicalFlag">
            The _identical flag.
            </param>
            <param name="leftScan">
            The left scan.
            </param>
            <param name="rightScan">
            The right scan.
            </param>
            <param name="processSegments">
            The process segments.
            </param>
            <returns>
            The sum of the two scans, which is also in "leftScan".
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.AppendPeak(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult},ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult,System.Double)">
            <summary>
            The append peak.
            </summary>
            <param name="results">
            The results.
            </param>
            <param name="newPeak">
            The new peak.
            </param>
            <param name="massFuzz">
            The mass fuzz (tolerance).
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.BasicProfileType(System.Int32)">
            <summary>
            Determine if this is a basic profile type.
            </summary>
            <param name="packetType">
            The packet type.
            </param>
            <returns>
            True if it is basic profile type.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CalcualteToleraceFactor(System.Int32,ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Double,System.Double@,System.Boolean)">
            <summary>
            Attempt to find the tolerance factor, from the base peak of a scan
            return "true" on fail.
            </summary>
            <param name="centroidCount">
            The centroid count.
            </param>
            <param name="centroidStream">
            The centroid stream.
            </param>
            <param name="baseMass">
            The base mass.
            </param>
            <param name="toleranceFactor">
            The tolerance factor.
            </param>
            <param name="isOrbitrapData">
            The is orbitrap data.
            </param>
            <returns>
            The calculated tolerance factor.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CalculateDefaultToleranceFactor(System.Boolean)">
            <summary>
            Returns the default tolerance factor.
            </summary>
            <param name="isOrbitraData">
            flag to Check if we have LTQ-FT or Orbitrap data
            </param>
            <returns>
            The calculate default tolerance factor.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CalculateMassFuzz(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.CentroidStream,ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Double,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The calculate mass fuzz.
            </summary>
            <param name="currentScan">
            The current scan.
            </param>
            <param name="leftCentroid">
            The left centroid.
            </param>
            <param name="rightCentroid">
            The right centroid.
            </param>
            <param name="toleranceFactor">
            The tolerance factor.
            </param>
            <param name="isOrbitrapData">
            The is orbitrap data.
            </param>
            <param name="leftIterator">
            The left iterator.
            </param>
            <param name="rightIterator">
            The right iterator.
            </param>
            <param name="processSegments">
            The process segments.
            </param>
            <returns>
            The calculated mass fuzz.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CalculateMassFuzzForCentroidPeak(System.Double,System.Double,System.Double,System.Boolean,ThermoFisher.CommonCore.Data.Business.ToleranceMode)">
            <summary>
            Calculates the Mass tolerance for centroid peak.
            </summary>
            <param name="mass">
            current mass tolerance value.
            </param>
            <param name="toleranceFactor">
            tolerance factor
            </param>
            <param name="previouMassFuzz">
            previous mass tolerance value
            </param>
            <param name="isOrbitraData">
            flag to check if we have LTQ-FT or Orbitrap data.
            </param>
            <param name="tolUnit">
            tolerance unit
            </param>
            <returns>
            The calculate mass fuzz for centroid peak.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CalculateMassFuzzForProfilePeak(System.Double,System.Double,System.Double,System.Boolean,ThermoFisher.CommonCore.Data.Business.ToleranceMode)">
            <summary>
            Calculates the Mass tolerance for profile peak.
            </summary>
            <param name="mass">
            current mass tolerance value.
            </param>
            <param name="toleranceFactor">
            tolerance factor
            </param>
            <param name="defaultMassFuzz">
            previous mass tolerance value
            </param>
            <param name="isOrbitraData">
            flag to check if we have LTQ-FT or Orbitrap data.
            </param>
            <param name="tolUnit">
            tolerance unit
            </param>
            <returns>
            The calculated mass fuzz for profile peak.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CalculateToleranceFactorForLabels(ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Int32,System.Boolean)">
            <summary>
            Calculates the tolerance factor
            </summary>
            <param name="stream">
            CentroidStream object
            </param>
            <param name="position">
            calculates the tolerance factor at specified index.
            </param>
            <param name="isOrbitraData">
            flag to Check if we have LTQ-FT or Orbitrap data
            </param>
            <returns>
            The calculate tolerance factor for labels.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CalculateTotalScanSize(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.SegmentedScan})">
            <summary>
            Calculate total scan size.
            </summary>
            <param name="segments">
            The segments.
            </param>
            <returns>
            The total scan size.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CheckForIdentical(System.Boolean@,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Check for identical.
            </summary>
            <param name="identicalFlag">
            The identical flag.
            </param>
            <param name="currentScanObject">
            The current scan object.
            </param>
            <param name="inputScanObject">
            The input scan object.
            </param>
            <returns>
            The number of segments found
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CombinePeaks(ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult,ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult)">
            <summary>
            The combine peaks.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ConvertCentroidStreamTolerance(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Int32,System.Boolean,System.Double)">
            <summary>
            The convert centroid stream tolerance.
            </summary>
            <param name="currentScan">
            The current scan.
            </param>
            <param name="centroidStream">
            The centroid stream.
            </param>
            <param name="counter">
            The counter.
            </param>
            <param name="usePeakWidthAsMassFuzz">
            The use peak width as mass fuzz.
            </param>
            <param name="resolutionFactor">
            The resolution factor.
            </param>
            <returns>
            The converted centroid stream tolerance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CreateCentroidStream(System.Int32,System.Int32)">
            <summary>
            Create an empty centroid stream.
            </summary>
            <param name="size">
            The size.
            </param>
            <param name="scanNumber">
            The scan number.
            </param>
            <returns>
            A centroid stream which has "size" data packets.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.CreateSegmentedScan(System.Int32)">
            <summary>
            Create a segmented scan.
            </summary>
            <param name="size">
            The number of peaks in the scan.
            </param>
            <returns>
            The created scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.FillScanData(ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan[])">
            <summary>
            Assuming that the methods ReplaceScanDataArrays and UpdateSegmentSizes
            have already been called, the result scan
            is formatted ready to accept new data
            Merge the data from the results of adding each segment
            </summary>
            <param name="scan">
            The scan.
            </param>
            <param name="segments">
            The segments.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.FillSegmentRange(ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan)">
            <summary>
            The fill segment range.
            </summary>
            <param name="leftSegment">
            The left segment.
            </param>
            <param name="rightSegment">
            The right segment.
            </param>
            <param name="outputSegmentedScan">
            The output segmented scan.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.FindSegmentStartPackets(ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            find segment start packet index number.
            </summary>
            <param name="leftSegment">
            The left segment.
            </param>
            <param name="rightSegment">
            The right segment.
            </param>
            <param name="iterator">
            The iterator.
            </param>
            <param name="leftScanCount">
            The count of peaks before this segment in the left scan.
            </param>
            <param name="rightScanCount">
            The count of peaks before this segment in the right scan.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.FixSegmentTables(ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan[])">
            <summary>
            Fix the length of segment tables after a merge
            </summary>
            <param name="scanSegements">
            scan which will contain a merge
            </param>
            <param name="segments">
            segments which are result of addition
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.GetSubtractedIndex(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan,System.Int32,System.Double,System.Double)">
            <summary>
            The get subtracted index.
            </summary>
            <param name="currentScan">
            The current scan.
            </param>
            <param name="rightScan">
            The right scan.
            </param>
            <param name="outputPeakCount">
            The output peak count.
            </param>
            <param name="baseHeight">
            The base height.
            </param>
            <param name="baseMass">
            The base mass.
            </param>
            <returns>
            Index of the subtracted scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.GetSumIndex(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan,System.Int32,System.Double,System.Double)">
            <summary>
            get the sum index.
            </summary>
            <param name="currentScan">
            The current scan.
            </param>
            <param name="rightScan">
            The right scan.
            </param>
            <param name="outputPeakCount">
            The output peak count.
            </param>
            <param name="baseHeight">
            The base height.
            </param>
            <param name="baseMass">
            The base mass.
            </param>
            <returns>
            The scan index data for the summed scans
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.GetToleranceFactor(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.CentroidStream,ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Int32,System.Double,System.Boolean,System.Int32)">
            <summary>
            get the tolerance factor.
            </summary>
            <param name="currentScan">
            The current scan.
            </param>
            <param name="rightScan">
            The right scan.
            </param>
            <param name="leftCentroid">
            The left centroid.
            </param>
            <param name="rightCentroid">
            The right centroid.
            </param>
            <param name="rightCentroidCount">
            The right centroid count.
            </param>
            <param name="toleranceFactor">
            Get the tolerance factor.
            </param>
            <param name="isOrbitrapData">
            The is orbitrap data.
            </param>
            <param name="leftCentroidCount">
            The left centroid count.
            </param>
            <returns>
            The tolerance factor.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.IsKnownProfileType(System.Int32)">
            <summary>
            Test if is known profile type.
            </summary>
            <param name="packetType">
            The packet type.
            </param>
            <returns>
            true if this is known to be profile
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.MergeSegments(ThermoFisher.CommonCore.Data.Business.Scan,System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult}[])">
            <summary>
            The merge segments.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <param name="allResults">
            The all results.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.OrderSegments(ThermoFisher.CommonCore.Data.Business.Range[],System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult}[])">
            <summary>
            Order the segment ranges of the scan, and order the "allResults" table to match
            This is part of the process to centroid a scan
            when this is done, it is more efficient to combine "allResults" into a single segment
            </summary>
            <param name="scanRanges">
            The scan ranges.
            </param>
            <param name="allResults">
            The all results.
            </param>
            <returns>
            The segment range table
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ProfileDataForSimilarSegments(System.Boolean,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Addition of SegmentedScan's.
            this case for profile data,which matches with identical or similar segments.
            </summary>
            <param name="identicalFlag">
            set if the flags have the same segments
            </param>
            <param name="currentScan">
            left scan of addition "left + right"
            </param>
            <param name="inputScan">
            right scan of addition "left + right"
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.PutFtPeak(System.Int32@,ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32,System.Double)">
            <summary>
            Added for supporting addition of FTMS profile points
            </summary>
            <param name="resultCount">
            </param>
            <param name="outPut">
            </param>
            <param name="inPut">
            </param>
            <param name="position">Index into input data
            </param>
            <param name="massFuzz">Mass Tolerance
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.PutLabel(System.Int32@,ThermoFisher.CommonCore.Data.Business.CentroidStream,ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Int32,System.Double)">
            <summary>
            Adds the two CentroidSteam's
            </summary>
            <param name="outputIndex">
            Current position in the output buffer
            </param>
            <param name="outPut">
            previous output CentroidStream.
            </param>
            <param name="input">
            current CentroidStream.
            </param>
            <param name="position">
            index.
            </param>
            <param name="massFuzz">
            mass value.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.PutPeak(System.Int32@,ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32,System.Double,System.Boolean)">
            <summary>
            The put peak.
            </summary>
            <param name="resultCount">
            The result count.
            </param>
            <param name="outPut">
            The out put.
            </param>
            <param name="inPut">
            The in put.
            </param>
            <param name="position">
            The position.
            </param>
            <param name="massFuzz">
            The mass fuzz.
            </param>
            <param name="processSegments">
            The process segments.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.PutPeak(System.Int32@,ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32,System.Double)">
            <summary>
            Adds the two segmented scan.
            </summary>
            <param name="resultCount">
            index into output array
            </param>
            <param name="outPut">
            previous output peak.
            </param>
            <param name="inPut">
            current peak object.
            </param>
            <param name="position">
            index.
            </param>
            <param name="massFuzz">
            mass value.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.RemoveZeros(ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Int32)">
            <summary>
            The remove zeros.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <param name="newSize">
            The new size.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.RemoveZeros(ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32)">
            <summary>
            The remove zeros.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <param name="newSize">
            The new size.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ReplaceScanDataArrays(ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32)">
            <summary>
            create the arrays for the scan, with a new length
            </summary>
            <param name="scan">
            The scan.
            </param>
            <param name="total">
            The total.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ReplaceSegmentData(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.SegmentedScan[])">
            <summary>
            Create a new scan out of the data in resultScanSegments
            in the private method, the scan is assumed to have valid segment ranges
            and the correct size of the segment tables
            only the data for the segments needs to be replaced
            </summary>
            <param name="scan">
            The scan.
            </param>
            <param name="segments">
            The segments.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ScaleIntensities(System.Double,ThermoFisher.CommonCore.Data.Business.CentroidStream)">
            <summary>
            Scale the label intensities by a common factor.
            </summary>
            <param name="scale">
            common factor
            </param>
            <param name="stream">
            CentroidStream object to scale.
            </param>
            <returns>
            returns the scaled Centroid Stream object.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SearchBasePeakIndex(System.Double,ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Int32)">
            <summary>
            Search for the base peak resolution.
            </summary>
            <param name="baseMass">
            base mass value
            </param>
            <param name="centroidStream">
            CentroidStream object to search.
            </param>
            <param name="peaks">
            peak value.
            </param>
            <returns>
            The search base peak index.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SelectNonZeroValues(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Select only non zero values from an array.
            </summary>
            <param name="values">
            The values.
            </param>
            <returns>
            The array of non zero values
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SubCentroids(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            The sub centroids.
            </summary>
            <param name="currentScan">
                The current scan.
            </param>
            <param name="inputScan">
                The input scan.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SubFTCentroidData(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            The sub ft centroid data.
            </summary>
            <param name="currentScan">
            The current scan.
            </param>
            <param name="rightScan">
            The right scan.
            </param>
            <returns>
            The subtracted scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SubFTProfileData(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Subtract FT Profile Data
            </summary>
            <param name="currentScan">
            The object subtract from this
            </param>
            <param name="inputScan">
            </param>
            <returns>
            The result of the subtraction of the two scans
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.AddFTProfileData(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Add FT Profile Data
            </summary>
            <param name="currentScan">
            The object subtract from this
            </param>
            <param name="inputScan">
            </param>
            <returns>
            The result of the subtraction of the two scans
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SubLabel(System.Int32@,ThermoFisher.CommonCore.Data.Business.CentroidStream,ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Int32,System.Double)">
            <summary>
            The sub label.
            </summary>
            <param name="outputIndex">
            The output index.
            </param>
            <param name="outPut">
            The out put.
            </param>
            <param name="input">
            The input.
            </param>
            <param name="position">
            The position.
            </param>
            <param name="massFuzz">
            The mass fuzz.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SubPeak(System.Int32@,ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32,System.Double)">
            <summary>
            Subtract a background peak.
            </summary>
            <param name="outCounter">
            The output (foreground scan) counter.
            </param>
            <param name="outPut">
            The output (foreground scan).
            </param>
            <param name="inPut">
            The input (background scan).
            </param>
            <param name="inputCounter">
            The input (background scan) counter.
            </param>
            <param name="massFuzz">
            The mass fuzz (tolerance).
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SubtractProfileSegments(System.Boolean,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            The subtract profile segments.
            </summary>
            <param name="identicalFlag">
            The identical flag.
            </param>
            <param name="currentScan">
            The current scan.
            </param>
            <param name="inputScan">
            The input scan.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SubtractSegment(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan,System.Int32,ThermoFisher.CommonCore.Data.Business.SegmentedScan[],System.Double@,System.Double@)">
            <summary>
            The subtract segment.
            </summary>
            <param name="leftScan">
            The left scan.
            </param>
            <param name="leftSegment">
            The left segment.
            </param>
            <param name="rightSegment">
            The right segment.
            </param>
            <param name="segmentNumber">
            The segment number.
            </param>
            <param name="resultScanSegments">
            The result scan segments.
            </param>
            <param name="baseHeight">
            The base height.
            </param>
            <param name="baseMass">
            The base mass.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.SubtractSegments(System.Boolean,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            The subtract segments.
            </summary>
            <param name="identicalFlag">
            The identical flag.
            </param>
            <param name="leftScan">
            The left scan.
            </param>
            <param name="rightScan">
            The right scan.
            </param>
            <returns>
            The subtraction result
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.TryToMergeSimilarScans(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Try to merge similar scans.
            </summary>
            <param name="currentScanObject">
            The current scan object.
            </param>
            <param name="inputScanObject">
            The input scan object.
            </param>
            <param name="bothCentroids">
            The both centroids.
            </param>
            <param name="counter">
            The counter.
            </param>
            <param name="canMerge">
            The can merge.
            </param>
            <returns>
            True if can merge similar scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.UpdateSegmentSizes(ThermoFisher.CommonCore.Data.Business.SegmentedScan,ThermoFisher.CommonCore.Data.Business.SegmentedScan[])">
            <summary>
            The update segment sizes.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <param name="segments">
            The segments.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ValidateCentroidScan(ThermoFisher.CommonCore.Data.Business.CentroidStream)">
            <summary>
            The validate centroid scan.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ValidateSegmentedScan(ThermoFisher.CommonCore.Data.Business.SegmentedScan)">
            <summary>
            The validate segmented scan.
            </summary>
            <param name="scan">
            The scan.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ConvertTolerance(System.Int32,System.Double[])">
            <summary>
            Convert tolerance into mass.
            </summary>
            <param name="prof">
            The prof.
            </param>
            <param name="positions">
            The positions.
            </param>
            <returns>
            The converted tolerance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.Fragment(System.Int32)">
            <summary>
            Find peaks in the current segment (part of centroiding)
            </summary>
            <param name="segment">The scan segment (SIM/SRM range)
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.Scan.ReadFromFile(ThermoFisher.CommonCore.Data.Interfaces.IRawData,System.Int32,ThermoFisher.CommonCore.Data.Business.ScanStatistics)">
            <summary>
            The read from file.
            </summary>
            <param name="rawFile">
            The raw file.
            </param>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="stats">
            The stats.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult">
            <summary>
            The fragment result.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult.Intensity">
            <summary>
            Gets or sets Intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult.Mass">
            <summary>
            Gets or sets Mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.Scan.FragmentResult.Options">
            <summary>
            Gets or sets Options.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanAndIndex">
            <summary>
            Helper class for parallel chromatogram generation.
            This object pulls data from constructor data into the required
            properties to meet the interface.
            This object can be used over 1 billion times when generating chromatograms
            from a sequence of raw files (especially the scan event helper),
            so all data is pulled into properties.
            This object can then be used as a "class" rather than "interface" 
            permitting the compiler to inline.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanAndIndex.#ctor(ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanAndIndex"/> class.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <param name="scanIndex">
            The scan index.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanAndIndex.Header">
            <summary>
            Gets the header, wrapper from supplied interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanAndIndex.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanAndIndex.ScanEvent">
            <summary>
            Gets the scan event helper.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanAndIndex.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanAndIndex.Event">
            <summary>
            Gets the scan event 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanAveragerFactory">
            <summary>
            Provides a means of averaging scans
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanAveragerFactory.CreateAverager">
            <summary>
            Create a factory, which can be used to average scans.
            </summary>
            <returns>
            The tool to average
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanAveragerFactory.GetScanAverager(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Create a scan averaging tool, for use with a specific raw file.
            This can then be use to average selected scans from the file.
            Processing of scan filters, and default values for tolerance
            also use the supplied raw data interface.
            </summary>
            <param name="data">Access to data to be averaged</param>
            <returns>Interface to perform averaging</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IExtendedCentroids">
            <summary>
            Defines an extended centroid scan (FTMS data), which includes analysis of charge envelopes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IExtendedCentroids.HasChargeEnvelopes">
            <summary>
            Gets a value indicating whether charge envelope data 
            was recorded for this scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IExtendedCentroids.Annotations">
            <summary>
            Gets additional annotations per peak, related to change envelopes
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IExtendedCentroids.ChargeEnvelopes">
            <summary>
            Gets the change envelopes. This include overall information
            about the envelope, plus the set of included peaks, 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary">
            <summary>
            All isotopes just having a different charge will be grouped together in a charge envelope. Due
            to calculation restrictions it is quite likely that there are further peaks which theoretically
            be part of the same charge envelope, but where noise level, neighborhood, hardware limitations
            keep those peaks unassigned.
            This interfaces has statistics about a charge envelope, but not the contributing peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.MonoisotopicMass">
            <summary>
            This is the monoisotopic mass that a particular peak belongs to. The value is
            a calculated one, it is very likely that this cannot be seen at all in the spectrum.
            But it is the reference point of all members of one charge envelope.
            <para>
            Note that the value becomes 0 if the value is not isotopically resolved. See also <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.AverageMass"/> and
            <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.IsIsotopicallyResolved"/>
            </para>
            <para>
             Keep in mind that depending on instrument calibration this value may not exactly match a calculated mass.
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.CrossCorrelation">
            <summary>
            This cross-correlation factor is the maximum of all cross-correlation values
            over all averagines. An averagine is a statistical model of the isotope distribution
            of the same molecule at a given charge. The observed peaks within the spectrum are fitted
            to the model, the overlap is calculated by a cross-correlation that only takes the intensities
            into account.
            <para>
            The averagine model is strongly linked to peptide analysis. As an example, averagine
            mass distribution for pesticides are totally different.
            </para>
            <para>
            Cross-correlation factors vary in the range 0 to 1. 0 will be set if <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.MonoisotopicMass"/>
            is also 0. In this case, the fit was unsuccessful. The value is also 0 if <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.IsIsotopicallyResolved"/>
            is set.
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.TopPeakCentroidId">
            <summary>
            This is the index to the top peak centroid in the centroid list coming with the same scan.
            One can use this to get access to the mass of the so called top peak.
            </summary>
            <remarks>
            The top peak is that peak in a charge envelope that fulfills two requirements in this order: 1) never being considered
            to be part of another charge envelope, and 2) having the highest abundance.
            </remarks>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.IsIsotopicallyResolved">
            <summary>
            Return whether this charge envelope was created using isotopically resolved species.
            <para>
            For isotopically resolved peaks the <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.MonoisotopicMass"/>
            is set. If not resolved, only an average mass is returned.
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.AverageMass">
            <summary>
            When peaks are non-isotopically resolved (see <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.IsIsotopicallyResolved"/>),
            this value contains the average mass of all species in the envelope, otherwise it contains 0.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IChargeEnvelope">
            <summary>
            Defines a set of peaks which are part of a charge envelope
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelope.Peaks">
            <summary>
            Gets or sets the collection of peaks in this charge envelopes
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelope.TopPeakCentroidId">
            <summary>
            Gets or sets the index into the centroids for the top peak
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopePeak">
            <summary>
            Data about a single peak within a charge envelope.
            <para>
            This grouping has a separate structure explained in <see cref="T:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary"/>. While presentation to CC consumers
            may be different, the (at least Orbitrap-)generated data structure allocates one 16-bit value for each centroid.
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopePeak.IsMonoisotopic">
            <summary>
            Returns true if the peak is a monoisotopic peak, false otherwise.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopePeak.IsClusterTop">
            <summary>
            Returns true if the conditions below met, false otherwise.
            <para>
            The top peak is that peak in a charge envelope that fulfills two requirements in this order:
            1) never being considered to be part of another charge envelope, and
            2) having the highest abundance.
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopePeak.IsIsotopicallyResolved">
            <summary>
            Returns true if the peak and its charge envelope have further isotope sibling (according to averagine model, etc).
            <para>
            Note that a charge envelope must be considered non-isotopically resolved if at least one of its peaks has this flag "false",
            and it can be considered an error if some peaks of an envelope have this flag set and other peaks not.
            </para>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IApdPeakAnnotation">
            <summary>
            Advanced Peak Detection on (FT) scans allow to better calculate charges of peaks. This is done by finding correlations
            of peaks. If found, the assumption is considered valid that these peaks belong to the same species of a molecule, but
            with different charges.
            <para>
            This grouping has a separate structure explained in <see cref="T:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary"/>. While presentation to CC consumers
            may be different, the (at least Orbitrap-)generated data structure allocates one 16-bit value for each centroid.
            </para>
            <para>
            The 16-bit value contains three bits and an index number into an array of <see cref="T:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary"/>s which also come
            with the same scan.
            TODO
            This is an interface. Implementation details ( such as "structure is 16 bit") are not meaningful here.
            Describe instead "What information is presented to the consumer".
            Using IPeakAnnotation you can ???
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IApdPeakAnnotation.ChargeEnvelopeIndex">
            <summary>
            Returns null if information is not available (as with non-APD annotated Orbitrap spectra or unresolved peaks),
            the index to the corresponding <see cref="T:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary"/> otherwise. Values out of range must not exist and should be checked
            in advance.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ICentroidAnnotations">
            <summary>
            Defines data which explains how charges are calculated.
            ChargeEnvelopes contains summary information about each detected envelope.
            CentroidAnnotations can be used to determine which charge envelope (if any) a peak belongs to.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidAnnotations.HasChargeEnvelopes">
            <summary>
            Gets or sets a flag indicating whether there are charge envelopes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidAnnotations.IsValid">
            <summary>
            Gets a value indicating whether this is valid "charge envelope" data, when decoded from a raw file.
            Raw files have diagnostic sections of potentially unknown formats, so it is possible that, even though some data exists, it
            cannot be decoded as charge envelopes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidAnnotations.ChargeEnvelopes">
            <summary>
            Gets summary informtion the "charge envelopes". Purpose needs to be detailed?
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ICentroidAnnotations.CentroidAnnotations">
            <summary>
            Gets the "Centroid Annotations". Purpose needs to be detailed?
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions">
            <summary>
            This class can be ued to decode instrument specific additional data saved with a scan.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.ScanAnnotations(ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtended,System.Int32)">
            <summary>
            Obtain the annotations for a specific scan
            </summary>
            <param name="data">The raw file</param>
            <param name="scan">scan number</param>
            <returns>Annotations for this scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.CentroidsWithAnnotations(ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtended,System.Int32,System.Boolean)">
            <summary>
            Read centroid data for a scan, with annotations (where available).
            These annotations are set by the charge calculator in some instruments.
            </summary>
            <param name="data">The raw file</param>
            <param name="scan">scan number</param>
            <param name="includeReferenceAndExceptionPeaks">set if reference and exception peaks should be returned</param>
            <returns>The extended scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.GetExtendedCentroids(ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtended,System.Int32,System.Boolean)">
            <summary>
            Read centroid data for a scan, with annotations (where available).
            These annotations are set by the charge calculator in some instruments.
            This version returns an internal type
            </summary>
            <param name="data">The raw file</param>
            <param name="scan">scan number</param>
            <param name="includeReferenceAndExceptionPeaks">set if reference and exception peaks should be returned</param>
            <returns>The extended scan</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.ExtendedCentroids">
            <summary>
            An extension of centroids which includes:
            Peak charge envelopes.
            Annotations for each centroid
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.ExtendedCentroids.#ctor(ThermoFisher.CommonCore.Data.Business.CentroidStream)">
            <summary>
            Created an extended centroid stream by making a copy of the base data
            </summary>
            <param name="labelData"></param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.ExtendedCentroids.Annotations">
            <summary>
            Gets or sets the annotation about charge envelopes for each peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.ExtendedCentroids.HasChargeEnvelopes">
            <summary>
            Gets or sets a value indicating whether charge envelope data 
            was recorded for this scan
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData">
            <summary>
            This class converts the byte array within the debug section of an Orbitrap scan to a list
            of centroid annotations. Those annotations may point to charge envelopes, they also become
            available.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.HasChargeEnvelopes">
            <summary>
            Gets or sets a flag indicating whether there are charge envelopes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.IsValid">
            <summary>
            Gets or sets a value indicating whether this is valid data.
            It is valid, even if there is no data available.
            It is invalid if data has been found, but cannot be decoded.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopes">
            <summary>
            Get access to the charge envelopes. It is an empty array if no APD data has been calculated
            or if unfolding the binary data shows errors.
            </summary>
            <returns>Returns the charge envelopes of the scan</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.CentroidAnnotations">
            <summary>
            Get access to the centroid peak annotations. It is an empty array if no APD data has been calculated
            or if unfolding the binary data shows errors.
            </summary>
            <returns>Returns the peak annotations of the scan</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment">
            <summary>
            This class defines the characteristics of an Orbitrap debug subsegment.
            <para>
            The debug section according to unified_data_format.html has the format:
            <list type="table">
              <listheader>
                <term>  Type         </term><description>     Meaning                                                                </description>
              </listheader>
              <item>
                <term>  Uint32       </term><description>     Or'd combination of all debug sub-section flags + some extra bits      </description>
                <term>  SubSection   </term><description>     defined below                                                          </description>
                <term>  SubSection   </term><description>     further sub-sections, end defined by overall length of debug section   </description>
              </item>
            </list>
            </para>
            <para>
            The debug sub-section according to unified_data_format.html has the format:
            <list type="table">
              <listheader>
                <term>  Type         </term><description>     Meaning                                                                </description>
              </listheader>
              <item>
                <term>  Uint32       </term><description>     Content flags (0x100 = transients, 0x80000 for extensions, see below)  </description>
                <term>  UInt32       </term><description>     Count of 32-bit word of this sub-section                               </description>
                <term>  UInt32[]     </term><description>     Content depending on sub-section                                       </description>
              </item>
            </list>
            </para>
            <para>
            The APD extensions and all other extensions have an UInt32 specifier as first 32-bit word what data follows. The specifiers are:
            <list type="table">
              <listheader>
                <term>Value </term><description>     Meaning                                                                </description>
              </listheader>
              <item>
                <term>  1   </term><description>     transients (effectively not in use)                                    </description>
                <term>  2   </term><description>     Annotations (array of 16-bit values for each centroid)                 </description>
                <term>  3   </term><description>     ChargeEnvelopes (array of those)                                       </description>
              </item>
            </list>
            </para>
            <para>
            The APD annotations section is an array or annotation elements, each consisting of 16-bit values, one for each centroid. For an
            odd number of centroids, there exists a further 16-bit value of unknown content. Each annotation has a format described in
            class description of <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation"/>.
            </para>
            <para>
            The APD charge envelopes section is an array or charge envelopes. Each charge envelopes has a format described in
            class description of <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary"/>.
            </para>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment.DebugSegmentType">
            <summary>
            What type of sub-segment do we have?
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment.TransientsDebugHeaderBit">
            <summary>
            According to unified_data_format.html, DBUGCON definition, the 9th LSB bit
            is a send_transient section.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment.OrbitrapExtensionDebugHeaderBit">
            <summary>
            This value is reserved for extensions of the debug section. Sub-segments have a further indicator
            describing the packet type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment.OrbitrapAnnotationSegmentIdentifier">
            <summary>
            This debug segment extension is an array of <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation"/>s.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment.OrbitrapChargeEnvelopeSegmentIdentifier">
            <summary>
            This debug segment extension is an array of <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary"/>s.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment.ArrayOffset">
            <summary>
            This is the offset into the byte array to which this structure belongs.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment.Size">
            <summary>
            Access to the size of data in section without headers in 32-bit words.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment.SegmentType">
            <summary>
            What kind of debug sub-segment is contained in this sub-segment?
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation">
            <summary>
            This structure is one element of the annotations <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment"/>. The format is:
            <para>
            <list type="table">
              <listheader>
                <term>  Bit          </term><description>     Meaning                                                     </description>
              </listheader>
              <item>
                <term>  0-12 (LSB)   </term><description>     Index into array of charge envelopes (0x1FFF=no envelope)   </description>
                <term>  13           </term><description>     Flag IsNonIsotopicallyResolved                              </description>
                <term>  14           </term><description>     Flag IsClusterTop                                           </description>
                <term>  15           </term><description>     Flag IsMonoisotopic                                         </description>
              </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation.IsMonoisotopic">
            <summary>
            Implementation of <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopePeak.IsMonoisotopic"/>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation.IsClusterTop">
            <summary>
            Implementation of <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopePeak.IsClusterTop"/>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation.IsIsotopicallyResolved">
            <summary>
            Implementation of <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopePeak.IsIsotopicallyResolved"/>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation.IsNonIsotopicallyResolved">
            <summary>
            Not resolved
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation.ChargeEnvelopeIndex">
            <summary>
            Implementation of <see cref="P:ThermoFisher.CommonCore.Data.Business.IApdPeakAnnotation.ChargeEnvelopeIndex"/>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeStored">
            <summary>
            This structure is one element of the charge envelopes <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.DebugSubSegment"/>. The format is:
            <para>
            <list type="table">
              <listheader>
                <term>  Type       </term><description>     Meaning                                                                                </description>
              </listheader>
              <item>
                <term>  double     </term><description>     Usually monoisotopic mass (with respect to instrument accuracy), can be average mass   </description>
                <term>  float      </term><description>     Cross-correlation of applied model (like averagine), can be 0 for various reasons      </description>
                <term>  (U)Int32   </term><description>     Index into centroid list of peak being most abundant in this envelope                  </description>
              </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeStored.Mass">
            <summary>
            Access to the stored mass, which is either the monoisotopic mass or rge average mass, depending on flags of the annotation section.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeStored.Xcorr">
            <summary>
            Cross-correlation in the range [0 - 1] of the fitting of the envelope.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeStored.Index">
            <summary>
            Index into the array of centroids. The indexed centroid is the most abundant of all centroids belonging to this envelope.
            <para>
            Orbitrap format never uses addresses more than 2**30 peaks, so no need for uint.
            </para>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary">
            <summary>
            This class implements <see cref="T:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary"/>. It bases on a stored Orbitrap data block.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary.#ctor(ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeStored)">
            <summary>
            Initialize a <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary"/> and assign the structure on which it bases.
            </summary>
            <param name="stored">Data structure containing its core values</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary.MonoisotopicMass">
            <summary>
            Returns the monoisotopic mass for a model-fitted envelope and all species belonging to
            this envelope with respect to the mass accuracy or 0 if resolved non-isotopically.
            See <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.AverageMass"/>.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary.CrossCorrelation">
            <summary>
            Cross-correlation value of the model fitting in the range 0-1. Value remains 0 for non-isotopically
            resolved peaks or unsuccessful fittings. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary.ThermoFisher#CommonCore#Data#Business#IChargeEnvelopeSummary#TopPeakCentroidId">
            <summary>
            Index into centroid list to the most abundant centroid within this envelope. The value can be used
            for grouping.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary.IsNonIsotopicallyResolved">
            <summary>
            Returns true if at least one peak belonging to the charge envelope was non-isotopically resolved.
            <para>
            Call the setter for each <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation"/> in order to detect non-isotopically resolved peaks.
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary.IsIsotopicallyResolved">
            <summary>
            Returns true if at least one peak belonging to the charge envelope was non-isotopically resolved.
            <para>
            Call the setter for each <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.Annotation"/> in order to detect non-isotopically resolved peaks.
            </para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDataExtensions.UnfoldedApdData.ChargeEnvelopeSummary.AverageMass">
            <summary>
            Returns 0 for a model-fitted envelope or the average mass if resolved non-isotopically.
            See <see cref="P:ThermoFisher.CommonCore.Data.Business.IChargeEnvelopeSummary.AverageMass"/>.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.TokenClass">
            <summary>
            category of tokens with a scan filter
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TokenClass.RangeToken">
            <summary>
            A mass range token.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TokenClass.Generic">
            <summary>
            A generic token (a string, such as "Full").
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TokenClass.DataFormat">
            <summary>
            A data format ("p" or "c").
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TokenClass.Polarity">
            <summary>
            A polarity token ("+" or "-").
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TokenClass.MsOrder">
            <summary>
            An MS order token.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TokenClass.ParentMass">
            <summary>
            A parent mass.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.TokenClass.DataDependent">
            <summary>
            A data dependent token "d".
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanDefinition">
            <summary>
            Describes a scan, based on interpreting filter strings.
            This class need not be serialized or cloned, as it is intended to be "read only"
            All information can be kept as a string. Call FromString to initialize this.
            This class is designed for use where filter information is
            only available as a string (such as with implementations of IRawData)
            Newer code (with IRawDataPlus) should use IScanFilter for details about filters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDefinition.Polarity">
            <summary>
            Gets or sets the Polarity, Positive or Negative ions
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDefinition.DataDependent">
            <summary>
            Gets or sets a value indicating whether this scan depends on data in previous scans
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDefinition.IsCentroid">
            <summary>
            Gets or sets a value indicating whether the scan is centroid format (else profile)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDefinition.Precursors">
            <summary>
            Gets the precursor masses and their means of activation
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDefinition.MsOrder">
            <summary>
            Gets or sets the MS or MS/MS order (for example 2 for MS/MS)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDefinition.Ranges">
            <summary>
            Gets or sets the Mass Ranges scanned
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDefinition.Msx">
            <summary>
            Gets or sets a value indicating whether this is an MSX scan type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanDefinition.MassRangeMatchingTolerance">
            <summary>
            Gets or sets the tolerance used when matching mass ranges.
            It is initialized to 0.0005.
            On parsing a string (using the FromString method), this is set based on the precision of the "low mass value" from the string.
            For example, for a mass range of "34.256 - 41.365" the precision is determined to be 3 decimal places
            and the tolerance is initialized to "0.0005" which will match items which have the same "3 decimals places".
            It is assumed that all values in a parsed string have the same mass precision.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.FromString(System.String)">
            <summary>
            Create a scan definition from a filter strings. The string is formatted as a list of text tokens, separated by spaces.
            Most tokens can be any text, apart from some specifically parsed items:
            <c>
            + Positive
            - Negative
            d data dependant
            c Centroid
            p Profile
            [Ranges]    scanned ranges, for example [100.1-300.2,556.8-901.4]
            </c>
            </summary>
            <param name="from">
            String to parse
            </param>
            <returns>
            Scan definition which matches the string
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.Sort(System.String[])">
            <summary>
            Sort the filters in alphabetic and numeric order of appropriate fields.
            It is assumed that the supplied list has been automatically generated, and
            therefore filters with the same parameters will have those in the same order
            in the string.
            </summary>
            <param name="filters">
            Items to sort
            </param>
            <returns>
            A sorted list of the filters
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.SortAndCompact(System.String[],ThermoFisher.CommonCore.Data.IMassOptionsAccess)">
            <summary>
            Sort the filters in alphabetic and numeric order of appropriate fields.
            Compact the filters, so that filters which match within tolerance are eliminated.
            This is designed to take input from "Auto filter" or similar methods.
            It is not designed to take a "user generated list".
            It is assumed that the supplied list has been automatically generated, and
            therefore filters with the same parameters will have those in the same order
            in the string.
            </summary>
            <param name="filters">
            Items to sort
            </param>
            <param name="precursorMassTolerance">
            Tolerance for matching precursor masses.
            If this is zero, then the tolerance is based on the number of precision digits entered in the text
            </param>
            <returns>
            A sorted list of the filters
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanDefinition"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.ToTokens">
            <summary>
            The list of sub strings (tokens) in the supplied filter text
            </summary>
            <returns>
            The tokens.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.ToString">
            <summary>
            Convert to a text string
            </summary>
            <returns>
            String form of the filter
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.StripNumber(System.Text.StringBuilder,System.Int32@)">
            <summary>
            Strip a number. Removes a number from the start of the supplied string.
            </summary>
            <param name="stringWithNumber">
            The string, which should start with a number.
            </param>
            <param name="decimals">
            The number of decimal places found in the string.
            </param>
            <returns>
            The stripped number.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.ParseDefinitions(System.String[])">
            <summary>
            Parse definitions.
            </summary>
            <param name="filters">
            The filters.
            </param>
            <returns>
            The parsed scan definitions
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.ConvertDefinitionsToStrings(System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Business.ScanDefinition})">
            <summary>
            Convert definitions to strings.
            </summary>
            <param name="definitions">
            The definitions.
            </param>
            <returns>
            The strings for each scan definition
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.CreateUniqueList(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.ScanDefinition},ThermoFisher.CommonCore.Data.IMassOptionsAccess)">
            <summary>
            Create a unique list of definitions, from a list which may have duplicates.
            </summary>
            <param name="definitions">
            The definitions.
            </param>
            <param name="precursorMassTolerance">
            The precursor mass tolerance.
            </param>
            <returns>
            The list of unique definitions
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.MatchGeneric(ThermoFisher.CommonCore.Data.Business.TokenAndType,System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.TokenAndType})">
            <summary>
            Match a generic token
            </summary>
            <param name="token">
            Token to look for
            </param>
            <param name="scanFilterTokens">
            List of all tokens in the scan filter
            </param>
            <returns>
            True if the token is found
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.ReadActivationString(System.Text.StringBuilder,ThermoFisher.CommonCore.Data.Business.Precursor)">
            <summary>
            Read the activation code string.
            </summary>
            <param name="builder">
            The string being parsed.
            </param>
            <param name="precursor">
            The precursor to update.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.RangesFromToken(System.String,System.Text.StringBuilder)">
            <summary>
            Find ranges from token.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="parsed">
            The parsed.
            </param>
            <returns>
            The mass ranges
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.CreateFromString(System.String)">
            <summary>
            Create from a string.
            </summary>
            <param name="from">
            The string to create from.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.AddMsOrder(System.Int32,System.String)">
            <summary>
            Add the MS order.
            </summary>
            <param name="parentMassesExpected">
            The number of parent masses expected before this call.
            </param>
            <param name="item">
            The item.
            </param>
            <returns>
            The number of parent masses expected after parsing the MS order.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.AddInitialRange(System.String,System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.Range})">
            <summary>
            Add initial mass range.
            </summary>
            <param name="item">
            The item to parse.
            </param>
            <param name="massRanges">
            The mass ranges found so far.
            </param>
            <returns>
            True if more mass ranges are expected.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.AddSingleCharItem(System.String)">
            <summary>
            Add a single char item.
            </summary>
            <param name="item">
            The item to add.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.AddRange(System.String,System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.Range})">
            <summary>
            Add a mass range.
            </summary>
            <param name="item">
            The item containing a range.
            </param>
            <param name="massRanges">
            The mass ranges found so far.
            </param>
            <returns>
            True if more mass ranges are expected.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.AddParentMass(System.Int32,System.String,System.String)">
            <summary>
            Add a parent mass.
            </summary>
            <param name="parentMassesExpected">
            The number of parent masses expected.
            </param>
            <param name="item">
            The item.
            </param>
            <param name="nextToken">
            The next token.
            </param>
            <returns>
            True if more parent masses are expected.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.AddToken(System.String,ThermoFisher.CommonCore.Data.Business.TokenClass)">
            <summary>
            Add a token.
            </summary>
            <param name="token">
            The token.
            </param>
            <param name="tokenClass">
            The token class.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.MatchToScanType(System.String)">
            <summary>
            Test if a scan type "passes the filter", that is the scan
            type is the same as, or is a superset of the scan definition.
            </summary>
            <param name="scanType">
            The type of the scan which needs to be checked
            </param>
            <returns>
            true if the supplied scan has passed a filter against this scan definition
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <c></c> is out of range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.Match(ThermoFisher.CommonCore.Data.Business.ScanDefinition,ThermoFisher.CommonCore.Data.IMassOptionsAccess)">
            <summary>
            Test if a scan type "passes the filter", that is the scan
            type is the same as, or is a superset of this scan definition.
            The exact test is: All tokens in "this" must be present in "scanTypeFilter".
            </summary>
            <param name="scanTypeToCheck">
            The type of the scan which needs to be checked
            </param>
            <param name="precursorMassTolerance">
            Mass tolerance used to match MS/MS precursors
            </param>
            <returns>
            true if the supplied scan has passed a filter against this scan definition
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.TestForMatchingToken(ThermoFisher.CommonCore.Data.Business.ScanDefinition,ThermoFisher.CommonCore.Data.Business.TokenAndType,System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.TokenAndType},ThermoFisher.CommonCore.Data.IMassOptionsAccess)">
            <summary>
            Test for a matching token.
            Test that the token from "the tokens in this" is contained within "scan type to check"
            </summary>
            <param name="scanTypeToCheck">
            The scan type to check (for being a superset of "this").
            </param>
            <param name="token">
            The token to look for, in "scan type to check"
            </param>
            <param name="scanToCheckTokens">
            The tokens of the scan being tested.
            </param>
            <param name="precursorMassTolerance">
            The precursor mass tolerance.
            </param>
            <returns>
            True if there is a match
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            thrown if the token is not valid
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.MatchPrecursors(ThermoFisher.CommonCore.Data.Business.ScanDefinition,ThermoFisher.CommonCore.Data.IMassOptionsAccess)">
            <summary>
            Match precursors.
            </summary>
            <param name="scanTypeFilter">
            The scan type filter.
            </param>
            <param name="precursorMassTolerance">
            The precursor mass tolerance.
            </param>
            <returns>
            True if precursors match.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.GetComparisonTolerance(ThermoFisher.CommonCore.Data.IMassOptionsAccess,ThermoFisher.CommonCore.Data.Business.Precursor,ThermoFisher.CommonCore.Data.Business.Precursor)">
            <summary>
            Get comparison tolerance.
            </summary>
            <param name="precursorMassTolerance">
            The precursor mass tolerance.
            </param>
            <param name="precursor">
            The precursor.
            </param>
            <param name="otherPrecursor">
            The other precursor.
            </param>
            <returns>
            The comparison tolerance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.MatchRanges(ThermoFisher.CommonCore.Data.Business.ScanDefinition,System.Double)">
            <summary>
            match the ranges.
            </summary>
            <param name="scanTypeToCheck">
            The filter.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            True if ranges match.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.CompareTo(ThermoFisher.CommonCore.Data.Business.ScanDefinition)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
             The return value has the following meanings: 
             Value              Meaning 
             Less than zero     This object is less than the <paramref name="other"/> parameter.
             Zero               This object is equal to <paramref name="other"/>. 
             Greater than zero  This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.CompareMassRanges(ThermoFisher.CommonCore.Data.Business.ScanDefinition)">
            <summary>
            Compares the current Ranges with another object's Ranges.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings: 
            Value               Meaning 
            Less than zero      This object is less than the <paramref name="other"/> parameter.
            Zero                This object is equal to <paramref name="other"/>. 
            Greater than zero   This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanDefinition.ComparePrecursors(ThermoFisher.CommonCore.Data.Business.ScanDefinition)">
            <summary>
            Compares the current object's Precursors with another object's Precursors.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
            Value               Meaning 
            Less than zero      This object is less than the <paramref name="other"/> parameter.
            Zero                This object is equal to <paramref name="other"/>. 
            Greater than zero   This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">
            An object to compare with this object.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder">
            <summary>
            The scan event builder.
            This class permits a scan event to be built, by adding
            MS/MS reactions, mass ranges etc.
            It can be used as a helper to log MS data into a raw file.
            This builder does not support parsing from a filter string,
            or conversion to filter string format.
            The "ToString" method provides basic .Net object formatting only.
            The builder may be constructed as default or from IScanEvent or IScanFilter.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder"/> class.
            </summary>
            <param name="other">
            Copies data from the supplied event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder"/> class.
            Note that this constructor makes a best case mapping between filter and event
            Some items specific to filter (such as "MassPrecision") cannot be preserved.
            Event only features (such as "IsCustom") are initialized to defaults.
            applications using this feature should test use cases.
            </summary>
            <param name="other">
            Copies data from the supplied filter.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CopyBaseItems(ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase)">
            <summary>
            copy base interface items.
            </summary>
            <param name="other">
            The other.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder"/> class.
            Most properties are initialized to "Any" (feature not used).
            Numeric values have defaults (0), apart from <c>ScanTypeIndex</c>
            which is set to "-1" for undefined.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AccurateMass">
            <summary>
            Gets or sets the accurate mass setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CompensationVoltage">
            <summary>
            Gets or sets Compensation Voltage Option setting.
            Composition voltage is exclusive with source fragmentation,
            so only one may be active.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CompensationVoltType">
            <summary>
            Gets or sets Compensation Voltage type setting.
            Composition voltage is exclusive with source fragmentation,
            so only one may be active.
            When set to SingleValue a value must be added using AddSourceFragmentationInfo.
            When set to Ramp two values must be added using AddSourceFragmentationInfo.
            When set to SIM, there must be one value added per (scanned) mass range.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Corona">
            <summary>
            Gets or sets the corona scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Dependent">
            <summary>
            Gets or sets the dependent scan setting.
            A scan is "dependent" if the scanning method is based
            on analysis of data from a previous scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Detector">
            <summary>
            Gets or sets the detector scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.DetectorType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.DetectorValue">
            <summary>
            Gets or sets the detector value.
            </summary>
            <value>Floating point detector value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ElectronCaptureDissociation">
            <summary>
            Gets or sets the electron capture dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ElectronCaptureDissociationValue">
            <summary>
            Gets or sets the electron capture dissociation value.
            </summary>
            <value>Floating point electron capture dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ElectronTransferDissociation">
            <summary>
            Gets or sets the electron transfer dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ElectronTransferDissociationValue">
            <summary>
            Gets or sets the electron transfer dissociation value.
            </summary>
            <value>Floating point electron transfer dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Enhanced">
            <summary>
            Gets or sets the enhanced scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.FieldFreeRegion">
            <summary>
            Gets or sets the field free region setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.HigherEnergyCiD">
            <summary>
            Gets or sets the higher energy CID setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.HigherEnergyCiDValue">
            <summary>
            Gets or sets the higher energy CID value.
            </summary>
            <value>Floating point higher energy CID value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.IonizationMode">
            <summary>
            Gets or sets the ionization mode scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.IsCustom">
            <summary>
            Gets or sets a value indicating whether this is a custom event.
            A custom event implies that any scan derived from this event could be different.
            The scan type must be inspected to determine the scanning mode, and not the event.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.IsValid">
            <summary>
            Gets a value indicating whether this event is valid.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ExpectedSid">
            <summary>
            Gets the number expected SID values.
            </summary>
            <returns>
            The number of values
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ExpectedCv">
            <summary>
            Gets the number expected CV values.
            </summary>
            <returns>
            The number of values
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Lock">
            <summary>
            Gets or sets the lock scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MassAnalyzer">
            <summary>
            Gets or sets the mass analyzer scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MassCalibratorCount">
            <summary>
            Gets the mass calibrator count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MassCount">
            <summary>
            Gets the number of (precursor) masses
            </summary>
            <value>The size of mass array</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MassRangeCount">
            <summary>
            Gets the number of mass ranges for final scan
            </summary>
            <value>The size of mass range array</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MSOrder">
            <summary>
            Gets or sets the scan MS/MS power setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MultiNotch">
            <summary>
            Gets or sets the Multi notch (Synchronous Precursor Selection) type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MultiplePhotonDissociation">
            <summary>
            Gets or sets the multi-photon dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MultiplePhotonDissociationValue">
            <summary>
            Gets or sets the multi-photon dissociation value.
            </summary>
            <value>Floating point multi-photon dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Multiplex">
            <summary>
            Gets or sets the Multiplex type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MultiStateActivation">
            <summary>
            Gets or sets MultiStateActivation type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Name">
            <summary>
            Gets or sets the event Name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ParamA">
            <summary>
            Gets or sets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ParamB">
            <summary>
            Gets or sets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ParamF">
            <summary>
            Gets or sets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ParamR">
            <summary>
            Gets or sets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ParamV">
            <summary>
            Gets or sets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.PhotoIonization">
            <summary>
            Gets or sets the photo ionization setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Polarity">
            <summary>
            Gets or sets the polarity of the scan.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.PolarityType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.PulsedQDissociation">
            <summary>
            Gets or sets the pulsed dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.PulsedQDissociationValue">
            <summary>
            Gets or sets the pulsed dissociation value.
            </summary>
            <value>Floating point pulsed dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ScanData">
            <summary>
            Gets or sets the scan data format (profile or centroid).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ScanMode">
            <summary>
            Gets or sets the scan type setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ScanTypeIndex">
            <summary>
            Gets or sets encoded form of segment and scan event number.
            </summary>
            <value>HIWORD == segment, LOWORD == scan type</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.SectorScan">
            <summary>
            Gets or sets the sector scan setting. Applies to 2 sector (Magnetic, electrostatic) Mass spectrometers, or hybrids.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.SourceFragmentation">
            <summary>
            Gets or sets source fragmentation scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.SourceFragmentationInfoCount">
            <summary>
            Gets the total amount of source fragmentation information.
            This is all data for SID and CV, and is internally needed to
            support IScanEvent.
            To separately count the number of SID vales and CV values, use
            SourceFragmentationValueCount and CompensationVoltageValueCount
            </summary>
            <value>The size of source fragmentation info array</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.SourceFragmentationValueCount">
            <summary>
            Gets the number of Source Fragmentation values.
            </summary>
            <value>The size of source fragmentation values array</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CompensationVoltageValueCount">
            <summary>
            Gets the number of Compensation Voltage Fragmentation values.
            </summary>
            <value>The size of Compensation Voltage values array</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.SourceFragmentationMassRangeCount">
            <summary>
            Gets the source fragmentation mass range count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.SourceFragmentationType">
            <summary>
            Gets or sets the source fragmentation type.
            source fragmentation is exclusive with Composition voltage,
            so only one may be active.
            When set to SingleValue a value must be added using AddSourceFragmentationInfo.
            When set to Ramp two values must be added using AddSourceFragmentationInfo.
            When set to SIM, there must be one value added per (scanned) mass range.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.SupplementalActivation">
            <summary>
            Gets or sets supplemental activation type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.TurboScan">
            <summary>
            Gets or sets the turbo scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Ultra">
            <summary>
            Gets or sets the ultra scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.Wideband">
            <summary>
            Gets or sets the wide band scan setting.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddMassCalibrator(System.Double)">
            <summary>
            add a mass calibrator.
            </summary>
            <param name="calibrator">
            The calibrator to add.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddMassCalibrators(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Adds a set of mass calibrators.
            </summary>
            <param name="calibrators">
            The calibrators to add.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddMassRange(ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Adds a mass range.
            </summary>
            <param name="massRange">
            The mass range.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddMassRanges(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.Range})">
            <summary>
            Adds a set of mass ranges.
            </summary>
            <param name="massRanges">
            The mass ranges to add.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddMsStage(ThermoFisher.CommonCore.Data.Business.MsStage)">
            <summary>
            Adds an MS stage.
            For example: for an MS3 scan, 2 MS stages should be added,
            with the 2 required precursor masses.
            Each stage may have one or more reactions.
            Neutral Loss, Neutral Gain and Parent have 1 stage.
            For multiplex mode, each multiplexed precursor should be added as
            a separate stage. 
            </summary>
            <param name="stage">
            The stage.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetMsStage(System.Int32)">
            <summary>
            Gets an MS stage.
            For example: for an MS3 scan, there will be 2 MS stages
            with the 2 required precursor masses.
            Each stage may have one or more reactions.
            Neutral Loss, Neutral Gain and Parent have 1 stage. 
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The stage at the given index
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.MsStageCount">
            <summary>
            Gets the MS stage count.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddSourceFragmentationValue(System.Double)">
            <summary>
            Add a source fragmentation value.
            This is for "source fragmentation (<c>sid</c>)
            and is only used when "SourceFragmentation" has
            been enabled. Add one value for "Single value" mode or two values
            for "Ramp" mode of the enabled feature.
            For SIM mode, add one value per target mass range.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddCompensationVoltageValue(System.Double)">
            <summary>
            Add a compensation voltage value. This is for "compensation voltage (<c>cv</c>)"
            and used only when "CompensationVoltage" has
            been enabled. Add one value for "Single value" mode or two values
            for "Ramp" mode of the enabled feature.
            For SIM mode, add one value per target mass range.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddSourceFragmentationMassRange(ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Adds a source fragmentation mass range.
            </summary>
            <param name="range">
            The mass range to add.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ClearMassCalibrators">
            <summary>
            Clears the mass calibrators list.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ClearMassRanges">
            <summary>
            clear the list of mass ranges.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ClearMsStages">
            <summary>
            Resets the list of MS/MS stages.
            This may be needed if an event is cloned from another event,
            but the new object needs different MS/MS stages.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ClearSourceFragmentationValues">
            <summary>
            Clears the source fragmentation values.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ClearCompensationVoltageValues">
            <summary>
            Clears the Compensation Voltage values.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.ClearSourceFragmentationMassRanges">
            <summary>
            Clears the source fragmentation mass ranges list.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetActivation(System.Int32)">
            <summary>
            Retrieves activation type at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of activations.
            </remarks>
            <param name="index">
            Index of activation to be retrieved
            </param>
            <returns>
            activation of MS step;
            See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType"/> for possible values
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetEnergy(System.Int32)">
            <summary>
            Retrieves precursor(collision) energy value for MS step at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of energies.
            </remarks>
            <param name="index">
            Index of precursor(collision) energy to be retrieved
            </param>
            <returns>
            precursor(collision) energy of MS step
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetEnergyValid(System.Int32)">
            <summary>
            Retrieves precursor(collision) energy validation flag at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of precursor(collision) energy validations.
            </remarks>
            <param name="index">
            Index of precursor(collision) energy validation to be retrieved
            </param>
            <returns>
            precursor(collision) energy validation of MS step;
            See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.EnergyType"/> for possible values
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetFirstPrecursorMass(System.Int32)">
            <summary>
            Gets the first precursor mass.
            This is only valid data where "GetPrecursorRangeValidity" returns true for the same index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The first mass
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetIsMultipleActivation(System.Int32)">
            <summary>
            Retrieves multiple activations flag at 0-based index of masses.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of masses.
            </remarks>
            <param name="index">
            Index of flag to be retrieved
            </param>
            <returns>
            true if mass at given index has multiple activations;  false otherwise
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetIsolationWidth(System.Int32)">
            <summary>
            Gets the isolation width.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The isolation width
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetIsolationWidthOffset(System.Int32)">
            <summary>
            Gets the isolation width offset.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The isolation width offset
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetLastPrecursorMass(System.Int32)">
            <summary>
            Gets the last precursor mass.
            This is only valid data where "GetPrecursorRangeValidity" returns true for the same index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The last mass
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetMass(System.Int32)">
            <summary>
            Retrieves mass value for MS step at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of mass values.
            </remarks>
            <param name="index">
            Index of mass value to be retrieved
            </param>
            <returns>
            Mass value of MS step
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= MassCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetMassCalibrator(System.Int32)">
            <summary>
            Gets the mass calibrator, at a given index.
            </summary>
            <param name="index">
            The index, which should be from 0 to MassCalibratorCount -1
            </param>
            <returns>
            The mass calibrator.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when requesting calibrator above count</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetMassRange(System.Int32)">
            <summary>
            Retrieves mass range for final scan at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassRangeCount"/> to get the count of mass ranges.
            </remarks>
            <param name="index">
            Index of mass range to be retrieved
            </param>
            <returns>
            Mass range for final scan at 0-based index
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= MassRangeCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetPrecursorRangeValidity(System.Int32)">
            <summary>
            Determine if a precursor range is valid.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            true if valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetReaction(System.Int32)">
            <summary>
            Gets the reaction data for the mass at 0 based index.
            Descries how a particular MS/MS precursor mass is fragmented.
            Equivalent to calling GetMass, GetEnergy, GetPrecursorRangeValidity, GetFirstPrecursorMass
            GetLastPrecursorMass, GetIsolationWidth, GetIsolationWidthOffset, GetEnergyValid
            GetActivation, GetIsMultipleActivation.
            Depending on the implementation of the interface, this call may be more efficient
            than calling several of the methods listed.
            </summary>
            <param name="index">index of reaction</param>
            <returns>reaction details</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetSourceFragmentationValue(System.Int32)">
            <summary>
            Retrieves a source fragmentation value at 0-based index.
            </summary>
            <param name="index">
            Index of source fragmentation value to be retrieved
            </param>
            <returns>
            Source Fragmentation value at 0-based index
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= SourceFragmentationValueCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetCompensationVoltageValue(System.Int32)">
            <summary>
            Retrieves a compensation voltage value at 0-based index.
            </summary>
            <param name="index">
            Index of compensation voltage value to be retrieved
            </param>
            <returns>
            Compensation Voltage value at 0-based index
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= CompensationVoltageValueCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetSourceFragmentationInfo(System.Int32)">
            <summary>
            Retrieves a source fragmentation info value at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.SourceFragmentationInfoCount"/> to get the count of source
            fragmentation info values.
            </remarks>
            <param name="index">
            Index of source fragmentation info to be retrieved
            </param>
            <returns>
            Source Fragmentation info value at 0-based index
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= SourceFragmentationInfoCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.GetSourceFragmentationMassRange(System.Int32)">
            <summary>
            Get the source fragmentation mass range, at a given index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The mass range.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CopyMassCalibrators(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            copy mass calibrators from another event.
            </summary>
            <param name="other">
            The other event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CopyMsMsStages(ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase)">
            <summary>
            copy MS/MS stages from another event.
            </summary>
            <param name="other">
            The event from which data is copied from.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.AddMsStages(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Business.MsStage})">
            <summary>
            Adds a set of MS stages.
            </summary>
            <param name="stages">
            The stages.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CopyScannedMassRanges(ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase)">
            <summary>
            copy scanned mass ranges from another event.
            </summary>
            <param name="other">
            The other event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CopySourceFragmentationInfo(ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase)">
            <summary>
            copy source fragmentation info from another event.
            </summary>
            <param name="other">
            The other event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CopySourceFragmentationMassRanges(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            copy source fragmentation mass ranges from another event.
            </summary>
            <param name="other">
            The other event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CopyTables(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            copy various tables from another event.
            </summary>
            <param name="other">
            The other event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder.CopyBaseTables(ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase)">
            <summary>
            copy various tables from another event base.
            </summary>
            <param name="other">
            The other event.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanEventHelper">
            <summary>
            This class adds extended features to the Scan Event interface.
            It acts as a "helper class" rather than "extension methods"
            so that it can hold certain state information.
            A common use case is:
            Scan event information is read from a raw file. 
            Multiple uses are made of this
            (for example, testing if this scan should participate in 1000s chromatograms).
            This class can organize information from the scan event,
            such that "filter comparisons" or other work with events and filters
            are more efficient. There is a very small overhead in constructing this object,
            which still keeps the original interface reference in its construction factory.
            The class is designed for thread safe testing.
            TestScanAgainstFilter or TestScanAgainstNames may be called on multiple threads.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.FilterEnergyTolerance">
            <summary>
            The match tolerance for comparing two energy values
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.DefaultFilterMassResolution">
            <summary>
            The instrument mass resolution (used in determining if mass ranges match up or not)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.ScanEvent">
            <summary>
            Gets the scan event which was used to construct this object.
            If the object was created from IScanFilter, this will be null
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.DifferentTriState(ThermoFisher.CommonCore.Data.FilterEnums.TriState,ThermoFisher.CommonCore.Data.FilterEnums.TriState)">
            <summary>
            Test if two tri-states are different.
            </summary>
            <param name="filterState">
            The state 1.
            </param>
            <param name="eventState">
            The state 2.
            </param>
            <returns>
            True if "filter failed to match"
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventHelper"/> class.
            </summary>
            <param name="scanEvent">
            The scan event.
            </param>
            <param name="eventCode">Event code from scan index, -1 (default) if not known</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.Initialize">
            <summary>
            Thread safe initialize
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.Reactions">
            <summary>
            Gets or sets the reactions.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.CreateReactions">
            <summary>
            create reactions table
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.ScanEventHelperFactory(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent,System.Int32)">
            <summary>
            The scan event helper factory creates a ScanEventHelper from a scanEvent interface.
            </summary>
            <param name="scanEvent">
            The scan event.
            </param>
            <param name="eventCode">event code (form scan index). -1 for "not known"</param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventHelper"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.ScanEventHelperFactory(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            This scan event helper factory creates a ScanEventHelper from an IScanFilter interface.
            This constructor permits an application to test if a scan filter contains another filter.
            The contructed object from this method is considered a "scan" and another scan filter can be tested against it,
            using "TestScan". Example: Crreate this from "+ d". You can test that "+" or "d" filters match this
            (return true from TestScanAgainstFilter).
            </summary>
            <param name="scanFilter">
            The scan filter.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventHelper"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.IsActivationSetForAnyReaction(ThermoFisher.CommonCore.Data.FilterEnums.ActivationType)">
            <summary>
            Test if activation is set for any reaction.
            </summary>
            <param name="activationType">
            The activation type.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.TestScanAgainstNames(System.Collections.Generic.IList{System.String})">
            <summary>
            Test scan against component or compound names.
            </summary>
            <param name="names">
            The names.
            </param>
            <returns>
            True if the scan should be included
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.TestScanAgainstFilter(ThermoFisher.CommonCore.Data.Business.ScanFilterHelper)">
            <summary>
            Test that this scan (event) passes the supplied scan filter.
            </summary>
            <param name="filterHelper">
            The filter Helper.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.TestScan(ThermoFisher.CommonCore.Data.Business.ScanFilterHelper)">
            <summary>
            test a scan against a filter.
            </summary>
            <param name="filterHelper">
            The filter helper.
            </param>
            <returns>
            true, if the scan passes the filter
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown on invalid filter rule
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.TestElectronCaptureDissociation(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Test electron capture dissociation.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.TestMultiPhotonDissociation(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Test multi photon dissociation.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.TestAgainstCompensationVoltage(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Test against compensation voltage.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.TestAgainstSourceFragmentation(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Test against source fragmentation.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.TestScanAgainstMetaFilter(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Test scan against meta filter.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.CheckParentMasses(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.ScanFilterHelper)">
            <summary>
            Check the parent masses.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <param name="helper">
            The filter helper.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.CompensationVoltageValue(System.Int32,System.Int32)">
            <summary>
            Get the compensation voltage value.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="sourceFragmentations">The number of source fragmentation values,
            (which are before CV values in the table)</param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.MultiplexPrecursorConditionsMatch(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.ScanFilterHelper)">
            <summary>
            Test of the multiplex precursor conditions match.
            </summary>
            <param name="scanFilter">
            The scan filter.
            </param>
            <param name="helper">
            The filter helper.
            </param>
            <returns>
            True if matched
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.NumCompensationVoltageValues">
            <summary>
            Get the number of compensation voltage values.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventHelper.PrecursorConditionsMatch(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.ScanFilterHelper,System.Int32)">
            <summary>
            Test if the precursor conditions match.
            </summary>
            <param name="scanFilter">
                The scan filter.
            </param>
            <param name="helper">The filter helper (optimized filter data)</param>
            <param name="precursorMass">
                The precursor mass.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder">
            <summary>
            This class constructs a table of "segments and events".
            Because this implements IScanEvents this class
            can then be used to record the "method scan events" into a raw file.
            The information can be organized as a set of segments,
            with a set of events per segment.
            The segments were designed to represent "time slices of a chromatogram"
            though no time bounds are required by this object.
            Many instruments just create a flat table (1 segment with all the events).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IScanEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder"/> class.
            Copy from another sets of events
            </summary>
            <param name="other">
            The other events (to copy).
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder.AddSegment(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Interfaces.IScanEvent})">
            <summary>
            Add a segment.
            </summary>
            <param name="events">
            The events for this segment.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder.Segments">
            <summary>
            Gets the number segments.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder.GetEventCount(System.Int32)">
            <summary>
            Gets the number of events in a specific segment (0 based)
            </summary>
            <param name="segment">The segment number</param>
            <returns>The number of events in this segment</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder.GetEvent(System.Int32,System.Int32)">
            <summary>
            Get an event, indexed by the segment and event numbers (zero based).
            </summary>
            <param name="segment">
            The segment.
            </param>
            <param name="eventNumber">
            The event number.
            </param>
            <returns>
            The event.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder.GetEvent(System.Int32)">
            <summary>
            Get an event, using indexed event number (zero based).
            This gets events from all segments in order,
            use "ScanEvents" to get the total count of events.
            </summary>
            <param name="eventNumber">
            The event Number.
            </param>
            <returns>
            The event.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanEventsBuilder.ScanEvents">
            <summary>
            Gets the total number of scan events, in all segments
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper">
            <summary>
            The scan filter helper.
            Analyses a filter to save time on filter to scan comparisons.
            This is done by making a list of rules to apply.
            Uses properties, which can be inlined for high performance.
            Does not implement any interfaces, to avoid slowdown of virtual calls.
            (properties may be use billions of times for filter against scan comparisons).
            Used for high performance (parallel) chromatogram generation.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.NoMetaFilter">
            <summary>
            The no meta filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.DefaultFilterMassResolution">
            <summary>
            The instrument mass resolution (used in determining if mass ranges match up or not)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.Filter">
            <summary>
            Gets the filter.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.Rules">
            <summary>
            Gets the rules, which have been found in the supplied filter.
            For example, a filter text of <c>"ms !d"</c> includes 2 rules
            1: The MS order must be one.
            2: The scan must not be dependent
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.MsOrder">
            <summary>
            Gets the MS order.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.IsMultiplex">
            <summary>
            Gets a value indicating whether "multiplex" is in the "On" state
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.IsSpecialOrder">
            <summary>
            Gets a value indicating whether the MS order is any value other than "MS".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.MassResolution">
            <summary>
            Gets the mass resolution.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.MultiActivationCorrectedMassCount">
            <summary>
            Gets the multi activation corrected mass count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.IsSingleActivation">
            <summary>
            Gets a value indicating whether the filter has multiple reactions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.IsDependent">
            <summary>
            Gets a value indicating whether the filter's "dependent" flag is in the "on" tristate.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.HasMasses">
            <summary>
            Gets a value indicating whether the filter has any masses.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.KeepMatchedEventHistory">
            <summary>
            Gets a value indicating whether this object can keep
            track of "already tested" scan events.
            To enable it: Call InitializeAvailableEvents,
            with the result of "IRawDataPlus.ScanEvents"
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.EventTested">
            <summary>
            Determines if an event was tested, and the test results.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.EventTested.EventNotTested">
            <summary>
            This has never been tested
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.EventTested.TestedAndFailed">
            <summary>
            This event has been tested, but failed
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.EventTested.TestedAndPassed">
            <summary>
            Event tested, and passed the filter
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.InitializeAvailableEvents(ThermoFisher.CommonCore.Data.Interfaces.IScanEvents)">
            <summary>
            Sets the table of "known scan events"
            This can be used to optimize filtering
            </summary>
            <param name="allEvents">Planned scan events. This interface may be obtained from IRawDataPlus (ScanEvents property)</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper"/> class.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <param name="accuratePrecursors">In this mode a tolerance matching for precursors is "accurate" (based on the precision value),
            except for data dependent scans.
            For all "non accurate" precursor selections, and for all data dependent scans a default (wide) tolerance is used.</param>
            <param name="filterMassPrecision">number of decimal places for masses in filter</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.IsAccurateResolution">
            <summary>
            Gets a value indicating whether the filter resolution was set to "Accurate precursor value".
            Else it will be "DefaultFilterMassResolution"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.PrecursorTolerance">
            <summary>
            Gets the precursor tolerance (half of MassResolution)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.AddMatchResult(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Record the match result for a scan type segment/event)
            </summary>
            <param name="result">
            Result for this segment and event number
            </param>
            <param name="segment">
            Segment number for this scan event
            </param>
            <param name="eventNumber">
            Event number for this scan event
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper.IsTestedAgainst(System.Int32,System.Int32)">
            <summary>
            Determine if this scan type has already been tested, and find the result
            </summary>
            <param name="segment">Segment number for this scan event</param>
            <param name="eventNumber">Event number for this scan event</param>
            <returns>state of the scan type test</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanSelect">
            <summary>
            This class holds information needed to select a scan, using either a filer or a compound name.
            Static methods are available to construct common versions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanSelect.UseFilter">
            <summary>
            Gets or sets a value indicating whether the "scan filter" will be used as a selection mechanism.
            ScanFilter must never be null when this returns true.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanSelect.ScanFilter">
            <summary>
            Gets or sets the scan filter.
            If UseFilter is false, or this is null, it is not used as a selection mechanism.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanSelect.Names">
            <summary>
            Gets or sets the name.
            This is the component or compound name list to filter against.
            If this is null or empty, it is not used as a selection mechanism.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanSelect.SelectByFilter(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Create a selector which selects by filter string, based on a specific data source
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanSelect"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanSelect.SelectByCompound(System.String)">
            <summary>
            Create a selector which selects by filter string, based on a specific compound name
            </summary>
            <param name="compound">
            The compound name.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanSelect"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanSelect.SelectAll">
            <summary>
            Create a selector which selects all scans (no filtering)
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanSelect"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ScanStatistics">
            <summary>
            Summary information about a scan.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanStatistics.#ctor(ThermoFisher.CommonCore.Data.Business.ScanStatistics,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanStatistics"/> class.
            </summary>
            <param name="source">
            The source to copy the values from.
            </param>
            <param name="deep">If set, make a "deep copy" which will evaluate any lazy items and ensure no internal source references</param>
            <exception cref="T:System.ArgumentNullException">
            <c>source</c> is null.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanStatistics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanStatistics"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.PacketType">
            <summary>
            Gets or sets the indication of data format used by this scan.
            See also SpectrumPacketType for decoding to an <c>enum</c>.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.SpectrumPacketType">
            <summary>
            Gets the packet format used in this scan. (read only).
            Value can be set using the "PacketType" property.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.HighMass">
            <summary>
            Gets or sets the highest mass in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.LowMass">
            <summary>
            Gets or sets the lowest mass in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.LongWavelength">
            <summary>
            Gets or sets the longest wavelength in PDA scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.ShortWavelength">
            <summary>
            Gets or sets the shortest wavelength in PDA scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.BasePeakIntensity">
            <summary>
            Gets or sets the intensity of highest peak in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.BasePeakMass">
            <summary>
            Gets or sets the mass of largest peak in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.TIC">
            <summary>
            Gets or sets the total Ion Current for scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.StartTime">
            <summary>
            Gets or sets the time at start of scan (minutes)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.PacketCount">
            <summary>
            Gets or sets the Number of point in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.NumberOfChannels">
            <summary>
            Gets or sets  the number of
            channels acquired in this scan, if this is UV or analog data,
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.ScanNumber">
            <summary>
            Gets or sets the number of the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.ScanEventNumber">
            <summary>
            Gets or sets the event (scan type) number within segment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.SegmentNumber">
            <summary>
            Gets or sets the time segment number for this event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.IsCentroidScan">
            <summary>
            Gets or sets a value indicating whether this scan contains centroid data (else profile)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.IsUniformTime">
            <summary>
            Gets or sets a value indicating whether is uniform time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.AbsorbanceUnitScale">
            <summary>
            Gets or sets the absorbance unit scale.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.WavelengthStep">
            <summary>
            Gets or sets the wave length step.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.LazyScanType">
            <summary>
            Gets or sets a lazy mechanism returning a string defining the scan type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.ScanType">
            <summary>
            Gets or sets a String defining the scan type, for filtering
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ScanStatistics.CycleNumber">
            <summary>
                Gets or sets the cycle number.
                <remarks>
                    Cycle number used to associate events within a scan event cycle.
                    For example, on the first cycle of scan events, all the events
                    would set this to '1'. On the second cycle, all the events would
                    set this to '2'. This field must be set by devices if supporting
                    compound names for filtering. However, it may be set in all
                    acquisitions to help processing algorithms.
                </remarks>
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanStatistics.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanStatistics.CopyTo(ThermoFisher.CommonCore.Data.Business.ScanStatistics,System.Boolean)">
            <summary>
            Copy all fields
            </summary>
            <param name="stats">
            Copy into this object
            </param>
            <param name="deep">If set, make a "deep copy" which will evaluate any lazy items and ensure no internal source references</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ScanStatistics.DeepClone">
            <summary>
            Produce a deep copy of an object.
            Must not contain any references into the original.
            </summary>
            <returns>
            A deep clone of all objects in this
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan">
            <summary>
            Defines a scan with mass range segments.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/> class. 
            Default constructor;  sets the size of data arrays to 0.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.FromMassesAndIntensities(System.Double[],System.Double[])">
            <summary>
            Create a scan from simple X,Y data. This method creates a scan with one segment.
            For efficiency, the references to the mass and intensity data are maintained within the
            constructed object. If this is not desired, clone the mass and intensity
            arrays on calling this constructor.
            Masses are assumed to be in ascending order.
            </summary>
            <param name="masses">Mass data for the scan</param>
            <param name="intensities">Intensity data for the scan</param>
            <returns>A scan with one segment</returns>
            <exception cref="T:System.ArgumentNullException"><c>masses</c> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><c>intensities</c> is null.</exception>
            <exception cref="T:System.ArgumentException">Intensities must have same length as masses</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.SumIntensities(ThermoFisher.CommonCore.Data.Business.Range[],System.Double)">
            <summary>
            Sum all masses within the ranges
            </summary>
            <param name="ranges">List of ranges to sum</param>
            <param name="tolerance">If the ranges have equal mass values,
            then tolerance is subtracted from low and added to high to search for matching masses</param>
            <returns>Sum of intensities in all ranges</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.SumIntensities(ThermoFisher.CommonCore.Data.Business.Range[],ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Sum all masses within the ranges
            </summary>
            <param name="ranges">List of ranges to sum</param>
            <param name="toleranceOptions">If the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses</param>
            <returns>Sum of intensities in all ranges</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.BaseIntensity(ThermoFisher.CommonCore.Data.Business.Range[],System.Double)">
            <summary>
            Return the largest intensity (base value) in the ranges supplies
            </summary>
            <param name="ranges">Ranges of positions</param>
            <returns>The largest intensity in all ranges</returns>
            <param name="tolerance">If the ranges have equal mass values,
            then tolerance is subtracted from low and added to high to search for matching masses</param>
            <returns>Sum of intensities in all ranges</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.BaseIntensity(ThermoFisher.CommonCore.Data.Business.Range[],ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Return the largest intensity (base value) in the ranges supplied
            </summary>
            <param name="ranges">Ranges of positions (masses, wavelengths)</param>
            <param name="toleranceOptions">If the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses</param>
            <returns>Largest intensity in all ranges</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.GetBaseValue(ThermoFisher.CommonCore.Data.Business.Range,System.Double)">
            <summary>
            Get the largest value in a range
            </summary>
            <param name="fixedRange">
            The fixed range.
            </param>
            <param name="baseValue">
            The base value so far.
            </param>
            <returns>
            The largest of, the passed in base value and the base value in the range.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.TryValidate">
            <summary>
            Test if this is a valid object (all streams are not null. All data has same length)
            </summary>
            <returns>
            True if valid.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.Validate">
            <summary>
            Test if this is a valid object (all streams are not null. All data has same length)
             </summary>
            <exception cref="T:System.ArgumentException">is thrown if this instance does not contain valid data.</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.MassRanges">
            <summary>
            Gets the Mass ranges for each scan segment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.Ranges">
            <summary>
            Gets or sets the Mass ranges for each scan segment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.SegmentCount">
            <summary>
            Gets or sets The number of segments
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.SegmentSizes">
            <summary>
            Gets or sets the number of data points in each segment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.SegmentLengths">
            <summary>
            Gets SegmentLengths.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.Positions">
            <summary>
            Gets or sets the positions (mass or wavelength) for each point in the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.Intensities">
            <summary>
            Gets or sets the Intensity (or absorbance) values for each point in the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.Flags">
            <summary>
            Gets or sets flags, such as "saturated" for each peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.PositionCount">
            <summary>
            Gets or sets the The size of the position and intensity arrays.
            The number of peaks in the scan (total for all segments)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SegmentedScan.ScanNumber">
            <summary>
            Gets or sets the he number of this scan.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.SumIntensities(System.Double,ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Sum all intensities of peaks within the ranges
            </summary>
            <param name="sum">
            The sum so far.
            </param>
            <param name="fixedRange">
            The fixed Range.
            </param>
            <returns>
            Sum of intensities in all ranges
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.DeepClone">
            <summary>
            Make a deep clone of this object.
            </summary>
            <returns>An object containing all data in this, and no shared references</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.IndexOfSegmentStart(System.Int32)">
            <summary>
            Find the index of the first packet in a segment 
            </summary>
            <param name="segment">segment number (starting from 0)</param>
            <returns>the index of the first packet in a segment </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.Resize(System.Int32)">
            <summary>
            Change the defined length of the scan (for internal use only)
            </summary>
            <param name="newSize">new scan size</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.ToSimpleScan">
            <summary>
            Convert to simple scan.
            This permits calling code to free up references to unused parts of the scan data.
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SegmentedScan.Slice(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess},System.Boolean,System.Boolean,ThermoFisher.CommonCore.Data.Business.CentroidStream)">
            <summary>
            Return only data within the supplied ranges.
            This internal method can assume that the ranges are in mass order, and do not overlap.
            </summary>
            <param name="compactedRange">ranges of data to include</param>
            <param name="isProfile">if set, then this scan is profile data.
            Zeros are added to terminate sliced profiles</param>
            <param name="processCentroidStream">If this is set:
            There must be a valid centroid stream.
            Profile points near a centroid must be included, even if outside of the range.
            </param>
            <param name="centroids">Centroid data, which may be used to extend profiles so that
            points which contribute to the centroid are shown</param>
            <returns>A new scan, with data in the desired ranges only</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SequenceFileReaderExtensions">
            <summary>
            Sequence File Writer Extension Methods
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SequenceFileReaderExtensions.GetUserColumnLabel(ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileAccess,System.Int32)">
            <summary>
            Retrieves the user label at given 0-based label index.
            </summary>
            <param name="sequenceFileAccess">The sequence file access interface object.</param>
            <param name="index">Index of user label to be retrieved</param>
            <returns>String containing the user label at given index</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SequenceFileReaderFactory">
            <summary>
            Provides a means of opening sequences.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SequenceFileReaderFactory.CreateReader">
            <summary>
            Creates the sequence file reader.
            </summary>
            <returns>Sequence file reader factory object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SequenceFileReaderFactory.ReadFile(System.String)">
            <summary>
            Read a sequence.
            The file contents are returned. The file is not kept open.
            </summary>
            <param name="fileName">Name of file to read</param>
            <returns>Access to the contents of the file.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SequenceFileWriterFactory">
            <summary>
            This static factory class provides methods to create and open existing sequence file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SequenceFileWriterFactory.CreateSequenceFileWriter(System.String,System.Boolean)">
            <summary>
            Creates the sequence file writer.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="openExisting">True open an existing sequence file with read/write privilege; false to create a new unique sequence file</param>
            <returns>Sequence file writer object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SequenceFileWriterFactory.CreateSequenceFileWriterFactory">
            <summary>
            Creates the UV type of device factory.
            </summary>
            <returns>UV type of device factory object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SequenceFileWriterFactory.CheckFileExists(System.String)">
            <summary>
            Checks the file exists.
            </summary>
            <param name="fileName">Name of the in-acquisition raw file.</param>
            <exception cref="T:System.ArgumentException">Device writer can't attach the raw file that doesn't exist.</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SimpleScan">
            <summary>
            A simple mass and intensity scan.
            Represents a scan as two simple array objects
            This format only creates two objects,
            and uses much less memory that "array of class with mass and intensity".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SimpleScan.Masses">
            <summary>
            Gets or sets the masses.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SimpleScan.Intensities">
            <summary>
            Gets or sets the intensities.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SimpleScanHeader">
            <summary>
            Basic implementation of a simple scan header, with scan number and time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SimpleScanHeader.RetentionTime">
            <summary>
            Gets or sets the retention time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SimpleScanHeader.ScanNumber">
            <summary>
            Gets or sets the scan number.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SimpleScanWindow">
            <summary>
            A collection of scans, designed to slide forwards through a raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SimpleScanWindow.#ctor(System.Func{ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader,ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader},System.Func{ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader[],ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader[]},System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SimpleScanWindow"/> class.
            </summary>
            <param name="spectrumReader">
            The spectrum reader.
            </param>
            <param name="parallelScanReader">Optional: Reader for batch of scans.
            If not supplied, spectrumReader is used.</param>
            <param name="availableScans">Table of scan number and RT of scans in raw file</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SimpleScanWindow.ReturnScansWithin(System.Int32,System.Int32)">
            <summary>
            return data within scan range.
            </summary>
            <param name="startIndex">
            The start scan.
            </param>
            <param name="endIndex">
            The end scan.
            </param>
            <returns>
            A ref copy of the scans in range.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SimpleScanWindow.LoadAllScansInRange(System.Int32,System.Int32)">
            <summary>
            Load all the scans in a range.
            </summary>
            <param name="startIndex">
            The start scan index.
            </param>
            <param name="endIndex">
            The end scan index.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader">
            <summary>
            A simple scan with header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader.Scan">
            <summary>
            Gets or sets the scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader.Header">
            <summary>
            Gets or sets the header.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SmoothingSettings">
            <summary>
            Settings for smoothing algorithm, useful for chromatograms etc.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SmoothingSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SmoothingSettings"/> class. 
            default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SmoothingSettings.#ctor(ThermoFisher.CommonCore.Data.ISmoothingSettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SmoothingSettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SmoothingSettings.SmoothingPoints">
            <summary>
            Gets or sets the number of points for smoothing the chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SmoothingSettings.SmoothRepeat">
            <summary>
            Gets or sets the number of times to repeat smoothing
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SmoothingSettings.SmoothMethod">
            <summary>
            Gets or sets the envelope shape used by smoothing algorithm
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SmoothingSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SpectrumPoint">
            <summary>
            class to represent spectrum data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SpectrumPoint.Intensity">
            <summary>
            Gets or sets Intensity of spectral peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SpectrumPoint.Mass">
            <summary>
            Gets or sets Mass of spectral peak
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SpectrumPoint.op_Equality(ThermoFisher.CommonCore.Data.Business.SpectrumPoint,ThermoFisher.CommonCore.Data.Business.SpectrumPoint)">
            <summary>
            Test that two spec points are equal
            </summary>
            <param name="left">first point to compare</param>
            <param name="right">second point to compare</param>
            <returns>true if they have the same contents</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SpectrumPoint.op_Inequality(ThermoFisher.CommonCore.Data.Business.SpectrumPoint,ThermoFisher.CommonCore.Data.Business.SpectrumPoint)">
            <summary>
            Test that two spec points are not equal
            </summary>
            <param name="left">first point to compare</param>
            <param name="right">second point to compare</param>
            <returns>true if they do not have the same contents</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SpectrumPoint.Equals(System.Object)">
            <summary>
            Test two points for equality
            </summary>
            <param name="obj">
            point to compare
            </param>
            <returns>
            true if they are equal
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SpectrumPoint.GetHashCode">
            <summary>
            <see>Object.GetHashCode</see>
            </summary>
            <returns><see>Object.GetHashCode</see></returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.StatusLog">
            <summary>
            Stores the Status log for an instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.StatusLog.Headers">
            <summary>
            Gets or sets the header information for the status log
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.StatusLog.StatusLogValues">
            <summary>
            Gets or sets the array of values for the status logs for the current instrument
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.StatusLogValues">
            <summary>
            Stores one record of status log values
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.StatusLogValues.RetentionTime">
            <summary>
            Gets or sets the RetentionTime for this log entry
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.StatusLogValues.Values">
            <summary>
            Gets or sets the array of status log values
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults">
            <summary>
            Results of running system suitability tests
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.MeasuredResolution">
            <summary>
            Gets or sets the resolution of the peak (from other peaks)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedResolutionChecks">
            <summary>
            Gets or sets a value indicating whether the resolution test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedSymmetryChecks">
            <summary>
            Gets or sets a value indicating whether the symmetry test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedPeakWidth">
            <summary>
            Gets or sets a value indicating whether the peak width test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedTailing">
            <summary>
            Gets or sets a value indicating whether the peak tailing test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedColumnOverload">
            <summary>
            Gets or sets a value indicating whether the column overload test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedNoise">
            <summary>
            Gets or sets a value indicating whether the signal to noise test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedSaturated">
            <summary>
            Gets or sets a value indicating whether the saturation test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedConcave">
            <summary>
            Gets or sets a value indicating whether the concave peak test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PassedBaselineClipped">
            <summary>
            Gets or sets a value indicating whether the baseline clipping test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.ResolutionChecksPerformed">
            <summary>
            Gets or sets a value indicating whether the following values have been calculated:
            <c>PassedResolutionChecks</c>, <c>MeasuredResolution</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.SymmetryChecksPerformed">
            <summary>
            Gets or sets a value indicating whether the following values have been calculated:
            <c>PassedSymmetryChecks</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.ClassificationChecksPerformed">
            <summary>
            Gets or sets a value indicating whether the following values have been calculated:
            <c>PassedPeakWidth</c>, <c>PassedTailing</c>, <c>PassedColumnOverload</c>, <c>PassedNoise</c>, <c>PassedSaturated</c>,
            <c>PassedConcave</c>, <c>PassedBaselineClipped</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.ResolutionCheckStatus">
            <summary>
            Gets a value which determines if the ResolutionCheck was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.SymmetryCheckStatus">
            <summary>
            Gets a value which determines if the SymmetryCheck was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.PeakWidthStatus">
            <summary>
            Gets a value which determines if the PeakWidth test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.TailingStatus">
            <summary>
            Gets a value which determines if the Tailing test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.ColumnOverloadStatus">
            <summary>
            Gets a value which determines if the ColumnOverload test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.NoiseStatus">
            <summary>
            Gets a value which determines if the Noise test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.SaturatedStatus">
            <summary>
            Gets a value which determines if the Saturated test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.ConcaveStatus">
            <summary>
            Gets a value which determines if the Concave test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.BaselineClippedStatus">
            <summary>
            Gets a value which determines if the BaselineClipped test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.#ctor(ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults"/> class. 
            Copy constructor
            </summary>
            <param name="access">
            The access.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.ResultOf(System.Boolean,System.Boolean)">
            <summary>
            Return tri-state test status, based on if a test has been run, and the test results
            </summary>
            <param name="testPerformed">
            true if a test has been run
            </param>
            <param name="testPassed">
            The results of the test (if run) ignored otherwise
            </param>
            <returns>
            A status of not tested, when the test is not run, or the pass/fail result when the test has been run
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SystemSuitabilityResults.Clone">
            <summary>
            Make a copy of the system suitability results
            </summary>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings">
            <summary>
            Parameters for the system suitability algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.EnableResolutionChecks">
            <summary>
            Gets or sets a value indicating whether resolution checks will be performed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.ResolutionThreshold">
            <summary>
            Gets or sets a threshold value which determines if a peak's resolution or ok or not.
            The default value is 90%.
            Resolution is defined as the ratio:
            <para>100 × V/P</para>
            where:
            <para>V = depth of the Valley: the difference in intensity from the chromatogram at the apex of the target peak
            to the lowest point in the valley between the target peak and a neighboring peak</para>
            <para>P = Peak height: the height of the target peak, above the peak's baseline</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.EnableSymmetryChecks">
            <summary>
            Gets or sets a value indicating whether peak symmetry checks are to be performed.
            Symmetry is determined at a specified peak height
            and is a measure of how even-sided a peak is
            about a perpendicular dropped from its apex.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.SymmetryPeakHeight">
            <summary>
            Gets or sets the Peak Height at which symmetry is measured.
            The default value is 50%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.SymmetryThreshold">
            <summary>
            Gets or sets the Symmetry Threshold
            The SOP defined Symmetry Threshold is > 70% at 50% peak height.
            This represents a realistic practical tolerance for capillary GC data.
            You can enter any value within the range 0% to 100%.
            The default value is 80% at 50% peak height.
            The algorithm determines symmetry at the <c>SymmetryPeakHeight</c>
            For the purposes of the test, a peak is considered symmetrical if:
            (Lesser of L and R) × 100 / (Greater of L and R) > Symmetry Threshold %
            where:
            <para>L = the distance from the left side of the peak to
            the perpendicular dropped from the peak apex</para>
            <para>R = the distance from the right side of the peak to
            the perpendicular dropped from the peak apex</para>
            Measurements of L and R are taken from the raw file without smoothing.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.EnablePeakClassificationChecks">
            <summary>
            Gets or sets a value indicating whether peak classification checks are to be run
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.PeakWidthPeakHeight">
            <summary>
            Gets or sets the Peak Height at which suitability tests the width of target peaks.
            You can enter any value within the range 0% to 100%. The default value is 50%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.MinPeakWidth">
            <summary>
            Gets or sets the minimum peak width, at the specified peak height, for the peak width suitability test.
            The default value is 1.8. You can set any value in the range 0 to 30 seconds. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.MaxPeakWidth">
            <summary>
            Gets or sets the maximum peak width, at the specified peak height, for the peak width suitability test.
            The default value is 3.6. You can set any value in the range 0 to 30 seconds. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.TailingPeakHeight">
            <summary>
            Gets or sets the Peak Height at which the algorithm measures the tailing of target peaks.
            The default SOP value is 10%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.TailingFailureThreshold">
            <summary>
             Gets or sets the failure threshold for the tailing suitability test.
             The default SOP defined failure threshold is %lt 2 at 10% peak height. The valid range is 1 to 50.
             Tailing is calculated at the value defined in <see cref="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.TailingPeakHeight"/>.
             For the purposes of the test, a peak is considered to be excessively tailed if:
             <code>
             R / L > Failure Threshold %
             where:
             L = the distance from the left side of the peak to the perpendicular dropped from the peak apex
             R = the distance from the right side of the peak to the perpendicular dropped from the peak apex
             Measurements of L and R are taken from the raw file without smoothing.</code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.ColumnOverloadPeakHeight">
            <summary>
            Gets or sets the Peak Height at which the algorithm measures column overloading.
            The default SOP value is 50%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.ColumnOverloadFailureThreshold">
            <summary>
            Gets or sets the failure threshold value for the column overload suitability test.
            The default SOP defined threshold is 1.5 at 50% peak height. The valid range is 1 to 20.
            A peak is considered to be overloaded if:
            <code>
            L / R > Failure Threshold %
            where:
            L = the distance from the left side of the peak to the perpendicular dropped from the peak apex
            R = the distance from the right side of the peak to the perpendicular dropped from the peak apex
            Measurements of L and R are taken from the raw file without smoothing. </code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.PeakWidthsForNoiseDetection">
            <summary>
            Gets or sets the Number of Peak Widths for Noise Detection testing parameter for
            the baseline clipping system suitability test.
            The default value is 1.0 and the permitted range is 0.1 to 10.
            A peak is considered to be baseline clipped if there is no signal
            (zero intensity) on either side of the peak within the specified
            number of peak widths. The range is truncated to the quantitation window
            if the specified number of peak widths extends beyond the window’s edge.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.SignalToNoiseRatio">
            <summary>
            Gets or sets the threshold for system suitability testing 
            of the signal-to-noise ratio. The default value is 20 and the
            permitted range is 1 to 500. The algorithm calculates the signal-to-noise ratio 
            within the quantitation window using only baseline signal.
            Any extraneous, minor, detected peaks are excluded from the calculation. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings"/> class. 
            default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.#ctor(ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings"/> class. 
            Construct instance from interface, by cloning all settings 
            </summary>
            <param name="access">
            Interface to clone
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.SystemSuitabilitySettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess">
            <summary>
            Class to create accessors for raw a raw file, for multiple threads.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtended)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess"/> class.
            To use this: Construct an interface "IRawDataPlus".
            Construct this object from the IRawDataPlus.
            Call <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.CreateThreadAccessor"/> to make a separate object for each thread to use.
            After all threads are completed,
            and the raw file is no longer needed, dispose of the original IRawDataPlus. 
            </summary>
            <param name="file">
            The file.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess"/> class.
            To use this: Construct an interface "IRawDataPlus".
            Construct this object from the IRawDataPlus.
            Call <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.CreateThreadAccessor"/> to make a separate object for each thread to use.
            After all threads are completed,
            and the raw file is no longer needed, dispose of the original IRawDataPlus. 
            </summary>
            <param name="file">
            The file.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.CreateThreadAccessor">
            <summary>
            Create an accessor for one thread to use. Call this method once for each thread you plan to create.
            </summary>
            <returns>
            An interface to read data, which should be used by a single thread.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.SelectInstrument(ThermoFisher.CommonCore.Data.Business.Device,System.Int32)">
            <summary>
            Select instrument.
            This private method keeps track of the selected instrument within the raw data.
            When a thread is using a different instrument than the last thread's call,
            then the IO library selected instrument is changed.
            If all threads use one instrument (such as MS), then this will
            not result in multiple calls to the IO library.
            </summary>
            <param name="instrumentType">
            The instrument type.
            </param>
            <param name="instrumentIndex">
            The instrument index.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.IncludeReferenceAndExceptionData(System.Boolean)">
            <summary>
            Include reference and exception data.
            Remembers the state of this from previous calls, and
            only sets this to the IO library when changed from the last call.
            </summary>
            <param name="includeReferenceAndExceptionData">
            The include reference and exception data.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.SetCaching(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem,System.Int32,System.Boolean)">
            <summary>
            Request the object to keep a cache of the listed item.
            Setting the caching to "zero" disables further caching.
            </summary>
            <param name="item">
            Item to cache
            </param>
            <param name="limit">
            Limit of number of items to cache
            </param>
            <param name="useCloning">
            (optional, default false) if set True, all values returned from the cache are unique  (cloned) references. 
            By default, the cache just keeps references to the objects 
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.ClearCache(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem)">
            <summary>
            Clear items in the cache
            </summary>
            <param name="item">
            item type to clear
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.Cached(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem)">
            <summary>
            Count the number currently in the cache
            </summary>
            <param name="item">
            Item type to count
            </param>
            <returns>
            The number of items in this cache
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor">
            <summary>
            The raw file thread accessor.
            This class is a private thread safe wrapper.
            It works by using the "parent" object as a lock object for all threads.
            In addition, the parent manages all state of the underlying wrapped interface.
            This object also wraps enumerators and iterators fully, to protect against detector changes
            from other threads.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.#ctor(ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor"/> class.
            </summary>
            <param name="threadSafeRawFileAccess">
            The thread safe raw file access.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetDevice">
            <summary>
            Capture that the parent object's selected device
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.SetDevice">
            <summary>
            Ensure that the parent object has the expected device selected
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.ScanNumberFromRetentionTime(System.Double)">
            <summary>
            Get a scan number from a retention time
            </summary>
            <param name="time">
            Retention time (minutes)
            </param>
            <returns>
            Scan number in the data stream for this time
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.RunHeader">
            <summary>
            Gets the current instrument's run header
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.InstrumentMethodsCount">
            <summary>
            Gets the number of instrument methods in this file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.ComputerName">
            <summary>
            Gets the name of the computer, used to create this file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetAdditionalScanData(System.Int32)">
            <summary>
            Gets additional (binary) data from a scan.
            The format of this data is custom (per instrument) and can be decoded into
            objects by a specific decoder for the detector type.
            </summary>
            <param name="scan">Scan whose data is needed</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetExtendedScanData(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetScanStatsForScanNumber(System.Int32)">
            <summary>
            Get the scan statistics for a scan.
            </summary>
            <param name="scanNumber">
            scan number
            </param>
            <returns>
            Statistics for scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetSegmentedScanFromScanNumber(System.Int32,ThermoFisher.CommonCore.Data.Business.ScanStatistics)">
            <summary>
            Gets the segmented scan from scan number. It will also fill <paramref name="stats"/> object, if any supplied. 
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="stats">
            statistics for the scan
            </param>
            <returns>
            The segmented scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.IsCentroidScanFromScanNumber(System.Int32)">
            <summary>
            Test if a scan is centroid format
            </summary>
            <param name="scanNumber">
            Number of the scan
            </param>
            <returns>
            True if the scan is centroid format
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetAutoFilters">
            <summary>
            Gets the filter strings for this file.
            </summary>
            <returns>A string for each auto filter from the raw file</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetInstrumentMethod(System.Int32)">
            <summary>
            Gets an instrument method.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            A text version of the method
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetInstrumentData">
            <summary>
            Gets the definition of the selected instrument.
            </summary>
            <returns>data about the selected instrument, for example the instrument name</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetScanType(System.Int32)">
            <summary>
            Get a string representing the scan type (for filtering). 
            For more complete tests on filters, the returned string
            can be converted to a ScanDefinition,
            by using the static constructor ScanDefinition.FromString(string scanType).
            If the RT is known, and not the scan number, use ScanNumberFromRetentionTime
            to convert the time to a scan number.
            Example:
            ScanDefinition definition=ScanDefinition.FromString(GetScanType(ScanNumberFromRetentionTime(time));
            </summary>
            <param name="scanNumber">
            Scan number whose type is needed
            </param>
            <returns>
            Type of scan, in string format.
            To compare individual filter fields, the ScanDefinition class can be used.
            </returns>
            <see>ScanDefinition</see>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.RetentionTimeFromScanNumber(System.Int32)">
            <summary>
            Get the retention time (minutes) from a scan number
            </summary>
            <param name="scanNumber">
            Scan number
            </param>
            <returns>
            Retention time (start time) of scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetCentroidStream(System.Int32,System.Boolean)">
            <summary>
            Get the centroids saved with a profile scan
            </summary>
            <param name="scanNumber">
            Scan number
            </param>
            <param name="includeReferenceAndExceptionPeaks">
            determines if peaks flagged as ref should be returned
            </param>
            <returns>
            centroid stream for specified <paramref name="scanNumber"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetStatusLogForRetentionTime(System.Double)">
            <summary>
            Gets the status log for retention time.
            </summary>
            <param name="retentionTime">
            The retention time.
            </param>
            <returns>
            <see cref="T:ThermoFisher.CommonCore.Data.Business.LogEntry"/> object containing status log information.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetStatusLogEntriesCount">
            <summary>
            returns the number of entries n the current instrument's status log
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetStatusLogHeaderInformation">
            <summary>
            Returns the header information for the current instrument's status log
            </summary>
            <returns>
            The headers (list of prefixes for the strings).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetStatusLogValues(System.Int32,System.Boolean)">
            <summary>
            Returns the Status log values for the current instrument
            </summary>
            <param name="statusLogIndex">
            Index into table of status logs
            </param>
            <param name="ifFormatted">
            true if they should be formatted (recommended)
            </param>
            <returns>
            The status log values.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTuneData(System.Int32)">
            <summary>
            Gets the tune data.
            </summary>
            <param name="tuneDataIndex">
            tune data index
            </param>
            <returns>
            <see cref="T:ThermoFisher.CommonCore.Data.Business.LogEntry"/> object containing tune data for specified <paramref name="tuneDataIndex"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTuneDataCount">
            <summary>
            return the number of tune data entries
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTuneDataHeaderInformation">
            <summary>
            Return the header information for the current instrument's tune data
            </summary>
            <returns>
            The headers/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTuneDataValues(System.Int32,System.Boolean)">
            <summary>
            return tune data values for the specified index
            </summary>
            <param name="tuneDataIndex">
            index into tune tables
            </param>
            <param name="ifFormatted">
            true if formatting should be done
            </param>
            <returns>
            The tune data>.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.Path">
            <summary>
            Gets the path to original data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FileName">
            <summary>
            Gets the name of acquired file (excluding path).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.SelectInstrument(ThermoFisher.CommonCore.Data.Business.Device,System.Int32)">
            <summary>
            Choose the data stream from the data source.
            </summary>
            <param name="instrumentType">
            Type of instrument
            </param>
            <param name="instrumentIndex">
            Stream number
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.SelectedInstrument">
            <summary>
            Gets the instrument as last set by a call to <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.SelectInstrument(ThermoFisher.CommonCore.Data.Business.Device,System.Int32)"/>.
            If this has never been set, returns null.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.CreationDate">
            <summary>
            Gets the date when this data was created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.CreatorId">
            <summary>
            Gets the name of person creating data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.SampleInformation">
            <summary>
            Gets various details about the sample (such as comments).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.InstrumentCount">
            <summary>
            Gets the number of instruments (data streams) in this file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.InAcquisition">
            <summary>
            Gets a value indicating whether the file is being acquired (not complete).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetInstrumentCountOfType(ThermoFisher.CommonCore.Data.Business.Device)">
            <summary>
            get the number of instruments (data streams) of a certain classification.
            For example: the number of UV devices which logged data into this file.
            </summary>
            <param name="type">
            The device type to count
            </param>
            <returns>
            The number of devices of this type
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetChromatogramData(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32)">
            <summary>
            Create a chromatogram from the data stream
            </summary>
            <param name="settings">
            Definition of how the chromatogram is read
            </param>
            <param name="startScan">
            First scan to read from. -1 for "all data"
            </param>
            <param name="endScan">
            Last scan to read from. -1 for "all data"
            </param>
            <returns>
            Chromatogram points
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetChromatogramData(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Create a chromatogram from the data stream
            </summary>
            <param name="settings">
            Definition of how the chromatogram is read
            </param>
            <param name="startScan">
            First scan to read from. -1 for "all data"
            </param>
            <param name="endScan">
            Last scan to read from. -1 for "all data"
            </param>
            <param name="toleranceOptions">
            For mass range or base peak chromatograms,
            if the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses
            </param>
            <returns>
            Chromatogram points
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetInstrumentType(System.Int32)">
            <summary>
            The the device type for an instrument data stream
            </summary>
            <param name="index">
            The data stream
            </param>
            <returns>
            The device at type the index
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetAllInstrumentNamesFromInstrumentMethod">
            <summary>
            Gets names of all instruments stored in the raw file's copy of the instrument method file.
            </summary>
            <returns>
            The instrument names.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.IsOpen">
            <summary>
            Gets a value indicating whether the data file was successfully opened
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.IncludeReferenceAndExceptionData">
            <summary>
            Gets or sets a value indicating whether reference and exception peaks should be returned (by default they are not)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTrailerExtraHeaderInformation">
            <summary>
            Gets the trailer extra header information. This is common across all scan numbers
            </summary>
            <returns>
            The headers.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTrailerExtraValues(System.Int32,System.Boolean)">
            <summary>
            Gets the Trailer Extra values for the specified scan number. 
            If <paramref name="ifFormatted"/> = true, then the values will be formatted as per the header settings
            </summary>
            <param name="scanNumber">
            scan whose trailer data is needed
            </param>
            <param name="ifFormatted">
            true if the data should be formatted
            </param>
            <returns>
            The strings representing trailer data>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTrailerExtraValue(System.Int32,System.Int32)">
            <summary>
            returns the (unformatted) Trailer Extra value for a specific field in the specified scan number. 
            The object type depends on the field type, as returned by 
            <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTrailerExtraHeaderInformation"/>
            Numeric values (where the header for this filed returns "True" for IsNumeric
            can always be cast up to double.
            The integer numeric types SHORT and USHORT are returned as <c>short and ushort</c>.
            The integer numeric types LONG and ULONG are returned as <c>int and uint</c>.
            All logical values (Yes/No, True/false, On/Off) are returned as <c>"bool"</c>,
            where "true" implies "yes", "true" or "on".
            CHAR and UCHAR types are returned as "byte".
            String types WCHAR_STRING and CHAR_STRING types are returned as "string".
            </summary>
            <param name="scanNumber">scan who's data is needed</param>
            <param name="field">zero based filed number in the record, as per header </param>
            <returns>Value of requested field</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTrailerExtraValues(System.Int32)">
            <summary>
            Returns the (unformatted) Trailer Extra values for all  field in the specified scan number. 
            The object types depend on the field types, as returned by 
            GetTrailerExtraHeaderInformation.
            This offers higher performance, where numeric values are needed,
            as it avoids translation to and from strings.
            It is also designed for efficient copy of data from one file to another.
            <c>
            Numeric values (where the header for this field returns "True" for IsNumeric)
            can always be cast up to double.
            The integer numeric types SHORT and USHORT are returned as short and ushort.
            The integer numeric types LONG and ULONG are returned as int and uint.
            All logical values (Yes/No, True/false, On/Off) are returned as "bool",
            where "true" implies "yes", "true" or "on".
            Char type is returned as "sbyte".
            Uchar type is returned as "byte".
            String types WCHAR_STRING and CHAR_STRING types are returned as "string".
            </c>
            </summary>
            <param name="scanNumber">scan who's data is needed</param>
            <returns>Values of all fields</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTuneDataValues(System.Int32)">
            <summary>
            Returns the (unformatted) Tune Data values for all fields in the specified record number. 
            The object types depend on the field types, as returned by 
            GetTuneDataHeaderInformation.
            This is  designed for efficient copy of data from one file to another.
            <c>
            Numeric values (where the header for this field returns "True" for IsNumeric)
            can always be cast up to double.
            The integer numeric types SHORT and USHORT are returned as short and ushort.
            The integer numeric types LONG and ULONG are returned as int and uint.
            All logical values (Yes/No, True/false, On/Off) are returned as "bool",
            where "true" implies "yes", "true" or "on".
            Char type is returned as "sbyte".
            Uchar type is returned as "byte".
            String types WCHAR_STRING and CHAR_STRING types are returned as "string".
            </c>
            </summary>
            <param name="index">zero bases index into tune records who's data is needed</param>
            <returns>Values of all fields</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetStatusLogEntry(System.Int32)">
            <summary>
            Gets the (raw) status log data at a given index in the log.
            Deigned for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="index">Index (from 0 to "GetStatusLogEntriesCount() -1")</param>
            <returns>Log data at the given index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetStatusLogEntry(System.Double)">
            <summary>
            Gets the (raw) status log data at a given retention time in the log.
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="retentionTime">Retention time/</param>
            <returns>Log data at the given time</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetAdvancedPacketData(System.Int32)">
            <summary>
            Get the advanced LT/FT formats data, such as the noise data, baseline data and frequencies
            </summary>
            <param name="scanNumber">The scan number.</param>
            <returns>
            Returns an IAdvancedPacketData object which contains noise data, baseline data and frequencies for specified <paramref name="scanNumber" />.
            It might return empty arrays for scans which do not have these data.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetTrailerExtraInformation(System.Int32)">
            <summary>
            Gets the array of headers and values for this scan number. The values are formatted as per the header settings.
            </summary>
            <param name="scanNumber">
            The scan for which this information is needed
            </param>
            <returns>
            Extra information about the scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetSegmentEventTable">
            <summary>
            Gets the segment event table for the current instrument
            </summary>
            <returns>A two dimensional array of events. The first index is segment index (segment number-1).
            The second is event index (event number -1) within the segment.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.SetCaching(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem,System.Int32,System.Boolean)">
            <summary>
            Request the object to keep a cache of the listed item.
            Setting the caching to "zero" disables further caching.
            </summary>
            <param name="item">
            Item to cache
            </param>
            <param name="limit">
            Limit of number of items to cache
            </param>
            <param name="useCloning">
            (optional, default false) if set True, all values returned from the cache are unique  (cloned) references. 
            By default, the cache just keeps references to the objects 
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.ClearCache(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem)">
            <summary>
            Clear items in the cache
            </summary>
            <param name="item">
            item type to clear
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.Cached(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem)">
            <summary>
            Count the number currently in the cache
            </summary>
            <param name="item">
            Item type to count
            </param>
            <returns>
            The number of items in this cache
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FileHeader">
            <summary>
            Gets the raw file header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.RunHeaderEx">
            <summary>
            Gets extended the run header details.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.AutoSamplerInformation">
            <summary>
            Gets the auto sampler information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilters">
            <summary>
            Calculate the filters for this raw file, and return as an array
            </summary>
            <returns>Auto generated list of unique filters</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFiltersForScanRange(System.Int32,System.Int32)">
            <summary>
            Calculate the filters for this raw file within the range of scans supplied, and return as an array.
            </summary>
            <param name="startScan">First scan to analyze</param>
            <param name="endScan">Last scan to analyze</param>
            <returns>
            Auto generated list of unique filters
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilterForScanNumber(System.Int32)">
            <summary>
            Get the filter for a scan number.
            </summary>
            <param name="scan">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilterFromString(System.String)">
            <summary>
            Get a filter interface from a string.
            </summary>
            <param name="filter">
            The filter string.
            </param>
            <returns>
            An interface representing the filter fields, converted from the supplied string.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.CreateFilterFromScanEvent(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            Get a filter interface from a scan event interface.
            Permits filtering to be done based on programmed events, such as
            an item from the "ScanEvents" table,
            or from constructed data using <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder"/>.
            This method initializes the filter based on the current raw file
            (for example: mass precision)
            </summary>
            <param name="scanEvent">
            The event data.
            </param>
            <returns>
            An interface representing the filter fields, converted from the supplied event.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilterFromString(System.String,System.Int32)">
            <summary>
            Get a filter interface from a string, with a given mass precisions
            </summary>
            <param name="filter">
            The filter string.
            </param>
            <param name="precision">Precisions of masses (number of decimal places)</param>
            <returns>
            An interface representing the filter fields, converted from the supplied string.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Obtain an interface to iterate over a scans which match a specified filter.
            The iterator is initialized at "scan 0" such that "GetNext" will return the first matching scan in the file.
            This is a low level version of <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </summary>
            <param name="filter">Filter, which all returned scans match.
            This filter may be created from a string using <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilterFromString(System.String,System.Int32)"/></param>
            <returns>An iterator which can step back and forth over scans matching a given filter.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Get filtered scan enumerator.
            </summary>
            <param name="filter">The filter, which all enumerated scans match.
            This filter may be created from a string using <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilterFromString(System.String,System.Int32)"/>
            </param>
            <returns>
            An enumerator which can be used to "foreach" over all scans in a file, which match a given filter.
                        Note that each "step" through the enumerator will access further data from the file.
                        To get a complete list of matching scans in one call, the "ToArray" extension can be called,
                        but this will result in a delay as all scans in the file are analyzed to return this array.
                        For fine grained iterator control, including "back stepping" use <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilteredScanEnumeratorOverTime(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Double,System.Double)">
            <summary>
            Get filtered scan enumerator.
            </summary>
            <param name="filter">
            The filter, which all enumerated scans match.
            This filter may be created from a string using <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilterFromString(System.String,System.Int32)"/>
            </param>
            <param name="startTime">
            The start Time.
            </param>
            <param name="endTime">
            The End Time.
            </param>
            <returns>
            An enumerator which can be used to "foreach" over all scans in a time range, which match a given filter.
                        Note that each "step" through the enumerator will access further data from the file.
                        To get a complete list of matching scans in one call, the "ToArray" extension can be called,
                        but this will result in a delay as all scans in the time range are analyzed to return this array.
                        For fine grained iterator control, including "back stepping" use <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.HasInstrumentMethod">
            <summary>
            Gets a value indicating whether this file has an instrument method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.ExportInstrumentMethod(System.String,System.Boolean)">
            <summary>
            Export the instrument method to a file.
            </summary>
            <param name="methodFilePath">
            The method file path.
            </param>
            <param name="forceOverwrite">
            Force over write. If true, and file already exists, attempt to delete existing file first.
            If false: UnauthorizedAccessException will occur if there is an existing read only file.
            </param>
            <returns>True if the file was saved. False, if no file was saved, for example,
            because there is no instrument method saved in this raw file.</returns>
            <seealso cref="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.HasInstrumentMethod"/>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.HasMsData">
            <summary>
            Gets a value indicating whether this file has MS data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.ScanEvents">
            <summary>
            Gets the scan events.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.UserLabel">
            <summary>
            Gets the set of user labels
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetScanEventForScanNumber(System.Int32)">
            <summary>
            Gets the scan event details for a scan
            </summary>
            <param name="scan">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent"/> interface, to get detailed information about a scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetScanEventStringForScanNumber(System.Int32)">
            <summary>
            Gets the scan event as a string for a scam
            </summary>
            <param name="scan">
            The scan number.
            </param>
            <returns>
            The event as a string.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetErrorLogItem(System.Int32)">
            <summary>
            Gets an entry from the instrument error log.
            </summary>
            <param name="index">
            Zero based index.
            The number of records available is RunHeaderEx.ErrorLogCount </param>
            <returns>An interface to read a specific log entry</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.StatusLogPlottableData">
            <summary>
            Gets the labels and index positions of the status log items which may be plotted.
            That is, the numeric items.
            Labels names are returned by "Key" and the index into the log is "Value".
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetStatusLogAtPosition(System.Int32)">
            <summary>
            Gets the status log data, from all log entries, based on a specific position in the log.
            For example: "position" may be selected from one of the key value pairs returned from <see cref="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.StatusLogPlottableData"/>
            in order to create a trend plot of a particular value.
            The interface returned has an array of retention times and strings.
            If the position was selected by using <see cref="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.StatusLogPlottableData"/>, then the strings may be converted "ToDouble" to get
            the set of numeric values to plot.
            </summary>
            <param name="position">
            The position within the list of available status log values.
            </param>
            <returns>
            An interface containing the times and logged values for the selected status log field.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetAllInstrumentFriendlyNamesFromInstrumentMethod">
            <summary>
            Get all instrument friendly names from the instrument method.
            </summary>
            <returns>
            The instrument friendly names"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetScanDependents(System.Int32,System.Int32)">
            <summary>
            Get scan dependents.
            Returns a list of scans, for which this scan was the parent.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="filterPrecisionDecimals">
            The filter precision decimals.
            </param>
            <returns>
            Information about how data dependant scanning was performed.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetCompoundNames">
            <summary>
            Gets the unique compound names as arrays of strings.
            </summary>
            <returns>
            The Compound Names.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetCompoundNames(System.String)">
            <summary>
            Gets the unique compound names as arrays of strings by given filter.
            </summary>
            <param name="scanFilter">
            The scan Filter.
            </param>
            <returns>
            The compound names"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetScanFiltersFromCompoundName(System.String)">
            <summary>
            Get the scan filters which match a compound name.
            When implemented against raw files, this may have a performance impact on applications.
            For files which have a programmed event table, this will be fast,
            as the information can be taken directly from the events.
            If there is no event table, then event data is checked for every scan in the file (slower).
            </summary>
            <param name="compoundName">
            The compound name.
            </param>
            <returns>
            The array of matching scan filters (in string format).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetChromatogramDataEx(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx[],System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Create a chromatogram from the data stream.
            Extended version:
            Parameters include option for component names.
            Includes base peak data for each scan.
            </summary>
            <param name="settings">
            Definition of how the chromatogram is read
            </param>
            <param name="startScan">
            First scan to read from. -1 for "all data"
            </param>
            <param name="endScan">
            Last scan to read from. -1 for "all data"
            </param>
            <param name="toleranceOptions">
            For mass range or base peak chromatograms,
            if the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses.
            For example: with 5 ppm tolerance, the caller can pass a single mass value (same low and high) for each mass range,
            and get chromatograms of those masses +/- 5 ppm.
            </param>
            <returns>
            Chromatogram points
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetChromatogramDataEx(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx[],System.Int32,System.Int32)">
            <summary>
            Create a chromatogram from the data stream.
            Extended version:
            Parameters include option for component names.
            Includes base peak data for each scan.
            </summary>
            <param name="settings">
            Definition of how the chromatogram is read
            </param>
            <param name="startScan">
            First scan to read from. -1 for "all data"
            </param>
            <param name="endScan">
            Last scan to read from. -1 for "all data"
            </param>
            <returns>
            Chromatogram points
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.TestScan(System.Int32,System.String)">
            <summary>
            Test if a scan passes a filter.
            If all matching scans in a file are required, consider using <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/> or <see cref="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetFilteredScanEnumeratorOverTime(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Double,System.Double)"/>
            </summary>
            <param name="scan">the scan number</param>
            <param name="filter">the filter to test</param>
            <returns>True if this scan passes the filter</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper">
            <summary>
            The filtered scan iterator wrapper.
            must wrap this, to set device correctly each call
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper.#ctor(ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper"/> class.
            </summary>
            <param name="rawFileThreadAccessor">
            The raw file thread accessor.
            </param>
            <param name="filter">
            The filter.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper.Filter">
            <summary>
            Gets the filter which was used to construct this
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper.PreviousScan">
            <summary>
            Gets the previous scan number, which matches the filter.
            Returns 0 if there is no open file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper.NextScan">
            <summary>
            Gets the next scan number, which matches the filter.
            Returns 0 if there is no open file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper.SpectrumPosition">
            <summary>
            Sets the iterator's position.
            This scan number does not have to match the given filter.
            This can be used to find next or previous matching scan, from a given scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper.MayHavePrevious">
            <summary>
            Gets a value indicating whether there are possible previous scans before the current scan.
            This does not guarantee that another matching scan exists. It simply tests that the current iterator position
            is not the first scan in the file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.FilteredScanIteratorWrapper.MayHaveNext">
            <summary>
            Gets a value indicating whether there are possible next scans after the current scan.
            This does not guarantee that another matching scan exists. It simply tests that the current iterator position
            is not the last scan in the file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetSimplifiedScan(System.Int32)">
            <summary>
            This method is similar to GetSegmentedScanFromScanNumber in the IRawData interface.
            The method returns only the mass and intensity values from
            the scan data for a scan. 
            Values for flags etc. are not returned, saving data space and improving efficiency.
            This method never returns "reference and exception peak" data.
            The method is designed for improved performance in custom XIC generators.
            </summary>
            <param name="scanNumber">The scan whose mass intensity data are needed</param>
            <returns>Mass and intensity values from the scan.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetSimplifiedCentroids(System.Int32)">
            <summary>
            This method is similar to GetCentroidStream in the IRawData interface.
            The method returns only the mass and intensity values from
            the "centroid stream" data for a scan. This is also known as "Label Stream"
            Values for flags etc. are not returned, saving data space and improving efficiency.
            This method never returns "reference and exception peak" data.
            The method is designed for improved performance in custom XIC generators.
            </summary>
            <param name="scanNumber">The scan who's mass intensity data are needed</param>
            <returns>Mass and intensity values from the scan "centroid data".</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetScanEvents(System.Int32,System.Int32)">
            <summary>
            When deciding what data should be read from a scan, centroids or regular scan
            (or if the data is needed at all)
            scan event data is needed.
            This method permits events to be read as a block for a range of scans,
            which may reduce overheads involved in requesting one by one.
            Potentially, in some data models, the same "event" may apply to several scans
            so it is permissible for the same reference to appear multiple times.
            </summary>
            <param name="firstScanNumber">The first scan whose event is needed</param>
            <param name="lastScanNumber">The last scan</param>
            <returns>An array of scan events</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetScanFiltersFromCompoundNames(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetCompoundNamesForScanRange(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.ThreadSafeRawFileAccess.RawFileThreadAccessor.GetSortedStatusLogEntry(System.Int32)">
            <summary>
            Gets the (raw) status log data at a given index in the sorted log.
            The form of the log removes duplicate and out of order times
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="index">Index (from 0 to "GetStatusLogEntriesCount() -1")</param>
            <returns>Log data at the given index</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.TokenAndType">
            <summary>
            Data structure used internally by scan definition
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.TokenAndType.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.TokenAndType.TokenClass">
            <summary>
            Gets or sets the token class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.TokenAndType.CompareTo(ThermoFisher.CommonCore.Data.Business.TokenAndType)">
            <summary>
            Compares the current token with another token
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
            <list type="table">
              <listheader>
                <term>Value</term>
                <description>Meaning</description>
              </listheader>
              <item>
                <term>Less than zero </term>
                <description>This object is less than the <paramref name="other"/> parameter.</description>
              </item>
              <item>
                <term>Zero</term>
                <description>This object is equal to <paramref name="other"/>.</description>
              </item>
              <item>
                <term>Greater than zero</term>
                <description>This object is greater than <paramref name="other"/>. 
            </description>
              </item>
            </list>               
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>TokenClass</c> is out of range.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.TokenAndType.CompareGeneric(ThermoFisher.CommonCore.Data.Business.TokenAndType)">
            <summary>
            The compare generic.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
            <list type="table">
              <listheader>
                <term>Value</term>
                <description>Meaning</description>
              </listheader>
              <item>
                <term>-1</term>
                <description>This object is less than the <paramref name="other"/> parameter.</description>
              </item>
              <item>
                <term>Zero</term>
                <description>This object is equal to <paramref name="other"/>.</description>
              </item>
              <item>
                <term>1</term>
                <description>This object is greater than <paramref name="other"/>. 
            </description>
              </item>
            </list>               
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.TrailerExtraValues">
            <summary>
            Stores the trailer extra values for a scan within an instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.TrailerExtraValues.ScanNumber">
            <summary>
            Gets or sets the scan Number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.TrailerExtraValues.Values">
            <summary>
            Gets or sets the array of trailer extra values for a scan within an instrument
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.TuneData">
            <summary>
            Stores the header and tune data record values for an instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.TuneData.Headers">
            <summary>
            Gets or sets the array of headers for Tune data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.TuneData.TuneDataValues">
            <summary>
            Gets or sets the tune data values for an instrument
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.TuneDataValues">
            <summary>
            Stores one set of tune data values for an instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.TuneDataValues.ID">
            <summary>
            Gets or sets the index number of the tune record
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.TuneDataValues.Values">
            <summary>
            Gets or sets the array of tune data values for an instrument
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.UVInstrument">
            <summary>
            Encapsulates information about UVInstrument.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.UVInstrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Business.UVInstrument"/> class.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.UvScanIndex">
            <summary>
            Defines the UV instrument data header for UV type devices
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.UvScanIndex.Frequency">
            <summary>
            Gets or sets the frequency.
            <para>The Frequency will be ignored by Analog devices</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.UvScanIndex.IsUniformTime">
            <summary>
            Gets or sets a value indicating whether is uniform time.
            <para>If the Uniform flag is TRUE (time is uniform by frequency ) then there is NO time value. ex. "intensity, time"</para>
            <para>The IsUniformTime will be ignored by Analog devices</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.UvScanIndex.NumberOfChannels">
            <summary>
            Gets or sets the number of channels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.UvScanIndex.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.UvScanIndex.TIC">
            <summary>
            Gets or sets the tic.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Business.UvScanIndex.DeepClone">
            <summary>
            Copies the specified source.
            Copy all the non static fields of the current object to the new object.
            Since all the fields are value type, a bit-by-bit copy of the field is performed.
            </summary>
            <returns>Create a copy of the same object type</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Business.IScanWithSimpleData">
            <summary>
            The ScanWithSimpleData interface.
            Defines very basic MS data and intensity, plus the event for the scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IScanWithSimpleData.ScanEvent">
            <summary>
            Gets the scan event.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Business.IScanWithSimpleData.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ICommonCoreDataObject">
            <summary>
            ICommonCoreDataObject is an interface that for CommonCoreData objects.  It allows for clearing the dirty flags during a save operation. 
            For example, before saving your data object that implements CommonCoreDataObject, cast it to a ICommonCoreDataObject and set
            IsDirty to false.  All data objects that implement the abstract class CommonCoreDataObject implement the ICommonCoreDataObject interface as well.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ICommonCoreDataObject.DeepEquals(System.Object)">
            <summary>
            Provides a custom deep equality operation when checking for equality.
            </summary>
            <param name="valueToCompare">The value to compare.</param>
            <returns>True if objects are equal</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ICommonCoreDataObject.PerformDefaultSettings">
            <summary>
            Performs the default settings for the data object.  This can be overridden in each data object that implements the interface to perform
            initialization settings.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.CommonCoreDataObject">
            <summary>
            CommonCoreData object is an abstract class. It includes a deep equals feature/>
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.CommonCoreDataObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.CommonCoreDataObject.Equals(System.Object)">
            <summary>
            Compares this object with another.
            Traverse the set of member variables to compare against the object that was passed in.
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.CommonCoreDataObject.DeepEquals(System.Object)">
            <summary>
            Provides a custom deep equality operation when checking for equality.
            </summary>
            <param name="valueToCompare">The value to compare.</param>
            <returns>True if the items are equal, false if they are not.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.CommonCoreDataObject.PerformEquals(System.Object,System.Boolean)">
            <summary>
            Compares this object with another.
            Traverse the set of member variables to compare against the object that was passed in.
            </summary>
            <param name="obj">object to compare with</param>
            <param name="deep">if true, compare sub-objects</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.CommonCoreDataObject.PerformDefaultSettings">
            <summary>
            Performs the default settings for the data object.  This can overridden in each data object that implements the interface to perform
            initialization settings.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.CoreDataElementAttribute">
            <summary>
            CoreDataElementAttribute is used in the custom deep equals operation. This attribute allows a user to specify whether or not to include a 
            property in the equals operation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.CoreDataElementAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ThermoFisher.CommonCore.Data.CoreDataElementAttribute"/> is ignore.
            </summary>
            <value><c>true</c> if ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.CoreDataElementAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.CoreDataElementAttribute"/> class and sets the Ignore property to false.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Comparer`1">
            <summary>
            The comparer.
            </summary>
            <typeparam name="T">
            Type of objects compared
            </typeparam>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Comparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Comparer`1"/> class.
            </summary>
            <param name="comparison">
            The comparison.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Comparer`1.Compare(`0,`0)">
            <summary>
            Compare x and y.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The standard comparison result (from IComparer).
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1">
            <summary>
            Make a thread safe cache of the "n" most recently used copies of an object.
            For example: If different parts of an application are likely to read the same data from a file
            multiple times, this can be used to reduce the file operations.
            </summary>
            <typeparam name="T">Type of item to cache
            </typeparam>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.ItemReader">
            <summary>
            Obtain a record from a data source, based on an index
            Example: Scan from raw file, based on scan number.
            </summary>
            <param name="index">
            Index of object
            </param>
            <returns>
            Object read from data source
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.#ctor(System.Int32,ThermoFisher.CommonCore.Data.ConcurrentItemCache{`0}.ItemReader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1"/> class. 
            </summary>
            <param name="capacity">
            Maximum number of items in the cache. Oldest items are discarded when the cache is full
            </param>
            <param name="reader">
            Delegate to read a new item, when not in the cache.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.QueueItem">
            <summary>
            The queue item.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.QueueItem.Index">
            <summary>
            Gets or sets Index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.QueueItem.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.GetItem(System.Int32)">
            <summary>
            Get an item from the cache, or from the data reader (if not cached).
            Automatically caches new items, discarding oldest items.
            </summary>
            <param name="index">
            Record number
            </param>
            <returns>
            item from the cache. May be "null" if this item is not in the cache, and the reader has no value for this index
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.Cached">
            <summary>
            Gets the number of cached items
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.Capacity">
            <summary>
            Gets the maximum number of cached items
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.CloneItems">
            <summary>
            Gets or sets a value indicating whether all items returned from the cache are Deep Cloned.
            If true: Items found in the cache are deep cloned. New items read are saved in the cache as a deep clone,
            such that the item returned to the caller is never the same as any reference in the cache.
            If false: references are saved in and returned from the cache without any clone.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ConcurrentItemCache`1.Clear">
            <summary>
            Empty the cache
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Weighting">
            <summary>
            Determine how the calibration curve is weighted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Weighting.EqualWeights">
            <summary>
            This allows you to weight all calibration data points equally during the
            least-squares regression calculation of the calibration curve. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Weighting.OneOverX">
            <summary>
            This allows you to specify a weighting of 1/X for
            all calibration data points during 
            the least-squares regression calculation of the calibration curve.
            Calibrants are weighted by the inverse of their quantity.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Weighting.OneOverX2">
            <summary>
            This allows you to specify a weighting of 1/X^2 for
            all calibration data points during the
            least-squares regression calculation of the calibration curve.
            Calibrants are weighted by the inverse of  the square of their quantity.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Weighting.OneOverY">
            <summary>
            This allows you to specify a weighting of 1/Y for
            all calibration data points during the least-squares 
            regression calculation of the calibration curve.
            Calibrants are weighted by the inverse of their response (or response ratio).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Weighting.OneOverY2">
            <summary>
            This allows you to specify a weighting of 1/Y^2 for
            all calibration data points during the least-squares
            regression calculation of the calibration curve.
            Calibrants are weighted by the inverse of
            the square of their response (or response ratio).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Weighting.OneOverSigma2">
            <summary>
            This allows you to specify a weighting of 1/s^2 for all calibration
            data points during the least-squares regression calculation of the calibration curve.
            Calibrants at a given level are weighted by the inverse of the standard deviation of
            their responses (or response ratios). For this weighting factor to be used,
            there must be two or more replicates at each level. 
            If only one calibrant is available for any level, 1/s^2 weighting cannot be used.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Origin">
            <summary>
            Treatment of calibration curve origin
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Origin.Include">
            <summary>
            The origin is included (as an extra point) on the calibration curve.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Origin.Excluded">
            <summary>
            The origin is not added to the curve
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Origin.Force">
            <summary>
            The curve is forced through the origin
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.RegressionMethod">
            <summary>
            The Regression algorithm used
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.RegressionMethod.FirstOrder">
            <summary>
            A linear (first order) polynomial least-squares fit of the experimental data using slope and intercept coefficients: 
            <code>Y = mX + B </code>
            where m is the slope of the curve and B is the intercept point on the Y-axis. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.RegressionMethod.FirstOrderLogLog">
            <summary>
            A linear polynomial least-squares fit of the experimental data of the following mathematical form: 
            <code>log10[Y] = m log10[X] + B</code>
            where m is the slope of the curve and B is the intercept point on the Y-axis.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.RegressionMethod.SecondOrder">
            <summary>
            A calibration curve which calculates a quadratic (second order) polynomial
            least-squares fit of the experimental data using the following mathematical form:
            <code>Y = AX2 + BX + C</code>, where A, B, and C are the polynomial coefficients.
            At least three calibration levels are required for this curve fit type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.RegressionMethod.SecondOrderLogLog">
            <summary>
            A calibration curve which calculates a quadratic (second order)
            polynomial least-squares fit of the experimental data using the following mathematical form: 
            <code>log [Y] = A log [X2] + B log [X] + C</code>
            where A, B, and C are the polynomial coefficients.
            Note: ignore/force/include origin options are not used with this Regression algorithm type. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.RegressionMethod.LocallyWeighted">
            <summary>
            Locally Weighted regression always kicks out replicates at
            either the lowest or highest level. With points
            at only three levels, a loess regression is
            discontinuous at the mid-point between the
            lowest and highest level.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.RegressionMethod.AverageResponseFactor">
            <summary>
            A calibration type in which the response factor is calculated
            for replicates at all calibration levels and then averaged.
            The amount in a sample can then be calculated by dividing
            the response by the average response factor. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.RegressionMethod.PointToPoint">
            <summary>
            A calibration curve in which data at each calibration level are averaged.
            This averaging results in a single averaged data point at each calibration level.
            Averaged calibration points are plotted by connecting adjacent points with straight lines.
            This calibration curve can be used with one or more calibration levels.
            Calibration supports  ignore/force origin options for this calibration curve type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.RegressionMethod.CubicSpline">
            <summary>
            A calibration curve in which a cubic polynomial curve is fit between each
            pair of calibration levels such that the slopes of the separate cubic polynomial
            curves match at common calibration curve points.
            Calibration supports ignore/force origin options for this calibration curve type. 
            Note: At least four calibration levels are required for this type of curve fit.
            If the origin is forced, only three calibration levels are required. 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.EdgeType">
            <summary>
            Defines why the peak detector has determined that a peak has started or ended
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.EdgeType.Base">
            <summary>
            edge intensity intercepted baseline + 05.*noise value.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.EdgeType.Valley">
            <summary>
            edge fits at least one of the three valley criteria.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.EdgeType.Manual">
            <summary>
            reserved for manually entered integration limits. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.EdgeType.Stripe">
            <summary>
            edge reached the peak constraint percentage height.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.EdgeType.Tail">
            <summary>
            edge reached the tailing factor RT limit before the STRIPE height.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.EdgeType.Tilt">
            <summary>
            Tilt is as in a pinball machine, something bad happened,
            such as hitting the edge of the survey window.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.NoiseClassification">
            <summary>
            Determines how signal to noise is reported
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.NoiseClassification.NotAvailable">
            <summary>
            No noise value has been calculated
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.NoiseClassification.Infinite">
            <summary>
            No detected noise
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.NoiseClassification.Value">
            <summary>
            Use SignalToNoise property to get the value
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.PeakMethod">
            <summary>
            Determines how a component peak has been selected from a set of possible peaks
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakMethod.SpectralFit">
            <summary>
            search was by spectral fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakMethod.Highest">
            <summary>
            search was by largest peak in the search window.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakMethod.Nearest">
            <summary>
            search was by nearest retention time.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakMethod.Purity">
            <summary>
            search was by spectral purity.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakMethod.Generic">
            <summary>
            peak was detected by the generic chromatogram peak detector.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakMethod.Reworked">
            <summary>
            Peak was reworked from the original (for example manual)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.PeakDirection">
            <summary>
            Determines is the peak is rising, or inverted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakDirection.Positive">
            <summary>
            Peak rises, like a mountain
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakDirection.Negative">
            <summary>
            Peak is inverted (like a valley)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.PeakDetector">
            <summary>
            An algorithm for peak detection.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakDetector.Genesis">
            <summary>
            The genesis peak detection algorithm.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakDetector.ICIS">
            <summary>
            The ICIS peak detection algorithm
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakDetector.Avalon">
            <summary>
            The avalon peak detection algorithm
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakDetector.PPD">
            <summary>
            The parameterless peak detection algorithm
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ResultStatus">
            <summary>
            Represents the results of an optional test.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ResultStatus.Failed">
            <summary>
            Failed Test
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ResultStatus.Passed">
            <summary>
            Passed Test
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ResultStatus.NotTested">
            <summary>
            Not Tested 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.SmoothMethod">
            <summary>
            This specifies a smoothing envelope shape.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.SmoothMethod.MovingMean">
            <summary>
            Smooth with equal weights.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.SmoothMethod.Gaussian">
            <summary>
            Smooth with a gaussian weighting envelope.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ToleranceUnits">
            <summary>
            The units that you can associate with mass tolerance
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ToleranceUnits.mmu">
            <summary>
            millimass units: a unit of mass equal to 0.001 atomic mass unit, used in physics 
            and chemistry. This unit is also called the millidalton (mDa). The millimass unit 
            is an SI unit, but its proper SI symbol is mu, not the older symbol mmu
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ToleranceUnits.ppm">
            <summary>
            parts-per-million: a concentration, a unit of proportion equal to 10^-6.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ToleranceUnits.amu">
            <summary>
            atomic mass units: the unit of mass used by chemists and physicists for measuring 
            the masses of atoms and molecules. Early in the nineteenth century, scientists 
            discovered that each chemical element is composed of atoms, and that each chemical 
            compound is composed of molecules in which atoms are combined in a fixed way. The 
            definition of the unified atomic mass unit as 1/12 the mass of the most common atoms
            of carbon, known as carbon-12 atoms. (Most elements are mixtures of atoms which have
            different masses because they contain different numbers of neutrons; these varieties
            are called isotopes.) Careful experiments have measured the size of this unit; the 
            currently accepted value (1998) is 1.660 538 73 x 10-24 grams. (This number equals 1 
            divided by Avogadro's number; see mole.) In addition, 1 amu equals approximately 
            931.494 MeV (see electron volt). In biochemistry, the atomic mass unit is called 
            the dalton (Da). 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.TraceOperator">
            <summary>
            Mode of handling multiple chromatogram traces (from the same filtered scans)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.TraceOperator.None">
            <summary>
            There is only one chromatogram
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.TraceOperator.Plus">
            <summary>
            The two chromatograms are summed
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.TraceOperator.Minus">
            <summary>
            The second chromatogram is subtracted from the first
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.VoidMethod">
            <summary>
            Determines how void time is calculated
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.VoidMethod.VoidTimeByValue">
            <summary>
            A value is specified
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.VoidMethod.VoidTimeFirstPeak">
            <summary>
            The time of the first peak in the void chromatogram is used.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IcisNoiseType">
            <summary>
            Determines how the ICIS peak detector  determines which signals are noise.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.IcisNoiseType.Incos">
            <summary>
            A single pass algorithm to determine the noise level. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.IcisNoiseType.Repetitive">
            <summary>
            A multiple pass algorithm to determine the noise level.
            In general, this algorithm is more accurate in analyzing the noise than the INCOS Noise algorithm,
            but it takes longer. 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.PeakOptions">
            <summary>
            Features which can be set per peak, such as "reference compound"
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakOptions.None">
            <summary>No peak flags</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakOptions.Saturated">
            <summary>Saturation flag (signal over ADC limit)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakOptions.Fragmented">
            <summary>Fragmentation flag (peak split by centroider)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakOptions.Merged">
            <summary>Merged flag (peaks combined by centroider)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakOptions.Exception">
            <summary>Exception peak flag (part of reference, but not used by calibration)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakOptions.Reference">
            <summary>Reference peak flag (hi-res internal reference compound)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakOptions.Modified">
            <summary>Mathematically modified packet</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.PeakOptions.LockPeak">
            <summary>High resolution SIM lock mass</summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.WindowMode">
            <summary>
            Determines how much of the the chromatogram is used.
            Data outside of the calculated window is ignored
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.WindowMode.NoWindow">
            <summary>
            Do not restrict the chromatogram
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.WindowMode.Baseline">
            <summary>
            The chromatogram processed is restricted by the baseline and noise window
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.EnumFormat">
            <summary>
            Static class used to convert enumeration values to custom strings.
            This class is necessary because there is no mechanism to override the <c>ToString()</c> method
            for enumerations.
            </summary>
            <remarks>
            To get the customized string for an enumeration value, a program must call the static method
            <c>EnumFormat.ToString(value)</c> and not <c>value.ToString()</c>.
            </remarks>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.EnumFormat.ToString(System.Enum)">
            <summary>
            Gets the display text for an enumeration value.
            </summary>
            <remarks>
            A string is searched for in three places, in this order:
            <para>A custom string specified by <c>SetCustomString()</c>.</para>
            <para>A string resource in the resource file <c>(enum namespace).Enumerations</c> named
            <c>(type name).(enum name)</c>.</para>
            <para>From the <c>DisplayTextAttribute</c> for the enumeration value.</para>
            If no value is found, the standard string representation of the enumeration is returned.
            </remarks>
            <param name="enumeration">The enumeration value for which to obtain the text string.</param>
            <returns>The string for the enumeration value.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.EnumFormat.SetCustomString(System.Enum,System.String)">
            <summary>
            Sets a custom string for an enumeration value.
            This will override any string set with a <c>DisplayTextAttribute</c>.
            </summary>
            <param name="enumeration">The enumeration value for which to set the custom text string.</param>
            <param name="text">The custom text string for this enumeration value.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Extensions">
            <summary>
            Extension methods.
            Includes extensions to several types and interfaces defined in this DLL,
            plus some extensions to common .Net types. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether [the specified source] [is null or empty] .
            </summary>
            <typeparam name="T">Type parameter
            </typeparam>
            <param name="source">
            The source.
            </param>
            <returns>
            <see langword="true"/> if [the specified source] [is null or empty]; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.Contains(ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,System.Double)">
            <summary>
            Test if a value is within range
            </summary>
            <param name="range">
            The range.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            True if the value is within or equal to the range limits (closed range).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.FastBinarySearch(System.Double[],System.Double)">
            <summary>
            find the first data value which is equal to or after start
            (for example, first value within a tolerance range).
            Similar to Array.Binary search, but faster
            as does not need to call comparer functions
            </summary>
            <param name="data">
            Array of increasing data (for example masses in a scan)
            </param>
            <param name="start">
            Position to look for (for example start of X axis range)
            </param>
            <returns>
            The first value after start, or -1 if there are no points after start
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.IntensitySum(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess,System.Double,System.Double)">
            <summary>
            Create the ion chromatogram value from a scan data
            which is the sum of the intensities of all masses between given limits.
            These limits are typically calculated (elsewhere) based on a known mass +/- tolerance.
            </summary>
            <param name="scan">
            The scan data.
            </param>
            <param name="lowMassLimit">
            The low mass limit.
            </param>
            <param name="highMassLimit">
            The high mass limit.
            </param>
            <returns>
            The summed intensities.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.LargestIntensity(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess,System.Double,System.Double)">
            <summary>
            Create the ion chromatogram value from a centroid stream,
            which is the largest of the positive intensities of all masses between given limits.
            These limits are typically calculated (elsewhere) based on a known mass +/- tolerance.
            If there are no peaks in range, or all data in range has negative intensities, zero is returned.
            </summary>
            <param name="centroids">
            The centroids.
            </param>
            <param name="lowMassLimit">
            The low mass limit.
            </param>
            <param name="highMassLimit">
            The high mass limit.
            </param>
            <returns>
            The largest positive peak intensity within limits, or zero if there are no positive values within limits.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.MassAtLargestIntensity(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess,System.Double,System.Double)">
            <summary>
            Create the ion chromatogram value from a scan,
            which is mass of the largest of the positive intensities of all masses between given limits.
            These limits are typically calculated (elsewhere) based on a known mass +/- tolerance.
            If there are no peaks in range, or all data in range has negative intensities, zero is returned.
            </summary>
            <param name="centroids">
            The centroids.
            </param>
            <param name="lowMassLimit">
            The low mass limit.
            </param>
            <param name="highMassLimit">
            The high mass limit.
            </param>
            <returns>
            The mass of the peak with the largest positive peak intensity within limits,
            or zero if there are no positive values within limits.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.MassAndIntensityAtLargestIntensity(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess,System.Double,System.Double)">
            <summary>
            Create the ion chromatogram value from a scan,
            which is mass of the largest of the positive intensities of all masses between given limits.
            These limits are typically calculated (elsewhere) based on a known mass +/- tolerance.
            If there are no peaks in range, or all data in range has negative intensities, zero is returned.
            </summary>
            <param name="centroids">
            The centroids.
            </param>
            <param name="lowMassLimit">
            The low mass limit.
            </param>
            <param name="highMassLimit">
            The high mass limit.
            </param>
            <returns>
            The mass of the peak with the largest positive peak intensity within limits,
            or zero if there are no positive values within limits.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.MassAtLargestIntensity(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess)">
            <summary>
            Create the ion chromatogram value from a scan,
            which is mass of the largest of the positive intensities of all masses between given limits.
            These limits are typically calculated (elsewhere) based on a known mass +/- tolerance.
            If there are no peaks in range, or all data in range has negative intensities, zero is returned.
            </summary>
            <param name="centroids">
            The centroids.
            </param>
            <returns>
            The mass of the peak with the largest positive peak intensity within limits,
            or zero if there are no positive values within limits.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.MassAndIntensityAtLargestIntensity(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess)">
            <summary>
            Create the ion chromatogram value from a scan,
            which is mass of the largest of the positive intensities of all masses between given limits.
            These limits are typically calculated (elsewhere) based on a known mass +/- tolerance.
            If there are no peaks in range, or all data in range has negative intensities, zero is returned.
            </summary>
            <param name="centroids">
            The centroids.
            </param>
            <returns>
            The mass of the peak with the largest positive peak intensity within limits,
            or zero if there are no positive values within limits.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Perform binary search on IList
            </summary>
            <param name="list">
            The list.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="comparer">
            The comparer.
            </param>
            <typeparam name="T">
            Type of items in list
            </typeparam>
            <returns>
            The index of the found item, or compliment of the next item after the supplied value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if arguments are null
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.HasMsData(ThermoFisher.CommonCore.Data.Interfaces.IRawData)">
            <summary>
            Test if a raw file has MS data.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <returns>
            True if the file has MS data
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.SelectMsData(ThermoFisher.CommonCore.Data.Interfaces.IRawData)">
            <summary>
            Test if a raw file has MS data, and select the MS detector, if available.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <returns>
            True if the MS data has been selected.
            False if the file does not have MS data.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFilteredScanEnumeratorOverTime(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String,System.Double,System.Double)">
            <summary>
            Get a filtered scan enumerator, to obtain the collection of scans matching given filter rules.
            Gets scans within the given time range.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="startTime">
            The start Time.
            </param>
            <param name="endTime">
            The end Time.
            </param>
            <returns>
            The collection of scans
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFiltersForTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Double,System.Double)">
             <summary>
             Calculate the filters for this raw file for scans within the time range supplied.
             </summary>
            <param name="data">the raw data</param>
             <param name="startTime">start of time window</param>
             <param name="endTime">end of time window</param>
             <returns>
             Auto generated list of unique filters
             </returns>  
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetCompoundNamesForTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Double,System.Double)">
             <summary>
             Calculate the compound names for this raw file for scans within the time range supplied.
             </summary>
            <param name="data">the raw data</param>
             <param name="startTime">start of time window</param>
             <param name="endTime">end of time window</param>
             <returns>
             Array of compound names within the supplied time range
             </returns>  
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.ScansIncludedInTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Double,System.Double,System.Int32@,System.Int32@)">
            <summary>
            Get the scans included in the time range
            </summary>
            <param name="data">raw file</param>
            <param name="startTime">start time of range</param>
            <param name="endTime">end time of range</param>
            <param name="first">first scan in range</param>
            <param name="last">last scan in range</param>
            <returns>True if scans numbers are returned</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String)">
            <summary>
            Get a filtered scan enumerator, to obtain the collection of scans matching given filter rules.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The collection of scans
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetCompoundScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String)">
            <summary>
            Get a scan enumerator, to obtain the collection of scans matching a given compound.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="compound">
            The filter.
            </param>
            <returns>
            The collection of scans
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.ScanIsOfCompound(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,System.String)">
            <summary>
            Test is a scan is of a given compound
            </summary>
            <param name="file">raw file</param>
            <param name="scanNumber">scan number</param>
            <param name="compound">compound name</param>
            <returns>true if this is a scan of the compound</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetCompoundScanEnumeratorOverTime(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String,System.Double,System.Double)">
            <summary>
            Get a scan enumerator, to obtain the collection of scans matching a given compound, within a given time range
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="compound">
            The compound name.
            </param>
            <param name="startTime">
            The start Time.
            </param>
            <param name="endTime">
            The end Time.
            </param>/// <returns>
            The collection of scans within the supplied time range, which have this compound name
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.TestScan(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Test if a scan passes a filter.
            This extension is provided for improved efficiency
            where the same filter string needs to be used to test multiple scans,
            without repeating the parsing.
            Parsing can be done using: GetFilterFromString(string filter), 
            with the IRawDataPlus interface.
            Also consider using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            when processing all scans in a file.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="scan">the scan number</param>
            <param name="filter">the filter to test</param>
            <returns>
            True if this scan passes the filter
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.TestScan(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,ThermoFisher.CommonCore.Data.Business.ScanFilterHelper)">
            <summary>
            Test if a scan passes a filter.
            This extension is provided for improved efficiency
            where the same filter string needs to be used to test multiple scans,
            without repeating the parsing. Consider using one of the overloads of BuildFilterHelper()
            Parsing can be done using: GetFilterFromString(string filter), 
            with the IRawDataPlus interface.
            Also consider using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            when processing all scans in a file.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="scan">the scan number</param>
            <param name="filterHelper">the filter to test</param>
            <returns>
            True if this scan passes the filter
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.BuildFilterHelper(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String)">
            <summary>
            Constructs an object which has an analysis of the selections being made by
            a scan filter. Improves efficiency when validating many scans against a filter.
            Filter precision is automatically set, based on the file.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="filter">the filter to analyze</param>
            <returns>
            Helper, to efficiently validate scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.BuildFilterHelper(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String,System.Int32)">
            <summary>
            Constructs an object which has an analysis of the selections being made by
            a scan filter. Improves efficiency when validating many scans against a filter.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="filter">the filter to analyze</param>
            <param name="precision">Precision of filter</param>
            <returns>
            Helper, to efficiently validate scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.BuildFilterHelper(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Constructs an object which has an analysis of the selections being made by
            a scan filter. Improves efficiency when validating many scans against a filter.
            Filter precision is automatically set from the raw file.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="filter">the filter to analyze</param>
            <returns>
            Helper, to efficiently validate scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.BuildFilterHelper(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Int32)">
            <summary>
            Constructs an object which has an analysis of the selections being made by
            a scan filter. Improves efficiency when validating many scans against a filter.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="filter">the filter to analyze</param>
            <param name="precision">Filter Precision</param>
            <returns>
            Helper, to efficiently validate scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.FormatIonizationMode(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType)">
            <summary>
            Format ionization mode, based on the scan filter string format.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="mode">
            The mode to format.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.FormatActivationType(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.FilterEnums.ActivationType)">
            <summary>
            Format activation type, based on the scan filter string format.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="mode">
            The mode to format.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.FormatMassAnalyzer(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType)">
            <summary>
            Format mass analyzer, based on the scan filter string format.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <param name="analyzer">
            The analyzer to format.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.DefaultMassOptions(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Get the mass tolerance and precision values from a raw file
            </summary>
            <param name="rawData">Raw file</param>
            <returns>The default tolerance and filter precision</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetScans(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,System.Int32)">
            <summary>
            Enumerate over a range of scans
            </summary>
            <param name="data">File to read from</param>
            <param name="firstScan">start of scan range</param>
            <param name="lastScan">final scan in scan range</param>
            <returns>An enumerator for a collection of scans</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetScans(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Collections.Generic.List{System.Int32})">
            <summary>
            Enumerate over a set of scans
            </summary>
            <param name="data">File to read from</param>
            <param name="scanNumber">Numbers for the scans</param>
            <returns>An enumerator for a collection of scans</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageScansInTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Double,System.Double,System.String,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Gets the average of scans between the given times, which match a filter string.
            </summary>
            <param name="data">File to read from</param>
            <param name="startTime">
            start time
            </param>
            <param name="endTime">
            end time
            </param>
            <param name="filter">
            filter string
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            the averaged scan. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageCompoundScansInTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Double,System.Double,System.String,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Gets the average of scans between the given times, which match a compound name.
            </summary>
            <param name="data">File to read from</param>
            <param name="startTime">
            start time
            </param>
            <param name="endTime">
            end time
            </param>
            <param name="compound">
            compound name
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            the averaged scan. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageCompoundScansInScanRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,System.Int32,System.String,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Gets the average of scans between the given scan numbers, which match a compound name.
            </summary>
            <param name="data">File to read from</param>
            <param name="startScan">
            start scan number
            </param>
            <param name="endscan">
            end scan number
            </param>
            <param name="compound">
            compound name
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            the averaged scan. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageScansInScanRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,System.Int32,System.String,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Gets the average of scans between the given scan numbers, which match a filter string.
            </summary>
            <param name="data">
            File to read from
            </param>
            <param name="startScan">
            start scan
            </param>
            <param name="endScan">
            end scan
            </param>
            <param name="filter">
            filter string
            </param>
            <param name="options">
            mass tolerance settings. If not supplied, these are default from the raw file
            </param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            the averaged scan. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.CreateScanAverager(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Create a scan averager.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="averageOptions">
            The average options.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageScansInTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Double,System.Double,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Gets the average of scans between the given times, which match the supplied filter rules.
            </summary>
            <param name="data">File to read from</param>
            <param name="startTime">
            start time
            </param>
            <param name="endTime">
            end time
            </param>
            <param name="filter">
            filter rules
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            the averaged scan. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageScansInScanRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Gets the average of scans between the given scan numbers, which match the supplied filter rules.
            </summary>
            <param name="data">File to read from</param>
            <param name="startScan">
            start scan
            </param>
            <param name="endScan">
            end scan
            </param>
            <param name="filter">
            filter rules
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            the averaged scan. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageScans(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Collections.Generic.List{System.Int32},ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions,System.Boolean)">
            <summary>
            Calculates the average spectra based upon the list supplied.
            The application should filter the data before making this code, to ensure that
            the scans are of equivalent format. The result, when the list contains scans of 
            different formats (such as linear trap MS centroid data added to orbitrap MS/MS profile data) is undefined.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="data">File to read from</param>
            <param name="scans">
            list of scans to average
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <param name="alwaysMergeSegments">Merge segments, even if mass ranges are not similar.
            Only applies to data with 1 mass segment</param>
            <returns>
            The average of the listed scans. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageAndSubtractScans(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Calculates the averaged and subtracted spectra based upon the lists supplied.
            The application should filter the data before making this code, to ensure that
            the scans in both lists are of equivalent format. The result, when the lists contains scans of 
            different formats (such as linear trap MS centroid data added to orbitrap MS/MS profile data) is undefined.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="data">File to read from</param>
            <param name="foregroundScans">
            foreground scans: list of scans to average
            </param>
            <param name="backgroundScans">background scans: list of scans which are averaged, and then subtracted from the averaged foreground scans</param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            The average of the listed scans. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageAndSubtractScans(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Business.Range},System.String,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Calculates the averaged and subtracted spectra based upon the lists supplied.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="data">File to read from</param>
            <param name="foregroundTimeRange">
            time range to average.
            </param>
            <param name="backgroundTimeRanges">
            time ranges to subtract. The sets of scans matching the filter in each of these time ranges
            are joined to define the background.
            </param>
            <param name="filter">
            Filter to apply for averaging
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            The average of the listed scans. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageAndSubtractScans(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Business.Range},ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Calculates the averaged and subtracted spectra based upon the lists supplied.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="data">File to read from</param>
            <param name="foregroundTimeRange">
            time range to average.
            </param>
            <param name="backgroundTimeRanges">
            time ranges to subtract. The sets of scans matching the filter in each of these time ranges
            are joined to define the background.
            </param>
            <param name="filter">
            Filter to apply for averaging
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            The average of the listed scans. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageAndSubtractScansForCompound(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess,System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Business.Range},System.String,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Calculates the averaged and subtracted spectra based upon the lists supplied,
            which include the named compound.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="data">File to read from</param>
            <param name="foregroundTimeRange">
            time range to average.
            </param>
            <param name="backgroundTimeRanges">
            time ranges to subtract. The sets of scans matching the filter in each of these time ranges
            are joined to define the background.
            </param>
            <param name="compound">
            Compound to select scans for averaging
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            The average of the listed scans. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetCompoundScanListByTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess)">
            <summary>
            Get the list of scans which conatin a given copound, in the range
            "nearest scan time to range.Low" to "nearest scan time to range.High"
            </summary>
            <param name="data">Raw file</param>
            <param name="compound">Compound name to match against scan event</param>
            <param name="range">Retention Time range</param>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFilteredScansListByScanRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a list of all scans in the given range, which pass a filter string
            </summary>
            <param name="rawFile">The raw file.</param>
            <param name="filter">The filter.</param>
            <param name="startScanNumber">The start scan number.</param>
            <param name="endScanNumber">The end scan number.</param>
            <returns>List of filtered scan numbers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetCompoundScansListByScanRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a list of all scans in the given range, which have a component name
            </summary>
            <param name="rawFile">The raw file.</param>
            <param name="compound">The compound.</param>
            <param name="startScanNumber">The start scan number.</param>
            <param name="endScanNumber">The end scan number.</param>
            <returns>List of filtered scan numbers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFilteredScansListByScanRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Int32,System.Int32)">
            <summary>
            Creates a list of all scans in the given range, which pass the supplied filter rules.
            </summary>
            <param name="rawFile">The raw file.</param>
            <param name="filter">The filter.</param>
            <param name="startScanNumber">The start scan number.</param>
            <param name="endScanNumber">The end scan number.</param>
            <returns>List of filtered scan numbers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFilteredScansListByTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Double,System.Double)">
            <summary>
            Creates a list of all scans in the given time range, which pass the supplied filter rules.
            </summary>
            <param name="rawFile">The raw file.</param>
            <param name="filter">The filter.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>List of filtered scan numbers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFilteredScansListByTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Creates a list of all scans in the given time range, which pass the supplied filter rules.
            This version returds scans from the "nearest scan to start time" to "nearest scan to end time".
            </summary>
            <param name="rawFile">The raw file.</param>
            <param name="filter">The filter.</param>
            <param name="timeRange">The time range.</param>
            <returns>List of filtered scan numbers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFilteredScansListWithinTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Creates a list of all scans in the given time range, which pass the supplied filter rules.
            This version returds scans from the "first scan >= start time" to "last scan Less or equal to end time".
            </summary>
            <param name="rawFile">The raw file.</param>
            <param name="filter">The filter.</param>
            <param name="timeRange">The time range.</param>
            <returns>List of filtered scan numbers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetFilteredScansListByTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.String,System.Double,System.Double)">
            <summary>
            Creates a list of all scans in the given time range, which pass a filter
            </summary>
            <param name="rawFile">The raw file.</param>
            <param name="filter">The filter.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>List of filtered scan numbers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.ScanRangeFromTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess)">
            <summary>
            Convert a time range to a the nearest scan range
            </summary>
            <param name="rawFile">
            The raw File.
            </param>
            <param name="timeRange">
            The time range.
            </param>
            <returns>
            The scan range of the nearest scans to the start and end times
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.ScanRangeWithinTimeRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Convert a time range to am inlcuded scan range,
            include scans which are within or equal to the time limits supplied.
            </summary>
            <param name="rawFile">
            The raw File.
            </param>
            <param name="timeRange">
            The time range.
            </param>
            <returns>
            The scan range of the lowest and highest scans in the time range supplied,
            including scans at the boundary times.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.FilteredScansListByScanRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Business.ScanFilterHelper)">
            <summary>
            Creates a list of all scans in the given scan range, which pass a filter
            </summary>
            <param name="sampleRawFile">
            The sample raw file.
            </param>
            <param name="startScanNum">
            The start scan number.
            </param>
            <param name="endScanNum">
            The end scan number.
            </param>
            <param name="filterHelper">
            The (analyzed) filter.
            </param>
            <returns>
            The list of matching scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.CompoundScansListByScanRange(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a list of all scans in the given scan range, which pass a filter
            </summary>
            <param name="sampleRawFile">
            The sample raw file.
            </param>
            <param name="startScanNum">
            The start scan number.
            </param>
            <param name="endScanNum">
            The end scan number.
            </param>
            <param name="compound">
            The (analyzed) filter.
            </param>
            <returns>
            The list of matching scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.AverageScans(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ScanStatistics},ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions)">
            <summary>
            Calculates the average spectra based upon the list supplied.
            The application should filter the data before making this code, to ensure that
            the scans are of equivalent format. The result, when the list contains scans of 
            different formats (such as linear trap MS centroid data added to orbitrap MS/MS profile data) is undefined.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="data">File to read from</param>
            <param name="scans">
            list of ScanStatistics
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="averageOptions">
            The average Options (for FT format data).
            </param>
            <returns>
            The average of the listed scans. Use Scan.ScansCombined to find how many scans were averaged.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.SubtractScans(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Subtracts the background scan from the foreground scan
            </summary>
            <param name="data">File to read from</param>
            <param name="foreground">Foreground data (Left of "scan-scan" operation</param>
            <param name="background">Background data (right of"scan-scan" operation)</param>
            <returns>The result of foreground-background</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.HasVariableTrailers(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus)">
            <summary>
            Test if this file has variable trailers.
            Calling code must select and MS data stream first.
            If this is true, then the number of items returned in each scan for "trailer extra" can vary.
            </summary>
            <param name="data">
            The raw data.
            </param>
            <returns>
            True, if the trailer extra records are variable sized.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.HasVariableRecords(ThermoFisher.CommonCore.Data.Business.HeaderItem[])">
            <summary>
            Test if a set of headers defines "variable sized records".
            </summary>
            <param name="headers">
            The headers.
            </param>
            <returns>
            True, if the records controlled by these headers are variable sized.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Extensions.GetTrailerExtraDataForScanWithValidation(ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus,System.Int32,ThermoFisher.CommonCore.Data.Business.HeaderItem[])">
            <summary>
            Get trailer extra data for scan with validation.
            Gets the "trailer extra" custom scan data in object form.
            <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetTrailerExtraValues(System.Int32)"/>
            The application should select MS data before calling this.
            For example, If the string "Ion Time" is found at index 3 in the 
            headers with format "double", and an application needs to read this double value
            from scan 19, then the application can first test if item[3] is valid in scan 19, by
            inspecting the returned boolean array (result.Item1[3]).
            If this array element is "true" then the "Ion Time" (double) value in the returned object array
            at index 3 may be used. If result.Item1[3] is false, then this value is not available.
            So: If producing a chart of this value, the retention time of this scan should be
            omitted from the data series. (Do not record "0" for a missing value).
            Argument exceptions may be returned by the underlying file, if (for example) the scan number
            is out of range.
            </summary>
            <param name="file">
            The raw file.
            </param>
            <param name="scan">
            The scan number.
            </param>
            <param name="headers">
            The headers as read by IRawDataPlus.GetTrailerExtraHeaderInformation.
            When processing multiple scans, it is more efficient for an application
            to request this data once, and supply it to each call.
            Instruments may have fixed record sizes. Having read the headers, an application
            may call this <c>bool hasVariableRecords = headers.HasVariableRecords();</c>
            and if this returns "false" then there is no need to call this extension,
            as all values will be valid in all scans.
            </param>
            <returns>
            A tuple, whose first element is an array of valid flags, and second is the exact data
            returned from GetTrailerExtraValues, for the supplied scan. 
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.NamespaceDoc">
            <summary>
            Contains enumerations used for scan filters and scan events.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.PolarityType">
            <summary>
            Specifies polarity of scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.PolarityType.Negative">
            <summary>
            Scan is negative ion
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.PolarityType.Positive">
            <summary>
            Scan is positive ion
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.PolarityType.Any">
            <summary>
            Accept any type of scan polarity.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.ScanDataType">
            <summary>
            Specifies data type of scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanDataType.Centroid">
            <summary>
            Centroid format data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanDataType.Profile">
            <summary>
            Profile format data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanDataType.Any">
            <summary>
            When filtering: accept any state of this feature
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType">
            <summary>
            Specifies how source fragmentation values are interpreted.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType.NoValue">
            <summary>
            No numeric value: e.g. SID
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType.SingleValue">
            <summary>
            A single value: e.g. SID=40
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType.Ramp">
            <summary>
            A ramp: e.g. SID=40-50
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType.SIM">
            <summary>
            SIM: e.g. SIM [100@40, 200@50]
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType.Any">
            <summary>
            Accept any value
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType">
            <summary>
            Specifies scan mode in scans.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType.Full">
            <summary>
            A full scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType.Zoom">
            <summary>
            A zoom scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType.Sim">
            <summary>
            A SIM (selected Ion Monitoring) scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType.Srm">
            <summary>
            A SRM (Selected Reaction Monitoring) scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType.Crm">
            <summary>
            A CRM (Continuous Reaction Monitoring) scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType.Any">
            <summary>
            any scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType.Q1Ms">
            <summary>
            A Q1 MS scan (first quad of triple).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType.Q3Ms">
            <summary>
            A Q3 MS scan  (third quad of triple).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.TriState">
            <summary>
            The feature state.
            By default: On.
            This tri-state enum is designed for filtering 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.TriState.On">
            <summary>
            The on state.
            The feature is used
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.TriState.Off">
            <summary>
            The off state. The feature is not used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.TriState.Any">
            <summary>
            The any state. When filtering, match any state of this feature.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType">
            <summary>
            Specifies scan power in scans.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ng">
            <summary>Constant Neutral Gain scan(ICIS Data Only)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Nl">
            <summary>Constant Neutral Loss scan(ICIS Data Only)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Par">
            <summary>Parent scan(ICIS Data Only)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Any">
            <summary>Any scan power</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms">
            <summary>basic MS</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms2">
            <summary>MS^2 (MS/MS)</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms3">
            <summary>order MS^3</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms4">
            <summary>order MS^4</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms5">
            <summary>order MS^5</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms6">
            <summary>order MS^6</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms7">
            <summary>order MS^7</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms8">
            <summary>order MS^8</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms9">
            <summary>order MS^9</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType.Ms10">
            <summary>order MS^10</summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType">
            <summary>
            Specifies ionization mode in scans.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.ElectronImpact">
            <summary>
            Mode is electron impact.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.ChemicalIonization">
            <summary>
            Mode is chemical ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.FastAtomBombardment">
            <summary>
            Mode is fast atom bombardment.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.ElectroSpray">
            <summary>
            Mode is electro spray.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.AtmosphericPressureChemicalIonization">
            <summary>
            Mode is atmospheric pressure chemical ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.NanoSpray">
            <summary>
            Mode is <c>nano spray</c>.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.ThermoSpray">
            <summary>
            Mode is thermo spray.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.FieldDesorption">
            <summary>
            Mode is field desorption.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.MatrixAssistedLaserDesorptionIonization">
            <summary>
            Mode is matrix assisted laser desorption ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.GlowDischarge">
            <summary>
            Mode is glow discharge.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.Any">
            <summary>
            Mode is any (For filtering only).
            If reported by an instrument: Mode was not recorded by instrument.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.PaperSprayIonization">
            <summary>
            Paper spray ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.CardNanoSprayIonization">
            <summary>
            Card <c>nanospray</c> ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode1">
            <summary>
            The extension ionization mode 1.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode2">
            <summary>
            The extension ionization mode 2.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode3">
            <summary>
            The extension ionization mode 3.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode4">
            <summary>
            The extension ionization mode 4.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode5">
            <summary>
            The extension ionization mode 5.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode6">
            <summary>
            The extension ionization mode 6.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode7">
            <summary>
            The extension ionization mode 7.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode8">
            <summary>
            The extension ionization mode 8.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonizationMode9">
            <summary>
            The extension ionization mode 9.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType.IonModeBeyondKnown">
            <summary>
            The ion mode is beyond known types.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.DetectorType">
            <summary>
            Specifies inclusion or exclusion of the detector value.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.DetectorType.Valid">
            <summary>
            The detector value valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.DetectorType.Any">
            <summary>
            Any detector value (for filtering).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.DetectorType.NotValid">
            <summary>
            The detector value is not valid.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.EnergyType">
            <summary>
            Specifies precursor(collision) energy validation type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.EnergyType.Valid">
            <summary>
            Energy value is valid
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.EnergyType.Any">
            <summary>
            Not valid (accept any when filtering)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType">
            <summary>
            Specifies type of mass analyzer in scans.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType.MassAnalyzerITMS">
            <summary>
            Ion trap
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType.MassAnalyzerTQMS">
            <summary>
            Triple quad
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType.MassAnalyzerSQMS">
            <summary>
            Single quad
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType.MassAnalyzerTOFMS">
            <summary>
            Time of flight
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType.MassAnalyzerFTMS">
            <summary>
            Fourier Transform
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType.MassAnalyzerSector">
            <summary>
            Magnetic sector
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType.Any">
            <summary>
            Match any type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType.MassAnalyzerMRTOF">
            <summary>
            MultiReflection Time of Flight
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType">
            <summary>
            Specifies type of sector scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType.SectorBScan">
            <summary>
            Magnetic sector scan
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType.SectorEScan">
            <summary>
            Electrostatic sector scan
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType.Any">
            <summary>
            Match any sector scan
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType">
            <summary>
            Specifies type of field free region in scans.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType.FieldFreeRegion1">
            <summary>
            First Field Free Region
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType.FieldFreeRegion2">
            <summary>
            Second Field Free Region
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType.Any">
            <summary>
            Accept any Field Free Region
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType">
            <summary>
            Specifies compensation voltage type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType.NoValue">
            <summary>
            No numeric value: e.g. SID
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType.SingleValue">
            <summary>
            A single value: e.g. SID=40
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType.Ramp">
            <summary>
            A ramp: e.g. SID=40-50
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType.SIM">
            <summary>
            SIM: e.g. SIM [100@40, 200@50]
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType.Any">
            <summary>
            Accept any value
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType">
            <summary>
            The activation types are used to link a specific precursor mass with an activation type.
            There are 26 possible mode values, including some reserved values.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.CollisionInducedDissociation">
            <summary>
            Collision induced dissociation
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.MultiPhotonDissociation">
            <summary>
            Multi-photon dissociation.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ElectronCaptureDissociation">
            <summary>
            Electron-capture dissociation (ECD) is a method of fragmenting gas phase ions
            for tandem mass spectrometric analysis (structural elucidation).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.PQD">
            <summary>
            Pulsed-Q Dissociation (PQD) is a proprietary fragmentation technique that eliminates the low mass cut-off
            for Thermo Scientific™ linear ion trap mass spectrometers,
            facilitating the use of isobaric mass tags for quantitation of proteins.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ElectronTransferDissociation">
            <summary>
            Electron transfer dissociation (ETD).
            ETD induces fragmentation of cations (e.g. peptides or proteins) by transferring electrons to them.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.HigherEnergyCollisionalDissociation">
            <summary>
            Higher-energy collisional dissociation.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.Any">
            <summary>
            Match any activation type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.SAactivation">
            <summary>
            SA activation
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ProtonTransferReaction">
            <summary>
            Proton transfer reaction
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.NegativeElectronTransferDissociation">
            <summary>
            Negative electron transfer dissociation
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.NegativeProtonTransferReaction">
            <summary>
            Negative Proton-transfer-reaction
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.UltraVioletPhotoDissociation">
            <summary>
            Ultra Violet Photo Dissociation
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeA">
            <summary>
            Mode a (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeB">
            <summary>
            Mode b (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeC">
            <summary>
            Mode c (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeD">
            <summary>
            Mode d (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeE">
            <summary>
            Mode e (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeF">
            <summary>
            Mode a (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeG">
            <summary>
            Mode g (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeH">
            <summary>
            Mode h (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeI">
            <summary>
            Mode i (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeJ">
            <summary>
            Mode J (reserved) .
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeK">
            <summary>
            Mode K (defined as NegativeProtonTransferReaction).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeL">
            <summary>
            Mode L (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeM">
            <summary>
            Mode M (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeN">
            <summary>
            Mode N (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeO">
            <summary>
            Mode O (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeP">
            <summary>
            Mode P (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeQ">
            <summary>
            Mode Q (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeR">
            <summary>
            Mode R (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeS">
            <summary>
            Mode S (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeT">
            <summary>
            Mode T (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeU">
            <summary>
            Mode U (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeV">
            <summary>
            Mode V (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeW">
            <summary>
            Mode W (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeX">
            <summary>
            Mode X (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeY">
            <summary>
            Mode Y (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.ModeZ">
            <summary>
            Mode Z (reserved).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType.LastActivation">
            <summary>
            end of list
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.FilterEnums.EventAccurateMass">
            <summary>
            Determines how accurate mass calibration was done.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.EventAccurateMass.Internal">
            <summary>
            Calibration is internal (calibration compound mixed with injected data).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.EventAccurateMass.External">
            <summary>
            Calibration is external (calibration compound used on a previous injection).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.FilterEnums.EventAccurateMass.Off">
            <summary>
            No recorded accurate mass calibration.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IReplicateDataAccess">
            <summary>
            Access to basic data about a replicate
            As defined in Xcalibur PMD
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateDataAccess.Amount">
            <summary>
            Gets the amount of target compound in calibration or QC standard.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateDataAccess.HeightRatio">
            <summary>
            Gets the Ratio of target peak height to ISTD peak height in result file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateDataAccess.AreaRatio">
            <summary>
            Gets the Ratio of target peak area to ISTD peak area in result file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateDataAccess.ExcludeFromCalibration">
            <summary>
            Gets a value indicating whether to exclude this data point from calibration curve.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateDataAccess.File">
            <summary>
            Gets the raw file name for the replicate
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IReplicate">
            <summary>
            A replicate is a measurement of a single calibration peak in 1 file.
            This interfaces defines required features of a replicate for the regression code.
            A calibration system needs to implement at least this information
            (typically from a calibration table and peak integration results).
            The real class "Replicate" implements this.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicate.Amount">
            <summary>
            Gets the amount of target compound in calibration or QC standard.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicate.Response">
            <summary>
            Gets the response of this sample, for example: Ratio of target peak area to ISTD peak area
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicate.ExcludeFromCalibration">
            <summary>
            Gets or sets a value indicating whether this data point should be excluded from the calibration curve.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicate.Key">
            <summary>
            Gets the key name associated with this replicate (for example a file name)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicate.PeakKey">
            <summary>
            Gets the second key name associated with this replicate (for example a compound name)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IReplicate.Clone">
            <summary>
            Implementation of <c>ICloneable.Clone</c> method.
            Creates deep copy of this instance.
            </summary>
            <returns>
            An exact copy of the current Replicate.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ILevelReplicates">
            <summary>
            Interface to pass replicate information to curve fitting methods
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicates.ReplicateCollection">
            <summary>
            Gets the replicates of this calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicates.Replicates">
            <summary>
            Gets the number of replicates for this level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicates.BaseAmount">
            <summary>
            Gets or sets the amount of calibration compound (usually a concentration) for this level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicates.Item(System.Int32)">
            <summary>
            array access operator to return Replicate array element.
            </summary>
            <param name="index">Index into the array</param>
            <returns>The requested replicate</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ILevelReplicates.CountReplicates(System.Int32@,System.Int32@)">
            <summary>
            Count all included/excluded replicates.
            <para>
                The included and excluded counts are incremented by the number of included
                and excluded points. These counters are not set to zero,
                allowing this method to be called repeatedly, for example to count
                replicates for all levels.
            </para>
            </summary>
            <param name="included">(updated) included counter</param>
            <param name="excluded">(updated) excluded counter</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ICalibrationLevelAccess">
            <summary>
            Read only access to a calibration level.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ICalibrationLevelAccess.Name">
            <summary>
            Gets the name for this calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ICalibrationLevelAccess.BaseAmount">
            <summary>
            Gets the amount of calibration compound (usually a concentration) for this level
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IQualityControlLevelAccess">
            <summary>
            interface to read QC level settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IQualityControlLevelAccess.TestPercent">
            <summary>
            Gets the QC test <c>standard: 100 * (yobserved-ypredicted)/ypreditced</c>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ILevelWithSimpleReplicates">
            <summary>
            Import format for Xcalibur PMD
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelWithSimpleReplicates.ReplicateCollection">
            <summary>
            Gets replicate data, as saved in a PMD file
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ILevelReplicatesAccess">
            <summary>
            Interface to read replicate information
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicatesAccess.ReplicateCollection">
            <summary>
            Gets the replicates of this calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicatesAccess.Replicates">
            <summary>
            Gets the number of replicates for this level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicatesAccess.Item(System.Int32)">
            <summary>
            Gets an array access operator to return Replicate array element.
            </summary>
            <param name="index">Index into the array</param>
            <returns>The requested replicate</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ILevelReplicatesWithStatistics">
            <summary>
            This interface represents replicate information after preforming calibration calculations
            and determining statistics. These statistics are may be used to annotate calibration curves.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicatesWithStatistics.PercentRSD">
            <summary>
            Gets or sets the calculated % RSD for a replicate table
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicatesWithStatistics.PercentCV">
            <summary>
            Gets or sets the calculated % RSD for a replicate table
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILevelReplicatesWithStatistics.AverageRf">
            <summary>
            Gets the average value of the response factor
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IReplicateStatisticsAccess">
            <summary>
            Statistics calculated from a replicate table
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateStatisticsAccess.PercentRSD">
            <summary>
            Gets the calculated % RSD for a replicate table
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateStatisticsAccess.PercentCV">
            <summary>
            Gets the calculated % CV for a replicate table
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateStatisticsAccess.AverageRetentionTime">
            <summary>
            Gets the average retention time of all peaks added to the replicate table
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateStatisticsAccess.AverageRf">
            <summary>
            Gets the average response factor (or average response for ISTD)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IReplicateStatisticsAccess.Valid">
            <summary>
            Gets a value indicating whether the calibration or QC level was "found"
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ILevelReplicatesWithStatisticsAccess">
            <summary>
            This interface represents replicate information after preforming calibration calculations
            and determining statistics. These statistics are may be used to annotate calibration curves.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess">
            <summary>
            Read only access to Results of running system suitability tests
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.MeasuredResolution">
            <summary>
            Gets the resolution of the peak (from other peaks)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedResolutionChecks">
            <summary>
            Gets a value indicating whether the resolution test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedSymmetryChecks">
            <summary>
            Gets a value indicating whether the symmetry test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedPeakWidth">
            <summary>
            Gets a value indicating whether the peak width test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedTailing">
            <summary>
            Gets a value indicating whether the peak tailing test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedColumnOverload">
            <summary>
            Gets a value indicating whether the column overload test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedNoise">
            <summary>
            Gets a value indicating whether the signal to noise test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedSaturated">
            <summary>
            Gets a value indicating whether the saturation test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedConcave">
            <summary>
            Gets a value indicating whether the concave peak test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PassedBaselineClipped">
            <summary>
            Gets a value indicating whether the baseline clipping test passed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.ResolutionChecksPerformed">
            <summary>
            Gets a value indicating whether the following values have been calculated:
            <c>PassedResolutionChecks</c>, <c>MeasuredResolution</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.SymmetryChecksPerformed">
            <summary>
            Gets a value indicating whether the following values have been calculated:
            <c>PassedSymmetryChecks</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.ClassificationChecksPerformed">
            <summary>
            Gets a value indicating whether the following values have been calculated:
            <c>PassedPeakWidth</c>, <c>PassedTailing</c>, <c>PassedColumnOverload</c>, <c>PassedNoise</c>, <c>PassedSaturated</c>,
            <c>PassedConcave</c>, <c>PassedBaselineClipped</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.ResolutionCheckStatus">
            <summary>
            Gets a value indicating whether the ResolutionCheck was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.SymmetryCheckStatus">
            <summary>
            Gets a value indicating whether the SymmetryCheck was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.PeakWidthStatus">
            <summary>
            Gets a value indicating whether the PeakWidth test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.TailingStatus">
            <summary>
            Gets a value indicating whether the Tailing test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.ColumnOverloadStatus">
            <summary>
            Gets a value indicating whether the ColumnOverload test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.NoiseStatus">
            <summary>
            Gets a value indicating whether the Noise test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.SaturatedStatus">
            <summary>
            Gets a value indicating whether the Saturated test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.ConcaveStatus">
            <summary>
            Gets a value indicating whether the Concave test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilityResultsAccess.BaselineClippedStatus">
            <summary>
            Gets a value indicating whether the BaselineClipped test was performed, and the results of the test, when run.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess">
            <summary>
            This interfaces encapsulates access to the results of an ion ratio test for one ion.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess.PassedIonCoelutionTest">
            <summary>
            Gets a value indicating whether the co-elution test has passed for this ion
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess.MeasuredCoelution">
            <summary>
            Gets the results of the co-elution test
            targetCompoundPeak.Apex.RetentionTime - ion.Apex.RetentionTime;
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess.MeasuredRatio">
            <summary>
            Gets the measured ion ratio, as a percentage
            <code>(qualifierIonResponse * 100) / targetCoumpoundResponce</code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess.AbsWindow">
            <summary>
            Gets a window in absolute % used to bound this test
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess.PassedIonRatioTest">
            <summary>
            Gets a value indicating whether the ratio test passed for this ion
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess.Mass">
            <summary>
            Gets the mass which was tested
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioTestResultAccess.DetectedPeak">
            <summary>
            Gets the peak which was found in the IRC chromatogram
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IMassOptionsAccess">
            <summary>
            Read only access to mass options
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IMassOptionsAccess.Tolerance">
            <summary>
            Gets the tolerance value.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IMassOptionsAccess.Precision">
            <summary>
            Gets the units of precision.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IMassOptionsAccess.ToleranceUnits">
            <summary>
            Gets the tolerance units.
            </summary>
            <value>The tolerance units.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IMassOptionsAccess.ToleranceString">
            <summary>
            Gets the tolerance string of the current m_toleranceUnits setting.
            </summary>
            <value>The tolerance string.</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IMassOptionsAccess.GetToleranceAtMass(System.Double)">
            <summary>
            Get the tolerance window around a specific mass
            </summary>
            <param name="mass">
            Mass about which window is needed
            </param>
            <returns>
            The distance (in amu) from the mass which is within tolerance.
            For example: myWindow=GetToleranceAtMass(myMass);
            accept data between "myMass-myWindow" and "myMass+myWindow"
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess">
            <summary>
            Read only access to chromatogram trace settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.Trace">
            <summary>
            Gets the type of trace to construct
            </summary>
            <value>see <see cref="T:ThermoFisher.CommonCore.Data.Business.TraceType"/> for more details</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.IncludeReference">
            <summary>
            Gets a value indicating whether reference and exception peaks are included.
            in this chromatogram trace
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.Filter">
            <summary>
            Gets the filter used in searching scans during trace build
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.DelayInMin">
            <summary>
            Gets the delay in minutes.
            </summary>
            <value>Floating point delay in minutes</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.FragmentMass">
            <summary>
            Gets the fragment mass for neutral fragment filters.
            </summary>
            <value>Floating point fragment mass for neutral fragment filters</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.MassRanges">
            <summary>
            Gets the mass ranges.
            </summary>
            <remarks>
            If <see cref="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.Trace"/> is MassRange then mass range values are used to build trace.
            </remarks>
            <value>Array of mass ranges</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.MassRangeCount">
            <summary>
            Gets the number of mass ranges.
            </summary>
            <remarks>
            If <see cref="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.Trace"/> is MassRange then mass range values are used to build trace.
            </remarks>
            <value>Numeric count of mass ranges</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.GetMassRange(System.Int32)">
            <summary>
            Gets a range value at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.MassRangeCount"/> to find out the count of mass ranges.
            <para>
            </para>
            If <see cref="P:ThermoFisher.CommonCore.Data.Business.ChromatogramTraceSettings.Trace"/> is MassRange then mass range values are used to build trace.
            </remarks>
            <param name="index">
            Index at which to retrieve the range
            </param>
            <returns>
            <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/> value at give index
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IChromatogramTraceSettingsAccess.CompoundNames">
            <summary>
            Gets the Compound Names.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IPeakChromatogramSettingsAccess">
            <summary>
            Read only access to peak chromatogram settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakChromatogramSettingsAccess.Filter">
            <summary>
            Gets the scan filter.
            This determines which scans are included in the chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakChromatogramSettingsAccess.ChroSettings">
            <summary>
            Gets the chromatogram settings.
            This defines how data for a chromatogram point is constructed from a scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakChromatogramSettingsAccess.ChroSettings2">
            <summary>
            Gets the chromatogram settings
            When there is a trace operator set,
            This defines how data for a chromatogram point is constructed from a scan for the chromatogram
            to be added or subtracted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakChromatogramSettingsAccess.Instrument">
            <summary>
            Gets the device type.
            This defines which data stream within the raw file is used. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakChromatogramSettingsAccess.InstrumentIndex">
            <summary>
            Gets the instrument index (starting from 1).
            For example: "3" for the third UV detector.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakChromatogramSettingsAccess.TraceOperator">
            <summary>
            Gets the trace operator.
            If the operator is not "None" then a second chromatogram can be added to or subtracted from the first.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IPeakAccess">
            <summary>
            Readonly access to a peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.MergedPeaks">
            <summary>
            Gets a list of peaks that have been merged
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.NoiseResult">
            <summary>
            Gets a value which determines how signal to noise has been calculated.
            When the returns <see cref="T:ThermoFisher.CommonCore.Data.NoiseClassification"/>.Value, a numeric value can
            be obtained from <see cref="P:ThermoFisher.CommonCore.Data.IPeakAccess.SignalToNoise"/>.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.SignalToNoise">
            <summary>
            Gets the Signal To Noise ratio.
            If <see cref="P:ThermoFisher.CommonCore.Data.IPeakAccess.NoiseResult"/> is <see cref="T:ThermoFisher.CommonCore.Data.NoiseClassification"/>.Value, then this property returns the signal to noise ratio.
            Otherwise this should not be used. Use <see cref="T:ThermoFisher.CommonCore.Data.EnumFormat"/>.ToString(<see cref="P:ThermoFisher.CommonCore.Data.IPeakAccess.NoiseResult"/>) instead.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Left">
            <summary>
            Gets the position, height, baseline at left limit
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Apex">
            <summary>
            Gets the position, height, baseline  at peak apex
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Right">
            <summary>
            Gets the position, height, baseline at right limit
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Area">
            <summary>
            Gets the integrated peak area
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.BasePeakMass">
            <summary>
            Gets the mass of the base peak from the apex scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.MassToCharge">
            <summary>
            Gets the mass to charge ratio of peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.ExpectedRT">
            <summary>
            Gets the expected RT after making any RT adjustments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Noise">
            <summary>
            Gets the noise measured in detected peak (for signal to noise calculation)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.RmsNoise">
            <summary>
            Gets a value indicating whether the "Noise" value was calculated by an RMS algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.ScanAtApex">
            <summary>
            Gets the apex of the peak corresponds to a particular signal.
            This gives the scan number of that signal.
            If no scan numbers are sent with the peak detection signal, then
            the scan number = "signal index at apex +1".
            Note that there is no guarantee that left and right edges will always be exactly on a scan, even
            though most peak detectors behave that way, so this is not added as a property of <see cref="T:ThermoFisher.CommonCore.Data.Business.PeakPoint"/>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Name">
            <summary>
            Gets the name for this peak (for example, analyte name)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Scans">
            <summary>
            Gets the number of scans integrated
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.LeftEdge">
            <summary>
            Gets the left edge type. This describes why the peak started. It is only set by the Genesis Detector.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.RightEdge">
            <summary>
            Gets the right edge type. This describes why the peak ended. It is only set by the Genesis Detector.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Valid">
            <summary>
            Gets a value indicating whether the peak is Valid.
            Peaks are assumed to have valid data, but may be marked invalid by
            an integrator, if failing certain tests.
            Invalid peaks should never be returned to a calling application
            by an integrator algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Saturated">
            <summary>
            Gets a value indicating whether this <see cref="T:ThermoFisher.CommonCore.Data.Business.Peak"/> is saturated.
            </summary>
            <value>true when integration/mass range has saturation.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.ValleyDetect">
            <summary>
            Gets a value indicating whether valley detection was used when detecting this peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Direction">
            <summary>
            Gets the direction of peak (Positive or Negative)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Fit">
            <summary>
            Gets the chi-squared error in fitting the peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.FittedWidth">
            <summary>
            Gets the calculated width, or 'gamma_r'.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.FittedIntensity">
            <summary>
            Gets the calculated intensity, or 'gamma_A'.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.FittedRT">
            <summary>
            Gets the calculated position, or 'gamma_t0'.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.FittedAsymmetry">
            <summary>
            Gets the calculated 4th parameter for gamma (gamma_M) or EMG functions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.FittedFunction">
            <summary>
            Gets the peak shape used in the fitting procedure.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.FittedPoints">
            <summary>
            Gets the number of data points used in the fit.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.Purity">
            <summary>
            Gets purity of the peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.PurityLowTime">
            <summary>
            Gets the low time from peak purity calculation
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakAccess.PurityHighTime">
            <summary>
            Gets the high time from peak purity calculation
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ILocatedPeakAccess">
            <summary>
            Read only access to a located peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILocatedPeakAccess.DetectedPeak">
            <summary>
            Gets the peak which best matches the location rules.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILocatedPeakAccess.Method">
            <summary>
            Gets how this peak was found.
            The find results are only valid when this is set to "Spectrum".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILocatedPeakAccess.ValidRTReference">
            <summary>
            Gets a value indicating whether RT adjustments could be made to the RT reference.
            This flag is only meaningful when RT reference adjustments are made based on
            a reference peak (see the locate class).
            If a valid reference peak is supplied, then the expected RT can be adjusted based on the reference.
            If no reference peak is found (a null peak) then the expected RT cannot be adjusted, and this flag will be false.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ILocatedPeakAccess.FindResults">
            <summary>
            Gets the find results. When using spectrum LocateMethod this will contain the best matching peaks and find scores.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ISmoothingSettingsAccess">
            <summary>
            Read only access to smoothing settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISmoothingSettingsAccess.SmoothingPoints">
            <summary>
            Gets the number of points for smoothing the chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISmoothingSettingsAccess.SmoothRepeat">
            <summary>
            Gets the number of times to repeat smoothing
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISmoothingSettingsAccess.SmoothMethod">
            <summary>
            Gets the envelope shape used by smoothing algorithm
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess">
            <summary>
            Read only access to system suitability settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.EnableResolutionChecks">
            <summary>
            Gets a value indicating whether resolution checks will be performed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.ResolutionThreshold">
            <summary>
            Gets the Resolution Threshold.
            The threshold value determines if a peak's resolution or ok or not.
            The default value is 90%.
            Resolution is defined as the ratio:
            <para>100 × V/P</para>
            where:
            <para>V = depth of the Valley: the difference in intensity from the chromatogram at the apex of the target peak
            to the lowest point in the valley between the target peak and a neighboring peak</para>
            <para>P = Peak height: the height of the target peak, above the peak's baseline</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.EnableSymmetryChecks">
            <summary>
            Gets a value indicating whether peak symmetry checks are to be performed.
            Symmetry is determined at a specified peak height
            and is a measure of how even-sided a peak is
            about a perpendicular dropped from its apex.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.SymmetryPeakHeight">
            <summary>
            Gets the Peak Height at which symmetry is measured.
            The default value is 50%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.SymmetryThreshold">
            <summary>
            Gets the Symmetry Threshold.
            The SOP defined Symmetry Threshold is > 70% at 50% peak height.
            This represents a realistic practical tolerance for capillary GC data.
            You can enter any value within the range 0% to 100%.
            The default value is 80% at 50% peak height.
            The algorithm determines symmetry at the <c>SymmetryPeakHeight</c>
            For the purposes of the test, a peak is considered symmetrical if:
            (Lesser of L and R) × 100 / (Greater of L and R) > Symmetry Threshold %
            where:
            <para>L = the distance from the left side of the peak to
            the perpendicular dropped from the peak apex</para>
            <para>R = the distance from the right side of the peak to
            the perpendicular dropped from the peak apex</para>
            Measurements of L and R are taken from the raw file without smoothing.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.EnablePeakClassificationChecks">
            <summary>
            Gets a value indicating whether peak classification checks are to be run
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.PeakWidthPeakHeight">
            <summary>
            Gets the Peak Height at which the suitability calculator tests the width of target peaks.
            You can enter any value within the range 0% to 100%. The default value is 50%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.MinPeakWidth">
            <summary>
            Gets the minimum peak width, at the specified peak height, for the peak width suitability test.
            The default value is 1.8. You can set any value in the range 0 to 30 seconds. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.MaxPeakWidth">
            <summary>
            Gets the maximum peak width, at the specified peak height, for the peak width suitability test.
            The default value is 3.6. You can set any value in the range 0 to 30 seconds. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.TailingPeakHeight">
            <summary>
            Gets the Peak Height at which the algorithm measures the tailing of target peaks.
            The default SOP value is 10%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.TailingFailureThreshold">
            <summary>
             Gets the failure threshold for the tailing suitability test.
             The default SOP defined failure threshold is %lt 2 at 10% peak height. The valid range is 1 to 50.
             Tailing is calculated at the value defined in <see cref="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.TailingPeakHeight"/>.
             For the purposes of the test, a peak is considered to be excessively tailed if:
             <code>
             R / L > Failure Threshold %
             where:
             L = the distance from the left side of the peak to the perpendicular dropped from the peak apex
             R = the distance from the right side of the peak to the perpendicular dropped from the peak apex
             Measurements of L and R are taken from the raw file without smoothing.</code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.ColumnOverloadPeakHeight">
            <summary>
            Gets the Peak Height at which the algorithm measures column overloading.
            The default SOP value is 50%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.ColumnOverloadFailureThreshold">
            <summary>
            Gets the failure threshold value for the column overload suitability test.
            The default SOP defined threshold is 1.5 at 50% peak height. The valid range is 1 to 20.
            A peak is considered to be overloaded if:
            <code>
            L / R > Failure Threshold %
            where:
            L = the distance from the left side of the peak to the perpendicular dropped from the peak apex
            R = the distance from the right side of the peak to the perpendicular dropped from the peak apex
            Measurements of L and R are taken from the raw file without smoothing. </code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.PeakWidthsForNoiseDetection">
            <summary>
            Gets the Number of Peak Widths for Noise Detection testing parameter for
            the baseline clipping system suitability test.
            The default value is 1.0 and the permitted range is 0.1 to 10.
            A peak is considered to be baseline clipped if there is no signal
            (zero intensity) on either side of the peak within the specified
            number of peak widths. The range is truncated to the quantitation window
            if the specified number of peak widths extends beyond the window’s edge.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.SignalToNoiseRatio">
            <summary>
            Gets the threshold for system suitability testing 
            of the signal-to-noise ratio. The default value is 20 and the
            permitted range is 1 to 500. The algorithm calculates the signal-to-noise ratio 
            within the quantitation window using only baseline signal.
            Any extraneous, minor, detected peaks are excluded from the calculation. 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IIonRatioConfirmationSettingsAccess">
            <summary>
            Read only access to Ion ratio settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationSettingsAccess.QualifierIonCoelution">
            <summary>
            Gets the time the retention time can vary from the expected retention time for the ion to still be considered confirmed.
            Units: minutes
            Bounds: 0.000 - 0.100  
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationSettingsAccess.Enable">
            <summary>
            Gets a value indicating whether this Ion Ratio Confirmation is enabled.
            </summary>
            <value><c>true</c> if enable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationSettingsAccess.WindowsType">
            <summary>
            Gets the type of the windows.
            </summary>
            <value>The type of the windows.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationSettingsAccess.QualifierIons">
            <summary>
            Gets the qualifier ions.
            </summary>
            <value>The qualifier ions.</value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IIonRatioConfirmationTestAccess">
            <summary>
            Method information for an Ion Ratio Test
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationTestAccess.MZ">
            <summary>
            Gets the Mass to be tested
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationTestAccess.TargetRatio">
            <summary>
            Gets the Expected ratio 
            The ratio of the qualifier ion response to the quan ion response. 
            Range: 0 - 200%
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationTestAccess.WindowPercent">
            <summary>
            Gets the Window to determine how accurate the match must be
            The ratio must be +/- this percentage.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IIonRatioConfirmationMassSettingsAccess">
            <summary>
            Read only access to Ion Ration Confirmation masses
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationMassSettingsAccess.SmoothingData">
            <summary>
            Gets the smoothing data for the ion ratio peak calculation.
            </summary>
            <value>The smoothing points.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIonRatioConfirmationMassSettingsAccess.IntegrationSettings">
            <summary>
            Gets the integration choice item.  This is the only interaction 
            with m_integrationChoice.  This class is only a place holder.  Other
            users of this class will fill this data item and use the settings.
            </summary>
            <value>The integration choice item.</value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IAvalonSettingsAccess">
            <summary>
            Read only access to avalon setting
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IAvalonSettingsAccess.CountTimedEvents">
            <summary>
            Count the number of timed (as opposed to initial) events
            </summary>
            <returns>
            The number of timed events
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IAvalonSettingsAccess.FirstTimedEvent">
            <summary>
            Step past any initial events, and find the first time event
            </summary>
            <returns>
            The node for the first timed event
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IAvalonSettingsAccess.FindEventValue(ThermoFisher.CommonCore.Data.Business.EventCode,System.Int32@)">
            <summary>
            Find the first event matching a specific event code
            </summary>
            <param name="code">
            The code to search for
            </param>
            <param name="eventNumber">
            (returned) the number of the event in the list
            </param>
            <returns>
            The node containing the first event matching the supplied event code
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IAvalonSettingsAccess.FindEventValue(ThermoFisher.CommonCore.Data.Business.EventKind,ThermoFisher.CommonCore.Data.Business.EventCode,System.Int32@)">
            <summary>
            Find the first event matching a specific event code and kind
            </summary>
            <param name="kind">
            Initial or timed version
            </param>
            <param name="code">
            The code to search for
            </param>
            <param name="eventNumber">
            (returned) the number of the event in the list
            </param>
            <returns>
            The node containing the first event matching the supplied event code
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IAvalonSettingsAccess.Events">
            <summary>
            Gets the list of time events
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess">
            <summary>
            read only access to Genesis Settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.ConstrainPeak">
            <summary>
            Gets a value indicating whether to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.ExpectedPeakWidth">
            <summary>
            Gets the minimum width that a peak is expected to have (seconds)
            if valley detection is enabled. The property is expressed as a window.
            With valley detection enabled,
            any valley points nearer than  [expected width]/2
            to the top of the peak are ignored.
            If a valley point is found outside the expected peak width,
            Genesis terminates the peak at that point.
            Genesis always terminates a peak when the signal reaches the baseline,
            independent of the value set for the ExpectedPeakWidth.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.PeakHeightPercent">
            <summary>
            Gets the percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the <c>ConstrainPeak</c> is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.SignalToNoiseThreshold">
            <summary>
            Gets the Signal To Noise Threshold.
            A peak is considered ended if the following condition is met:
            <c>height &lt;= (BaseNoise * SignalToNoiseThreshold))</c>
            Where BaseNoise is the calculated noise on the fitted baseline,
            and height is the height above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.TailingFactor">
            <summary>
            Gets the Tailing Factor.
            This controls how Genesis integrates the tail of a peak.
            This factor is the maximum ratio of the trailing edge to the leading side of a constrained peak.
            This applies only when the <see cref="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.ConstrainPeak"/> is true.
            The valid range is 0.5 through 9.0. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.ValleyDetection">
            <summary>
            Gets a value indicating whether Valley Detection is performed. This parameter must be set to true when performing base to base integration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.PeakSignalToNoiseRatioCutoff">
            <summary>
            Gets the Peak Signal To Noise Ratio Cutoff.
            The peak edge is set to values below this defined S/N. 
            This test assumes an edge of a peak is found when the baseline adjusted height of the edge is less than
            the ratio of the baseline adjusted apex height and the peak S/N cutoff ratio. 
            If the S/N at the apex is 500 and the peak S/N cutoff value is 200,
            Genesis defines the right and left edges of the peak when the S/N reaches a value less than 200.
            Range: 50.0 to 10000.0. 
            Technical equation:<c>if height &lt; (1/PeakSignalToNoiseRatioCutoff)*height(apex) => valley here</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.RisePercent">
            <summary>
            Gets the percentage of the valley bottom
            that the peak trace can rise above a baseline (before or after the peak). 
            If the trace exceeds RisePercent,
            Genesis applies valley detection peak integration criteria. 
            This method drops a vertical line from the apex of the valley between unresolved
            peaks to the baseline.
            The intersection of the vertical line and the baseline defines the end of the first
            peak and the beginning of the second peak. 
            This test is applied to both the left and right edges of the peak. 
            The RisePercent criteria is useful for integrating peaks with long tails.
            Useful range: 0.1 to 50
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.ValleyDepth">
            <summary>
            Gets the S/N range is 1.0 to 100.0. for valley detection.
            Technical equation:<c>height(here +/- VALLEY_WIDTH) > ValleyDepth*SNR+height(here) => valley here </c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.CalculateNoiseAsRms">
            <summary>
            Gets a value indicating whether noise is calculated using RMS.
            If not set, noise is calculated peak to peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.BaselineNoiseTolerance">
            <summary>
            Gets the Baseline Noise Tolerance which controls how the baseline is drawn in the noise data.
            The higher the baseline noise tolerance value,
            the higher the baseline is drawn through the noise data.
            The valid range is 0.0 to 100.0
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.MinScansInBaseline">
            <summary>
            Gets the minimum number of scans that Genesis uses to calculate a baseline.
            A larger number includes more data in determining an averaged baseline.
            The valid range is 2 to 100.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.BaselineNoiseRejectionFactor">
            <summary>
            Gets the Baseline Noise Rejection Factor
            This factor controls the width of the RMS noise band above and below the peak detection baseline
            and is applied to the raw RMS noise values to raise the effective RMS noise during peak detection.
            The left and right peak boundaries are assigned above the noise and, therefore,
            closer to the peak apex value in minutes. 
            This action effectively raises the peak integration baseline above the RMS noise level. 
            Range: 0.1 to 10.0.
            Default: 2.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.BackgroundUpdateRate">
            <summary>
            Gets the number of minutes between background scan recalculations.
            Baseline is refitted each time this interval elapses. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.BaseSignalToNoiseRatio">
            <summary>
            Gets the Base (minimum) Signal To Noise Ratio.
            Peaks are rejected if they have a lower signal to noise ratio than this.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.PercentLargestPeak">
            <summary>
            Gets the lowest acceptable percentage of the largest peak.
            Do not return peaks which are less than this % of the highest peak above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IGenesisSettingsAccess.FilterByRelativePeakHeight">
            <summary>
            Gets a value indicating whether to enable filtering of peaks by relative signal height
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IIcisSettingsAccess">
            <summary>
            Read only access to ICIS Settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.BaselineWindow">
            <summary>
            Gets the number of scans in the baseline window.
            Each scan is checked to see if it should be considered a baseline scan.
            This is determined by looking at a number of scans (BaselineWindow) before
            and after the a data point. If it is the lowest point in the group it will be
            marked as a "baseline" point.
            Range: 1 - 500
            Default: 40
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.AreaNoiseFactor">
            <summary>
            Gets a noise level multiplier.
            This determines the peak edge after the location of the possible peak,
            allowing the peak to narrow or broaden without affecting the baseline. 
            Range: 1 - 500
            Default multiplier: 5
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.PeakNoiseFactor">
            <summary>
            Gets a noise level multiplier (a minimum S/N ratio).
            This determines the potential peak signal threshold. 
            Range: 1 - 1000
            Default multiplier: 10
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.ConstrainPeakWidth">
            <summary>
            Gets a value indicating whether to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.PeakHeightPercentage">
            <summary>
            Gets the percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the ConstrainPeak is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.TailingFactor">
            <summary>
            Gets the Tailing Factor.
            This controls how Genesis integrates the tail of a peak.
            This factor is the maximum ratio of the trailing edge to the leading side of a constrained peak.
            This applies only when the ConstrainPeak is true.
            The valid range is 0.5 through 9.0. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.MinimumPeakWidth">
            <summary>
            Gets the minimum number of scans required in a peak. 
            Range: 0 to 100. 
            Default: 3. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.MultipletResolution">
            <summary>
             Gets the minimum separation in scans between the apexes of two potential peaks.
             This is a criterion to determine if two peaks are resolved.
             Enter a larger number in a noisy environment when the signal is bouncing around.
             Range: 1 to 500.
             Default: 10 scans. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.AreaScanWindow">
            <summary>
            Gets the number of scans on each side of the peak apex to be allowed. 
            Range: 0 to 100.
            Default: 0 scans.
            0 specifies that all scans from peak-start to peak-end are to be included in the area integration.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.AreaTailExtension">
            <summary>
            Gets the number of scans past the peak endpoint to use in averaging the intensity.
            Range: 0 to 100. 
            Default: 5 scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.CalculateNoiseAsRms">
            <summary>
            Gets a value indicating whether noise is calculated using an RMS method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIcisSettingsAccess.NoiseMethod">
            <summary>
            Gets an enum which indicates how the ICIS peak detector determines which signals are noise.
            The selected points can  determine a noise level, or be fed into an RMS calculator,
            depending on the RMS setting.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IIntegrationSettingsAccess">
            <summary>
            Read only access to integration settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIntegrationSettingsAccess.Avalon">
            <summary>
            Gets Settings for Avalon integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIntegrationSettingsAccess.Genesis">
            <summary>
            Gets Settings for genesis integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIntegrationSettingsAccess.Icis">
            <summary>
            Gets Settings for Icis integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IIntegrationSettingsAccess.PeakDetector">
            <summary>
            Gets the choice of integrator to use
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IPeakPuritySettingsAccess">
            <summary>
            Read only access to Peak Purity Settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakPuritySettingsAccess.DesiredPeakCoverage">
            <summary>
            Gets the % of the detected baseline for which we want to compute PeakPurity
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakPuritySettingsAccess.EnableDetection">
            <summary>
            Gets a value indicating whether we want to compute Peak Purity
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakPuritySettingsAccess.LimitWavelengthRange">
            <summary>
            Gets a value indicating whether we want to use
            the enclosed wavelength range, not the total scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakPuritySettingsAccess.MaximumWavelength">
            <summary>
            Gets the high limit of the scan over which to compute
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakPuritySettingsAccess.MinimumWavelength">
            <summary>
            Gets the low limit of the scan over which to compute
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakPuritySettingsAccess.ScanThreshold">
            <summary>
            Gets the max of a scan must be greater than this to be included
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess">
            <summary>
            Read only access to Peak Location Settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess.AdjustExpectedRT">
            <summary>
            Gets a value indicating whether the retention time should be adjusted based on a reference peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess.UserEnteredRT">
            <summary>
            Gets the expected time, as in the method (before any adjustments)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess.LocateMethod">
            <summary>
            Gets a value which determine how a single peak is found from the list of
            returned peaks from integrating the chromatogram.
            For example: Highest peak in time window.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess.SearchWindow">
            <summary>
            Gets the window, centered around the peak, in minutes.
            The located peak must be within a window of expected +/- width.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess.BaselineAndNoiseWindow">
            <summary>
            Gets the baseline and noise window.
            This setting is used to restrict the chromatogram.
            Only scans within the range "adjusted expected RT" +/- Window are processed.
            For example: a 1 minute window setting implies 2 minutes of data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess.FindSettings">
            <summary>
            Gets the settings for finding a peak based on spectral fit
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IPeakLocationSettingsAccess.SignalToNoiseThreshold">
            <summary>
            Gets the signal to noise rejection parameter for peaks
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IFindResultAccess">
            <summary>
            Read only access to find results
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.Scan">
            <summary>
            Gets the scan number for this result
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.PredictedScan">
            <summary>
            Gets the scan number predicted for this peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.FoundRT">
            <summary>
            Gets the retention time of the peak which has been found
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.FindScore">
            <summary>
            Gets the score based on both forward and reverse matching factors
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.ForwardScore">
            <summary>
            Gets score from forward search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.ReverseScore">
            <summary>
            Gets score from reverse search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.ChromatogramIntensity">
            <summary>
            Gets the intensity of the supplied chromatogram at this result
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.MatchScore">
            <summary>
            Gets score from Match algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindResultAccess.FoundPeak">
            <summary>
            Gets the peak found for this result
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IFindSettingsAccess">
            <summary>
            Read only access to
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindSettingsAccess.ForwardThreshold">
            <summary>
            Gets the forward threshold for find algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindSettingsAccess.MatchThreshold">
            <summary>
            Gets the match threshold for find algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindSettingsAccess.ReverseThreshold">
            <summary>
            Gets the reverse threshold for find algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IFindSettingsAccess.SpecPoints">
            <summary>
            Gets the spec points.
            </summary>
            <value>The spec points.</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IFindSettingsAccess.GetFindSpectrum">
            <summary>
            Get a copy of the find spectrum
            </summary>
            <returns>
            The spectrum to find
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IInstrumentDataAccess">
            <summary>
            Read only access to instrument data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.Name">
            <summary>
            Gets or sets the name of the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.Model">
            <summary>
            Gets or sets the model of the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.SerialNumber">
            <summary>
            Gets or sets the serial number of the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.SoftwareVersion">
            <summary>
            Gets or sets the software version of the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.HardwareVersion">
            <summary>
            Gets or sets the hardware version of the instrument
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.ChannelLabels">
            <summary>
            Gets or sets the names of the channels, for UV or analog data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.Units">
            <summary>
            Gets or sets the units of the Signal, for UV or analog
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.Flags">
            <summary>
            Gets or sets the flags.
            The purpose of this field is to contain flags separated by ';' that
            denote experiment information, etc. For example, if a file is acquired
            under instrument control based on an experiment protocol like an ion
            mapping experiment, an appropriate flag can be set here.
            Legacy LCQ MS flags:
            1. TIM - total ion map
            2. NLM - neutral loss map
            3. PIM - parent ion map
            4. DDZMAP - data dependent zoom map
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.AxisLabelX">
            <summary>
            Gets or sets the device suggested label of X axis
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.AxisLabelY">
            <summary>
            Gets or sets the device suggested label of Y axis (name for units of data, such as "°C")
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.IInstrumentDataAccess.IsValid">
            <summary>
            Gets or sets a value indicating whether any other properties in this interface contain valid data.
            This is to support legacy files only. Early versions of the raw file did not have "instrument data",
            Data migration to current formats is automatic in raw file reading tools,
            leading to a data structure being returned to a caller with "all defaults" and "empty strings"
            plus the IsValid set to false.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.FilterRule">
            <summary>
            The filter rule.
            A scan filter has a list of rules to apply.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.MetaFilter">
            <summary>
            Apply the meta filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.DependentOn">
            <summary>
            Apply the data dependent On filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.DependentOff">
            <summary>
            Apply the data dependent Off filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.SupplementalActivation">
            <summary>
            Apply the supplemental activation filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.MultiStateActivation">
            <summary>
            Apply the multi state activation filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.Wideband">
            <summary>
            Apply the wideband filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.Polarity">
            <summary>
            Apply the polarity filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ScanData">
            <summary>
            Apply the scan data filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.IonizationMode">
            <summary>
            Apply the ionization mode filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.Corona">
            <summary>
            Apply the corona filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.Lock">
            <summary>
            Apply the lock filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.FieldFreeRegion">
            <summary>
            Apply the field free region filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.Ultra">
            <summary>
            Apply the ultra filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.Enhanced">
            <summary>
            Apply the enhanced filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ParamA">
            <summary>
            Apply the parameter a filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ParamB">
            <summary>
            Apply the parameter b filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ParamF">
            <summary>
            Apply the parameter f filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.MultiNotch">
            <summary>
            Apply the multi notch filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.MultiplePhotonDissociation">
            <summary>
            Apply the multiple photon dissociation filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ParamV">
            <summary>
            Apply the parameter v filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ParamR">
            <summary>
            Apply the parameter R filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ElectronCaptureDissociation">
            <summary>
            Apply the electron capture dissociation filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.PhotoIonization">
            <summary>
            Apply the photo ionization filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.SourceFragmentation">
            <summary>
            Apply the source fragmentation filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.SourceFragmentationType">
            <summary>
            Apply the source fragmentation type filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.CompensationVoltage">
            <summary>
            Apply the compensation voltage filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.CompensationVoltType">
            <summary>
            Apply the compensation volt type filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.Detector">
            <summary>
            Apply the detector filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.MassAnalyzerType">
            <summary>
            Apply the mass analyzer type filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.SectorScan">
            <summary>
            Apply the sector scan filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.TurboScan">
            <summary>
            Apply the turbo scan filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ScanMode">
            <summary>
            Apply the scan mode filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.Multiplex">
            <summary>
            Apply the multiplex filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.MsOrder">
            <summary>
            Apply The MS order filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.ScanTypeIndex">
            <summary>
            Apply the scan type index filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterRule.AccurateMass">
            <summary>
            Apply the accurate mass filter.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IAdvancedPacketData">
            <summary>
            For advanced data LT/FT formats only. It currently uses for exporting mass spec data to raw file.
            This will typically be used from an application.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAdvancedPacketData.NoiseData">
            <summary>
            Gets the noise data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAdvancedPacketData.Frequencies">
            <summary>
            Gets the frequencies.  
            The values are for computing mass from frequency during exporting mass spec on compressing.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAdvancedPacketData.CentroidData">
            <summary>
            Gets the centroid data (label peaks) information. Only FT type packets have label peaks, others no.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IAnalogDeviceWriter">
            <summary>
            Provides methods to write Analog devices data.<para/>
            Note: The following functions should be called before acquisition begins:<para/>
            1. Write Instrument Info<para/>
            2. Write Instrument Expected Run Time<para/>
            3. Write Status Log Header <para/>
            If caller is not intended to use the status log data, pass a null argument or zero length array.<para/>
            ex. WriteStatusLogHeader(null) or WriteStatusLogHeader(new IHeaderItem[0])
            </summary>    
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IAnalogDeviceWriter.WriteInstData(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IAnalogScanIndex)">
            <summary>
            Writes the Analog instrument data and index into the disk. This is the
            simplest format of data we write to a raw file.
            </summary>
            <param name="instData">The Analog instrument data.</param>
            <param name="instDataIndex">Index of the Analog instrument scan (scan header).</param>
            <returns>True if scan data and index are written to disk successfully, False otherwise</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IAnalogScanIndex">
            <summary>
            Defines the instrument data index for analog type devices
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAnalogScanIndex.NumberOfChannels">
            <summary>
            Gets the number of channels.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.TrayShape">
            <summary>
            The auto sampler tray shape.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.TrayShape.Rectangular">
            <summary>
            Vials or wells are arranged in a rectangle on the tray
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.TrayShape.Circular">
            <summary>
            Vials are arranged in a circle.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.TrayShape.StaggeredOdd">
            <summary>
            Vials are staggered on odd numbered positions on the tray.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.TrayShape.StaggeredEven">
            <summary>
            Vials are staggered on even numbered positions on the tray.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.TrayShape.Unknown">
            <summary>
            The layout is unknown.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.TrayShape.Invalid">
            <summary>
            The layout information is invalid. No other tray layout data should be displayed.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation">
            <summary>
            The AutoSamplerInformation interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation.TrayIndex">
            <summary>
            Gets or sets the tray index, -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation.VialIndex">
            <summary>
            Gets or sets the vial index, -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation.VialsPerTray">
            <summary>
            Gets or sets the number of vials (or wells) per tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation.VialsPerTrayX">
            <summary>
            Gets or sets the number of vials (or wells) per tray, across the tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation.VialsPerTrayY">
            <summary>
            Gets or sets the number of vials (or wells) per tray, down the tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation.TrayShape">
            <summary>
            Gets or sets the shape.
            If this property returns "Invalid", no other values in this object
            contain usable information.
            Invalid data can occur for older raw file formats, before auto sampler data was added.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation.TrayShapeAsString">
            <summary>
            Gets the tray shape as a string
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation.TrayName">
            <summary>
            Gets or sets the tray name.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IBaseDeviceWriter">
            <summary>
            Provides methods to write common device information<para/>
            1. Instrument information<para/>
            2. Instrument expected run time<para/>
            3. Status log header<para/>
            4. Status log<para/>
            5. Error log
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IBaseDeviceWriter.WriteInstComments(System.String,System.String)">
            <summary>
            Writes the instrument comments.<para/>
            These are device run header fields - comment1 and comment2.  They are part of the Chromatogram view title (Sample Name and Comment).<para/>
            These fields can be set only once. 
            </summary>
            <param name="comment1">The comment1 for "Sample Name" in Chromatogram view title (max 39 chars).</param>
            <param name="comment2">The comment2 for "Comment" in Chromatogram view title (max 63 chars).</param>
            <returns>True if comment1 and comment2 are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IBaseDeviceWriter.WriteInstrumentInfo(ThermoFisher.CommonCore.Data.IInstrumentDataAccess)">
            <summary>
            Write the Instrument ID info to the raw data file. The
            Instrument ID must be written to the raw file before any data can be
            acquired.
            </summary>
            <param name="instId">The instrument identifier.</param>
            <returns>True if instrument id is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IBaseDeviceWriter.WriteInstExpectedRunTime(System.Double)">
            <summary>
            Write the expected run time. All scanning devices must do this so
            that the real-time update can display a sensible Axis.
            A device of type "Other" has no scans, and so this
            is optional information in that case.
            </summary>
            <param name="runTime">The run time.</param>
            <returns>True if expected run time is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IBaseDeviceWriter.WriteStatusLogHeader(ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem[])">
            <summary>
            Write the Status Log Header (format) info to the raw data file. <para/>
            If caller is not intended to use the status log data, pass a null argument or zero length array.<para/>
            ex. WriteStatusLogHeader(null) or WriteStatusLogHeader(new IHeaderItem[0])
            </summary>
            <param name="headerItems">The log header.</param>
            <returns>True if status log header is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IBaseDeviceWriter.WriteStatusLog(System.Single,System.Byte[])">
            <summary>
            If any Status Log details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para/>
            The order and types of the data elements in the byte array parameter 
            to the method needs to be the same as the order and types that are defined in the header. 
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="data">The status data stores in byte array.</param>
            <returns>True if status log entry is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IBaseDeviceWriter.WriteStatusLog(System.Single,System.Object[])">
            <summary>
            If any Status Log details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para/>
            The order and types of the data elements in the byte array parameter 
            to the method needs to be the same as the order and types that are defined in the header. 
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="data">The data stores in object array.</param>
            <returns>True if status log entry is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IBaseDeviceWriter.WriteErrorLog(System.Single,System.String)">
            <summary>
            Write an error log to the raw data file.
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="errorLog">The error log.</param>
            <returns>True if error log entry is written to disk successfully, False otherwise</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IBaseScanIndex">
            <summary>
            Defines the base format for a instrument data index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IBaseScanIndex.StartTime">
            <summary>
                Gets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IBaseScanIndex.TIC">
            <summary>
                Gets the tic.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IBinaryMsInstrumentData">
            <summary>
            Data ready to be written to a raw file, with most values in byte array format.
            Note that scan statistics is provided as an in interface, as properties need to be inspected
            in order to write the binary data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IBinaryMsInstrumentData.PackedScanEvent">
            <summary>
            Get the definition of how the analyzer is scanned
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IBinaryMsInstrumentData.StatisticsData">
            <summary>
            Gets general information about about this scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IBinaryMsInstrumentData.ScanData">
            <summary>
            gets all data ro record for a scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IBinaryMsInstrumentData.ProfileIndexCount">
            <summary>
            for certain formats, gets additional index record count
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IBinaryMsInstrumentData.ProfileData">
            <summary>
            gets Index records for some profile formats
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess">
            <summary>
            Read only access to calibration curve
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.FittedLinePoints">
            <summary>
            Gets the fitted line
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.IncludedPoints">
            <summary>
            Gets the included replicates from current sequence data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.ExcludedPoints">
            <summary>
            Gets the excluded replicates from current sequence data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.ExternalIncludedPoints">
            <summary>
            Gets the included replicates from previously acquired data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.ExternalExcludedPoints">
            <summary>
            Gets the excluded replicates from previously acquired  data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.RSquared">
            <summary>
            Gets the RSquared value from the regression calculation (-1 if not valid)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.Equation">
            <summary>
            Gets the equation text from the regression calculation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.PercentCv">
            <summary>
            Gets the percentage coefficient of variance from the first calibration level.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.PercentRsd">
            <summary>
            Gets the percentage relative standard deviation from the first calibration level.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurveDataAccess.IsInternalStandard">
            <summary>
            Gets a value indicating whether the fitted line is empty
            The curve data needs to be plotted as appropriate for
            an internal standard: Centered on the set of points,
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurvePointAccess">
            <summary>
            Read only access to a calibration curve point
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurvePointAccess.Amount">
            <summary>
            Gets the amount (x) on calibration curve
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurvePointAccess.Response">
            <summary>
            Gets the response (y) for the amount
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurvePointAccess.Key">
            <summary>
            Gets the a key to identify this point. For example, a file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationCurvePointAccess.PeakKey">
            <summary>
            Gets the a second key to identify this point. For example, a compound name.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess">
            <summary>
            Read only access to centroid stream
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.ScanNumber">
            <summary>
            Gets the scan Number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.Length">
            <summary>
            Gets the number of centroids
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.CoefficientsCount">
            <summary>
            Gets the coefficients count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.Coefficients">
            <summary>
            Gets the calibration Coefficients
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.Resolutions">
            <summary>
            Gets resolution of each peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.Baselines">
            <summary>
            Gets the list of baseline at each peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.Noises">
            <summary>
            Gets the list of noise level near peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.Charges">
            <summary>
            Gets the list of charge calculated for peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.Flags">
            <summary>
            Gets the flags for the peaks (such as reference)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.ICentroidStreamAccess.GetCentroids">
            <summary>
            Get the data as one object per peaks.
            Note: This may copy data into an array on each call, and should therefore
            not be called multiple times on the same scan, for performance reasons.
            </summary>
            <returns>
            The array of <see cref="T:ThermoFisher.CommonCore.Data.Business.LabelPeak"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator">
            <summary>
            The ChromatogramBatchGenerator interface.
            Defines a way for an application to request multiple chromatograms.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.GenerateChromatograms(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDelivery})">
            <summary>
            Generate chromatograms, returning the in progress tasks,
            which are processing the chromatograms.
            This permits async generation of chromatograms.
            This method returns after all required scan data has been
            read, and all work to process the chromatograms is queued.
            </summary>
            <param name="chromatogramDeliveries">
            The chromatogram deliveries.
            These define the chromatogram settings, and a callback which will occur
            as soon as the data for that chromatogram is ready.
            </param>
            <returns>
            The in progress tasks. Assuming the result is saved as "taskList" Use "Task.WaitAll(taskList)"
            to wait for processing of these chromatograms to complete.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.StrictTimeRange">
            <summary>
            Gets or sets a value indicating whether the chromatograms have a strict time range.
            By default, the retention time range of a chromatogram is considered as a "display range",
            such that the first value before the range, and the first value after the range is included
            in the data, permitting a continuous line, if plotted, to the edge of the time window.
            If this property is true, then only points which are within the supplied RT range are returned.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.ConsumerThreads">
            <summary>
            Gets or sets the number of consumer threads to make.
            In other words: The maximum number of chromatograms the caller will
            be given to process in parallel.
            Default: Environment.ProcessorCount
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.MaxWorkBacklog">
            <summary>
            Gets or sets the maximum work backlog, which controls how much
            work is kept in the pipeline, waiting for consumer threads to become available.
            Suggested default: 10.
            Setting a larger value will cause data reading from a raw file to be completed earlier,
            but at the expense of more memory overheads.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.ScanReader">
            <summary>
            Gets or sets the scan reader.
            Given a scan number,
            Return the spectral data and scan event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.ParallelScanReader">
            <summary>
            Gets or sets the parallel scan reader.
            If null, then ScanReader will always be used.
            Given a scan number,
            Return the spectral data and scan event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.AvailableScans">
            <summary>
            Gets or sets the available scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.AccuratePrecursors">
            <summary>
            Gets or sets a value indicating whether accurate precursor mass testing is done.
            If not: a tolerance of 0.4 AMU is used.
            All data dependent tests are done with 0.4 AMU tolerance.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.FilterMassPrecision">
            <summary>
            Gets or sets the precision (decimal places).
            If set to "-1" (default) then the precision values must be
            set individually (in the scan selectors)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator.AllEvents">
            <summary>
            Gets or sets the scan events interface, which can be used to optimize filtering, if provided.
            This interface may be obtained from IRawDataPlus (ScanEvents property).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBasePeaks">
            <summary>
            Interface to return base peak data with a chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBasePeaks.BasePeakArray">
            <summary>
            Gets Base Peak masses for each chromatogram
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramData">
            <summary>
            Defines data read for a set of chromatograms
            First index = chromatogram number.
            Second index = data value within chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramData.PositionsArray">
            <summary>
            Gets Times in minutes for each chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramData.ScanNumbersArray">
            <summary>
            Gets Scan numbers for data points in each chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramData.IntensitiesArray">
            <summary>
            Gets Intensities for each chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramData.Length">
            <summary>
            Gets The number of chromatograms in this object
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDataPlus">
            <summary>
            Extended chromatogram data: Includes base peak information.
            For PDA data: Base value is "Wavelength of max" for a "spectrum max" chromatogram.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDelivery">
            <summary>
            The ChromatogramDelivery interface.
            This permits a caller to request a chromatogram,
            and have a method called, when the chromatogram is ready.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDelivery.Request">
            <summary>
            Gets the request. Parameters for the chromatogram.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDelivery.Process(ThermoFisher.CommonCore.Data.Business.ChromatogramSignal)">
            <summary>
            The method to call when the chromatogram is generated.
            </summary>
            <param name="signal">
            The generated chromatogram.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramPointRequest">
            <summary>
            Defines how data for a given mass range is included
            in a chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramPointRequest.AllData">
            <summary>
            Gets or sets a value indicating whether all data
            in the scan is used, or just a mass range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramPointRequest.Scale">
            <summary>
            Gets or sets the scale.
            This can be 1 to "add data in a mass range" or
            -1 to "subtract data a mass range",
            or any other value to apply scaling to a range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramPointRequest.MassRange">
            <summary>
            Gets or sets the mass range.
            If an application has a center mass +/ tolerance,
            then it a setter in a derived object could be used to convert to
            a range of mass. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramPointRequest.PointMode">
            <summary>
            Gets or sets the rule for how a chromatogram point is created from a mass range.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramPointRequest.DataForPoint(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Find the data for one scan.
            </summary>
            <param name="scanWithHeader">
            The scan, including header and scan event.
            </param>
            <returns>
            The chromatogram point value for this scan.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ChromatogramPointMode">
            <summary>
            The chromatogram point mode.
            How a chromatogram point is calculated from data in a mass range.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ChromatogramPointMode.Sum">
            <summary>
            Sum all intensities in a mass range
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ChromatogramPointMode.Max">
            <summary>
            Get the max intensity in a mass range
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ChromatogramPointMode.Mass">
            <summary>
            Get the mass of the largest intensity value in the mass range
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ChromatogramPointMode.Fragment">
            <summary>
            Neutral fragment:
            When the low mass value is negative:
            This scan's Parent mass is added to both low and high, to make a mass range.
            which will represent "parent - a given neutral fragment".
            When the low mass value if positive, the mass range is not adjusted, as this has been
            already calculated as "filter mass - neutral fragment mass".
            Typically: This can be used with a filter of "MS2", to get
            a neutral fragment chromatogram, for all MS/MS data which has a given fragment.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest">
            <summary>
            The ChromatogramRequest interface.
            Defines how chromatogram data is created from a set of scans
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            This value may not change, but the current compiler does not permit a "read-only" tag.
            If all request for one file return false, the code can save time by never reading scan data.
            In any request that returns "false" from this, the ValueForScan should not access the "Data" property of the supplied scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest.RetentionTimeRange">
            <summary>
            Gets the retention time range.
            Only scans within this range are included.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest.ScanSelector">
            <summary>
            Gets the scan selector, which determines if a scan is in the chromatogram, or not
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramRequest.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            Gets the value for scan.
            This function returns the chromatogram value for a scan.
            For example: An XIC from the scan data.
            Can use values from the scan data or index.
            </summary>
            <param name="scan">
            The scan.
            </param>
            <returns>
            The chromatogram value of this scan.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings">
            <summary>
            Settings required to read a chromatogram from a data stream
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings.DelayInMin">
            <summary>
            Gets the detector delay
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings.Filter">
            <summary>
            Gets A text definition of the scan filter
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings.FragmentMass">
            <summary>
            Gets the Neutral fragment mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings.IncludeReference">
            <summary>
            Gets a value indicating whether to Include reference peaks in the chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings.MassRangeCount">
            <summary>
            Gets the Number of mass ranges
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings.MassRanges">
            <summary>
            Gets the Mass ranges
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings.Trace">
            <summary>
            Gets a value which determines where the chromatogram comes from (TIC, mass range) etc.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx">
            <summary>
            The Chromatogram Settings Extended interface, for platform 3.0 raw files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx.CompoundNames">
            <summary>
            Gets or sets the compound names.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess">
            <summary>
            Read-only access to a chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.Times">
            <summary>
            Gets the times.
            </summary>
            <value>The signal times.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.Intensities">
            <summary>
            Gets the intensities.
            </summary>
            <value>The signal intensities.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.Scans">
            <summary>
            Gets the signal scans.
            </summary>
            <value>The signal scans.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.BasePeakMasses">
            <summary>
            Gets the base peak masses.
            </summary>
            <value>The base peak masses.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.EndTime">
            <summary>
            Gets the time at the end of the signal
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.StartTime">
            <summary>
            Gets the time at the start of the signal
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.Length">
            <summary>
            Gets the number of points in the signal
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.HasBasePeakData">
            <summary>
            Gets a value indicating whether there is any base peak data in this signal
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSignalAccess.Valid">
            <summary>
            Test if this is valid data (arrays are same length)
            </summary>
            <returns>True if this is valid data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter">
            <summary>
            This inteface extends the functions of "auto filter".
            methods are  called to construct a list of filters based on internal data
            of the class which implements this. Inital data is, for example,
            the results of "auto filter" on a raw file.
            The list can be searched for "items matching a given filter rule".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter.FilterList">
            <summary>
            Gets the results of the enhanced auto filter.
            these results are initailly empty, and et extended
            as "Add" methods are called.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter.AddActivationTypeFilters">
            <summary>
            Searches for the activation types used.
            Adds "Activation type" to the list, for MS/MS data (MS2 or above).
            This can find CID, HCD, ETD, UVPD
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter.AddEmptyFilter">
            <summary>
            Adds the "empty filter" to the list.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter.AddMsOrderFilters(System.Boolean)">
            <summary>
            Adds "ms order filters" to the list
            this includes ms, ms2 etc up to ms5
            if any ms/ms is found msn is also added.
            </summary>
            <param name="addMsn">When true (default): if any ms/ms is found msn is also added.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter.AddUniqueFilters(System.String)">
            <summary>
            Add all unique filter groups (auto filter).
            </summary>
            <param name="mustContain">If this is not empty: The filters must all contan this sub-filter.
            For example "d" for "only return data dependent"</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter.MergeCvValues">
            <summary>
            Merge filters which differ only by CV.
            Because there is no speciic CV value, the merged filters will not show
            the code CV. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter.IncludeCompoundNames">
            <summary>
            Gets or sets a value indicating whether compound names shoud be included.
            This only has an effect if the "Name" property is set for at least one filter.
            Results which have names are shown in sorted (alpha) order.
            Any other filters, which do not have a name, are then added after the 
            named items, in the original "auto filter" order.
            If a name appaers for more than one filter, then an entry is created
            which only contains a compound name, such that a chromatogram
            can be created based on all data identified for that compound.
            Note that this "name only" list is excluded when a "unique filter list" is
            requested with a specific subset filter.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IEnhancedAutoFilter.CompoundNameSeparator">
            <summary>
            Gets or sets a separator which appears between a compound name and a filter.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IErrorLogEntry">
            <summary>
            The ErrorLogEntry interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IErrorLogEntry.RetentionTime">
            <summary>
            Gets the retention time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IErrorLogEntry.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IExtendedScanData">
            <summary>
            Additional data about a scan.
            This data may include Transients (raw detector data) and other instrument specific data blocks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IExtendedScanData.Header">
            <summary>
            Gets the header for the extended data. The format of this is instrument specific.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IExtendedScanData.Transients">
            <summary>
            Gets the transient data for this scan, in an instrument specific (unknown) format. This may be very large.
            Fo performance reasons: Applications should not attempt to access this, unless needed by an algorithm.
            Note that this is not commonly included in raw files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IExtendedScanData.DataSegments">
            <summary>
            Gets additional data blocks for a scan.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IDataSegment">
            <summary>
            Defines a block of instrument specific data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDataSegment.Header">
            <summary>
            Get the block header, which needs to be decoded as defined by the instrument.
            This will identify the meaning of the data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDataSegment.Bytes">
            <summary>
            Gets the data within this block
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ITransientSegment">
            <summary>
            Defines a transient segment for a scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITransientSegment.Header">
            <summary>
            Gets the transient segment header, which need to be used by instrument specific code.
            This header is defined as "32 1 bit flags" and not a countable (integer) value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITransientSegment.Data">
            <summary>
            Gets the transient data, as defined for the instrument.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IFileError">
            <summary>
            Interface to retrieve error messages, which have been
            trapped by the underlying file reader.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileError.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            Applications should not continue with processing data from any file which indicates an error.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileError.HasWarning">
            <summary>
            Gets a value indicating whether this file has detected a warning.
            If this is false: Other warning properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileError.ErrorCode">
            <summary>
            Gets the error code number.
            Typically this is a windows system error number.
            The lowest valid windows error is: 0x00030200
            Errors detected within our files will have codes below 100.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileError.ErrorMessage">
            <summary>
            Gets the error message.
            For "unknown exceptions" this may include a stack trace.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileError.WarningMessage">
            <summary>
            Gets the warning message.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.RawFileClassification">
            <summary>
            RawFile Classification 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.RawFileClassification.Indeterminate">
            <summary>
            The indeterminate.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.RawFileClassification.StandardRaw">
            <summary>
            The standard raw.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.RawFileClassification.MasterScanNumberRaw">
            <summary>
            The master scan number raw.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.FileType">
            <summary>
            The type of the file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.NotSupported">
            <summary>
            The unknown file type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.ExperimentMethod">
            <summary>
            The experiment method
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.SampleList">
            <summary>
            The sample list (sequence)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.ProcessingMethod">
            <summary>
            The processing method
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.RawFile">
            <summary>
            The raw file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.TuneMethod">
            <summary>
            The tune method
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.ResultsFile">
            <summary>
            The results file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.QuanFile">
            <summary>
            The Quan file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.CalibrationFile">
            <summary>
            The calibration file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.MethodFile">
            <summary>
            The instrument method file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.XqnFile">
            <summary>
            The XQN file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.LayoutFile">
            <summary>
            The layout file (may be combined with other file type)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.MethodEditorLayout">
            <summary>
            The method editor layout
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.SampleListEditorLayout">
            <summary>
            The sample list editor layout
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.ProcessingMethodEditLayout">
            <summary>
            The processing method edit layout
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.QualBrowserLayout">
            <summary>
            The Qual Browser layout
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.TuneLayout">
            <summary>
            The tune layout
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FileType.ResultsLayout">
            <summary>
            The results layout
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader">
            <summary>
            Information available from Xcalibur file headers..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.WhoCreatedId">
            <summary>
            Gets or sets the creator Id. The creator Id is the full text user name of the user
            when the file is created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.WhoCreatedLogon">
            <summary>
            Gets or sets the creator Login name.
            The creator login name is the user name of the user
            when the file is created, as entered at the "user name, password" screen in windows.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.WhoModifiedId">
            <summary>
            Gets or sets the creator Id. The creator Id is the full text user name of the user
            when the file is created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.WhoModifiedLogon">
            <summary>
            Gets or sets the creator Login name.
            The creator login name is the user name of the user
            when the file is created, as entered at the "user name, password" screen in windows.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.FileType">
            <summary>
            Gets or sets the type of the file.
            If the file is not recognized, the value of the FileType will be set to "Not Supported" 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.Revision">
            <summary>
            Gets or sets the file format revision
            Note: this does not refer to revisions of the content.
            It defines revisions of the binary files structure.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.CreationDate">
            <summary>
            Gets or sets the file creation date.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.ModifiedDate">
            <summary>
            Gets or sets the modified date.
            File changed audit information (most recent change)
            </summary>
            <value>
            The modified date.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.NumberOfTimesModified">
            <summary>
            Gets or sets the number of times modified.
            </summary>
            <value>
            The number of times the file has been modified.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.NumberOfTimesCalibrated">
            <summary>
            Gets or sets the number of times calibrated.
            </summary>
            <value>
            The number of times calibrated.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeader.FileDescription">
            <summary>
            Gets or sets the file description.
            User's narrative description of the file, 512 unicode characters (1024 bytes)
            </summary>
            <value>
            The file description.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IFileHeaderUpdate">
            <summary>
            Subset of the IFileHeader interface, it's for restricting
            changes to the file header object during raw file creation.<para/>
            This will prevent errors, such as changing the FileType to other 
            instead of RawFile and Revision # to 0 instead of 66 (file struct version).<para/>
            This would allow application to change the creator name/id and file
            description values, instead of the default value. <para/>
            The current default values for:<para/>
            File description = string.Empty<para/>
            WhoCreatedId = Environment.UserName (who is currently logged on to the Wins)<para/>
            WhoCreatedLogon = Environment.UserName
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeaderUpdate.WhoCreatedId">
            <summary>
            Gets the creator Id. The creator Id is the full text user name of the user
            when the file is created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeaderUpdate.WhoCreatedLogon">
            <summary>
            Gets the creator Login name.
            The creator login name is the user name of the user
            when the file is created, as entered at the "user name, password" screen in windows.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFileHeaderUpdate.FileDescription">
            <summary>
            Gets the file description.
            User's narrative description of the file, 512 unicode characters (1024 bytes)
            </summary>
            <value>
            The file description.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IFilteredScanIterator">
            <summary>
            The FilteredScanIterator interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilteredScanIterator.Filter">
            <summary>
            Gets the string form of the filter which was used to construct this iterator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilteredScanIterator.PreviousScan">
            <summary>
            Gets the previous scan number, which matches the filter.
            Returns 0 if there is no open file.
            If there are no additional scans matching the filter, returns -1.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilteredScanIterator.NextScan">
            <summary>
            Gets the next scan number, which matches the filter.
            Returns 0 if there is no open file.
            If there are no additional scans matching the filter, returns -1.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilteredScanIterator.SpectrumPosition">
            <summary>
            Sets the iterator's position.
            This scan number does not have to match the given filter.
            This can be used to find next or previous matching scan, from a given scan.
            Assuming the first scan is 1, a value of 0 will reset the iterator to
            start of file.
            A value of "Last scan number +1" can be used to reset to
            iterate backwards from the end of the file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilteredScanIterator.MayHavePrevious">
            <summary>
            Gets a value indicating whether there are possible previous scans before the current scan.
            This does not guarantee that another matching scan exists. It simply tests that the current iterator position
            is not the first scan in the file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilteredScanIterator.MayHaveNext">
            <summary>
            Gets a value indicating whether there are possible next scans after the current scan.
            This does not guarantee that another matching scan exists. It simply tests that the current iterator position
            is not the last scan in the file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IFilterWithString">
            <summary>
            Defines a combination of plain text and interface defintions of filters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilterWithString.Filter">
            <summary>
            Gets a Standard (parsable) text form of the filter. This does not include any compound names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilterWithString.ScanFilter">
            <summary>
            Gets the scan filer (as accessable fields)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilterWithString.NameOnly">
            <summary>
            Gets a value indicating whether this object only has a compound name,
            and does not have any filter text or filter interface defined.
            When this is set: Only the Name property should be used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilterWithString.Name">
            <summary>
            Gets the compound name
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilterWithString.FilterWithName">
            <summary>
            Gets a string which combines the compound name and the filter text.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem">
            <summary>
            Defines the format of a log entry, including label (name of the field), data type, and numeric formatting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem.DataType">
            <summary>
            Gets or sets the data type for the header item.
            ex. Char, TrueFalse, YesNo, UShort, Long, etc.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem.Label">
            <summary>
            Gets or sets the header label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem.StringLengthOrPrecision">
            <summary>
            Gets or sets the precision, if the data type is float or double,
            or string length of string fields.
            </summary>
            <value>
            The string length or precision.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem.IsScientificNotation">
            <summary>
            Gets or sets a value indicating whether a number should be displayed in scientific notation.
            </summary>
            <value>
            <c>true</c> if this instance is scientific notation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodExporter">
            <summary>
            Interfaces to read an instrument method from a raw file and to export it
            to a file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodExporter.ExportInstrumentMethod(System.String,System.Boolean)">
            <summary>
            Export the instrument method to a file.
            Because of the many potential issues with this, use with care, especially if
            adding to a customer workflow.
            Try catch should be used with this method.
            Not all implementations may support this (some may throw NotImplementedException).
            .Net exceptions may be thrown, for example if the path is not valid.
            Not all instrument methods can be exported, depending on raw file version, and how
            the file was acquired. If the "instrument method file name" is not present in the sample information,
            then the exported data may not be a complete method file.
            Not all exported files can be read by an instrument method editor.
            Instrument method editors may only be able to open methods when the exact same list
            of instruments is configured.
            Code using this feature should handle all cases.
            </summary>
            <param name="methodFilePath">
            The output instrument method file path.
            </param>
            <param name="forceOverwrite">
            Force over write. If true, and file already exists, attempt to delete existing file first.
            If false: UnauthorizedAccessException will occur if there is an existing read only file.
            </param>
            <returns>True if the file was saved. False, if no file was saved, for example,
            because there is no instrument method saved in this raw file.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodExporter.GetAllInstrumentNamesFromInstrumentMethod">
            <summary>
            Gets names of all instruments, which have a method stored in the raw file's copy of the instrument method file.
            These names are "Device internal names" which map to storage names within
            an instrument method, and other instrument data (such as registry keys).
            Use "GetAllInstrumentFriendlyNamesFromInstrumentMethod" to get display names for instruments.
            </summary>
            <returns>
            The instrument names.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodExporter.HasInstrumentMethod">
            <summary>
            Gets a value indicating whether the underlying raw file has instrument method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodExporter.ErrorMessage">
            <summary>
            Gets the errors.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodExporter.HasError">
            <summary>
            Gets a value indicating whether any error occurred at open/read the raw file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodFileAccess">
            <summary>
            Interface to read an instrument method (meth) file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodFileAccess.FileHeader">
            <summary>
            Gets the file header for the method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodFileAccess.Devices">
            <summary>
            Gets the data for of all devices in this method.
            Keys are the registered device names.
            A method contains only the "registered device name"
            which may not be the same as the "device display name" (product name).
            Instrument methods do not contain device product names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodFileAccess.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodFileAccess.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused a recorded error.
            If so, there may be additional information in FileError
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodFileAccess.IsOpen">
            <summary>
            Gets a value indicating whether a file was successfully opened.
            Inspect "FileError" when false
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodDataAccess">
            <summary>
            This interface permits access data for a particular instrument in an instrument method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodDataAccess.MethodText">
            <summary>
            Gets the plain text form of an instrument method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodDataAccess.StreamBytes">
            <summary>
            Gets all streams for this instrument, apart from the "Text" stream.
            Typically an instrument has a stream called "Data" containing the method in binary or XML.
            Other streams (private to the instrument) may also be created.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter">
            <summary>
            Provides methods to create/update an instrument method file. <para/>
            Instrument method file contains one or more device methods. Each device creates 
            create its own storage (here's called Device Method) for storing device specific information.
             ----
            Existing layout of an instrument method file.
            Instrument Method File
            ---
            --- Device Methods
            ---
                SIIXcalibur     (IDeviceMethod)
                    Data            (Method stream - byte array)
                    Text            (string)
                SimulationMS    (IDeviceMethod)
                    Data            (Method stream - byte array)
                    Text            (string)
                TNG-Calcium    (IDeviceMethod)
                    Data            (Method stream - byte array)
                    Text            (string)
                    Header          (Method stream - byte array)
            ----
            Example of creating an instrument method file:
            1. Create a new instrument method file with an input file name (The writer will create a "Named" in-memory instrument method file.)
                writer = InstrumentMethodWriterFactory.CreateInstrumentMethodWriter("NewInstrumentMethodFileName.meth");
            --    
                writer.UpdateFileHeaderDescription("A new instrument method file.");
            --
            --  Calls the "GetDevices" method to get an empty list of devices (a dictionary object).
            --  Once you receive the list, you can start adding new device method.
                devices = writer.GetDevices();
            --
            --  Create a device method object (IDeviceMethod)
                newDeviceMethod = DeviceMethodFactory.CreateDeviceMethod();
            --
            --  Adds method streams - Text, Data, etc.
            --  Call the "GetStreamBytes" method to get an empty list of streams (a dictionary object).
            --  Once you receive the list, you can start adding new method stream.
            --
                newStreams = newDeviceMethod.GetStreamBytes();
                newStreams.Add("Text", stream value in byte array);
                newStreams["Data"] = stream value in byte array;
            --
            --  Here's a shortcut for adding a "Text" stream, use the "MethodText" property.
                newDeviceMethod.MethodText = "Test string.";
            --
            --  adds the newly created device method to the list of devices.
                devices.Add(name, newDeviceMethod);
            --
            --  persists the data to a file. The file name is given during the writer creation.
                writer.Save();
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.HasError">
            <summary>
            Gets a value indicating whether this instrument method file has detected an error.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.FileName">
            <summary>
            Gets the instrument method file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.FileHeader">
            <summary>
            Gets the file header for the instrument method file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.UpdateFileHeaderDescription(System.String)">
            <summary>
            Updates the file header field - "Description".
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.UpdateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.IFileHeader)">
            <summary>
            Update the instrument method file header with the file header values passed in.  
            Only updates object values in memory, does not write to disk.
            A default FileHeader is created with every new writer instance.
            Possible to only update creator and user values.
            </summary>
            <param name="fileHeader">
            The file header object with values to use.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.GetDevices">
            <summary>
            Get the list of device methods which are currently defined in this instrument method.<para/>
            Returns an empty list, if this is a newly created instrument method.<para/>
            ---
            In order to add/update device method, caller should first call this to get the list of devices.<para/>
            Once you've the list, you can start adding a new device method or editing/removing an existing device method.
            </summary>
            <returns>The list of device methods.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.Save">
            <summary>
            Saves the instrument methods to the file.
            If this is an "Unnamed" instrument method writer, caller should use "SaveAs" method with the output 
            file name; otherwise ArgumentNullException will be thrown.
            </summary>
            <returns>True if save successfully; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">name;@The name cannot be empty.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IInstrumentMethodWriter.SaveAs(System.String)">
            <summary>
            Save this instrument methods to a file.<para/>
            It should overwrite the instrument methods file if the file exists; otherwise, a 
            new file should be created.
            </summary>
            <param name="fileName">File name of the instrument method.</param>
            <returns>True if save successfully; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">name;@The name cannot be empty.</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IDeviceMethod">
            <summary>
            Provides functions to create/update a device method. 
            The device methods are for each configured instrument and stored in instrument method file. 
            Each device method contains two or more streams.  
                One calls "Data", stores a private representation of the method, in a binary or XML format.
                Second calls "Text, stores an Unicode text description of the method.
                Other streams may also be created, that are private to the device, i.e. TNG-Calcium has "Header" stream.
            Format:
                TNG-Calcium    (IDeviceMethod)
                    Data            (Method stream - byte array)
                    Text            (string)
                    Header          (Method stream - byte array)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDeviceMethod.MethodText">
            <summary>
            Gets or sets the "Text" plain text (unicode) form of an device method.
            This property provides a shortcut to get/set the "Text" stream. <para/>
            Accessing the property, returns empty string if the "Text" stream does not exist; otherwise, it will retrieve the stream
            from the StreamBytes list.<para/>
            Updating the property, overwrite the existing content of the "Text stream if it already exists; otherwise, it
            will add the "Text" stream to the StreamBytes list.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IDeviceMethod.GetStreamBytes">
            <summary>
            Gets all stream data names for this device storage.
            Typically an instrument has a stream called "Data" containing the method in binary or XML 
            and "Text" contains the plain text form of the method.
            Other streams (private to the instrument) may also be created.
            ---
            In order to add/update the stream, caller should first call this to get the list of streams.<para/>
            Once you've the list, you can start adding a new stream or editing/removing an existing method stream.
            ---
            If the stream is set to null, during the save operation, it'll save as zero length stream.
            </summary>
            <returns>Device stream names</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter">
            <summary>
            Provides methods to write mass spec device data.
            The "PrepareForRun" method should be called during the prepare for run state, before the data acquisition begins. <para/>
            The rest of the methods will be used for data logging.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.IsPreparedForRun">
            <summary>
            Gets a value indicating whether the PrepareForRun method has been called.
            </summary>
            <value>True if the PrepareForRun method has been called; otherwise, false.
            </value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.PrepareForRun(ThermoFisher.CommonCore.Data.IInstrumentDataAccess,ThermoFisher.CommonCore.Data.Interfaces.IMassSpecGenericHeaders,ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo,ThermoFisher.CommonCore.Data.Interfaces.IScanEvents)">
            <summary>
            This method should be called (when creating an acquisition file) during the "Prepare for run" state.<para/>
            It may not be called multiple times for one device. It may not be called after any of the data logging calls have been made.<para/>
            It will perform the following operations:<para/>
            1. Write instrument information<para/>
            2. Write run header information<para/>
            3. Write status log header <para/>
            4. Write trailer extra header <para/>
            5. Write tune data header <para/>     
            6. Write run header information - expected run time, comments, mass resolution and precision.<para/>
            7. Write method scan events.
            </summary>
            <param name="instrumentId">The instrument ID.</param>
            <param name="headers">The generic data headers.</param>
            <param name="runHeaderInfo">The run header information.</param>
            <param name="methodScanEvents">Method scan events</param>
            <returns>True if all the values are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteErrorLog(System.Single,System.String)">
            <summary>
            Write an error log to a raw file.
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="errorLog">The error log.</param>
            <returns>True if error log entry is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteStatusLog(System.Single,System.Byte[])">
            <summary>
            If any Status Log details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para/>
            The order and types of the data elements in the byte array parameter 
            to the method needs to be the same as the order and types that are defined in the header. 
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="data">The status data stores in byte array.</param>
            <returns>True if status log entry is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteStatusLog(System.Single,System.Object[])">
            <summary>
            If any Status Log details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para/>
            The order and types of the data elements in the byte array parameter 
            to the method needs to be the same as the order and types that are defined in the header. 
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="data">The data stores in object array.</param>
            <returns>True if status log entry is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteTrailerExtraData(System.Object[])">
            <summary>
            If any trailer extra details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para/>
            The order and types of the data elements in the object array parameter 
            to the method needs to be the same as the order and types that are defined in the header. 
            </summary>
            <param name="data">The trailer extra data stores in object array.</param>
            <returns>True if trailer extra data is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteTrailerExtraData(System.Byte[])">
            <summary>
            If any Trailer Extra details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para/>
            The order and types of the data elements in the byte array parameter 
            to the method needs to be the same as the order and types that are defined in the header. 
            </summary>
            <param name="data">The trailer extra data stores in byte array.</param>
            <returns>True if trailer extra entry is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteTuneData(System.Object[])">
            <summary>
            If any tune details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para/>
            The order and types of the data elements in the object array parameter 
            to the method needs to be the same as the order and types that are defined in the header. 
            </summary>
            <param name="data">The tune data stores in object array.</param>
            <returns>True if tune data is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteTuneData(System.Byte[])">
            <summary>
            If any tune data details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para/>
            The order and types of the data elements in the byte array parameter 
            to the method needs to be the same as the order and types that are defined in the header. 
            </summary>
            <param name="data">The tune data stores in byte array.</param>
            <returns>True if tune data entry is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteInstData(ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData)">
            <summary>
            This method is designed for exporting mass spec scanned data to a file (mostly used by the Application). <para/>
            It converts the input scanned data into the compressed packet format and also generates a profile index 
             if needed by the specified packet type. <para/>
            Overall, it writes the mass spec data packets, scan index (scan header) and trailer scan event if it is provided,
            to a file. <para/>
            This method will branch to the appropriate packet methods to compress the data block before being written to disk.
            </summary>       
            <param name="instData">The transferring data that are going to be saved to a file.</param>
            <returns>True if mass spec data packets are written to disk successfully; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteInstData(System.Byte[],ThermoFisher.CommonCore.Data.Business.SpectrumPacketType)">
            <summary>
            This method is designed for mass spec device data writing. <para/>
            To provide fast data writing, this method writes the mass spec data packets directly to file (without performing <para/>
            any data validation and data compression) by the specified packet type. <para/>
            All data validation and data compression currently are done in the instrument driver. <para/>
            </summary>
            <param name="dataBlock">The binary block of data to write.</param>
            <param name="packetType">Type of the packet.</param>
            <returns>True if mass spec data packets are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecDeviceWriter.WriteInstScanIndex(ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess,ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            This method is designed for mass spec device data writing. <para/>
            It writes the mass spec scan index (a.k.a scan header) and trailer scan event (if it's available) to the disk.
            </summary>
            <param name="scanIndex">Index of the mass spec scan.</param>
            <param name="trailerScanEvent">The trailer scan event [optional].</param>
            <returns>True if scan index and trailer scan event (if it's available) are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecGenericHeaders">
            <summary>
            The IMassSpecGenericDataHeaders interface which contains the generic headers definitions that are going to be written to a raw file.<para/>
            If caller is not intended to use any one of these headers, caller should either pass a null argument or zero length array.<para/>
            i.e. TrailerExtraHeaders = null or TrailerExtraHeaders = new IHeaderItem[0]<para/>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecGenericHeaders.TrailerExtraHeader">
            <summary>
            Gets the trailer extra headers.
            </summary>
            <value>
            The trailer extra headers.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecGenericHeaders.StatusLogHeader">
            <summary>
            Gets the status log headers.
            </summary>
            <value>
            The status log headers.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecGenericHeaders.TuneHeader">
            <summary>
            Gets the tune headers.
            </summary>
            <value>
            The tune headers.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo">
            <summary>
            Information about the mass spec device data stream.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo.ExpectedRunTime">
            <summary>
            Gets or sets the expected run time.
            The expected run time. All devices MUST do this so that the real-time update can display a sensible Axis.
            </summary>
            <value>
            The expected run time.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo.MassResolution">
            <summary>
            Gets the mass resolution (width of the half peak).
            Optional field, it has a default value of 0.5.
            </summary>
            <value>
            The mass resolution.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo.Comment1">
            <summary>
            Gets the first comment about this data stream.
            Optional field, it has a default value of empty string.
            The comment is for "Sample Name" in Chromatogram view title (max 39 chars).
            </summary>
            <value>
            The comment1.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo.Comment2">
            <summary>
            Gets the second comment about this data stream.
            Optional field, it has a default value of empty string.
            This comment is for "Comment" in Chromatogram view title (max 63 chars).
            </summary>
            <value>
            The comment2.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo.Precision">
            <summary>
            Gets the number of digits of precision suggested for formatting masses.
            Optional field, it has a default value of 2.
            </summary>
            <value>
            The precision.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IPackedMassSpecHeaders">
            <summary>
            Binary (byte array) data from the generic headers of a mass spectrometer.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPackedMassSpecHeaders.TrailerExtraHeader">
            <summary>
            Packed trailer extra headers
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPackedMassSpecHeaders.StatusLogHeader">
            <summary>
             Packed status log headers
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPackedMassSpecHeaders.TuneHeader">
            <summary>
             Packed tune headers
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData">
            <summary>
            Defines access to data which can be written to an MS instrument, for one scan.
            This format will typically be used from an application.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData.EventData">
            <summary>
            Gets the event data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData.StatisticsData">
            <summary>
            Gets the statistics data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData.ScanData">
            <summary>
            Gets the scan data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData.NoiseData">
            <summary>
            Gets the noise data.
            </summary>
            <value>
            The noise data.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData.CentroidData">
            <summary>
            Gets the centroid data, it's a second stream with profile scan.
            </summary>
            <value>
            The centroid data.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData.Frequencies">
            <summary>
            Gets the frequencies (for LT/FT).
            </summary>
            <value>
            The frequencies.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.INoisePacket">
            <summary>
            Defines noise from FT profile
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.INoisePacket.Mass">
            <summary>
            Gets or sets the mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.INoisePacket.Noise">
            <summary>
            Gets or sets the noise
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.INoisePacket.Baseline">
            <summary>
            Gets or sets the baseline
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IOtherDeviceWriter">
            <summary>
            Provides methods to log information from "other" devices.
            That is: devices which have no scan data, just status (diagnostics) or errors.
            For example: pump pressure, sampled every second.<para/>
            Note: The following functions should be called before acquisition begins:<para/>
            1. Write Instrument Info<para/>
            2. Write Instrument Expected Run Time<para/>
            3. Write Status Log Header <para/>
            If caller is not intended to use the status log data, pass a null argument or zero length array.<para/>
            ex. WriteStatusLogHeader(null) or WriteStatusLogHeader(new IHeaderItem[0])
            </summary>    
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IPackedMsInstrumentData">
            <summary>
            Data for a scan, converted into byte arrays
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPackedMsInstrumentData.PackedScanEvent">
            <summary>
            Gets or sets the converted scan event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPackedMsInstrumentData.PackedScanStats">
            <summary>
            Gets or sets the converted scan stats
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPackedMsInstrumentData.ScanData">
            <summary>
            Gets or sets the converted scan data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPackedMsInstrumentData.ProfilePaketCount">
            <summary>
            Gets the number of profile index records
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPackedMsInstrumentData.ProfileArray">
            <summary>
            Gets the profile index records
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IPdaDeviceWriter">
            <summary>
            Provides methods to write PDA type devices data.<para/>
            Note: The following functions should be called before acquisition begins:<para/>
            1. Write Instrument Info<para/>
            2. Write Instrument Expected Run Time<para/>
            3. Write Status Log Header<para/>
            If caller is not intended to use the status log data, pass a null argument or zero length array.<para/>
            ex. WriteStatusLogHeader(null) or WriteStatusLogHeader(new IHeaderItem[0])
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IPdaDeviceWriter.WriteInstData(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex)">
            <summary>
            Writes both the PDA instrument data and index into the disk. This is the
            simplest format of data we write to a raw file.
            </summary>
            <param name="instData">The PDA instrument data.</param>
            <param name="instDataIndex">Index of the PDA instrument scan.</param>
            <returns>True if scan data and index are written to disk successfully, False otherwise</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex">
            <summary>
            Defines the scan header for PDA
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex.LongWavelength">
            <summary>
            Gets the long wavelength.
            <para>For UV device only, it will be ignored by Analog devices</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex.ShortWavelength">
            <summary>
            Gets the short wavelength.
            <para>For UV device only, it will be ignored by Analog devices</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex.WavelengthStep">
            <summary>
            Gets the wave length step.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex.AUScale">
            <summary>
            Gets the Absorbance Unit's scale.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess">
            <summary>
            Interface to read a processing method (PMD) file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.FileHeader">
            <summary>
            Gets the file header for the processing method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.IsOpen">
            <summary>
            Gets a value indicating whether a file was successfully opened.
            Inspect "FileError" when false
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.MethodOptions">
            <summary>
            Gets some global settings from a PMD
            These settings apply to all components in the quantitation section.
            Some settings affect qualitative processing.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.StandardReport">
            <summary>
            Gets the "Standard report" settings from a processing method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.PeakDetection">
            <summary>
            Gets peak detection settings (Qualitative processing)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.SpectrumEnhancement">
            <summary>
            Gets Spectrum Enhancement settings (Qualitative processing)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.LibrarySearch">
            <summary>
            Gets options for NIST library search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.LibrarySearchConstraints">
            <summary>
            Gets constraints for NIST library search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.SampleReports">
            <summary>
            Gets the list of reports
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.Programs">
            <summary>
            Gets the list of programs
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.SummaryReports">
            <summary>
            Gets the list of reports
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.PeakDisplayOptions">
            <summary>
            Gets additional options about the peak display (peak labels etc).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.PeakPuritySettings">
            <summary>
            Gets setting for PDA peak purity
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.Components">
            <summary>
            Gets the list of compounds.
            This includes all integration, calibration and other settings 
            which are specific to each component.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.RawFileName">
            <summary>
            Gets the raw file name, which was used to design this method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.MassOptions">
            <summary>
            Gets or sets the (global) mass tolerance and precision settings for the method.
            When reading a file "get" will return the values saved in a PMD
            Set can be used to override values, such that when a filter
            is presented as text, alternative (detector) mass precision is used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodFileAccess.ViewType">
            <summary>
            Gets the "View type" saved in a PMD file
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.CalStandards">
            <summary>
            Possible ways in which calibration standards are used
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.CalStandards.Internal">
            <summary>
            Internal standards (in the same raw file)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.CalStandards.External">
            <summary>
            External standards (in a different raw file)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.CalibrateAs">
            <summary>
            Determines whether calibration is performed on concentration or amount
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.CalibrateAs.Concentration">
            <summary>
            Calibrate using concentration
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.CalibrateAs.Amount">
            <summary>
            Calibrate using amount
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ProcessingMethodViewType">
            <summary>
            View to show when opening a PMD file.
            Part of PMD file data, but may not be currently used
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProcessingMethodViewType.MethodSummary">
            <summary>
            Show method summary
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProcessingMethodViewType.ComponentIdentification">
            <summary>
            Show component identification
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProcessingMethodViewType.CalibrationReview">
            <summary>
            Show calibration review
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProcessingMethodViewType.PeakDetection">
            <summary>
            Show peak detection
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ChromatographyType">
            <summary>
            Possible types of chromatography 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ChromatographyType.Gc">
            <summary>
            Gas Chromatography
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ChromatographyType.Lc">
            <summary>
            Liquid Chromatography
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ReportAs">
            <summary>
            Determines reporting unit of concentration
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportAs.Concentration">
            <summary>
            Report as concentration
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportAs.Amount">
            <summary>
            Report as amount
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.VoidTime">
            <summary>
            Determines how void time is calculated.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.VoidTime.VoidTimeByValue">
            <summary>
            A specific time is entered for void time
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.VoidTime.VoidTimeFirstPeak">
            <summary>
            First qualitative peak defines void time
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess">
            <summary>
            This interface permits reading of the "Options" structure
            from an Xcalibur processing method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.CalibrationType">
            <summary>
            Gets a value indicating whether the standards are internal or external.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.CalibrateAs">
            <summary>
            Gets a value indicating whether calibration is performed on concentration or amount
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.VoidTime">
            <summary>
            Gets a value determining how void time is calculated.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.ReportAs">
            <summary>
            Gets a value determining whether amounts or concentrations are reported.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.ChromatographyType">
            <summary>
            Gets a value determining how chromatography was performed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.RejectOutliers">
            <summary>
            Gets a value indicating whether outliers (on a cal curve) should be rejected.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.VoidTimeValue">
            <summary>
            Gets the added time of void volume, where void time is set to "Value"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.AllowedDevPercent">
            <summary>
            Gets the permitted % deviation from an expected standard amount.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.SearchWindow">
            <summary>
            Gets the search window for the expected time of a peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.MinScansInBaseline">
            <summary>
            Gets the minimum number of expected scans in a baseline
            Genesis: MinScansInBaseline
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.InitialNoiseScale">
            <summary>
            Gets a scale factor for the noise level in chromatographic peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.BaseNoiseLimit">
            <summary>
            Gets the limit on baseline noise
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.BackgroundWidth">
            <summary>
            Gets the background width (scans)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.BaseNoiseRejectionFactor">
            <summary>
            Gets the baseline noise rejection factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.UseAltPercentRsdCalc">
            <summary>
            Gets a value indicating whether the "alternate Percent RDS calculation" should be performed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.CalLevelsManuallyChanged">
            <summary>
            Gets a value indicating whether there was a "manual change" to calibration levels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.LowIntensityCutoff">
            <summary>
            Gets the low intensity cutoff
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.GetDilutionLevels">
            <summary>
            Read the table of dilution levels
            </summary>
            <returns>The dilution levels</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodOptionsAccess.GetDilutionFactors">
            <summary>
            Gets a copy of the dilution target component factors table
            </summary>
            <returns>The dilution target component factors table</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IDilutionLevelAccess">
            <summary>
            Access to Dilution Level data from PMD file (obsolete? subset of a calibration level)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDilutionLevelAccess.BaseAmount">
            <summary>
            Gets Anticipated amount of target compound in calibration of QC standard.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDilutionLevelAccess.TestPercent">
            <summary>
            Gets QC test standard: <c>100 * (yobserved-ypredicted)/ypreditced</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDilutionLevelAccess.LevelName">
            <summary>
            Gets the level name
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IDilutionTargetCompFactorAccess">
            <summary>
            Access to the Dilution Target Component (subset of a calibration level).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDilutionTargetCompFactorAccess.BaseAmount">
            <summary>
            Gets Anticipated amount of target component.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDilutionTargetCompFactorAccess.TargetComponentName">
            <summary>
            Gets the target component name.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ChroAnalysisReport">
            <summary>
            Determines how the Chromatogram Analysis report is formatted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ChroAnalysisReport.ByComponent">
            <summary>
            Format by component
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ChroAnalysisReport.UserDefault">
            <summary>
            Use default formatting
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess">
            <summary>
            This set of flags gives a table of possible "standard" or built in reports.
            Available choices in the UI, and actual report content depend on the application.
            Some where probably never offered, or only applied to legacy LCQ data system.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.AnalysisUnknown">
            <summary>
            Gets a value indicating whether the Analysis Unknown report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.ComponentUnknown">
            <summary>
            Gets a value indicating whether the Component Unknown report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.MethodUnknown">
            <summary>
            Gets a value indicating whether the Method Unknown report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.LogUnknown">
            <summary>
            Gets a value indicating whether the Log Unknown report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.AnalysisCalibration">
            <summary>
            Gets a value indicating whether the Analysis Calibration report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.ComponentCalibration">
            <summary>
            Gets a value indicating whether the Component Calibration report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.MethodCalibration">
            <summary>
            Gets a value indicating whether the Method Calibration report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.LogCalibration">
            <summary>
            Gets a value indicating whether the Log Calibration report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.AnalysisQc">
            <summary>
            Gets a value indicating whether the Analysis QC report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.ComponentQc">
            <summary>
            Gets a value indicating whether the Component QC report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.MethodQc">
            <summary>
            Gets a value indicating whether the Method QC report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.LogQc">
            <summary>
            Gets a value indicating whether the Log QC report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.AnalysisOther">
            <summary>
            Gets a value indicating whether the Analysis Other report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.ComponentOther">
            <summary>
            Gets a value indicating whether the Component Other report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.MethodOther">
            <summary>
            Gets a value indicating whether the Method Other report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.LogOther">
            <summary>
            Gets a value indicating whether the Log Other report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.SampleInformation">
            <summary>
            Gets a value indicating whether the Sample Information report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.RunInformation">
            <summary>
            Gets a value indicating whether the Run Information report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.Chromatogram">
            <summary>
            Gets a value indicating whether the Chromatogram report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.PeakComponent">
            <summary>
            Gets a value indicating whether the PeakComponent report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.Tune">
            <summary>
            Gets a value indicating whether the Tune report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.Experiment">
            <summary>
            Gets a value indicating whether the Experiment report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.Processing">
            <summary>
            Gets a value indicating whether the Processing report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.Status">
            <summary>
            Gets a value indicating whether the Status report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.Error">
            <summary>
            Gets a value indicating whether the Error report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.Audit">
            <summary>
            Gets a value indicating whether the Audit report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.OpenAccess">
            <summary>
            Gets a value indicating whether the Open Access report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.ChroAnalysisReport">
            <summary>
            Gets a value indicating which of the two types of chromatogram analysis report is needed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.Survey">
            <summary>
            Gets a value indicating whether the Survey report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IProcessingMethodStandardReportAccess.PrintSignatureLine">
            <summary>
            Gets a value indicating whether to include a signature line in reports
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.PeakPercent">
            <summary>
            Defines how a percentage is used (for filtering)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.PeakPercent.PercentOfLargestPeak">
            <summary>
            Percentage of the largest peak
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.PeakPercent.PercentOfComponentPeak">
            <summary>
            Percentage of the peak identified as a component
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.LimitPeaks">
            <summary>
            Defines how peak limits are applied
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.LimitPeaks.ByArea">
            <summary>
            Base limits on peak area
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.LimitPeaks.ByHeight">
            <summary>
            Base limits on peak height
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IManualNoiseAccess">
            <summary>
            Access to settings which defines a manual noise feature (for peak integration)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IManualNoiseAccess.UseManualNoiseRegion">
            <summary>
            Gets a value indicating whether manual noise should be used
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IManualNoiseAccess.ManualNoiseRtRange">
            <summary>
            Gets the manual noise region (time range in minutes)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IManualNoiseAccess.ManualNoiseIntensityRange">
            <summary>
            Gets the manual noise region (intensity range)
            These values are not used by Xcalibur
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IMaximizingMassesAccess">
            <summary>
            Defines settings for the maximizing masses algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMaximizingMassesAccess.MassRequired">
            <summary>
            Gets the number of masses required to maximize
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMaximizingMassesAccess.PercentMassesFound">
            <summary>
            Gets the percentage of masses which must maximize
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMaximizingMassesAccess.FilterWidth">
            <summary>
            Gets the box filter width for Mass-Maximizing detection
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMaximizingMassesAccess.WindowSize">
            <summary>
            Gets the number of scans in the max-masses window
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMaximizingMassesAccess.MinimumPeakSeparation">
            <summary>
            Gets the minimum peak separation (time) for Mass-Maximizing detection
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IMaximizingMassesAccess.BackgroundWidth">
            <summary>
            Gets the number of scans averaged for a background
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IPeakLimitsAccess">
            <summary>
            Interface to specify returning
            a limited number of "most intense" peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakLimitsAccess.IsLimitPeaksEnabled">
            <summary>
            Gets a value indicating whether peak limits are enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakLimitsAccess.LimitPeaks">
            <summary>
            Gets a value indicating whether to Select top peak by area or height
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakLimitsAccess.NumberOfPeaks">
            <summary>
            Gets the number of "top peaks" to select
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakLimitsAccess.IsRelativePeakEnabled">
            <summary>
            Gets a value indicating whether "relative peak height threshold" is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakLimitsAccess.PercentLargestPeak">
            <summary>
            Gets the percent of the largest peak, which is used for filtering
            peak detection results, when "IsRelativePeakEnabled"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakLimitsAccess.PercentComponentPeak">
            <summary>
            Gets a the "percent of component peak" (limit)
            Only valid when PeakPercent is set to PercentOfComponentPeak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakLimitsAccess.PeakPercent">
            <summary>
            Gets a value indicating how peak percentages are specified
            (unused in product Xcalibur)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess">
            <summary>
            Settings for genesis integrator (as read from Xcalibur PMD file)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.ConstrainPeak">
            <summary>
            Gets a value indicating whether a peak's width (the tail) must be constrained.
            This flag allows you to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.ExpectedPeakWidth">
            <summary>
            Gets the width of a typical peak in seconds.
            This controls the minimum width that a peak is expected to have
            if valley detection is enabled.
            Integrator converts this to expectedPeakHalfWidth (minutes) by dividing by 120.
            With valley detection enabled,
            any valley points nearer than the expectedPeakHalfWidth (which is [expected width]/2)
            to the top of the peak are ignored.
            If a valley point is found outside the expected peak width,
            Genesis terminates the peak at that point.
            Genesis always terminates a peak when the signal reaches the baseline,
            independent of the value set for the expectedPeakHalfWidth.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.PeakHeightPercent">
            <summary>
            Gets a constraint on peak height.
            The percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the <c>ConstrainPeak</c> is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.SignalToNoiseThreshold">
            <summary>
            Gets the minimum acceptable signal to noise of a peak.
            Genesis ignores all chromatogram peaks that have signal-to-noise values
            that are less than the S/N Threshold value
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.TailingFactor">
            <summary>
            Gets the peak tailing factor.
            This controls how Genesis integrates the tail of a peak.
            This factor is the maximum ratio of the trailing edge to the leading side of a constrained peak.
            This applies only when the <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.ConstrainPeak"/> is true.
            The valid range is 0.5 through 9.0. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.ValleyDetection">
            <summary>
            Gets a value indicating whether valley detection is performed.
            This parameter must be set to true when performing base to base integration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.ValleyThreshold">
            <summary>
            Gets the multiplier of the valley bottom
            that the peak trace can rise above a baseline (before or after the peak). 
            If the trace exceeds ValleyThreshold,
            Genesis applies valley detection peak integration criteria. 
            This method drops a vertical line from the apex of the valley between unresolved
            peaks to the baseline.
            The intersection of the vertical line and the baseline defines the end of the first
            peak and the beginning of the second peak. 
            This test is applied to both the left and right edges of the peak. 
            The ValleyThreshold criteria is useful for integrating peaks with long tails.
            Useful range: 1.001 to 1.5
            Note: Appears on product UI converted from factor to percentage as "Rise percentage".
            For example: 1.1 = 10%
            Code tests similar to the following:<code>
            if ((currentSignal-baseline) > ((valleyBottom-baseline) * ValleyThreshold))
            {
                side of peak has bottomed out, and risen above minimum
            }
            </code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.ValleyDepth">
            <summary>
            Gets or the S/N range is 1.0 to 100.0. for valley detection.
            Technical equation:<c>height(here +/- VALLEY_WIDTH) > ValleyDepth*SNR+height(here) => valley here </c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.CalculateNoiseAsRms">
            <summary>
            Gets a value indicating whether to enable RMS noise calculation.
            If not set, noise is calculated peak to peak.
            It is set by default.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.BaselineNoiseLimit">
            <summary>
            Gets a noise limit, where the code stops attempting to find a better baseline.
            controls how the baseline is drawn in the noise data.
            The higher the baseline noise tolerance value,
            the higher the baseline is drawn through the noise data.
            The valid range is 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.MinScansInBaseline">
            <summary>
            Gets the minimum number of scans that Genesis uses to calculate a baseline.
            A larger number includes more data in determining an averaged baseline.
            The valid range is 2 to 100.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.BaselineNoiseRejectionFactor">
            <summary>
            Gets a factor which controls the width of the RMS noise band above and below the peak detection baseline
            and is applied to the raw RMS noise values to raise the effective RMS noise during peak detection.
            The left and right peak boundaries are assigned above the noise and, therefore,
            closer to the peak apex value in minutes. 
            This action effectively raises the peak integration baseline above the RMS noise level. 
            Range: 0.1 to 10.0.
            Default: 2.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.BackgroundUpdateRate">
            <summary>
            Gets the number of minutes between background scan recalculations.
            Baseline is refitted each time this interval elapses. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.BaseSignalToNoiseRatio">
            <summary>
            Gets a limit for the "baseline signal to noise ratio".
            A peak is considered ended if the following condition is met:
            <c>height &lt;= (BaseNoise * BaseSignalToNoiseRatio))</c>
            Where BaseNoise is the calculated noise on the fitted baseline,
            and height is the height above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.PercentLargestPeak">
            <summary>
            Gets the minimum acceptable percentage of the largest peak.
            Do not return peaks which have a height less than this % of the highest peak above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.FilterByRelativePeakHeight">
            <summary>
            Gets a value indicating whether filtering of peaks is by relative signal height
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.PeakSignalToNoiseRatioCutoff">
            <summary>
            Gets the Peak Signal ToNoise Ratio Cutoff.
            The peak edge is set to values below this defined S/N. 
            This test assumes an edge of a peak is found when the baseline adjusted height of the edge is less than
            the ratio of the baseline adjusted apex height and the peak S/N cutoff ratio. 
            If the S/N at the apex is 500 and the peak S/N cutoff value is 200,
            Genesis defines the right and left edges of the peak when the S/N reaches a value less than 200.
            Range: 50.0 to 10000.0. 
            Technical equation:<c>if height &lt; (1/PeakSignalToNoiseRatioCutoff)*height(apex) => valley here</c>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess">
            <summary>
            Defines a reader for importing the peak detection settings from a PMD file.
            In UI, This may be separately displayed in tabs as chromatogram settings, and settings
            for various integrators.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.IcisSettings">
            <summary>
            Gets the settings for the ICIS integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.GenesisSettings">
            <summary>
            Gets the settings for the Genesis integrator
            Note: This property is under review.
            May return an alternative interface
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.ChromatogramSettings">
            <summary>
            Gets the settings for creating a chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.ManualNoise">
            <summary>
            Gets the manual noise range settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.MaximizingMasses">
            <summary>
            Gets settings for the maximizing masses algorithm
            Note: This algorithm is not used by product "Xcalibur"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.LimitPeakSettings">
            <summary>
            Gets settings to limit (filter) the list of returned peaks
            after integration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.EnableDetection">
            <summary>
            Gets a value indicating whether peak detection is enabled.
            Note: This property is not used in product "Xcalibur"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.SmoothingPoints">
            <summary>
            Gets the number of smoothing points, for background analysis
            This setting is common to all integrators
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.DisplayWindowWidth">
            <summary>
            Gets the width of display window for the peak (in seconds)
            This is for presentation only
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.RetentionTimeWindow">
            <summary>
            Gets the time range, over which qualitative processing is done.
            Only peaks detected within this range are processed further
            (for example, library searched)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.PeakDetectionAlgorithm">
            <summary>
            Gets the Algorithm to use (Genesis, ICIS etc.)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.MassPrecision">
            <summary>
            Gets Number of decimals used in defining mass values
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.MassTolerance">
            <summary>
            Gets tolerance used for mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.ToleranceUnits">
            <summary>
            Gets units of mass tolerance
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.ComponentName">
            <summary>
            Gets the component name
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.ScanFilter">
            <summary>
            Gets the scan filter, as an interface.
            This same data is available in string form
            in the ChromatogramSettings property
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IQualitativePeakDetectionAccess.IntegratorEvents">
            <summary>
            Gets the (avalon) integrator events
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.SpectrumEnhanceMode">
            <summary>
            Defines how spectrum enhancement is done
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SpectrumEnhanceMode.Refine">
            <summary>
            Refine the spectrum
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SpectrumEnhanceMode.Combine">
            <summary>
            Combine spectra
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SpectrumEnhanceMode.Threshold">
            <summary>
            Threshold the data
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.SpectrumSubtractMethod">
            <summary>
            Determines how spectra are subtracted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SpectrumSubtractMethod.AtPeak">
            <summary>
            Subtract at a peak
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SpectrumSubtractMethod.NotAtPeak">
            <summary>
            Subtract: not at a peak
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess">
            <summary>
            Read access to parameters for spectrum enhancements
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.Enabled">
            <summary>
            Gets a value indicating whether the refine (combine) section enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.SpectrumMethod">
            <summary>
            Gets a value indicating we using refine, combine or threshold
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.RefineWindowSize">
            <summary>
            Gets the refine window size
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.RefineNoiseThreshold">
            <summary>
            Gets he refine noise threshold
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.TopRegionWidth">
            <summary>
            Gets the combine take points across peak top
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.BackgroundScalingFactor">
            <summary>
            Gets the combine background scaling factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.LeftRegionMethod">
            <summary>
            Gets the Region 1 method: at peak or use previous
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.PointsBeforePeakTop">
            <summary>
            Gets the start point before the peak top
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.LeftRegionPoints">
            <summary>
            Gets the previous points in background
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.RightRegionMethod">
            <summary>
            Gets Region 2 method: at peak or use next
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.PointsAfterPeakTop">
            <summary>
            Gets Points after peak top
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.RightRegionPoints">
            <summary>
            Gets the nNext point in background
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISpectrumEnhancementAccess.CutOffThreshold">
            <summary>
            Gets the cut off threshold
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.LibrarySearchType">
            <summary>
            Defines how NIST search is done
            Refer to NIST documentation for details.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.LibrarySearchType.Identity">
            <summary>
            Perform NIST identity search
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.LibrarySearchType.Similarity">
            <summary>
            Perform NIST similarity search
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IdentityMode">
            <summary>
            NIST search identity mode
            Refer to NIST documentation for details.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IdentityMode.Normal">
            <summary>
            Normal identity search mode
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IdentityMode.Quick">
            <summary>
            Quick identity search mode
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IdentityMode.Penalize">
            <summary>
             Penalize identity search mode
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.SimilarityMode">
            <summary>
            NISY search similarity mode.
            Refer to NIST documentation for details.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SimilarityMode.Simple">
            <summary>
            Simple similarity mode
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SimilarityMode.Hybrid">
            <summary>
            Hybrid similarity mode
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SimilarityMode.NeutralLoss">
            <summary>
            Neutral Loss similarity mode
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess">
            <summary>
            Interface to access NIST library search options
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.SimilarityMode">
            <summary>
            Gets the similarity setting for NIST search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.IdentityMode">
            <summary>
            Gets the identity mode for NIST search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.LibrarySearchType">
            <summary>
            Gets the type of NIST search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.MolecularWeight">
            <summary>
            Gets the molecular weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.SearchMolecularWeightEnabled">
            <summary>
            Gets a value indicating whether search with Molecular Weight is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.ReverseSearch">
            <summary>
            Gets a value indicating whether reverse search is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.AppendUserLibrary">
            <summary>
            Gets a value indicating whether to append to the user library
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.SearchMolecularWeight">
            <summary>
            Gets the search molecular weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.MaxHits">
            <summary>
            Gets the maximum number of reported search hits
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.MatchFactor">
            <summary>
            Gets the match factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.ReverseMatchFactor">
            <summary>
            Gets the reverse match factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.ProbabilityPercent">
            <summary>
            Gets the Probability Percent (match limit)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.UserLibrary">
            <summary>
            Gets the name of the user library (for append operation)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.SearchList">
            <summary>
            Gets the list of libraries to search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.ApplyMassDefect">
            <summary>
            Gets a value indicating whether mass defect should be applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.DefectAtMass1">
            <summary>
            Gets the mass defect for the low mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.DefectAtMass2">
            <summary>
            Gets the mass defect for the High mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.Mass1">
            <summary>
            Gets the mass at which "DefectAtMass1" applies
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchOptionsAccess.Mass2">
            <summary>
            Gets the mass at which "DefectAtMass2" applies
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ElementsInCompound">
            <summary>
            Method of element constraint
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ElementsInCompound.All">
            <summary>
            All elements
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ElementsInCompound.Some">
            <summary>
            Some elements
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IonConstraints">
            <summary>
            Gets the method of ion constraints
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonConstraints.IonAbsolute">
            <summary>
            Absolute ion constraint
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonConstraints.IonRelative">
            <summary>
            Relative ion constraint
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess">
            <summary>
            Interface to read NIST library search constraints
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.MolecularWeightEnabled">
            <summary>
            Gets a value indicating whether molecular weight constraint is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.MinMolecularWeight">
            <summary>
            Gets the minimum molecular weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.MaximumMolecularWeight">
            <summary>
            Gets the maximum molecular weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.NameFragmentEnabled">
            <summary>
            Gets a value indicating whether name fragment constraint is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.NameFragment">
            <summary>
            Gets the name fragment constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.DbEnabled">
            <summary>
            Gets a value indicating whether DB constraint is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.FineEnabled">
            <summary>
             Gets a value indicating whether Fine constraint is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.EpaEnabled">
            <summary>
            Gets a value indicating whether EPA (Environmental Protection Agency) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.NihEnabled">
            <summary>
            Gets a value indicating whether NIH (National Institute of Health) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.TscaEnabled">
            <summary>
            Gets a value indicating whether TSCA (Toxic Substances Control Act) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.UspEnabled">
            <summary>
            Gets a value indicating whether USP (United States Pharmacopoeia) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.EinecsEnabled">
            <summary>
            Gets a value indicating whether EINECS (European Inventory of Existing Commercial Chemical Substances) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.RtecsEnabled">
            <summary>
            Gets a value indicating whether RTECS (Registry of Toxic Effects of Chemical Substances) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.HodocEnabled">
            <summary>
            Gets a value indicating whether HODOC (Handbook of Data on Organic Compounds) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.IrEnabled">
            <summary>
            Gets a value indicating whether IR constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.ElementsEnabled">
            <summary>
            Gets a value indicating whether Elements constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.Element">
            <summary>
            Gets the Element constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.ElementsMethod">
            <summary>
            Gets the element constraint method (used when ElementsEnabled)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.IonConstraintsEnabled">
            <summary>
            Gets a value indicating whether Ion Constraints are enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.IonConstraintMethod">
            <summary>
            Gets the method of Ion Constraints (used when IonConstraintsEnabled)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.IonConstraints">
            <summary>
            Gets the Ion Constraints (see NIST documentation for details)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ILibrarySearchConstraintsAccess.IndivdualConstraints">
            <summary>
            Gets the individual element constraints (limits on specific elements)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ElementConditions">
            <summary>
            Determines how an element limit is applied
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ElementConditions.GreaterThan">
            <summary>
            Element count must be greater than a specified value
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ElementConditions.LessThan">
            <summary>
             Element count must be less than a specified value
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ElementConditions.Equals">
            <summary>
            Element count must equal the supplied value
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IIonConstraintAccess">
            <summary>
            Interface to read an ion constraint.
            See NIST documentation for details.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IIonConstraintAccess.Constraint">
            <summary>
            Gets the method of ion constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IIonConstraintAccess.MassToCharge">
            <summary>
            Gets the mass to charge ratio of the constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IIonConstraintAccess.From">
            <summary>
            Gets the from value of the constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IIonConstraintAccess.To">
            <summary>
            Gets the To value of the constraint
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IonConstraintTypes">
            <summary>
            A method of ion constraint, for NIST library search
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonConstraintTypes.IonDefault">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonConstraintTypes.Normal">
            <summary>
            Normal ion constraint
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonConstraintTypes.Loss">
            <summary>
            Constrain by loss of ion
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonConstraintTypes.Rank">
            <summary>
            Constrain by rank
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonConstraintTypes.Maxmass">
            <summary>
            Constrain by max mass
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IIndividualConstraintAccess">
            <summary>
            Interface to read individual constraints
            See NIST documentation for details
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IIndividualConstraintAccess.ElementCondition">
            <summary>
            Gets the condition on this element (greater, less or equal to value)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IIndividualConstraintAccess.Value">
            <summary>
            Gets the comparison value for this element constraint.
            Used in a a test as per "ElementCondition"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IIndividualConstraintAccess.Element">
            <summary>
            Gets the element to constrain
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ReportTemplateType">
            <summary>
            Defines the output of an Xcalibur report
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportTemplateType.None">
            <summary>
            No report output
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportTemplateType.Text">
            <summary>
            Report creates txt
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportTemplateType.Doc">
            <summary>
            Report creates word doc
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportTemplateType.Html">
            <summary>
            Report creates HTML
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportTemplateType.Pdf">
            <summary>
            Report creates PDF file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportTemplateType.Rtf">
            <summary>
            Report creates Rtf file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ReportTemplateType.Xls">
            <summary>
            Report creates XLS file (spreadsheet)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportSampleTypes">
            <summary>
            Determines what data types are enabled for a report
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportSampleTypes.Standards">
            <summary>
            Gets a value indicating whether report is enabled for standards
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportSampleTypes.Qcs">
            <summary>
            Gets a value indicating whether report is enabled for QCs
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportSampleTypes.Unknowns">
            <summary>
            Gets a value indicating whether report is enabled for Unknowns
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportSampleTypes.Other">
            <summary>
            Gets a value indicating whether report is enabled for Other sample types
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportAccess">
            <summary>
            Interface to read Xcalibur report settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportAccess.Enabled">
            <summary>
            Gets a value indicating whether report is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportAccess.SaveAsType">
            <summary>
            Gets the file save format of the report
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburReportAccess.ReportName">
            <summary>
            Gets the name of the report
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburSampleReportAccess">
            <summary>
            Interface to read Xcalibur sample report settings
            </summary>}  
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ProgramAction">
            <summary>
            Defines what happens to a program in a PMD file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProgramAction.RunProgram">
            <summary>
            The program is run (exe)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProgramAction.RunExcelMacro">
            <summary>
            The program is run as an excel macro
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProgramAction.DoNothing">
            <summary>
            No action
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProgramAction.ExportOnly">
            <summary>
            Data is exported, using the specified export type
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ProgramExportType">
            <summary>
            Specifies a data export format
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProgramExportType.Xls">
            <summary>
            Export a spreadsheet file (XLS)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProgramExportType.Txt">
            <summary>
            Export as text
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ProgramExportType.Csv">
            <summary>
            Export comma separated values (CSV)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburProgramAccess">
            <summary>
            Interface to read Xcalibur program settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburProgramAccess.Enabled">
            <summary>
            Gets a value indicating whether report is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburProgramAccess.ProgramName">
            <summary>
            Gets the name of the program
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburProgramAccess.Parameters">
            <summary>
            Gets parameters to the program
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburProgramAccess.Action">
            <summary>
            Gets the action of this program (such as run exe, or export)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburProgramAccess.Synchronize">
            <summary>
            Gets a value indicating whether to synchronize this action.
            If false, other programs may be run in parallel with this.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburProgramAccess.ExportType">
            <summary>
            Gets the file save format of the export
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions">
            <summary>
            Additional display options (for Xcalibur PMD file)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.ExcessWidth">
            <summary>
            Gets a value which extends (display) width so that peak is shown "not at edge"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelWithRetentionTime">
            <summary>
            Gets a value indicating whether to label peaks with RT
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelWithScanNumber">
            <summary>
            Gets a value indicating whether to label peaks with scan number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelWithArea">
            <summary>
            Gets a value indicating whether to label peaks with area
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelWithBasePeak">
            <summary>
            Gets a value indicating whether to label peaks with base peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelWithHeight">
            <summary>
            Gets a value indicating whether to label peaks with height
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelWithIstdResp">
            <summary>
            Gets a value indicating whether to label peaks with internal standard response
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelWithSignalToNoise">
            <summary>
            Gets a value indicating whether to label peaks with signal to noise
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelWithSaturationFlag">
            <summary>
            Gets a value indicating whether to label peaks with saturation
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelRotated">
            <summary>
            Gets a value indicating whether to rotate peak label text
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IPeakDisplayOptions.LabelBoxed">
            <summary>
            Gets a value indicating whether to draw a box around peak labels
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationAndQuantificationThresholdLimitsAccess">
            <summary>
            Read only access to Calibration And Quantification Threshold Limits
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationAndQuantificationThresholdLimitsAccess.CarryoverLimitThreshold">
            <summary>
            Gets the carry over limit threshold.
            </summary>
            <value>The carry over limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationAndQuantificationThresholdLimitsAccess.DetectionLimitThreshold">
            <summary>
            Gets the detection limit threshold.
            </summary>
            <value>The detection limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationAndQuantificationThresholdLimitsAccess.LinearityLimitThreshold">
            <summary>
            Gets the linearity limit threshold.
            </summary>
            <value>The linearity limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationAndQuantificationThresholdLimitsAccess.QuantitationLimitThreshold">
            <summary>
            Gets the quantitation limit threshold.
            </summary>
            <value>The quantitation limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationAndQuantificationThresholdLimitsAccess.RSquaredThreshold">
            <summary>
            Gets the R squared threshold.
            </summary>
            <value>The R squared threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationAndQuantificationThresholdLimitsAccess.LimitOfReporting">
            <summary>
            Gets the limit of reporting
            A value should only be reported if it is >= the limit of reporting.
            This value is used to calculate the ReportingLimitPassed flag.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IDetectionThresholdLimitsAccess">
            <summary>
            Read only access to Detection Threshold Limits
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDetectionThresholdLimitsAccess.AreaThresholdLimit">
            <summary>
            Gets the Area limit threshold.
            </summary>
            <value>The Area limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IDetectionThresholdLimitsAccess.HeightThresholdLimit">
            <summary>
            Gets the height limit threshold.
            </summary>
            <value>The height limit threshold.</value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess">
            <summary>
            Interface to read component data, as imported from an 
            Xcalibur PMD file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.ManualNoiseSettings">
            <summary>
            Gets the settings for a manual noise region
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.IcisSettings">
            <summary>
            Gets settings for the ICIS peak integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.GenesisSettings">
            <summary>
            Gets settings for the genesis peak integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.LocationSettings">
            <summary>
            Gets settings for peak location (expected retention time)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.FindSettings">
            <summary>
            Gets settings for the spectral find algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.ChromatogramSettings">
            <summary>
            Gets settings for creating the component chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.ScanFilter">
            <summary>
            Gets the filter for this component as an interface.
            Note that a filter is also a property of IPeakChromatogramSettingsAccess,
            available a string, formatted to the mass precision of the component.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.CalibrationSettings">
            <summary>
            Gets component calibration settings (including level tables)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.SystemSuitabilitySettings">
            <summary>
            Gets settings for the system suitability algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.PeakPuritySettings">
            <summary>
            Gets settings for the PDA peak purity algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.IntegratorEvents">
            <summary>
            Gets the (avalon) integrator events
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.IonRatioConfirmation">
            <summary>
            Gets the settings for Ion Ration Confirmation
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.ToleranceSettings">
            <summary>
            Gets mass tolerance for this component
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.Name">
            <summary>
            Gets the name of this component
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.Keys">
            <summary>
            Gets (custom) keys about this component
            This is treated as a comment field.
            Not used for any "built-in" calculations
            but may be used to annotate reports etc.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.UseAsRtReference">
            <summary>
            Gets a value indicating whether this is used as a RT Reference for another component.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.AdjustUsing">
            <summary>
            Gets the retention time reference component.
            Adjust the retention time, using this component as a reference
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.SmoothingPoints">
            <summary>
            Gets the number of points to be averaged in peak detection and integration.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.DisplayWindowWidth">
            <summary>
            Gets the suggested view width for displaying the chromatogram (minutes)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.PeakDetectionAlgorithm">
            <summary>
            Gets a value which determines which peak detector to use with the component
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.FitThreshold">
            <summary>
            Gets "Fit Threshold" defined as 
            Min fit threshold (0-1.0) for detection by spectral fit.
            This value is believed to be not currently used in Xcalibur code (may be for an older fit algorithm)?
            Returned for completeness only.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.CalibrationAndQuantificationThresholdLimits">
            <summary>
            Gets the calibration and quantification data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburComponentAccess.DetectionThresholdLimits">
            <summary>
            Gets the detection threshold limits.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ResponseRatio">
            <summary>
            How relative response is measured
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ResponseRatio.Height">
            <summary>
            Use the ratio of height of peaks to find responses
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ResponseRatio.Area">
            <summary>
            Use the ratio of peak areas to find responses
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ComponentType">
            <summary>
            Determines if this component is a standard or a target
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ComponentType.TargetCompound">
            <summary>
            A compound which is being quantitated
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.ComponentType.ISTD">
            <summary>
            An internal standard reference, to calculate area or height ratios (responses).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationSettingsAccess">
            <summary>
            Read only access to CalibrationSettings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationSettingsAccess.TargetCompoundSettings">
            <summary>
            Gets the target compound settings.
            </summary>
            <value>The target compound settings.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationSettingsAccess.InternalStandardSettings">
            <summary>
            Gets the internal standard settings.
            </summary>
            <value>The internal standard settings.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ICalibrationSettingsAccess.ComponentType">
            <summary>
            Gets a value which determines if this component is a target compound or an internal standard
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess">
            <summary>
            Read only access to CalibrationTargetCompoundSettings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.CalibrationLevels">
            <summary>
            Gets the table of calibration levels
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.QcLevels">
            <summary>
            Gets the table of QC levels
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.CalibrationCurve">
            <summary>
            Gets the calibration curve fitting method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.Weighting">
            <summary>
            Gets the weighting for calibration curve
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.Origin">
            <summary>
            Gets the calibration curve origin mode
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.Response">
            <summary>
            Gets a value which determines how the response should be measured (using either peak height or peak area).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.Units">
            <summary>
            Gets the Unit for calibration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.InternalStandard">
            <summary>
            Gets the name of the internal standard for this component
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.ContributionOfISTDToTarget">
            <summary>
            Gets the isotopic contribution of the internal standard to the target compound
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ITargetCompoundSettingsAccess.ContributionOfTargetToISTD">
            <summary>
            Gets the isotopic contribution of the target compound to the internal standard
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IInternalStandardSettingsAccess">
            <summary>
            Read only access to CalibrationInternalStandardSettings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInternalStandardSettingsAccess.ISTDAmount">
            <summary>
            Gets the amount of internal standard. Not used in any calculation yet.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IInternalStandardSettingsAccess.ISTDUnits">
            <summary>
            Gets the units for the internal standard
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IonRatioMethod">
            <summary>
            Defines how ion ratio tests are performed
            (as found in Xcalibur PMD files)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonRatioMethod.WeightedAverage">
            <summary>
            Use a weighted average test
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonRatioMethod.NormalAverage">
            <summary>
            Use a simple average test
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonRatioMethod.UseStandard">
            <summary>
            Use a standard
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.IonRatioMethod.Manual">
            <summary>
            Manual test settings
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.XcaliburIonRatioWindowType">
            <summary>
            Defines ion ratio window, as found in Xcalibur PMD files
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.XcaliburIonRatioWindowType.Relative">
            <summary>
            Test relative to target percent
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.XcaliburIonRatioWindowType.Absolute">
            <summary>
            Absolute window around target percent
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburIonRatioTestSettingsAccess">
            <summary>
            Defines ion ratio settings, as imported from Xcalibur PMD file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburIonRatioTestSettingsAccess.Enabled">
            <summary>
            Gets a value indicating whether IRC tests are enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburIonRatioTestSettingsAccess.Standard">
            <summary>
            Gets the "standard" used 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburIonRatioTestSettingsAccess.Method">
            <summary>
            Gets the Ion Ratio method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburIonRatioTestSettingsAccess.WindowType">
            <summary>
            Gets the ion ratio window type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburIonRatioTestSettingsAccess.QualifierIonCoelution">
            <summary>
            Gets the qualifier ion coelution limits (minutes)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IXcaliburIonRatioTestSettingsAccess.IonRatioConfirmationTests">
            <summary>
            Gets the table of masses for ion ratio testing
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess">
            <summary>
            Read only access to a range
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess.Low">
            <summary>
            Gets the Low end of range
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess.High">
            <summary>
            Gets the high end of the range
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem">
            <summary>
            Specific items which can be cached
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem.CentroidStream">
            <summary>
            Cache CentroidStream objects
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem.ScanStatistics">
            <summary>
            Cache ScanStatistics objects
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem.ScanType">
            <summary>
            Cache ScanType objects
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem.SegmentedScan">
            <summary>
            Cache SegmentedScan objects
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawCache">
            <summary>
            Caching feature which can be supported by objects implementing IRawData
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawCache.SetCaching(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem,System.Int32,System.Boolean)">
            <summary>
            Request the object to keep a cache of the listed item.
            Setting the caching to "zero" disables further caching.
            </summary>
            <param name="item">
            Item to cache
            </param>
            <param name="limit">
            Limit of number of items to cache
            </param>
            <param name="useCloning">
            (optional, default false) if set True, all values returned from the cache are unique  (cloned) references. 
            By default, the cache just keeps references to the objects 
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawCache.ClearCache(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem)">
            <summary>
            Clear items in the cache
            </summary>
            <param name="item">
            item type to clear
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawCache.Cached(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem)">
            <summary>
            Count the number currently in the cache
            </summary>
            <param name="item">
            Item type to count
            </param>
            <returns>
            The number of items in this cache
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawData">
            <summary>
            Interface to supply data from a raw data stream.
            This is intended to permit the data to be read from any file format.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.ScanNumberFromRetentionTime(System.Double)">
            <summary>
            Get the nearest scan number to a retention time
            </summary>
            <param name="time">
            Retention time (minutes)
            </param>
            <returns>
            Scan number in the selected instrument which is closest to this time.
            If there are no scans, -1 is returned.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.RunHeader">
            <summary>
            Gets the current instrument's run header.
            The run header records information related to all data acquired by
            this instrument (such as the highest scan number "LastSpectrum")
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.InstrumentMethodsCount">
            <summary>
            Gets the number of instruments which have saved method data, within the
            instrument method embedded in this file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetScanStatsForScanNumber(System.Int32)">
            <summary>
            Get the scan statistics for a scan.
            For example: The retention time of the scan.
            </summary>
            <param name="scanNumber">
            scan number
            </param>
            <returns>
            Statistics for scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetSegmentedScanFromScanNumber(System.Int32,ThermoFisher.CommonCore.Data.Business.ScanStatistics)">
            <summary>
            Gets scan data for the given scan number. It will also fill <paramref name="stats"/> object, if any supplied.
            For  most detector types, this is the only data for the scan, and contains either
            profile or centroid information (depending on the type of scan performed).
            For <c>Orbitrap</c> data (FT packet formats), this returns the first set of data for the scan (typically profile).
            The second set of data (centroids) are available from the GetCentroidStream method.
            The "Segmented" format is used for SIM and SRM modes, where there may be multiple
            mass ranges (segments) of a scan.
            Full scan data has only one segment.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="stats">
            statistics for the scan
            </param>
            <returns>
            The segmented scan
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.IsCentroidScanFromScanNumber(System.Int32)">
            <summary>
            Test if a scan is centroid format
            </summary>
            <param name="scanNumber">
            Number of the scan
            </param>
            <returns>
            True if the scan is centroid format
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetAutoFilters">
            <summary>
            Gets the filter strings for this file.
            This analyses all scans types in the file.
            It may take some time, especially with data dependent files.
            Filters are grouped, within tolerance (as defined by the MS detector).
            </summary>
            <returns>A string for each auto filter from the raw file</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if this is called without first selecting an MS detector</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetInstrumentMethod(System.Int32)">
            <summary>
            Gets a text form of an instrument method, for a specific instrument.
            </summary>
            <param name="index">
            The index into the count of available instruments.
            The property "InstrumentMethodsCount",
            determines the valid range of "index" for this call.
            </param>
            <returns>
            A text version of the method. Some instruments do not log this data.
            Always test "string.IsNullOrEmpty" on the returned value.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetInstrumentData">
            <summary>
            Gets the definition of the selected instrument.
            </summary>
            <returns>data about the selected instrument, for example the instrument name</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetScanType(System.Int32)">
            <summary>
            Get a string representing the scan type (for filtering). 
            For more complete tests on filters, consider using the IScanFilter interface.
            If reading data using IRawDataPlus, you may use <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterForScanNumber(System.Int32)"/>
            A filter string (possibly entered from the UI) may be parsed using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterFromString(System.String)"/> 
            If the RT is known, and not the scan number, use ScanNumberFromRetentionTime
            to convert the time to a scan number.
            </summary>
            <param name="scanNumber">
            Scan number whose type is needed
            </param>
            <returns>
            Type of scan, in string format.
            To compare individual filter fields, the ScanDefinition class can be used.
            </returns>
            <seealso cref="T:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter"/>
            <seealso cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterForScanNumber(System.Int32)"/>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.RetentionTimeFromScanNumber(System.Int32)">
            <summary>
            Get the retention time (minutes) from a scan number
            </summary>
            <param name="scanNumber">
            Scan number
            </param>
            <returns>
            Retention time (start time) of scan
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetCentroidStream(System.Int32,System.Boolean)">
            <summary>
            Get the centroids saved with a profile scan.
            This is only valid for data types which support
            multiple sets of data per scan (such as <c>Orbitrap</c> data).
            This method does not "Centroid profile data".
            </summary>
            <param name="scanNumber">
            Scan number
            </param>
            <param name="includeReferenceAndExceptionPeaks">
            determines if peaks flagged as ref should be returned
            </param>
            <returns>
            centroid stream for specified <paramref name="scanNumber"/>.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetStatusLogForRetentionTime(System.Double)">
            <summary>
            Gets the status log nearest to a retention time.
            </summary>
            <param name="retentionTime">
            The retention time.
            </param>
            <returns>
            <see cref="T:ThermoFisher.CommonCore.Data.Business.LogEntry"/> object containing status log information.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetStatusLogEntriesCount">
            <summary>
            returns the number of entries in the current instrument's status log
            </summary>
            <returns>
            The number of available status log entries.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetStatusLogHeaderInformation">
            <summary>
            Returns the header information for the current instrument's status log.
            This defines the format of the log entries.
            </summary>
            <returns>
            The headers (list of prefixes for the strings).
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetStatusLogValues(System.Int32,System.Boolean)">
            <summary>
            Returns the Status log values for the current instrument,
            for the given status record.
            This is most likely for diagnostics or archiving.
            Applications which need logged data near a scan should use “GetStatusLogForRetentionTime”.
            Note that this does not return the “labels” for the fields.
            </summary>
            <param name="statusLogIndex">Index into table of status logs</param>
            <param name="ifFormatted">true if they should be formatted as per the 
            data definition for this field (recommended for display).
            Unformatted values may be returned with default precision (for float or double)
            Which may be better for graphing or archiving</param>
            <returns>
            The status log values.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetTuneData(System.Int32)">
            <summary>
            Gets a text form of the instrument tuning method, at a given index.
            The number of available tune methods can be obtained from GetTuneDataCount.
            </summary>
            <param name="tuneDataIndex">
            tune data index
            </param>
            <returns>
            <see cref="T:ThermoFisher.CommonCore.Data.Business.LogEntry"/> object containing tune data for specified <paramref name="tuneDataIndex"/>.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetTuneDataCount">
            <summary>
            Return the number of tune data entries.
            Each entry describes MS tuning conditions, used to acquire this file.
            </summary>
            <returns>
            The number of tune methods saved in the raw file>.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetTuneDataHeaderInformation">
            <summary>
            Return the header information for the current instrument's tune data.
            This defines the fields used for a record which defines how the instrument was tuned.
            This method only applies to MS detectors. These items can be paired with the "TuneDataValues"
            to correctly display each tune record in the file.
            </summary>
            <returns>
            The headers/>.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetTuneDataValues(System.Int32,System.Boolean)">
            <summary>
            Return tune data values for the specified index.
            This method only applies to MS detectors.
            This contains only the data values, and not the headers.
            </summary>
            <param name="tuneDataIndex">
            index into tune tables
            </param>
            <param name="ifFormatted">
            true if formatting should be done.
            Normally you would set “ifFormatted” to true,
            to format based on the precision defined in the header.
            Setting this to false uses default number formatting.
            This may be better for diagnostic charting,
            as numbers may have higher precision than the default format.
            </param>
            <returns>
            The tune data
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.Path">
            <summary>
            Gets the path to original data.
            A raw file may have been moved or translated to other formats.
            This property always returns the path (folder) where the file was created (acquired)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.FileName">
            <summary>
            Gets the name of acquired file (excluding path).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.SelectInstrument(ThermoFisher.CommonCore.Data.Business.Device,System.Int32)">
            <summary>
            Choose the data stream from the data source.
            This must be called before reading data from a detector (such as chromatograms or scans).
            You may call <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetInstrumentCountOfType(ThermoFisher.CommonCore.Data.Business.Device)"/> to determine if there is at
            least one instrument of the required device type.
            </summary>
            <param name="instrumentType">
            Type of instrument
            </param>
            <param name="instrumentIndex">
            Stream number (1 based)
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.SelectedInstrument">
            <summary>
            Gets the instrument as last set by a call to <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.SelectInstrument(ThermoFisher.CommonCore.Data.Business.Device,System.Int32)"/>.
            If this has never been set, returns null.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.CreationDate">
            <summary>
            Gets the date when this data was created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.CreatorId">
            <summary>
            Gets the name of person creating data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.SampleInformation">
            <summary>
            Gets various details about the sample (such as comments).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.InstrumentCount">
            <summary>
            Gets the number of instruments (data streams) in this file.
            For example, a file with an MS detector and a 4 channel UV may have an instrument
            count of 2. To find out how many instruments there are of a particular category
            call <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetInstrumentCountOfType(ThermoFisher.CommonCore.Data.Business.Device)"/> with the desired instrument type.
            Instrument count related methods could, for example, be used to format
            a list of instruments available to select in the UI of an application.
            To start reading data from a particular instrument, call <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.SelectInstrument(ThermoFisher.CommonCore.Data.Business.Device,System.Int32)"/>.
            </summary>
            <seealso cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetInstrumentType(System.Int32)"/>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.InAcquisition">
            <summary>
            Gets a value indicating whether the file is being acquired (not complete).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetInstrumentCountOfType(ThermoFisher.CommonCore.Data.Business.Device)">
            <summary>
            Get the number of instruments (data streams) of a certain classification.
            For example: the number of UV devices which logged data into this file.
            </summary>
            <param name="type">
            The device type to count
            </param>
            <returns>
            The number of devices of this type
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetChromatogramData(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32)">
            <summary>
            Create a chromatogram from the data stream
            </summary>
            <param name="settings">
            Definition of how the chromatogram is read
            </param>
            <param name="startScan">
            First scan to read from. -1 for "all data"
            </param>
            <param name="endScan">
            Last scan to read from. -1 for "all data"
            </param>
            <returns>
            Chromatogram points
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException">
            Thrown if the selected device is of a type that does not support chromatogram generation</exception>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException">
            Thrown if filters are sent (for MS chromatograms) which cannot be parsed</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetChromatogramData(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Create a chromatogram from the data stream
            </summary>
            <param name="settings">
            Definition of how the chromatogram is read
            </param>
            <param name="startScan">
            First scan to read from. -1 for "all data"
            </param>
            <param name="endScan">
            Last scan to read from. -1 for "all data"
            </param>
            <param name="toleranceOptions">
            For mass range or base peak chromatograms,
            if the ranges have equal low and high mass values (within 1.0E-6),
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses.
            if this is set to "null" then the tolerance is defaulted to +/- 0.5.
            </param>
            <returns>
            Chromatogram points
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException">
            Thrown if the selected device is of a type that does not support chromatogram generation</exception>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException">
            Thrown if filters are sent (for MS chromatograms) which cannot be parsed</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetInstrumentType(System.Int32)">
            <summary>
            Gets the device type for an instrument data stream
            </summary>
            <param name="index">
            The data stream
            </param>
            <returns>
            The device at type the index
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetAllInstrumentNamesFromInstrumentMethod">
            <summary>
            Gets names of all instruments, which have a method stored in the raw file's copy of the instrument method file.
            These names are "Device internal names" which map to storage names within
            an instrument method, and other instrument data (such as registry keys).
            Use "GetAllInstrumentFriendlyNamesFromInstrumentMethod" (in IRawDataPlus) to get display names
            for instruments.
            </summary>
            <returns>
            The instrument names.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.IsOpen">
            <summary>
            Gets a value indicating whether the data file was successfully opened.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawData.IncludeReferenceAndExceptionData">
            <summary>
            Gets or sets a value indicating whether reference and exception peaks
            should be returned (by default they are not).
            Reference and exception peaks are internal mass calibration data within a scan.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful when the raw file is InAcquisition when opened,
            or on the last refresh call. After acquisition is completed
            further calls have no effect.
            <para>
            For example, the value of "LastSpectrum" in the Run Header of a detector may be 60 after a refresh call.
            Even after new scans become acquired, this value will remain at 60, from the application's view of the data,
            until RefreshViewOfFile is called again. If GetRunHeader is called again, the number of scans may now be
            a larger value, such as 100</para>
            </summary>
            <returns>
            true, if refresh was OK.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetTrailerExtraHeaderInformation">
            <summary>
            Gets the trailer extra header information. This is common across all scan numbers.
            This defines the format of additional data logged by an MS detector, at each scan.
            For example, a particular detector may wish to record "analyzer 3 temperature" at each scan,
            for diagnostic purposes. Since this is not a defined field in "ScanHeader" it would be created
            as a custom "trailer" field for a given instrument. The field definitions occur only once,
            and apply to all trailer extra records in the file. In the example given,
            only the numeric value of "analyzer 3 temperature" would be logged with each scan,
            without repeating the label.
            </summary>
            <returns>
            The headers defining the "trailer extra" record format.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetTrailerExtraValues(System.Int32,System.Boolean)">
            <summary>
            Gets the Trailer Extra values for the specified scan number. 
            If <paramref name="ifFormatted"/> = true, then the values will be formatted as per the header settings.
            </summary>
            <param name="scanNumber">
            scan whose trailer data is needed
            </param>
            <param name="ifFormatted">
            true if the data should be formatted
            </param>
            <returns>
            The strings representing trailer data.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetTrailerExtraInformation(System.Int32)">
            <summary>
            Gets the array of headers and values for this scan number.
            The values are formatted as per the header settings.
            </summary>
            <param name="scanNumber">
            The scan for which this information is needed
            </param>
            <returns>
            Extra information about the scan
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawData.GetSegmentEventTable">
            <summary>
            Gets the segment event table for the current instrument.
            This table indicates planned scan types for the MS detector.
            It is usually created from an instrument method, by the detector.
            With data dependent or custom scan types, this will not be a complete
            list of scan types used within the file.
            If this object implements the derived IRawDataPlus interface, then
            This same data can be obtained in object format (instead of string) with the IRawDataPlus
            property "ScanEvents"
            </summary>
            <returns>A two dimensional array of events. The first index is segment index (segment number-1).
            The second is event index (event number -1) within the segment.</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus">
            <summary>
            The RawDataPlus interface. Provides access to raw data.
            This extends IRawData, adding new features which were introduced at "Platform 3.0"
            plus access to some additional content from earlier raw file versions.
            This is a disposable interface, as an implementation may hold an active file,
            database or other protocol connection.
            Many interfaces returned from implementations of this interface may rely
            on an active file, database or protocol connection.
            Do not dispose of this object until interfaces (especially enumerators)
            returned from it are no longer in use.
            All value type returns from this interface are safe against the underlying file being closed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.FileHeader">
            <summary>
            Gets the raw file header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.RunHeaderEx">
            <summary>
            Gets extended the run header details.
            All properties of the returned interface which end in "Count" may return -1        
            if that counter is not valid for the selected device type. For example: TuneDataCount when called on Device.Other
            </summary>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.AutoSamplerInformation">
            <summary>
            Gets the auto sampler (tray) information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilters">
            <summary>
            Calculate the filters for this raw file, and return as an array.
            </summary>
            <returns>Auto generated list of unique filters</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFiltersForScanRange(System.Int32,System.Int32)">
            <summary>
            Calculate the filters for this raw file within the range of scans supplied, and return as an array.
            </summary>
            <param name="startScan">First scan to analyze</param>
            <param name="endScan">Last scan to analyze</param>
            <returns>
            Auto generated list of unique filters
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterForScanNumber(System.Int32)">
            <summary>
            Get the filter (scanning method) for a scan number.
            This returns the scanning method in the form of a filter rule set, so
            that it can be used to select similar scans (for example in a chromatogram).
            This method is only defined for MS detectors.
            Calling for other detectors or with no selected detector is a coding
            error which may result in a null return or exceptions, depending on the implementation.
            </summary>
            <param name="scan">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter"/>.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterFromString(System.String)">
            <summary>
            Get a filter interface from a string. Parses the supplied string to a set of filtering rules.
            </summary>
            <param name="filter">
            The filter string.
            </param>
            <returns>
            An interface representing the filter fields, converted from the supplied string.
            If the string is not a valid format, this may return null.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.CreateFilterFromScanEvent(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            Get a filter interface from a scan event interface.
            Permits filtering to be done based on programmed events, such as
            an item from the "ScanEvents" table,
            or from constructed data using <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder"/>.
            This method initializes the filter based on the current raw file
            (for example: mass precision)
            </summary>
            <param name="scanEvent">
            The event data.
            </param>
            <returns>
            An interface representing the filter fields, converted from the supplied event.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterFromString(System.String,System.Int32)">
            <summary>
            Get a filter interface from a string, with a given mass precision.
            Parses the supplied string.
            </summary>
            <param name="filter">
            The filter string.
            </param>
            <param name="precision">Precisions of masses (number of decimal places)</param>
            <returns>
            An interface representing the filter fields, converted from the supplied string.
            If the string is not a valid format, this may return null.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Obtain an interface to iterate over a scans which match a specified filter.
            The iterator is initialized at "scan 0" such that "GetNext" will return the first matching scan in the file.
            This is a low level version of <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </summary>
            <param name="filter">Filter, which all returned scans match.
            This filter may be created from a string using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterFromString(System.String,System.Int32)"/></param>
            <returns>An iterator which can step back and forth over scans matching a given filter.</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Get a filtered scan enumerator, to obtain the collection of scans matching given filter rules.
            </summary>
            <param name="filter">The filter, which all enumerated scans match.
            This filter may be created from a string using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterFromString(System.String,System.Int32)"/>
            </param>
            <returns>
            An enumerator which can be used to "foreach" over all scans in a file, which match a given filter.
            Note that each "step" through the enumerator will access further data from the file.
            To get a complete list of matching scans in one call, the "ToArray" extension can be called,
            but this will result in a delay as all scans in the file are analyzed to return this array.
            For fine grained iterator control, including "back stepping" use <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumeratorOverTime(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Double,System.Double)">
            <summary>
            Get a filtered scan enumerator, to obtain the collection of scans matching given filter rules,
            over a given time range.
            </summary>
            <param name="filter">
            The filter, which all enumerated scans must match.
            This filter may be created from a string using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilterFromString(System.String,System.Int32)"/>
            </param>
            <param name="startTime">
            The start Time.
            </param>
            <param name="endTime">
            The End Time.
            </param>
            <returns>
            An enumerator which can be used to "foreach" over all scans in a time range, which match a given filter.
            Note that each "step" through the enumerator will access further data from the file.
            To get a complete list of matching scans in one call, the "ToArray" extension can be called,
            but this will result in a delay as all scans in the time range are analyzed to return this array.
            For fine grained iterator control, including "back stepping" use <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.HasInstrumentMethod">
            <summary>
            Gets a value indicating whether this file has an instrument method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.HasMsData">
            <summary>
            Gets a value indicating whether this file has MS data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.ScanEvents">
            <summary>
            Gets the scan events.
            This is the set of events which have been programmed in advance of
            collecting data (based on the MS method).
            This does not analyze any scan data.
            </summary>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.UserLabel">
            <summary>
            Gets the set of user labels. These are labels for "user columns" in the sample information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetScanEventForScanNumber(System.Int32)">
            <summary>
            Gets the scan event details for a scan. Determines how this scan was programmed.
            </summary>
            <param name="scan">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent"/> interface, to get detailed information about a scan.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetScanEventStringForScanNumber(System.Int32)">
            <summary>
            Gets the scan event as a string for a scan.
            </summary>
            <param name="scan">
            The scan number.
            </param>
            <returns>
            The event as a string.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetErrorLogItem(System.Int32)">
            <summary>
            Gets an entry from the instrument error log.
            </summary>
            <param name="index">
            Zero based index.
            The number of records available is RunHeaderEx.ErrorLogCount </param>
            <returns>An interface to read a specific log entry</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.StatusLogPlottableData">
            <summary>
            Gets the labels and index positions of the status log items which may be plotted.
            That is, the numeric items.
            Index is a zero based index into the log record (the array returned by GetStatusLogHeaderInformation)
            Labels names are returned by "Key" and the index into the log record is "Value".
            </summary>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetStatusLogAtPosition(System.Int32)">
            <summary>
            Gets the status log data, from all log entries, based on a specific position in the log record.
            For example: "position" may be selected from one of the key value pairs returned from <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.StatusLogPlottableData"/>
            in order to create a trend plot of a particular value.
            The interface returned has an array of retention times and strings.
            If the position was selected by using <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.StatusLogPlottableData"/>, then the strings may be converted "ToDouble" to get
            the set of numeric values to plot.
            </summary>
            <param name="position">
            The position within the list of available status log values.
            </param>
            <returns>
            An interface containing the times and logged values for the selected status log field.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetAllInstrumentFriendlyNamesFromInstrumentMethod">
            <summary>
            Get all instrument friendly names from the instrument method.
            These are the "display names" for the instruments.
            </summary>
            <returns>
            The instrument friendly names.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.ExportInstrumentMethod(System.String,System.Boolean)">
            <summary>
            Export the instrument method to a file.
            Because of the many potential issues with this, use with care, especially if
            adding to a customer workflow.
            Try catch should be used with this method.
            Not all implementations may support this (some may throw NotImplementedException).
            .Net exceptions may be thrown, for example if the path is not valid.
            Not all instrument methods can be exported, depending on raw file version, and how
            the file was acquired. If the "instrument method file name" is not present in the sample information,
            then the exported data may not be a complete method file.
            Not all exported files can be read by an instrument method editor.
            Instrument method editors may only be able to open methods when the exact same list
            of instruments is configured.
            Code using this feature should handle all cases.
            </summary>
            <param name="methodFilePath">
            The method file path.
            </param>
            <param name="forceOverwrite">
            Force over write. If true, and file already exists, attempt to delete existing file first.
            If false: UnauthorizedAccessException will occur if there is an existing read only file.
            </param>
            <returns>True if the file was saved. False, if no file was saved, for example,
            because there is no instrument method saved in this raw file.</returns>
            <seealso cref="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.HasInstrumentMethod"/>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetScanDependents(System.Int32,System.Int32)">
            <summary>
            Get scan dependents.
            Returns a list of scans, for which this scan was the parent.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="filterPrecisionDecimals">
            The filter precision decimals.
            </param>
            <returns>
            Information about how data dependent scanning was performed.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetCompoundNames">
            <summary>
            Gets the unique compound names as arrays of strings.
            </summary>
            <returns>
            The Compound Names.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetCompoundNamesForScanRange(System.Int32,System.Int32)">
            <summary>
            Gets the unique compound names within the range of scans supplied, and return as an array.
            </summary>
            <param name="startScan">First scan to analyze</param>
            <param name="endScan">Last scan to analyze</param>
            <returns>
            The Compound Names.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetCompoundNames(System.String)">
            <summary>
            Gets the unique compound names as arrays of strings by given filter.
            </summary>
            <param name="scanFilter">
            The scan Filter.
            </param>
            <returns>
            The compound names.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetScanFiltersFromCompoundName(System.String)">
            <summary>
            Get the scan filters which match a compound name.
            When implemented against raw files, this may have a performance impact on applications.
            For files which have a programmed event table, this will be fast,
            as the information can be taken directly from the events.
            If there is no event table, then event data is checked for every scan in the file (slower).
            </summary>
            <param name="compoundName">
            The compound name.
            </param>
            <returns>
            The array of matching scan filters (in string format).
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetScanFiltersFromCompoundNames(System.String[])">
            <summary>
            Get the scan filters which match each compound name.
            When implemented against raw files, this may have a performance impact on applications.
            For files which have a programmed event table, this will be fast,
            as the information can be taken directly from the events.
            If there is no event table, then event data is checked for every scan in the file (slower).
            </summary>
            <param name="compoundNames">The compound names.</param>
            <returns>
            The arrays of matching scan filters (in string format) for each compound.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetChromatogramDataEx(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx[],System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Create a chromatogram from the data stream.
            Extended version:
            Parameters include option for component names.
            Includes base peak data for each scan.
            </summary>
            <param name="settings">
            Definition of how the chromatogram is read
            </param>
            <param name="startScan">
            First scan to read from. -1 for "all data"
            </param>
            <param name="endScan">
            Last scan to read from. -1 for "all data"
            </param>
            <param name="toleranceOptions">
            For mass range or base peak chromatograms,
            if the ranges have equal mass values,
            then <paramref name="toleranceOptions"/> are used to determine a band
            subtracted from low and added to high to search for matching masses.
            For example: with 5 ppm tolerance, the caller can pass a single mass value (same low and high) for each mass range,
            and get chromatograms of those masses +/- 5 ppm.
            </param>
            <returns>
            Chromatogram points
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException">
            Thrown if the selected device is of a type that does not support chromatogram generation</exception>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException">
            Thrown if filters are sent (for MS chromatograms) which cannot be parsed</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetChromatogramDataEx(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx[],System.Int32,System.Int32)">
            <summary>
            Create a chromatogram from the data stream.
            Extended version:
            Parameters include option for component names.
            Includes base peak data for each scan.
            </summary>
            <param name="settings">
            Definition of how the chromatogram is read
            </param>
            <param name="startScan">
            First scan to read from. -1 for "all data"
            </param>
            <param name="endScan">
            Last scan to read from. -1 for "all data"
            </param>
            <returns>
            Chromatogram points
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.RequiresChromatographicDeviceException">
            Thrown if the selected device is of a type that does not support chromatogram generation</exception>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.InvalidFilterFormatException">
            Thrown if filters are sent (for MS chromatograms) which cannot be parsed</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.TestScan(System.Int32,System.String)">
            <summary>
            Test if a scan passes a filter.
            If the set of "all matching scans in a file" is required, consider using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/> or <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumeratorOverTime(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Double,System.Double)"/>
            </summary>
            <param name="scan">the scan number</param>
            <param name="filter">the filter to test</param>
            <returns>True if this scan passes the filter</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetTrailerExtraValue(System.Int32,System.Int32)">
            <summary>
            Returns the (unformatted) Trailer Extra value for a specific field in the specified scan number. 
            The object type depends on the field type, as returned by 
            GetTrailerExtraHeaderInformation.
            This offers higher performance, where numeric values are needed,
            as it avoids translation to and from strings.
            <c>
            Numeric values (where the header for this field returns "True" for IsNumeric)
            can always be cast up to double.
            The integer numeric types SHORT and USHORT are returned as short and ushort.
            The integer numeric types LONG and ULONG are returned as int and uint.
            All logical values (Yes/No, True/false, On/Off) are returned as "bool",
            where "true" implies "yes", "true" or "on".
            Char type is returned as "sbyte".
            Uchar type is returned as "byte".
            String types WCHAR_STRING and CHAR_STRING types are returned as "string".
            </c>
            </summary>
            <param name="scanNumber">scan who's data is needed</param>
            <param name="field">zero based field number in the record, as per header </param>
            <returns>Value of requested field</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetTrailerExtraValues(System.Int32)">
            <summary>
            Returns the (unformatted) Trailer Extra values for all  field in the specified scan number. 
            The object types depend on the field types, as returned by 
            GetTrailerExtraHeaderInformation.
            Uses for this include efficient copy of data from one file to another, as
            it eliminates translation of numeric data to and from strings.
            <c>
            Numeric values (where the header for this field returns "True" for IsNumeric)
            can always be cast up to double.
            The integer numeric types SHORT and USHORT are returned as short and ushort.
            The integer numeric types LONG and ULONG are returned as int and uint.
            All logical values (Yes/No, True/false, On/Off) are returned as "bool",
            where "true" implies "yes", "true" or "on".
            Char type is returned as "sbyte".
            Uchar type is returned as "byte".
            String types WCHAR_STRING and CHAR_STRING types are returned as "string".
            </c>
            </summary>
            <param name="scanNumber">scan who's data is needed</param>
            <returns>Values of all fields</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetTuneDataValues(System.Int32)">
            <summary>
            Returns the (unformatted) Tune Data values for all fields in the specified record number. 
            The object types depend on the field types, as returned by 
            GetTuneDataHeaderInformation.
            Uses for this include efficient copy of data from one file to another, as
            it eliminates translation of numeric data to and from strings.
            <c>
            Numeric values (where the header for this field returns "True" for IsNumeric)
            can always be cast up to double.
            The integer numeric types SHORT and USHORT are returned as short and ushort.
            The integer numeric types LONG and ULONG are returned as int and uint.
            All logical values (Yes/No, True/false, On/Off) are returned as "bool",
            where "true" implies "yes", "true" or "on".
            Char type is returned as "sbyte".
            Uchar type is returned as "byte".
            String types WCHAR_STRING and CHAR_STRING types are returned as "string".
            </c>
            </summary>
            <param name="index">zero based index into tune records who's data is needed</param>
            <returns>Values of all fields</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetStatusLogEntry(System.Int32)">
            <summary>
            Gets the (raw) status log data at a given index in the log.
            Deigned for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="index">Index (from 0 to "RunHeaderEx.StatusLogCount -1 ))</param>
            <returns>Log data at the given index</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetStatusLogEntry(System.Double)">
            <summary>
            Gets the (raw) status log data at a given retention time in the log.
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="retentionTime">Retention time/</param>
            <returns>Log data at the given time</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown if no device has been selected</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetAdvancedPacketData(System.Int32)">
            <summary>
            Get the advanced LT/FT formats data, such as the noise data, baseline data, label peaks and frequencies
            Common uses include:
            An application exporting mass spectra to a new raw file.
            Special calculations on scans (including averaging, recalibration etc.)
            </summary>
            <param name="scanNumber">The scan number.</param>
            <returns>
            Returns an IAdvancedPacketData object which contains noise data, baseline data, label peaks and frequencies for specified <paramref name="scanNumber" />.
            It might return empty arrays for scans which do not have these data.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.ComputerName">
            <summary>
            Gets the name of the computer, used to create this file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IStatusLogEntry">
            <summary>
            Interface to define low level access to a status log entry.
            This interface is intended for operations which need efficient access to
            the data, without intermediate string formatting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IStatusLogEntry.Time">
            <summary>
            Gets the time stamp of this log entry.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IStatusLogEntry.Values">
            <summary>
            Gets the values for this log entry.
            Returns the (unformatted) Status Log Data values for
            all fields in the log.
            The object types depend on the field types, as returned by 
            GetStatusLogHeaderInformation.
            These values are in the same order as the headers.
            Uses for this include efficient copy of data from one file to another, as
            it eliminates translation of numeric data to and from strings.
            <c>
            Numeric values (where the header for this field returns "True" for IsNumeric)
            can always be cast up to double.
            The integer numeric types SHORT and USHORT are returned as short and ushort.
            The integer numeric types LONG and ULONG are returned as int and uint.
            All logical values (Yes/No, True/false, On/Off) are returned as "bool",
            where "true" implies "yes", "true" or "on".
            Char type is returned as "sbyte".
            Uchar type is returned as "byte".
            String types WCHAR_STRING and CHAR_STRING types are returned as "string".
            </c>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawFileThreadAccessor">
            <summary>
            Defines an object which can create accessors for multiple threads to access the same raw data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileThreadAccessor.CreateThreadAccessor">
            <summary>
            This interface method creates a thread safe access to raw data, for use by a single thread.
            Each time a new thread (async call etc.) is made for accessing raw data, this method must be used to
            create a private object for that thread to use.
            This interface does not require that the application performs any locking.
            In some implementations this may have internal locking (such as when based on a real time file, which is continually changing in size),
            and in some implementations it may be lockless.
            </summary>
            <returns>An interface which can be used by a thread to access raw data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawFileThreadManager">
            <summary>
            Defines managed access to raw data, for multiple threads.
            An object implementing this interface "owns" the underlying raw data, and will close any associated file
            when disposed. All created thread accessors must no longer be in used, when this object is disposed.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtensions">
            <summary>
            Defines additional raw data access methods, including diagnostic data in FT format scans.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtensions.GetAdditionalScanData(System.Int32)">
            <summary>
            Gets additional (binary) data from a scan.
            The format of this data is custom (per instrument) and can be decoded into
            objects by a specific decoder for the detector type.
            <seealso cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtensions.GetExtendedScanData(System.Int32)"/>
            </summary>
            <param name="scan">Scan whose data is needed</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtensions.GetExtendedScanData(System.Int32)">
            <summary>
            Gets additional data from a scan, formatted as a series of data blocks.
            The format of this data is custom (per instrument) and can be decoded into
            objects by a specific decoder for the detector type.
            If the data is not in a detectable "data block" format, then this data is returned as "Not valid".
            Data of a format not known to this interface may be retrieved by using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtensions.GetExtendedScanData(System.Int32)"/>
            </summary>
            <param name="scan">Scan whose data is needed</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtensions.GetSortedStatusLogEntry(System.Int32)">
            <summary>
            Gets the (raw) status log data at a given index in the sorted log.
            This form of the log removes duplicate and out of order times
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="index">Index  (from 0 to "GetStatusLogEntriesCount() -1")</param>
            <returns>Log data at the given index</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawDataExtended">
            <summary>
            The IRawDataExtended interface. Provides access to raw data.
            This extends IRawDataPlus, adding "IRawDataExtensions".
            This is a disposable interface, as an implementation may hold an active file,
            database or other protocol connection.
            Many interfaces returned from implementations of this interface may rely
            on an active file, database or protocol connection.
            Do not dispose of this object until interfaces (especially enumerators)
            returned from it are no longer in use.
            All value type returns from this interface are safe against the underlying file being closed.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter">
            <summary>
            The Raw File Writer interface.
            Used for writing raw files to disk.
            Upon creating an instance of IRawFileWriter, the raw file name is provided and checked for existence.  
            If that file name already exists, the new instance creates a raw file name appended with a unique date time stamp.
            Many methods return true on success, and false on fail.
            The IFileError interface can be used to get error information.
            HasError is set on that interface for a non recoverable error, and the ErrorMessage is set
            to one or more lines of error data.
            If there is an error, the WarningMessage contains a multiple line diagnostic log.
            This may contain information and warning lines.
            HasWarning is set if at least one line of the log contains a warning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.IsError">
            <summary>
            Gets a value indicating whether an error occurred during writing.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.ShouldSaveChanges">
            <summary>
            Gets or sets a value indicating whether the writer should save changes.  True by default.
            If false when a save is called, data will not be written to disk and any data written previously will remain unchanged.
            The writer will still need to be disposed regardless of ShouldSaveChanges status.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.RawFileName">
            <summary>
            Gets the raw file name being written.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.CheckSum">
            <summary>
            Gets the calculated checksum for this raw file. Only calculated after a save has occurred.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.RefreshViewOfFile">
            <summary>
            Refresh view of the raw file.  Reloads the RawFileInfo object and the virtual controllers run headers from shared memory.  
            Does not read actual data from any temporary files.
            </summary>
            <returns>
            True if successfully reloaded internal memory buffers.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.GetConnectedDevices">
            <summary>
            Gets the set of devices currently connected to the raw file.
            This data is only updated after calling "RefreshViewOfFile".
            Devices may be added by external processes (especially during data acquisition).
            </summary>
            <returns>An array of device types. The length of the array is equal to the number of detectors
            which have registered with the raw file.
            Some device may have incomplete registration at the time of the call.
            In this case "Device.None" is recorded</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.UpdateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.IFileHeaderUpdate)">
            <summary>
            Update the raw file header with the file header values passed in.  
            Only updates object values in memory, does not write to disk.
            A default FileHeader is created with every new writer instance.
            </summary>
            <param name="fileHeader">
            The file header object with values to use.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.UpdateAutoSampler(ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation)">
            <summary>
            Update the raw file auto sampler information with the auto sampler information values passed in.
            Only updates object values in memory, does not write to disk.
            </summary>
            <param name="autoSamplerInformation">
            The auto sampler information.
            </param>
            <returns>
            True if successfully updated auto sampler information values.
            If false: Check errors.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.UpdateSequenceRow(ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation)">
            <summary>
            Update the raw file sequence row with the sample information values passed in.
            Only updates object values in memory, does not write to disk.
            </summary>
            <param name="sequenceRowSampleInfo">
            The sequence Row Sample Information.
            </param>
            <returns>
            True if successfully updated raw file values.
            If false: Check errors (IFileError).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.UpdateCreatorLogon(System.String)">
            <summary>
            Update creator logon value for the raw file being written.
            </summary>
            <param name="creatorLogon">
            The creator logon.
            </param>
            <returns>
            True if successfully updated value.
            If false: Check errors (IFileError).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.UpdateCreatorId(System.String)">
            <summary>
            Update creator id value for the raw file being written.
            </summary>
            <param name="creatorId">
            The creator id.
            </param>
            <returns>
            True if successfully updated value.
            If false: Check errors (IFileError).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.UpdateUserLabels(System.String[])">
            <summary>
            Update all user labels for the raw file being written.
            Max 5 labels. If array parameter is > 5 then all values are ignored.
            </summary>
            <param name="userLabels">
            The user label.
            </param>
            <returns>
            True if successfully updated value.
            If false: Check errors (IFileError).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.UpdateUserLabel(System.String,System.Int32)">
            <summary>
            Update specific user label value at index for the raw file being written.
            </summary>
            <param name="userLabel">
            The user label.
            </param>
            <param name="index">
            The index into labels array to update.
            </param>
            <returns>
            True if successfully updated value.
            If false: Check errors (IFileError).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.UpdateCreationDate(System.DateTime)">
            <summary>
            Update creation date for the raw file being written.
            </summary>
            <param name="creationDate">
            The creation date.
            </param>
            <returns>
            True if successfully updated value.
            If false: Check errors (IFileError).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.AddAuditEntry(System.DateTime,System.Int64,System.String)">
            <summary>
            Adds an audit data entry to the audit trail list of the raw file.
            </summary>
            <param name="timeChanged">
            The time changed.
            </param>
            <param name="whatChanged">
            What changed by integer value.
            </param>
            <param name="comment">
            The comment.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            True if successfully updated value.
            If false: Check errors (IFileError).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.StoreInstrumentMethod(System.String,System.String[],System.String[],System.Boolean)">
            <summary>
            Saves the instrument method into the raw file
            </summary>
            <param name="instrumentMethodPath">The instrument method file path.</param>
            <param name="storageNames">List of virtual instrument storage names.</param>
            <param name="descriptions">List of virtual instrument descriptions.</param>
            <param name="shouldBeDeleted">
            [Optional] it has a default value of true.<para/>
            The should be deleted flag indicating whether the temporary instrument method should be removed after the raw file writer is closed.<para/>
            </param>
            <returns>True if instrument method successfully saved to raw file.
            If false: Check errors (IFileError).</returns>         
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawFileWriter.SaveRawFile(System.Boolean)">
            <summary>
            Saves raw file to disk with current values.  Should be called after all updates are finished.  
            </summary>
            <param name="partialSave">
            True only if saving part of the raw file for the acquisition raw file.  
            On partial save, only raw file header, auto sampler information, sequence row information, and raw file info are written.  No scan data written.
            </param>
            <returns>
            True if file successfully written to disk.
            If false: Check errors (IFileError).
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead">
            <summary>
            Defines a way to get an MS scan, which is
            permitted to hold a reference to the internal (unmanaged) data
            of a scan. This can be an advantage when an application
            needs several parts of a scan. A disadvantage is that is must be disposed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead.ScanIndex">
            <summary>
            Gets the scan index
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead.ReadSegmentedScan">
            <summary>
            Reads the segmented scan (centroid or profile data)
            </summary>
            <returns>Interface to read the scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead.ReadSimplifiedScan">
            <summary>
            This method is similar to
            GetSegmentedScanFromScanNumber or GetSimplifiedCentroids in the IRawData interface.
            The method returns only the mass and intensity values from
            the scan data for a scan, reading form the centroids if FT data is available.
            Values for flags etc. are not returned, saving data space and improving efficiency.
            The method is designed for improved performance in custom XIC generators.
            </summary>
            <returns>Mass and intensity values from the scan.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead.ReadCentroidStream">
            <summary>
            Gets the FT centroids
            </summary>
            <returns>Interface to read the centroids</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead.ReadNoisePackets">
            <summary>
            Gets the noise data for the FT scan
            </summary>
            <returns>Noise data for this raw scan</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead.Filter">
            <summary>
            Gets the scan filter
            </summary>
            <returns>Interface to read the filter</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead.ScanEvent">
            <summary>
            Gets the scan event
            </summary>
            <returns>Interface to read the scan event</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRawScanRead.IsFtFormatScan">
            <summary>
            Gets a value indicating whether this is an FT formatted MS scan.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRegression">
            <summary>
            General interface to regression calculations (calibration curves)
            Specific instances of this can be generated by using the factory: Calibration.CreateCalibrationCurve
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRegression.PredictedAmount(System.Double)">
            <summary>
            Find the predicted amount given a response ratio
            </summary>
            <param name="responseRatio">The response ratio of the peak being measured</param>
            <returns>The calculated amount for this response ratio</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRegression.PredictedResponseRatio(System.Double)">
            <summary>
            Find the response ratio which represents a calculated amount.
            This is the inverse of the calculation needed for quantitation.
            </summary>
            <param name="amount">The known amount</param>
            <returns>The response ratio which would represent this amount</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRegression.RSquared">
            <summary>
            Gets a statistical result from a regression calculation.
            For curves not supporting this, return -1
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRegression.Equation">
            <summary>
            Gets the calibration equation (such as "y=mx+c")
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRegression.Ok">
            <summary>
            Gets a value indicating whether this regression is fitted correctly.
            After constructing a calibration object, it can only be used if "Ok".
            For example: if there are no calibration levels, Ok will be false.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IRegression.PreparePlotData(System.Int32,System.Boolean,System.Double)">
            <summary>
            Create a table of data to plot on a calibration curve
            </summary>
            <param name="requiredPoints">The number of calibration curve points to supply</param>
            <param name="useMaxValue">If useMaxValue is true, plotting is performed between 0 and the
            larger of the base amount of the largest level and maxValue.</param>
            <param name="maxValue">Maximum value for the curve (if useMaxValue is set)</param>
            <returns>The generated curve data, or null if there are insufficient required points specified</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRegression.MaxXValue">
            <summary>
            Gets the highest X value on the calibration curve
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRegression.MaxYValue">
            <summary>
            Gets the highest Y value on the calibration curve
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader">
            <summary>
            Information about this device stream
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.SpectraCount">
            <summary>
            Gets the count of recorded spectra
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.StatusLogCount">
            <summary>
            Gets the count of status log entries
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.TuneDataCount">
            <summary>
            Gets the count of tune data entries
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.ErrorLogCount">
            <summary>
            Gets the count of error log entries
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.TrailerScanEventCount">
            <summary>
            Gets the count of "scan events"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.TrailerExtraCount">
            <summary>
            Gets the count of "trailer extra" records.
            Typically, same as the count of scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.InAcquisition">
            <summary>
            Gets a value indicating whether this file is being created.
            0: File is complete. All other positive values: The file is in acquisition.
            Negative values are undefined.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.MassResolution">
            <summary>
            Gets the mass resolution of this instrument.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.ExpectedRunTime">
            <summary>
            Gets the expected data acquisition time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.ToleranceUnit">
            <summary>
            Gets the tolerance units
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.FilterMassPrecision">
            <summary>
            Gets the number of digits of precision suggested for formatting masses
            in the filters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.Comment1">
            <summary>
            Gets the first comment about this data stream.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.Comment2">
            <summary>
            Gets the second comment about this data stream.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.FirstSpectrum">
            <summary>
            Gets the first spectrum (scan) number (typically 1).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.LastSpectrum">
            <summary>
            Gets the last spectrum (scan) number.
            If this is less than 1, then there are no scans acquired yet.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.StartTime">
            <summary>
            Gets the time of first scan in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.EndTime">
            <summary>
            Gets the time of last scan in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.LowMass">
            <summary>
            Gets the lowest recorded mass in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.HighMass">
            <summary>
            Gets the highest recorded mass in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.MaxIntensity">
            <summary>
            Gets the max intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IRunHeader.MaxIntegratedIntensity">
            <summary>
            Gets the max integrated intensity.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation">
            <summary>
            The SampleInformation interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.Comment">
            <summary>
            Gets or sets the comment about sample (from user).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.SampleId">
            <summary>
            Gets or sets the Code to identify sample.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.SampleName">
            <summary>
            Gets or sets the description of sample.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.Vial">
            <summary>
            Gets or sets the vial or well form auto sampler.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.InjectionVolume">
            <summary>
            Gets or sets the amount of sample injected.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.Barcode">
            <summary>
            Gets or sets bar code from scanner (if attached).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.BarcodeStatus">
            <summary>
            Gets or sets the bar code status.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.CalibrationLevel">
            <summary>
            Gets or sets a name to identify the Calibration or QC level associated with this sample.
            Empty if this sample does not contain any calibration compound.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.DilutionFactor">
            <summary>
            Gets or sets the bulk dilution factor (volume correction) of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.InstrumentMethodFile">
            <summary>
            Gets or sets the instrument method filename of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.RawFileName">
            <summary>
            Gets or sets the name of acquired file (excluding path).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.CalibrationFile">
            <summary>
            Gets or sets the name of calibration file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.IstdAmount">
            <summary>
            Gets or sets the ISTD amount of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.RowNumber">
            <summary>
            Gets or sets the row number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.Path">
            <summary>
            Gets or sets the path to original data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.ProcessingMethodFile">
            <summary>
            Gets or sets the processing method filename of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.SampleType">
            <summary>
            Gets or sets the type of the sample.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.SampleVolume">
            <summary>
            Gets or sets the sample volume of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.SampleWeight">
            <summary>
            Gets or sets the sample weight of this sequence row.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation.UserText">
            <summary>
            Gets or sets the collection of user text.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess">
            <summary>
            Access to data in a scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferCentroids">
            <summary>
            Gets or sets a value indicating whether, when requesting "Preferred data", the centroid stream will be returned.
            For example "<see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredMasses"/>", "<see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredIntensities"/>".
            If this property is false, or there is no centroid stream, then these methods will return
            the data from <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/>. For greater efficiency, callers should cache the return of "<see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredMasses"/>".
            Typically data processing, such as elemental compositions, should use these methods.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredMasses">
            <summary>
            Gets the Mass for default data stream (usually centroid stream, if present).
            Falls back to <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredResolutions">
            <summary>
            Gets Resolutions for default data stream (usually centroid stream, if present).
            Returns an empty array if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredNoises">
            <summary>
            Gets Noises for default data stream (usually centroid stream, if present).
            Returns an empty array if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredIntensities">
            <summary>
            Gets Intensity for default data stream (usually centroid stream, if present).
            Falls back to <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredFlags">
            <summary>
            Gets peak flags (such as saturated) for default data stream (usually centroid stream, if present).
            Falls back to <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredBasePeakMass">
            <summary>
            Gets Mass of base peak default data stream (usually centroid stream, if present).
            Falls back to <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredBasePeakResolution">
            <summary>
            Gets Resolution of base peak for default data stream (usually centroid stream, if present).
            Falls back to zero if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredBasePeakNoise">
            <summary>
            Gets Noise of base peak for default data stream (usually centroid stream, if present).
            Falls back to zero if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.PreferredBasePeakIntensity">
            <summary>
            Gets peak flags (such as saturated) for default data stream (usually centroid stream, if present).
            Falls back to <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/> data if centroid stream is not preferred or not present 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.SegmentedScanAccess">
            <summary>
            Gets The data for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.CentroidStreamAccess">
            <summary>
            Gets A second data stream for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.HasCentroidStream">
            <summary>
            Gets a value indicating whether this scan has a centroid stream.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.ScanStatisticsAccess">
            <summary>
            Gets or Header information for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.ScanType">
            <summary>
            Gets Type of scan (for filtering)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.ToleranceUnit">
            <summary>
            Gets the Tolerance value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.MassResolution">
            <summary>
            Gets the mass resolution for all scan arithmetic operations
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAccess.IsUserTolerance">
            <summary>
            Gets a value indicating whether the User Tolerance value is being used.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IExtendedScanAccess">
            <summary>
            Access to extdnded scans, which may conain charge envelope data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IExtendedScanAccess.ExtendedCentroidsAccess">
            <summary>
            Gets centroids with additional charge envelope information (when available)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanAdd">
            <summary>
            Interface to provide algorithms to add scans.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAdd.Add(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Creates a sum of two scans.
            </summary>
            <param name="firstScan">The first scan.</param>
            <param name="secondScan">The second scan</param>
            <returns>The sum"first+second"</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanCache">
            <summary>
            Caching of scans, which may be provided by an averager
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanCache.ScansCached">
            <summary>
            Gets or sets the maximum number of scans kept in a cache.
            Setting ScansCached &gt;0 will enable caching of recently read scans.
            This is useful if averaging multiple overlapping ranges of scans.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions">
            <summary>
            Options which can be used to control the Ft / Orbitrap averaging
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions.DefaultMaxChargeDeterminations">
            <summary>
            The default maximum number of peaks that may have charge determinations.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions.MaxChargeDeterminations">
            <summary>
            Gets or sets the maximum number of ions which are sent to the charge pattern calculation (starting from most intense)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions.MergeInParallel">
            <summary>
            Gets or sets a value indicating whether parallel code may be used for resampling and merging scans.
            Tuning option: Permit separate threads to be used for resampling profiles.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions.MaxScansMerged">
            <summary>
            Gets or sets the maximum number of scans which can be merged at once.
            This feature is currently not yet implemented, and the value is ignored.
            When MergeInParallel is enabled: this restricts the number of scans which are merged in each group.
            Setting this too large may result in more memory allocation for "arrays of results to merge"
            Default: 10
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions.MergeTaskBatching">
            <summary>
            Gets or sets the minimum number of Re-sample tasks per thread.
            Tuning parameter when MergeInParallel is set.
            Each scan is analyzed: Determining mass regions which contain non-zero data,
            and re-sampling the intensity data aligned to a set of output bins.
            After all scans have been re-sampled, the re-sampled data has to be merged into the final output.
            Creating re-sampled data for profiles is a fairly fast task. It may be inefficient to queue workers to
            created the merged data for each scan in the batch.
            Setting this >1 will reduce threading overheads, when averaging small batches of scans with low intensity peaks.
            Default: 2.
            This feature only affects the re-sampling, as the final merge of the re-sampled data is single threaded.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions.UseNoiseTableWhenAvailable">
            <summary>
            Gets or sets a value indicating whether to use the noise and baseline table.
            When set: The averaging algorithm calculates average noise based
            on a noise table obtained (separately) from the raw file.
            The "IRawData" interface doe not have methods to obtain
            this "noise and baseline table" from the raw file.
            So: The scan averaging algorithm (by default) uses noise information
            saved with centroid peaks when calculating the averaged noise.
            This option is only effective when data is read via the IRawDataPlus interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.FtAverageOptions"/> class. 
            default constructor
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanCreator">
            <summary>
            The ScanCreator interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanCreator.CreateSegmentedScan(System.Int32)">
            <summary>
            create segmented scan.
            </summary>
            <param name="index">
            The index into the supplied table of scans (on initialize)
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.SegmentedScan"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is outside of the scan numbers array
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanCreator.CreateCentroidStream(System.Int32)">
            <summary>
            Create a centroid stream.
            </summary>
            <param name="index">
            The index into the supplied table of scans (on construction)
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.CentroidStream"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is outside of the scan numbers array
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanCreator.Initialize(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Initialize the scan creator.
            This provides the set of scans which will be requested.
            This must only be called once.
            </summary>
            <param name="scanNumbers">
            The scan numbers.
            </param>
            <param name="cacheLimit">
            The cache limit.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus">
            <summary>
            Interface to provide algorithms to average and subtract scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus.ScanReader">
            <summary>
            Gets or sets the scan reader.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus.AverageScansInTimeRange(System.Double,System.Double,System.String,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Gets the average scan between the given times.
            </summary>
            <param name="startTime">
            start time
            </param>
            <param name="endTime">
            end time
            </param>
            <param name="filter">
            filter string
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <returns>
            the averaged scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus.AverageScansInTimeRange(System.Double,System.Double,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Gets the average scan between the given times.
            </summary>
            <param name="startTime">
            start time
            </param>
            <param name="endTime">
            end time
            </param>
            <param name="filter">
            filter string
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <returns>
            the averaged scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus.AverageScansInScanRange(System.Int32,System.Int32,System.String,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Gets the average scan between the given times.
            </summary>
            <param name="startScan">
            start scan
            </param>
            <param name="endScan">
            end scan
            </param>
            <param name="filter">
            filter string
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <returns>
            the averaged scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus.AverageScansInScanRange(System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Gets the average scan between the given times.
            </summary>
            <param name="startScan">
            start scan
            </param>
            <param name="endScan">
            end scan
            </param>
            <param name="filter">
            filter string
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <returns>
            the averaged scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus.AverageScans(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ScanStatistics},ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Calculates the average spectra based upon the list supplied.
            The application should filter the data before making this code, to ensure that
            the scans are of equivalent format. The result, when the list contains scans of 
            different formats (such as linear trap MS centroid data added to orbitrap MS/MS profile data) is undefined.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="scanStatsList">
            list of ScanStatistics
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <returns>
            The average of the listed scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus.AverageScans(System.Collections.Generic.List{System.Int32},ThermoFisher.CommonCore.Data.Business.MassOptions,System.Boolean)">
            <summary>
            Calculates the average spectra based upon the list supplied.
            The application should filter the data before making this code, to ensure that
            the scans are of equivalent format. The result, when the list contains scans of 
            different formats (such as linear trap MS centroid data added to orbitrap MS/MS profile data) is undefined.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="scans">
            list of scans to average
            </param>
            <param name="options">mass tolerance settings. If not supplied, these are default from the raw file</param>
            <param name="alwaysMergeSegments">
            Merge data from scans
            which were not scanned over a similar range.
            Only applicable when scans only have a single segment.
            By default: Scans are considered incompatible if:
            The span of the scanned mass range differs by 10%
            The start or end of the scanned mass range differs by 10%
            If this is set as "true" then any mass ranges will be merged.
            Default: false
            </param>
            <returns>
            The average of the listed scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAveragePlus.SubtractScans(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Subtracts the background scan from the foreground scan
            </summary>
            <param name="foreground">Foreground data (Left of "scan-scan" operation</param>
            <param name="background">Background data (right of"scan-scan" operation)</param>
            <param name="options"> (optional) mass tolerance settings. If not supplied, values set in "foreground" are used</param>
            <returns>The result of foreground-background</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanAverage">
            <summary>
            Interface to provide algorithms to average scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanAverage.FtOptions">
            <summary>
            Gets or sets Options For FT/Orbitrap data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAverage.GetAverageScanInTimeRange(System.Double,System.Double,System.String)">
            <summary>
            Gets the average scan between the given times.
            Mass tolerance is taken from default values in the raw file
            </summary>
            <param name="startTime">
            start time
            </param>
            <param name="endTime">
            end time
            </param>
            <param name="filter">
            filter string
            </param>
            <returns>
            the averaged scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAverage.GetAverageScanInTimeRange(System.Double,System.Double,System.String,System.Double,ThermoFisher.CommonCore.Data.Business.ToleranceMode)">
            <summary>
            Gets the average scan between the given times.
            </summary>
            <param name="startTime">
            start time
            </param>
            <param name="endTime">
            end time
            </param>
            <param name="filter">
            filter string
            </param>
            <param name="tolerance">
            mass tolerance
            </param>
            <param name="toleranceMode">
            unit of tolerance
            </param>
            <returns>
            returns the averaged scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAverage.GetAverageScanInScanRange(System.Int32,System.Int32,System.String)">
            <summary>
            Gets the average scan between the given scan numbers.
            Mass tolerance is taken from default values in the raw file
            </summary>
            <param name="startScan">
            start scan
            </param>
            <param name="endScan">
            end scan
            </param>
            <param name="filter">
            filter string
            </param>
            <returns>
            returns the averaged scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAverage.GetAverageScanInScanRange(System.Int32,System.Int32,System.String,System.Double,ThermoFisher.CommonCore.Data.Business.ToleranceMode)">
            <summary>
            Gets the average scan between the given scan numbers.
            This finds the list all scans over the scan range, which pass the supplied filter.
            The scans are then averaged, as described by <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAverage.AverageSpectra(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ScanStatistics})"/>
            </summary>
            <param name="startScan">
            start scan of the range to average
            </param>
            <param name="endScan">
            end scan of the range to average
            </param>
            <param name="filter">
            Filter string. Only scans passing this filter are averaged.
            </param>
            <param name="tolerance">
            mass tolerance, used to merge close peaks.
            </param>
            <param name="toleranceMode">
            unit of tolerance
            </param>
            <returns>
            returns the averaged scan.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanAverage.AverageSpectra(System.Collections.Generic.List{ThermoFisher.CommonCore.Data.Business.ScanStatistics})">
            <summary>
            Calculates the average spectra based upon the list supplied.
            The application should filter the data before making this code, to ensure that
            the scans are of equivalent format. The result, when the list contains scans of 
            different formats (such as linear trap MS centroid data added to orbitrap MS/MS profile data) is undefined.
            If the first scan in the list contains "FT Profile",
            then the FT data profile is averaged for each
            scan in the list. The combined profile is then centroided.
            If the first scan is profile data, but not orbitrap data:
            All scans are summed, starting from the final scan in this list, moving back to the first scan in
            the list, and the average is then computed.
            For simple centroid data formats: The scan stats "TIC" value is used to find the "most abundant scan".
            This scan is then used as the "first scan of the average".
            Scans are then added to this average, taking scans alternatively before and after
            the apex, merging data within tolerance.
            </summary>
            <param name="scanStatsList">
            list of ScanStatistics
            </param>
            <returns>
            The average of the listed scans.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanDependentDetails">
            <summary>
            The ScanDependentDetails interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanDependentDetails.ScanIndex">
            <summary>
            Gets the index of the scan.
            </summary>
            <value>
            The index of the scan.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanDependentDetails.FilterString">
            <summary>
            Gets the filter string.
            </summary>
            <value>
            The filter string.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanDependentDetails.PrecursorMassArray">
            <summary>
            Gets the precursor array.
            </summary>
            <value>
            The precursor mass array.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanDependentDetails.IsolationWidthArray">
            <summary>
            Gets the isolation width array.
            </summary>
            <value>
            The isolation width array.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanDependents">
            <summary>
            The ScanDependents interface.
            Result of call to "GetScanDependents"
            Provides a set of scan numbers which were created form a particular master scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanDependents.RawFileInstrumentType">
            <summary>
            Gets or sets the type of the raw file instrument.
            </summary>
            <value>
            The type of the raw file instrument.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanDependents.ScanDependentDetailArray">
            <summary>
            Gets or sets the scan dependent detail array.
            </summary>
            <value>
            The scan dependent detail array.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent">
            <summary>
            The ScanEvent interface.
            Determines how scans are done.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>
            The converted scanning method.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent.AccurateMass">
            <summary>
            Gets the accurate mass setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent.IsValid">
            <summary>
            Gets a value indicating whether this event is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent.IsCustom">
            <summary>
            Gets a value indicating whether this is a custom event.
            A custom event implies that any scan derived from this event could be different.
            The scan type must be inspected to determine the scanning mode, and not the event.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent.SourceFragmentationMassRangeCount">
            <summary>
            Gets the source fragmentation mass range count.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent.GetSourceFragmentationMassRange(System.Int32)">
            <summary>
            Get the source fragmentation mass range, at a given index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The mass range.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent.MassCalibratorCount">
            <summary>
            Gets the mass calibrator count.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEvent.GetMassCalibrator(System.Int32)">
            <summary>
            Get the mass calibrator, at a given index.
            </summary>
            <param name="index">
            The index, which should be from 0 to MassCalibratorCount -1
            </param>
            <returns>
            The mass calibrator.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when requesting calibrator above count</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase">
            <summary>
            The IScanEventBase interface defines scanning features
            which are common to "scan events" and "scan filters".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ScanData">
            <summary>
            Gets the scan data format (profile or centroid).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Polarity">
            <summary>
            Gets the polarity of the scan.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.PolarityType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MSOrder">
            <summary>
            Gets the scan MS/MS power setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Dependent">
            <summary>
            Gets the dependent scan setting.
            A scan is "dependent" if the scanning method is based
            on analysis of data from a previous scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.SourceFragmentation">
            <summary>
            Gets source fragmentation scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.SourceFragmentationType">
            <summary>
            Gets the source fragmentation type setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ScanMode">
            <summary>
            Gets the scan type setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.TurboScan">
            <summary>
            Gets the turbo scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.IonizationMode">
            <summary>
            Gets the ionization mode scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Corona">
            <summary>
            Gets the corona scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Detector">
            <summary>
            Gets the detector validity setting.
            The property <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.DetectorValue"/> only contains valid information
            when this is set to "DetectorType.Valid"
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.DetectorType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.DetectorValue">
            <summary>
            Gets the detector value.
            This should only be used when valid. <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Detector"/>
            </summary>
            <value>Floating point detector value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Wideband">
            <summary>
            Gets the wideband scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassAnalyzer">
            <summary>
            Gets the mass analyzer scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.SectorScan">
            <summary>
            Gets the sector scan setting. Applies to 2 sector (Magnetic, electrostatic) Mass spectrometers, or hybrids.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Lock">
            <summary>
            Gets the lock scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.FieldFreeRegion">
            <summary>
            Gets the field free region setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Ultra">
            <summary>
            Gets the ultra scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Enhanced">
            <summary>
            Gets the enhanced scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MultiplePhotonDissociation">
            <summary>
            Gets the multi-photon dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MultiplePhotonDissociationValue">
            <summary>
            Gets the multi-photon dissociation value.
            </summary>
            <value>Floating point multi-photon dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ElectronCaptureDissociation">
            <summary>
            Gets the electron capture dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ElectronCaptureDissociationValue">
            <summary>
            Gets the electron capture dissociation value.
            </summary>
            <value>Floating point electron capture dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.PhotoIonization">
            <summary>
            Gets the photo ionization setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.PulsedQDissociation">
            <summary>
            Gets pulsed dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.PulsedQDissociationValue">
            <summary>
            Gets the pulsed dissociation value.
            </summary>
            <value>Floating point pulsed dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ElectronTransferDissociation">
            <summary>
            Gets the electron transfer dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ElectronTransferDissociationValue">
            <summary>
            Gets the electron transfer dissociation value.
            </summary>
            <value>Floating point electron transfer dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.HigherEnergyCiD">
            <summary>
            Gets the higher energy CID setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.HigherEnergyCiDValue">
            <summary>
            Gets the higher energy CID value.
            </summary>
            <value>Floating point higher energy CID value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Multiplex">
            <summary>
            Gets the Multiplex type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ParamA">
            <summary>
            Gets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ParamB">
            <summary>
            Gets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ParamF">
            <summary>
            Gets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MultiNotch">
            <summary>
            Gets the Multi notch (Synchronous Precursor Selection) type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ParamR">
            <summary>
            Gets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ParamV">
            <summary>
            Gets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.Name">
            <summary>
            Gets the event Name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.SupplementalActivation">
            <summary>
            Gets supplemental activation type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MultiStateActivation">
            <summary>
            Gets MultiStateActivation type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.CompensationVoltage">
            <summary>
            Gets Compensation Voltage Option setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.CompensationVoltType">
            <summary>
            Gets Compensation Voltage type setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.ScanTypeIndex">
            <summary>
            Gets encoded form of segment and scan event number.
            </summary>
            <value>HIWORD == segment, LOWORD == scan type</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount">
            <summary>
            Gets number of (precursor) masses
            </summary>
            <value>The size of mass array</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetReaction(System.Int32)">
            <summary>
            Gets the reaction data for the mass at 0 based index.
            Descries how a particular MS/MS precursor mass is fragmented.
            Equivalent to calling GetMass, GetEnergy, GetPrecursorRangeValidity, GetFirstPrecursorMass
            GetLastPrecursorMass, GetIsolationWidth, GetIsolationWidthOffset, GetEnergyValid
            GetActivation, GetIsMultipleActivation.
            Depending on the implementation of the interface, this call may be more efficient
            than calling several of the methods listed.
            </summary>
            <param name="index">index of reaction</param>
            <returns>reaction details</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetMass(System.Int32)">
            <summary>
            Retrieves mass value for MS step at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of mass values.
            </remarks>
            <param name="index">
            Index of mass value to be retrieved
            </param>
            <returns>
            Mass value of MS step
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= MassCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetEnergy(System.Int32)">
            <summary>
            Retrieves precursor(collision) energy value for MS step at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of energies.
            </remarks>
            <param name="index">
            Index of precursor(collision) energy to be retrieved
            </param>
            <returns>
            precursor(collision) energy of MS step
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetPrecursorRangeValidity(System.Int32)">
            <summary>
            Determine if a precursor range is valid.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            true if valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetFirstPrecursorMass(System.Int32)">
            <summary>
            Gets the first precursor mass.
            This is only valid data where "GetPrecursorRangeValidity" returns true for the same index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The first mass
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetLastPrecursorMass(System.Int32)">
            <summary>
            Gets the last precursor mass.
            This is only valid data where "GetPrecursorRangeValidity" returns true for the same index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The last mass
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetIsolationWidth(System.Int32)">
            <summary>
            Gets the isolation width.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The isolation width
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetIsolationWidthOffset(System.Int32)">
            <summary>
            Gets the isolation width offset.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The isolation width offset
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetEnergyValid(System.Int32)">
            <summary>
            Retrieves precursor(collision) energy validation flag at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of precursor(collision) energy validations.
            </remarks>
            <param name="index">
            Index of precursor(collision) energy validation to be retrieved
            </param>
            <returns>
            precursor(collision) energy validation of MS step;
            See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.EnergyType"/> for possible values
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetActivation(System.Int32)">
            <summary>
            Retrieves activation type at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of activations.
            </remarks>
            <param name="index">
            Index of activation to be retrieved
            </param>
            <returns>
            activation of MS step;
            See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType"/> for possible values
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetIsMultipleActivation(System.Int32)">
            <summary>
            Retrieves multiple activations flag at 0-based index of masses.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount"/> to get the count of masses.
            </remarks>
            <param name="index">
            Index of flag to be retrieved
            </param>
            <returns>
            true if mass at given index has multiple activations;  false otherwise
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassRangeCount">
            <summary>
            Gets the number of mass ranges for final scan
            </summary>
            <value>The size of mass range array</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetMassRange(System.Int32)">
            <summary>
            Retrieves mass range for final scan at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassRangeCount"/> to get the count of mass ranges.
            </remarks>
            <param name="index">
            Index of mass range to be retrieved
            </param>
            <returns>
            Mass range for final scan at 0-based index
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= MassRangeCount</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.SourceFragmentationInfoCount">
            <summary>
            Gets the number of source fragmentation info values
            </summary>
            <value>The size of source fragmentation info array</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.GetSourceFragmentationInfo(System.Int32)">
            <summary>
            Retrieves a source fragmentation info value at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.SourceFragmentationInfoCount"/> to get the count of source
            fragmentation info values.
            </remarks>
            <param name="index">
            Index of source fragmentation info to be retrieved
            </param>
            <returns>
            Source Fragmentation info value at 0-based index
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= SourceFragmentationInfoCount</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanEvents">
            <summary>
            The ScanEvents interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEvents.Segments">
            <summary>
            Gets the number segments.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEvents.GetEventCount(System.Int32)">
            <summary>
            Gets the number of events in a specific segment (0 based)
            </summary>
            <param name="segment">The segment number</param>
            <returns>The number of events in this segment</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEvents.GetEvent(System.Int32,System.Int32)">
            <summary>
            Get an event, indexed by the segment and event numbers (zero based).
            </summary>
            <param name="segment">
            The segment.
            </param>
            <param name="eventNumber">
            The event number.
            </param>
            <returns>
            The event.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanEvents.GetEvent(System.Int32)">
            <summary>
            Get an event, using indexed event number (zero based).
            This gets events from all segments in order,
            use "ScanEvents" to get the total count of events.
            </summary>
            <param name="eventNumber">
            The event Number.
            </param>
            <returns>
            The event.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEvents.ScanEvents">
            <summary>
            Gets the total number of scan events, in all segments
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.FilterAccurateMass">
            <summary>
            The filter rule for accurate mass.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterAccurateMass.Off">
            <summary>
            Accurate mass mode off
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterAccurateMass.On">
            <summary>
            Accurate mass mode on
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterAccurateMass.Internal">
            <summary>
            Accurate mass mode is internal (reference or lock peak in this scan)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterAccurateMass.External">
            <summary>
            Accurate mass mode is external (no reference in this scan)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.FilterAccurateMass.Any">
            <summary>
            Accept any accurate mass mode
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.SourceFragmentationInfoValidType">
            <summary>
            Specified whether the source fragmentation info is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SourceFragmentationInfoValidType.Energy">
            <summary>
            The fragmentation is "energy"
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.SourceFragmentationInfoValidType.Any">
            <summary>
            No specific type.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.MetaFilterType">
            <summary>
            Meta Filter
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.MetaFilterType.None">
            <summary>
            No meta filter
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.MetaFilterType.Hcd">
            <summary>
            HCD meta filter
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.MetaFilterType.Etd">
            <summary>
            ETD meta filter
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.MetaFilterType.Cid">
            <summary>
            CID meta filter
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.Interfaces.MetaFilterType.Uvpd">
            <summary>
            UVPD meta filter.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter">
            <summary>
            The ScanFilter interface defines a set of rules for selecting scans.
            For example: Testing if a scan should be included in a chromatogram.
            Many if the rules include an "Any" choice, which implies that this rule
            will not be tested.
            Testing logic is included in the class <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper"/>
            The class <see cref="T:ThermoFisher.CommonCore.Data.Extensions"/> contains methods related to filters, the filter helper and raw data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.AccurateMass">
            <summary>
            Gets the accurate mass filter rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.MassPrecision">
            <summary>
            Gets or sets the mass precision, which is used to format the filter (in ToString).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.MetaFilters">
            <summary>
            Gets or sets additional instrument defined filters (these are bit flags).
            See enum MetaFilterType.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.UniqueMassCount">
            <summary>
            Gets the number of unique masses, taking into account multiple activations.
            For example: If this is MS3 data, there are two  "parent masses",
            but they may have multiple reactions applied.
            If the first stage has two reactions, then there are a total of
            3 reactions, for the 2 "unique masses"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.SourceFragmentationInfoValid">
            <summary>
            Gets or sets an array of values which determines if the source fragmentation values are valid.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.GetSourceFragmentationInfoValid(System.Int32)">
            <summary>
            Get source fragmentation info valid, at zero based index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.SourceFragmentationInfoValidType"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.IndexToMultipleActivationIndex(System.Int32)">
            <summary>
            Convert an index to multiple activation index.
            Converts a simple mass index to the index to the unique mass,
            taking into account multiple activations.
            </summary>
            <param name="index">
            The index to convert.
            </param>
            <returns>
            The index of the unique mass.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.LocaleName">
            <summary>
            Gets or sets the locale name.
            This can be used to affect string conversion.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ToString">
            <summary>
            Convert to string.
            Mass values are converted as per the precision.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.CompensationVoltageValue(System.Int32)">
            <summary>
            Retrieves a compensation voltage (cv) value at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.CompensationVoltageCount"/> to get the count of
            compensation voltage values.
            </remarks>
            <param name="index">
            Index of compensation voltage to be retrieved
            </param>
            <returns>
            Compensation voltage value (cv) at 0-based index
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.CompensationVoltageCount">
            <summary>
            Gets the number of compensation voltage values.
            This is the number of values related to <c>cv</c> mode.
            1 for "single value", 2 for "ramp" and 1 per mass range for "SIM".
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.SouceFragmentaionValueCount">
            <summary>
            Gets the number of Source Fragmentation values.
            This is the number of values related to <c>sid</c> mode.
            1 for "single value", 2 for "ramp" and 1 per mass range for "SIM".
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.SourceFragmentationValue(System.Int32)">
            <summary>
            Retrieves a source fragmentation value (sid) at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.SouceFragmentaionValueCount"/> to get the count of
            source fragmentation values.
            </remarks>
            <param name="index">
            Index of source fragmentation value to be retrieved
            </param>
            <returns>
            Source Fragmentation Value (sid) at 0-based index
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ScanData">
            <summary>
            Gets or sets the scan data type (centroid or profile) filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Polarity">
            <summary>
            Gets or sets the polarity (+/-) filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.PolarityType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.MSOrder">
            <summary>
            Gets or sets the scan power or MS/MS mode filtering rule, such as MS3 or Parent scan.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Dependent">
            <summary>
            Gets or sets the dependent scan filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.SourceFragmentation">
            <summary>
            Gets or sets source fragmentation scan filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.SourceFragmentationType">
            <summary>
            Gets or sets the source fragmentation type filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ScanMode">
            <summary>
            Gets or sets the scan type filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.MassAnalyzer">
            <summary>
            Gets or sets the mass analyzer scan filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Detector">
            <summary>
            Gets or sets the detector scan filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.DetectorType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.TurboScan">
            <summary>
            Gets or sets the turbo scan filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.IonizationMode">
            <summary>
            Gets or sets the ionization mode filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Corona">
            <summary>
            Gets or sets the corona scan filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.DetectorValue">
            <summary>
            Gets or sets the detector value.
            This is used for filtering when the Detector filter is enabled.
            </summary>
            <value>Floating point detector value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Wideband">
            <summary>
            Gets or sets the wideband filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.SectorScan">
            <summary>
            Gets or sets the sector scan filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Lock">
            <summary>
            Gets or sets the lock scan filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.FieldFreeRegion">
            <summary>
            Gets or sets the field free region filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Ultra">
            <summary>
            Gets or sets the ultra scan filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Enhanced">
            <summary>
            Gets or sets the enhanced scan filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.MultiplePhotonDissociation">
            <summary>
            Gets or sets the multi-photon dissociation filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.MultiplePhotonDissociationValue">
            <summary>
            Gets or sets the multi-photon dissociation value.
            </summary>
            <value>Floating point multi-photon dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ElectronCaptureDissociation">
            <summary>
            Gets or sets the electron capture dissociation filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ElectronCaptureDissociationValue">
            <summary>
            Gets or sets the electron capture dissociation value.
            </summary>
            <value>Floating point electron capture dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.PhotoIonization">
            <summary>
            Gets or sets the photo ionization filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.PulsedQDissociation">
            <summary>
            Gets or sets pulsed dissociation filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.PulsedQDissociationValue">
            <summary>
            Gets or sets the pulsed dissociation value.
            Only applies when the PulsedQDissociation rule is used.
            </summary>
            <value>Floating point pulsed dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ElectronTransferDissociation">
            <summary>
            Gets or sets the electron transfer dissociation filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ElectronTransferDissociationValue">
            <summary>
            Gets or sets the electron transfer dissociation value.
            Only used when the "ElectronTransferDissociation" rule is used.
            </summary>
            <value>Floating point electron transfer dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.HigherEnergyCiD">
            <summary>
            Gets or sets the higher energy CID filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.HigherEnergyCiDValue">
            <summary>
            Gets or sets the higher energy CID value.
            Only applies when the "HigherEnergyCiD" rule is used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Multiplex">
            <summary>
            Gets or sets the Multiplex type filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ParamA">
            <summary>
            Gets or sets the parameter a filtering rule..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ParamB">
            <summary>
            Gets or sets the parameter b filtering rule..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ParamF">
            <summary>
            Gets or sets the parameter f filtering rule..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.MultiNotch">
            <summary>
            Gets or sets the SPS (Synchronous Precursor Selection) Multi notch filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ParamR">
            <summary>
            Gets or sets the parameter r filtering rule..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.ParamV">
            <summary>
            Gets or sets the parameter v filtering rule..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.Name">
            <summary>
            Gets or sets the event Name. Used for "compound name" filtering.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.SupplementalActivation">
            <summary>
            Gets or sets supplemental activation type filter rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.MultiStateActivation">
            <summary>
            Gets or sets MultiStateActivation type filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.CompensationVoltage">
            <summary>
            Gets or sets Compensation Voltage filtering rule.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter.CompensationVoltType">
            <summary>
            Gets or sets Compensation Voltage type filtering rule.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType"/> for possible values</value>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IFilterParser">
            <summary>
            Defines a method of parsing a scan filter.
            This could be used for UI validation of scan filter text, without an
            open raw file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilterParser.EnergyPrecision">
            <summary>
            Gets or sets the precision expected for collision energy
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IFilterParser.MassPrecision">
            <summary>
            Gets or sets the precision expected for mass values
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IFilterParser.GetFilterFromString(System.String)">
            <summary>
            Parse a string, returning the scan filter codes.
            </summary>
            <param name="text">String to parse</param>
            <returns>Filters in the supplied string, or null if the string cannot be parsed.
            The string can be considered incorrect if there are too many digits in a numeric value
            or too many digits after the decimal point, for a mass or energy.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess">
            <summary>
             Read only access to scan statistics
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.BasePeakIntensity">
            <summary>
            Gets the intensity of highest peak in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.BasePeakMass">
            <summary>
            Gets the mass of largest peak in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.HighMass">
            <summary>
            Gets the highest mass in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.LowMass">
            <summary>
            Gets the lowest mass in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.PacketCount">
            <summary>
            Gets the Number of points in scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.PacketType">
            <summary>
             Gets the indication of data format used by this scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.ScanEventNumber">
            <summary>
            Gets the event (scan type) number within segment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.ScanNumber">
            <summary>
            Gets the number of the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.SegmentNumber">
            <summary>
            Gets the time segment number for this event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.StartTime">
            <summary>
            Gets the time at start of scan (minutes)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanIndexAccess.TIC">
            <summary>
             Gets the total Ion Current for scan
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanSelect">
            <summary>
            Defines information which can select a scan.
            For example: Determine if a scan should be included in a chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanSelect.UseFilter">
            <summary>
            Gets or sets a value indicating whether the "scan filter" will be used as a selection mechanism.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanSelect.ScanFilter">
            <summary>
            Gets or sets the scan filter.
            If UseFilter is false, or this is null, it is not used as a selection mechanism.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanSelect.Names">
            <summary>
            Gets or sets the name.
            This is the component or compound name list to filter against.
            If this is null or empty, it is not used as a selection mechanism.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess">
            <summary>
            Read only access to scan statistics
            Extends data from the index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.LongWavelength">
            <summary>
            Gets the longest wavelength in PDA scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.ShortWavelength">
            <summary>
            Gets the shortest wavelength in PDA scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.NumberOfChannels">
            <summary>
            Gets the number of
            channels acquired in this scan, if this is UV or analog data,
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.IsCentroidScan">
            <summary>
            Gets a value indicating whether this scan contains centroid data (else profile0
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.ScanType">
            <summary>
            Gets a String defining the scan type, for filtering
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.Frequency">
            <summary>
            Gets the frequency.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.IsUniformTime">
            <summary>
            Gets a value indicating whether is uniform time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.AbsorbanceUnitScale">
            <summary>
            Gets the absorbance unit scale.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.WavelengthStep">
            <summary>
            Gets the wave length step.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess.CycleNumber">
            <summary>
                Gets the cycle number.
                <remarks>
                    Cycle number used to associate events within a scan event cycle.
                    For example, on the first cycle of scan events, all the events
                    would set this to '1'. On the second cycle, all the events would
                    set this to '2'. This field must be set by devices if supporting
                    compound names for filtering. However, it may be set in all
                    acquisitions to help processing algorithms.
                </remarks>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IScanSubtract">
            <summary>
            Interface to provide algorithms to subtract scans.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IScanSubtract.Subtract(ThermoFisher.CommonCore.Data.Business.Scan,ThermoFisher.CommonCore.Data.Business.Scan)">
            <summary>
            Creates a difference of two scans.
            </summary>
            <param name="foregroundScan">The scan containing signal.</param>
            <param name="backgroundScan">The scan containing background</param>
            <returns>The difference "foregroundScan-backgroundScan"</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess">
            <summary>
            Interface for Access to the data in a segmented scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess.SegmentCount">
            <summary>
            Gets the number of segments
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess.SegmentLengths">
            <summary>
            Gets the number of data points in each segment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess.Intensities">
            <summary>
            Gets Intensities for each peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess.Positions">
            <summary>
            Gets Masses or wavelengths for each peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess.Flags">
            <summary>
            Gets Flagging information (such as saturated) for each peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess.MassRanges">
            <summary>
            Gets the Mass ranges for each scan segment
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileAccess">
            <summary>
            Interface to read a sequence (SLD) file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileAccess.FileHeader">
            <summary>
            Gets the file header for the sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileAccess.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileAccess.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileAccess.IsOpen">
            <summary>
            Gets a value indicating whether true if a file was successfully opened.
            Inspect "FileError" when false
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileAccess.Info">
            <summary>
            Gets additional information about a sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileAccess.Samples">
            <summary>
            Gets the set of samples in the sequence
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISequenceInfo">
            <summary>
            Interface to get information about a sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceInfo.ColumnWidth">
            <summary>
            Gets the display width of each sequence column
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceInfo.TypeToColumnPosition">
            <summary>
            Gets the column order (see home page?)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceInfo.Bracket">
            <summary>
            Gets the sequence bracket type.
            This determines which groups of samples use the same calibration curve.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceInfo.UserPrivateLabel">
            <summary>
            Gets the set of column names for application specific columns
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceInfo.TrayConfiguration">
            <summary>
            Gets a description of the auto-sampler tray
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceInfo.UserLabel">
            <summary>
            Gets the user configurable column names
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter">
            <summary>
            Provides methods to create and write samples to a sequence file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.FileHeader">
            <summary>
            Gets the file header for the sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.Info">
            <summary>
            Gets or sets additional information about a sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.Samples">
            <summary>
            Gets the set of samples in the sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.FileName">
            <summary>
            Gets the name of the sequence file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.Bracket">
            <summary>
            Gets or sets the sequence bracket type.
            This determines which groups of samples use the same calibration curve.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.TrayConfiguration">
            <summary>
            Gets or sets a description of the auto-sampler tray
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.SetUserColumnLabel(System.Int32,System.String)">
            <summary>
            Sets the user label at given 0-based label index.
            </summary>
            <remarks>
            SampleInformation.MaxUserTextColumnCount determines the maximum number of user
            column labels.
            </remarks>
            <param name="index">Index of user label to be set</param>
            <param name="label">New string value for user label to be set</param>
            <returns>true if successful;  false otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.GetUserColumnLabel(System.Int32)">
            <summary>
            Retrieves the user label at given 0-based label index.
            </summary>
            <remarks>
            SampleInformation.MaxUserTextColumnCount determines the maximum number of user
            column labels.
            </remarks>
            <param name="index">Index of user label to be retrieved</param>
            <returns>String containing the user label at given index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.UpdateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.IFileHeaderUpdate)">
            <summary>
            Update the sequence file header with the file header values passed in.  
            Only updates object values in memory, does not write to disk.
            A default FileHeader is created with every new writer instance.
            </summary>
            <param name="fileHeader">
            The file header object with values to use.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.ISequenceFileWriter.Save">
            <summary>
            Saves Sequence data to disk.
            </summary>
            <returns>True saved data to disk; false otherwise.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess">
            <summary>
            Defines signal to noise calculation measurements
            which may be shown on a peak label or tabulated.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.NoiseClassification">
            <summary>
            Gets the noise classification, which must be
            checked to see if a valid noise value is available.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.PeakRetentionTime">
            <summary>
            Gets the peak retention time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.PeakWidthHalfHeight">
            <summary>
            Gets the peak width at half height above baseline
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.PeakArea">
            <summary>
            Gets the peak area.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.PeakHeight">
            <summary>
            Gets the height of the signal (i.e. peak height above baseline).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.PeakBaseline">
            <summary>
            Gets the peak baseline value determined by the noise slope and intercept values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.PeakStartTime">
            <summary>
            Gets the start time of the peak (i.e. peak left extent)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.PeakEndTime">
            <summary>
            Gets the end time of the peak (i.e. peak right extent)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.NoiseStartTime">
            <summary>
            Gets the start time of the noise determination range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.NoiseEndTime">
            <summary>
            Gets the end time of the noise determination range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.NoiseMinIntensity">
            <summary>
            Gets the minimum intensity of noise points.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.NoiseMaxIntensity">
            <summary>
            Gets the Maximum intensity of noise points.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.Noise">
            <summary>
            Gets the noise part of the signal to noise estimation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.NoiseSlope">
            <summary>
            Gets the slope of the fitted line.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.NoiseOffset">
            <summary>
            Gets the offset of the fitted line.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.SignalToNoiseRatio">
            <summary>
            Gets the ratio of the signal to noise estimation (<see cref="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.PeakHeight"/> divided by <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.ISignalToNoiseResultsAccess.Noise"/>).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess">
            <summary>
            The SimpleScanAccess interface.
            Defines the most basic data of a scan (mass and intensity)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess.Masses">
            <summary>
            Gets the list of masses of each centroid
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanAccess.Intensities">
            <summary>
            Gets the list of Intensities for each centroid
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader">
            <summary>
            The SimpleScanHeader interface.
            Defines minimal data about a scan (its number and retention time)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader.RetentionTime">
            <summary>
            Gets the retention time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader.ScanNumber">
            <summary>
            Gets the scan number.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader">
            <summary>
            Define a combination of both scan and header
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader.Header">
            <summary>
            Gets the scan header
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader.Data">
            <summary>
            Gets the scan data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader.Event">
            <summary>
            Gets the event, which defines how this scan was created
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISimplifiedScanReader">
            <summary>
            Provides methods to return scan data, or centroid scan data as just mass and intensity values
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.ISimplifiedScanReader.GetSimplifiedScan(System.Int32)">
            <summary>
            This method is similar to GetSegmentedScanFromScanNumber in the IRawData interface.
            The method returns only the mass and intensity values from
            the scan data for a scan. 
            Values for flags etc. are not returned, saving data space and improving efficiency.
            This method never returns "reference and exception peak" data.
            The method is designed for improved performance in custom XIC generators.
            </summary>
            <param name="scanNumber">The scan whose mass intensity data are needed</param>
            <returns>Mass and intensity values from the scan.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.ISimplifiedScanReader.GetSimplifiedCentroids(System.Int32)">
            <summary>
            This method is similar to GetCentroidStream in the IRawData interface.
            The method returns only the mass and intensity values from
            the "centroid stream" data for a scan. This is also known as "Label Stream"
            Values for flags etc. are not returned, saving data space and improving efficiency.
            The method is designed for improved performance in custom XIC generators.
            </summary>
            <param name="scanNumber">The scan whose mass intensity data are needed</param>
            <returns>Mass and intensity values from the scan "centroid data".</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.ISimplifiedScanReader.GetScanEvents(System.Int32,System.Int32)">
            <summary>
            This method permits events to be read as a block for a range of scans,
            which may reduce overheads involved in requesting one by one.
            Events define how scans were acquired.
            Potentially, in some data models, the same "event" may apply to several scans
            so it is permissible for the same reference to appear multiple times.
            </summary>
            <param name="firstScanNumber">The first scan whose event is needed</param>
            <param name="lastScanNumber">The last scan</param>
            <returns>An array of scan events</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.ISingleValueStatusLog">
            <summary>
            Log of a particular status value, over time
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISingleValueStatusLog.Times">
            <summary>
            Gets the retention times for each value (x values to plot)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.ISingleValueStatusLog.Values">
            <summary>
            Gets the values logged for each time (the trended data, y values to plot).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IUvDeviceWriter">
            <summary>
            Provides methods to write UV devices data.<para/>
            Note: The following functions should be called before acquisition begins:<para/>
            1. Write Instrument Info<para/>
            2. Write Instrument Expected Run Time<para/>
            3. Write Status Log Header <para/>
            If caller is not intended to use the status log data, pass a null argument or zero length array.<para/>
            ex. WriteStatusLogHeader(null) or WriteStatusLogHeader(new IHeaderItem[0])
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IUvDeviceWriter.WriteInstData(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex)">
            <summary>
            Writes both the UV type of the instrument data and the index into the disk. 
            This is the simplest format of data we write to a raw file since it doesn't have any
            profile indexing and there is no segmentation of the data.      
            </summary>
            <param name="instData">The UV type of instrument scan data.</param>
            <param name="instDataIndex">The UV type of the scan index.</param>
            <returns>True if scan data and index are written to disk successfully, False otherwise</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex">
            <summary>
            Defines the instrument data index for UV type devices
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex.NumberOfChannels">
            <summary>
            Gets the number of channels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex.Frequency">
            <summary>
            Gets the frequency.
            <para>For UV device only, it will be ignored by Analog devices</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex.IsUniformTime">
            <summary>
            Gets a value indicating whether is uniform time.
            <para>For UV device only, it will be ignored by Analog devices</para>
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex.DeepClone">
            <summary>
            Copies the specified source.
            Copy all the non-static fields of the current object to the new object.
            Since all the fields are value type, a bit-by-bit copy of the field is performed.
            </summary>
            <returns>Create a copy of the same object type</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Interfaces.NamespaceDoc">
            <summary>
            Contains interfaces to data, related to "MS data systems".
            Includes some enums used within these interfaces
            Used as an interchange between various common core DLLs.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IDeepCloneable`1">
            <summary>
            Interface supporting type safe deep cloning of objects
            </summary>
            <typeparam name="T">Type to clone
            </typeparam>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IDeepCloneable`1.DeepClone">
            <summary>
            Produce a deep copy of an object.
            Must not contain any references into the original.
            </summary>
            <returns>The deep cloned object
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ItemCache`1">
            <summary>
            Make a cache of the "n" most recently used copies of an object.
            For example: If different parts of an application are likely to read the same data from a file
            multiple times, this can be used to reduce the file operations.
            </summary>
            <typeparam name="T">Type of object in the cache
            </typeparam>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ItemCache`1.ItemReader">
            <summary>
            Obtain a record from a data source, based on an index
            Example: Scan from raw file, based on scan number.
            </summary>
            <param name="index">
            Index of object
            </param>
            <returns>
            Object read from data source
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCache`1.#ctor(System.Int32,ThermoFisher.CommonCore.Data.ItemCache{`0}.ItemReader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ItemCache`1"/> class. 
            Initialize a cache
            </summary>
            <param name="capacity">
            Maximum number of items in the cache. Oldest items are discarded when the cache is full
            </param>
            <param name="reader">
            Delegate to read a new item, when not in the cache.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ItemCache`1.QueueItem">
            <summary>
            The queue item.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ItemCache`1.QueueItem.Index">
            <summary>
            Gets or sets Index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ItemCache`1.QueueItem.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCache`1.GetItem(System.Int32)">
            <summary>
            Get an item from the cache.
            If the item is not available in the cache, it is requested from the item reader (supplied to the constructor).
            When new items are read: This automatically caches new items, discarding oldest items.
            </summary>
            <param name="index">
            Record number
            </param>
            <returns>
            item from the cache. May be "null" if this item is not in the cache, and the reader has no value for this index
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ItemCache`1.Cached">
            <summary>
            Gets the number of cached items
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ItemCache`1.Capacity">
            <summary>
            Gets the maximum number of cached items
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ItemCache`1.CloneItems">
            <summary>
            Gets or sets a value indicating whether all items returned from the cache are Deep Cloned.
            If false: The cache only keeps references
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCache`1.Clear">
            <summary>
            empty the cache
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ItemCollection`1">
            <summary>
            ItemCollection is a custom collection of generic (user defined) types.
            It allows for triggering events when items are added or removed.  It also provides
            a means to have read-only collection properties during XML serialization.
            </summary>
            <typeparam name="TGenericType">The type of the generic type.</typeparam>
        </member>
        <member name="E:ThermoFisher.CommonCore.Data.ItemCollection`1.ItemAdded">
            <summary>
            Occurs when [item added].
            </summary>
        </member>
        <member name="E:ThermoFisher.CommonCore.Data.ItemCollection`1.ItemRemoved">
            <summary>
            Occurs when [item removed]. The sender parameter is a pointer to the object being changed.
            </summary>
        </member>
        <member name="E:ThermoFisher.CommonCore.Data.ItemCollection`1.ItemsCleared">
            <summary>
            Occurs when [items cleared]. The sender parameter is a pointer to the object being changed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ItemCollection`1.HasCollectionChanged">
            <summary>
            Gets a value indicating whether this instance has changed.
            </summary>
            <value>
            <c>true</c> if this instance has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.ClearHasChangedStatus">
            <summary>
            Clears the has changed status of the item collection
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the collection
            </summary>
            <param name="comparer">comparer, to order the sort</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sort the collection
            </summary>
            <param name="comparison">comparison method, to order the sort</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of items to the collection
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index and fires an <see cref="E:ThermoFisher.CommonCore.Data.ItemCollection`1.ItemAdded"/> event and a <see cref="E:ThermoFisher.CommonCore.Data.ItemCollection`1.PropertyChanged"/> event.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.-or-<paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/> and fires an <see cref="E:ThermoFisher.CommonCore.Data.ItemCollection`1.ItemRemoved"/> event and a property changed event.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.-or-<paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/> and fires a <see cref="E:ThermoFisher.CommonCore.Data.ItemCollection`1.ItemsCleared"/> event and a property changed event.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.DeepEquals(System.Object)">
            <summary>
            Provides a custom deep equality operation when checking for equality.
            </summary>
            <param name="valueToCompare">The value to compare.</param>
            <returns>true if the objects are equal</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.PerformDefaultSettings">
            <summary>
            Performs the default settings for the data object.  This can be overridden in each data object that implements the interface to perform
            initialization settings. Method is empty (does nothing) in ItemCollection
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.SignalChanged(System.String)">
            <summary>
            Signals the changed.
            </summary>
            <param name="propertyName">Name of the property that has changed</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.SignalChanged(System.Object,System.String)">
            <summary>
            Signals the changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ItemCollection`1.PropertySignalChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Internal handler for property changed
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="args">
            The args.
            </param>
        </member>
        <member name="E:ThermoFisher.CommonCore.Data.ItemCollection`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.NamespaceDoc">
            <summary>
            Contains general purpose data support, such as generic factories and collections.
             </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ObjectFactory`1">
            <summary>
            Provides a delegate to open files for specific extensions
            given the 'type' and 'assembly'.
            The class calls the method that has a single string parameter
            and returns T.
            This class can also be used in conjunction with the 
            '<see cref="T:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1"/>'. In such a situation, it is not 
            required that Initialize' is called. 
            </summary>
            <typeparam name="T">This should be an interface to data read from a file.
            </typeparam>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ObjectFactory`1.DefaultMethodName">
            <summary>
            The default name of a method which can return {T}
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactory`1.OpenFile">
            <summary>
            Gets the delegate to invoke.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactory`1.SpecifiedMethod">
            <summary>
            Gets the delegate to invoke a specified method.
            </summary>
            <value>
            The specified method.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactory`1.FileExtension">
            <summary>
            Gets or sets the file extension associated with this instance.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactory`1.Initialized">
            <summary>
            Gets or sets a value indicating whether Initialized.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/> class. 
            Associates the extension, class type and the assembly
            with this instance. 
            The default method with name "FileFactory" will be invoked.
            </summary>
            <param name="extension">
            file extension
            </param>
            <param name="typeToInitialize">
            fully qualified class name to initialize
            </param>
            <param name="assemblyToLoad">
            fully qualified assembly name
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/> class. 
            Associates the extension, class type and the assembly
            with this instance. 
            The method name can also be passed if it is different. 
            However, for the method to be invoked it needs to match the 
            delegate's signature.
            </summary>
            <param name="extension">
            file extension
            </param>
            <param name="typeToInitialize">
            fully qualified class name to initialize
            </param>
            <param name="assemblyToLoad">
            fully qualified assembly name
            </param>
            <param name="methodName">
            method name
            </param>
            <param name="initialize">initialize, but loading the required assembly and type</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.#ctor(System.Func{System.String,`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/> class. 
            </summary>
            <param name="method">
            The method to open a file which returns {T}, given a file name.
            </param>
            <param name="extension">
            The file extension.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.#ctor(System.String,System.String,System.String,System.Type[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/> class. 
            This version permits a method to be specified, which is called with
            parameters of the given types.
            </summary>
            <param name="typeToInitialize">
            The type to initialize.
            </param>
            <param name="assemblyToLoad">
            The assembly to load.
            </param>
            <param name="methodName">
            Name of the method.
            </param>
            <param name="paramTypes">
            Parameter types of the specified method 
            </param>
            <param name="initialize">
            if set to <c>true</c> [initialize].
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.Initialize">
            <summary>
            Loads the assembly, class and determines the method to invoke.
            Needs to be called immediately after the constructor. This call is
            required when the class is used as a stand-alone class. 
            If used with <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1"/>, then constructing
            <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1"/> will initialize the <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/>.
            </summary>
            <returns>
            The initialize.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.Initialize(System.Boolean)">
            <summary>
            Load the assembly
            </summary>
            <param name="throwExceptions">
            Permit exceptions to be thrown
            </param>
            <returns>
            True is successful
            </returns>
            <exception cref="T:System.ArgumentException">
            <c>ArgumentException</c>.
            </exception>
            <exception cref="T:System.IO.FileLoadException">
            <c>FileLoadException</c>.
            </exception>
            <exception cref="T:System.IO.FileLoadException">
            <c>NotSupportedException</c> Thrown when the expected method signature is not found.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.CreateMethodInfoObject(System.Type)">
            <summary>
            Checks for a specific method signature as below.
            <see cref="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.FileFactory(System.String)"/>(string)
            </summary>
            <param name="assemblyType">
            Type loaded from assembly (by reflection)
            </param>
            <exception cref="T:System.NotSupportedException">
            <c>NotSupportedException</c>.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.FileFactory(System.String)">
            <summary>
            Opens the named file, returning an interface to access the file.
            In error conditions, some adapters may throw exceptions
            Caller should handle exceptions (typically "file not valid").
            </summary>
            <param name="fileName">
            Name of file to open
            </param>
            <returns>
            The opened file, or null if no file can be opened
            </returns>
            <exception cref="T:System.Reflection.TargetInvocationException">
            Sent if the DLL fails to return {T}. This may be thrown for a missing or corrupt file.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Failed to cast to specified type {T}.
            This will be thrown if either, the return from the invoked factory method was null
            or the returned object converts to a null {T} with an "as" operator.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactory`1.SpecifiedMethodFactory(System.Object[])">
            <summary>
            Invoke the specified method.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>An object of the expected type</returns>
            <exception cref="T:System.InvalidCastException">Failed to cast returned object to T.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1">
            <summary>
            Represents the strongly typed collection of <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/> that can be
            Individually accessed by index.
            This collection can then use the contained items to open files, which can read the
            required data, and return to the caller {T}. <see cref="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.FileFactory(System.String)"/>
            </summary>
            <typeparam name="T">Interface to data read from a file by the factory
            </typeparam>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.DefaultExtension">
            <summary>
            Gets or sets the default file extension.
            When a file name is sent to the <see cref="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.FileFactory(System.String)"/> method with no extension,
            or an empty extension is sent to to <see cref="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.GetObjectCreatorFromExtension(System.String)"/>,
            this extension is assumed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.TryAllAdapters">
            <summary>
            Gets or sets a value indicating whether to aggressively attempt to open the file,
            using any known format. It is only applicable if the supplied file
            has no extension supplied. It is false by default.
            For files with no extension, the adapter for the default extension
            is tried first, and then the file is attempted to be
            opened with all other adapters. 
            If no adapters can open the file, the exception from
            the default adapter is re-thrown.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.DynamicDefault">
            <summary>
            Gets or sets a value indicating whether a "dynamic default extension" is used.
            This property is only used when <see cref="P:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.TryAllAdapters"/> is set, 
            and when files names sent to <see cref="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.FileFactory(System.String)"/> have no extension.
            If DynamicDefault is true, When successfully opening a file,
            the <see cref="P:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.DefaultExtension"/> is adjusted to the extension of the
            adapter found. This is intended to increase efficiency when processing a
            sequence of files, as the adapter search would be faster after the first file.
            By default this is false, and the default is not adjusted.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1"/> class. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.#ctor(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.ObjectFactory{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1"/> class. 
            Initializes/loads the assembly and types by iterating through the collection.
            </summary>
            <param name="objectFactories">
            collection of <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/>
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.Initialize(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.Data.ObjectFactory{`0}})">
            <summary>
            Initialize the collection.
            </summary>
            <param name="objectFactories">
            The collection of object factories.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.IndexOf(ThermoFisher.CommonCore.Data.ObjectFactory{`0})">
            <summary>
            To Find the index of a given item
            </summary>
            <param name="item">
            item to find
            </param>
            <returns>
            index of the item
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.Insert(System.Int32,ThermoFisher.CommonCore.Data.ObjectFactory{`0})">
            <summary>
            Insert an item at a given index
            </summary>
            <param name="index">
            index at which to insert
            </param>
            <param name="item">
            item to insert
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.RemoveAt(System.Int32)">
            <summary>
            remove an item from a given location
            </summary>
            <param name="index">
            index from where to remove
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.Item(System.Int32)">
            <summary>
            indexer property for the list
            </summary>
            <param name="index">index location</param>
            <returns>item at given location/index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.Add(ThermoFisher.CommonCore.Data.ObjectFactory{`0})">
            <summary>
            adds an item to the list
            </summary>
            <param name="item">
            item to add
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.AddRange(ThermoFisher.CommonCore.Data.ObjectFactory{`0}[])">
            <summary>
            adds a range of items
            </summary>
            <param name="itemArray">
            items as an array
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.Clear">
            <summary>
            clears the underlying list
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.Contains(ThermoFisher.CommonCore.Data.ObjectFactory{`0})">
            <summary>
            checks for the existence of an item in the list
            </summary>
            <param name="item">
            item to check
            </param>
            <returns>
            true if found, else false
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.CopyTo(ThermoFisher.CommonCore.Data.ObjectFactory{`0}[],System.Int32)">
            <summary>
            copies a part of the list to the given array
            </summary>
            <param name="array">
            array into which items will be copied
            </param>
            <param name="arrayIndex">
            index from where the copy would begin
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.Count">
            <summary>
            Gets the total number of items in the list
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is readonly
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.Remove(ThermoFisher.CommonCore.Data.ObjectFactory{`0})">
            <summary>
            removes an item from the list
            </summary>
            <param name="item">
            item to remove
            </param>
            <returns>
            true if removed, else false
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.GetEnumerator">
            <summary>
            Get a strongly types enumerator
            </summary>
            <returns>
            A strongly types enumerator
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get a default enumerator of the list
            </summary>
            <returns>
            a default enumerator of the list
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.GetObjectCreatorFromExtension(System.String)">
            <summary>
            Gets the <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/> for the given extension.
            This finds an object for opening files with the given extension (such as <c>".pmd"</c>)
            </summary>
            <param name="extension">
            valid extension
            </param>
            <returns>
            return a <see cref="T:ThermoFisher.CommonCore.Data.ObjectFactory`1"/> which can open files of the given extension,
             or null if there is no available creator for the extension
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.FileFactory(System.String)">
            <summary>
            Implementation of delegate which can open any
            kind of file, based on the extension. 
            </summary>
            <param name="fileName">
            The name of the file
            </param>
            <returns>
            An interface to the object data
            </returns>
            <exception cref="T:System.Exception">
            <c>Exception</c>.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ObjectFactoryCollection`1.TryAllOtherAdapters(System.String,ThermoFisher.CommonCore.Data.ObjectFactory{`0})">
            <summary>
            The try all other adapters.
            </summary>
            <param name="fileName">
            The file name.
            </param>
            <param name="defaultCreator">
            The default creator.
            </param>
            <returns>
            An interface to the object data
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.IExecute">
            <summary>
            Method executed in parallel
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.IExecute.Execute">
            <summary>
            Method executed in parallel
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ParallelSmallTasks">
            <summary>
            Run many very small tasks in parallel. 
            faster than TPL for very granular tasks, such as 2mS to 10mS per task.
            Avoids overheads of "queuing tasks to workers".
            Instead: All workers pull from a common queue.
            The algorithm works by queuing a limited number of worker tasks, which the task pool distributes between
            worker threads. Each worker task can run until every job is pulled from the queue.
            The reason this is more efficient than TPL is that TPL will queue a work item for every item in 
            the work list, causing overheads within queuing work items, and overheads when the work items complete.
            To use this class, create an array (or List) of objects, each of which is self contained (thread safe) and
            has an Execute method, which performs the required processing. Pass this to RunInParallel.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ParallelSmallTasks.DefaultMaxWorkers">
            <summary>
            Default value for MaxWorkers property
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ParallelSmallTasks.MaxWorkers">
            <summary>
            Gets or sets the maximum number of worker jobs to queue.
            This typically does not need to be set (can be left at default).
            Setting this to 1 is useful for basic performance tuning, as all work
            will be done by the current thread (single threaded).
            Other settings could be used for fine tuning and research.
            Worker jobs do not imply threads. Each worker is able to process the entire job queue.
            The number of threads available is automatically set by the .net thread pool.
            Suggested range of this: 10 to 20. Default 12.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ParallelSmallTasks.BatchSize">
            <summary>
            Gets or sets the batch size.
            When task times are very small (less than 1 mS), it may be more efficient to ensure each worker has more than one task.
            By default (BatchSize=0) the class could schedule 12 workers to run 12 tasks (assuming MaxWorkers is still the default, 12).
            But: if the tasks are very short, this may add some overheads. Setting "BatchSize" to 2 would limit the number of workers to 6 in this case,
            with the Max (12) workers being used when there are 24 or more tasks in the list
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ParallelSmallTasks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.Data.ParallelSmallTasks"/> class. 
            Default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ParallelSmallTasks.ExecuteInParallel(System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.IExecute})">
            <summary>
            Run tasks in parallel with default settings
            </summary>
            <param name="runners">tasks to execute</param>
        </member>
        <member name="F:ThermoFisher.CommonCore.Data.ParallelSmallTasks._workersToComplete">
            <summary>
            The number of worker threads.
            This is initialized to the total number of workers needed.
            Each worker counts it down when completed, and frees the main thread when zero.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ParallelSmallTasks.RunInParallel(System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.IExecute})">
            <summary>
            Each item in the list has a "Execute" method.
            The methods are called on each object using a parallel scheme
            which permits each worker thread to act on any item in the list.
            The objects in the list should save results of their respective execute methods.
            Calling code can then iterate through the runners as soon as this call completes,
            and use the generated results within the objects.
            </summary>
            <param name="runners">
            The objects which need to have an "Execute" method called on them.
            For example "array of T, where T implements IExecute"/&gt;
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ParallelSmallTasks.UseTpl">
            <summary>
            Gets or sets a value indicating whether to use TPL for the parallel execution.
            There can be trade-offs between overheads, such as initialization or thread locking, when comparing
            the TPL model and the model within this class. Applications can research which model gives higher performance.
            All other settings are ignored if this is set.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ParallelSmallTasks.JobPoolCallBack(System.Object)">
            <summary>
            Worker method for threads
            </summary>
            <param name="state">
            not used
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ParallelSmallTasks.WorkerComplete">
            <summary>
            The worker complete.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ParallelSmallTasks.ProcessAllAvailableJobs">
            <summary>
            The process all available jobs.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.RawDataFactory">
            <summary>
            Delegate defining a method which can create an instance of IRawData, based
            on a string (usually a file name). 
            </summary>
            <param name="fileName">
            file name
            </param>
            <returns>
            Interface to read raw data
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.Requires">
            <summary>
            Contains generic validation methods.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Requires.NotNull``1(System.String,``0)">
            <summary>
            Validates that the specified <paramref name="value"/> is not null.
            </summary>
            <typeparam name="T">type of the parameter</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value to check.</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if argument is null.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.Requires.NotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary>
            Validates that the specified <paramref name="value"/> is not null or empty.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value to check.</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if argument is null.</exception>
            <exception cref="T:System.ArgumentException"> is thrown if argument is empty.</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.ResourceTextAttribute">
            <summary>
            Specifies the resource text for an enumeration field.
            This attribute is used by the EnumFormat class to get display strings for enumeration values.
            </summary>
            <remarks>
            The resource manager base name provided here will automatically be prefixed with the namespace
            of the enumeration type. For example, an enumeration defined in <c>XCL.Acquisition</c> with a
            <c>ResourceText</c> attribute base name of "EnumBase" will use a resource manager base name of
            "XCL.Acquisition.EnumBase".
            </remarks>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ResourceTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResourceTextAttribute class with the resource name
            for the enumeration field. The default resource base name of "Enumerations" is used.
            </summary>
            <param name="resourceName">The resource name for the enumeration value.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.ResourceTextAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ResourceTextAttribute class with the resource name
            and resource base name for the enumeration field.
            </summary>
            <param name="resourceName">The resource name for the enumeration value.</param>
            <param name="baseName">The resource manager base name for the enumeration value.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ResourceTextAttribute.BaseName">
            <summary>
            Gets the resource manager base name for the enumeration field.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.ResourceTextAttribute.ResourceName">
            <summary>
            Gets the resource name for the enumeration field, without the enumeration type's namespace prefix.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.Data.TrackedDataObject">
            <summary>
            TrackedDataObject object is an abstract class that provides property
            change event processing without redundancy.
            If the business object you are designing
            requires property change notifications,
            implement this abstract class and call the SetProperty inside your setters./>
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.TrackedDataObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.TrackedDataObject.Equals(System.Object)">
            <summary>
            Compares this object with another.
            Traverse the set of member variables to compare against the object that was passed in.
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.TrackedDataObject.SetProperty``1(``0@,System.String,System.Object)">
            <summary>
            Sets the property and hooks up event processing automatically.
            </summary>
            <typeparam name="T">The type of object the underlying data class is.</typeparam>
            <param name="privateMember">The private member.</param>
            <param name="propertyName">Name of the property that will appear in the <see cref="E:ThermoFisher.CommonCore.Data.TrackedDataObject.PropertyChanged"/> event.</param>
            <param name="value">The value the property is being set to.</param>
            <returns>true if the property value has changed</returns>
        </member>
        <member name="E:ThermoFisher.CommonCore.Data.TrackedDataObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.TrackedDataObject.SignalChanged(System.String)">
            <summary>
            Signals when a property value is changed.  This is merely a central function that is called every time the property is changed so as to 
            eliminate redundant code.
            </summary>
            <param name="propertyName">Name of the property being changed.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.Data.TrackedDataObject.HasPropertyChange">
            <summary>
            Gets a value indicating whether this object has a property change event
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.TrackedDataObject.SignalChanged(System.Object,System.String)">
            <summary>
            Signals when a property value is changed.  This is merely a central function that is called every time the property is changed so as to 
            eliminate redundant code.
            </summary>
            <param name="sender">The sender, i.e., the instance of the object being changed.</param>
            <param name="propertyName">Name of the property being changed.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.Data.TrackedDataObject.PropertySignalChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            The property signal changed handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="args">
            The args.
            </param>
        </member>
    </members>
</doc>
