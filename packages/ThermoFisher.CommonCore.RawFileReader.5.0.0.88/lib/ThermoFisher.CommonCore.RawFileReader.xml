<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThermoFisher.CommonCore.RawFileReader</name>
    </assembly>
    <members>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Adler32">
            <summary>
            Calculates checksum (also called a CRC) using Adler-32 algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Adler32.Checksum">
            <summary>
            Gets the checksum of all added items
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Adler32.Calc(System.UInt32,System.Byte[])">
            <summary>
            Calculate the CRC for an array
            </summary>
            <param name="seed">
            Initial checksum value (often this object.Checksum)
            </param>
            <param name="data">
            Data to check
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Adler32.CalcFileHeader(System.Byte[])">
            <summary>
            Calculate the CRC for an file header array.
            This sets the value of "CRC" to zero first in the supplied data
            </summary>
            <param name="data">Bytes copied from the file header</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Adler32.CalcAdler32(System.UInt32,System.Byte[])">
            <summary>
            Calculate CRC of a block of data
            </summary>
            <param name="seed">CRC of previous blocks, 0 if first block</param>
            <param name="data">Data to check</param>
            <returns>CRC of this block</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ChromatogramDelivery">
            <summary>
            Basic format of chromatogram delivery:
            Just keeps a copy of the data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ChromatogramDelivery.Request">
            <summary>
            Gets or sets the "request" which determines what kind of chromatogram is needed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ChromatogramDelivery.DeliveredSignal">
            <summary>
            Gets the chromatogram data
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ChromatogramDelivery.Process(ThermoFisher.CommonCore.Data.Business.ChromatogramSignal)">
            <summary>
            Implements the "Process" interface, as just saving a reference to the data.
            </summary>
            <param name="signal">The chromatogram which has been generated</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.CentroidStreamFactory">
            <summary>
            The wrapped centroid stream.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.CentroidStreamFactory.CreateCentroidStream(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak[])">
            <summary>
            Creates a CentroidStream from label peaks.
            </summary>
            <param name="labelPeaks">
            The label peaks.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if labelPeaks is null
            </exception>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.CentroidStream"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.CentroidStreamFactory.CopyFrom(ThermoFisher.CommonCore.Data.Business.CentroidStream,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak[])">
            <summary>
            Copy data from an array of LabelPeak
            </summary>
            <param name="stream">stream to fill</param>
            <param name="labelPeaks">
            The label peaks to copy.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.InstrumentDataConverter">
            <summary>
            The instrument data converter.
            Converts instrument data from internal interfaces to public format.
            Note: Created as a static class rather than a wrapper (extending the type)
            so that the expected type is returned to the caller, supporting serialize etc.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.InstrumentDataConverter.CopyFrom(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId)">
            <summary>
            Convert the IO format to CommonCore format
            </summary>
            <param name="instId">The instrument identifier.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation">
            <summary>
            Information about the auto sampler, as logged in a raw file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation"/> class. 
            Construct auto sampler information, with no initial data.
            This path occurs for older raw files, which do not have this block.
            The shape is defined as "Invalid" in this case.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation"/> class.
            </summary>
            <param name="autoSamplerConfig">
            The auto sampler config.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.TrayIndex">
            <summary>
            Gets or sets the tray index, -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.TrayName">
            <summary>
            Gets or sets the tray name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.TrayShape">
            <summary>
            Gets or sets the shape.
            If this property returns "Invalid", no other values in this object
            contain usable information.
            Invalid data can occur for older raw file formats, before auto sampler data was added.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.TrayShapeAsString">
            <summary>
            Gets the tray shape as a string
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.VialIndex">
            <summary>
            Gets or sets the vial index, -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.VialsPerTray">
            <summary>
            Gets or sets the number of vials (or wells) per tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.VialsPerTrayX">
            <summary>
            Gets or sets the number of vials (or wells) per tray, across the tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedAutoSamplerInformation.VialsPerTrayY">
            <summary>
            Gets or sets the number of vials (or wells) per tray, down the tray.
            -1 for "not recorded"
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedErrorLogEntry">
            <summary>
            The wrapped error log entry. This implements the public interface on
            an error logged in a raw file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedErrorLogEntry.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedErrorLogEntry"/> class.
            </summary>
            <param name="errorLogItem">
            The error log item.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedErrorLogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedErrorLogEntry"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedErrorLogEntry.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedErrorLogEntry.RetentionTime">
            <summary>
            Gets the retention time.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFileError">
            <summary>
            The wrapped file error. Translates error information
            from a raw file into public interface
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFileError.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.IErrors)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFileError"/> class.
            </summary>
            <param name="errors">
            The errors.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFileError.ErrorCode">
            <summary>
            Gets the error code number.
            Typically this is a windows system error number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFileError.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFileError.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFileError.HasWarning">
            <summary>
            Gets a value indicating whether this file has detected a warning.
            If this is false: Other warning properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFileError.WarningMessage">
            <summary>
            Gets the warning message.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator">
            <summary>
            The wrapped filtered scan iterator. Iterates over scans matching a given filter.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator"/> class.
            </summary>
            <param name="device">
            The device.
            </param>
            <param name="filter">
            The filter.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator.Filter">
            <summary>
            Gets the filter used for iterating over spectra, in string form. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator.MayHaveNext">
            <summary>
            Gets a value indicating whether there are more scans after the current scan
            Note that this does not check if this scan matches the filter.
            <returns>returns true if there is an Next spectrum in file. Otherwise false</returns>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator.MayHavePrevious">
            <summary>
            Gets a value indicating whether there may be spectra before the current scan.
            Note that this does not check if this scan matches the filter.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator.NextScan">
            <summary>
            Gets the Next Spectrum, matching the filter
            <returns>returns the next spectrum number in file. 0 if there is no file open</returns>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator.PreviousScan">
            <summary>
            Gets the Previous Spectrum, matching the filter
            <returns>returns the previous spectrum number in file. 0 if there is no file open</returns>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator.SpectrumPosition">
            <summary>
            Sets the CurrentSpectrumNumber to the new Spectrum Number
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedFilteredScanIterator.SetFilter(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent)">
            <summary>
            Set the filter used for iterating over spectra. 
            This can be used with the NextSpectrumNumber method to iterate over scans with a certain filter
            </summary>
            <param name="filter">
            an object containing the Filter to be used for iterating over spectra
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanFilterHelper"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedHeaderItems">
            <summary>
            The wrapped header items.
            Converts internal header items (for generic data types)
            to public format.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedHeaderItems.#ctor(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedHeaderItems"/> class.
            </summary>
            <param name="dataDescriptors">The data descriptors.</param>
            <exception cref="T:System.ArgumentNullException">Null data descriptor argument</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedHeaderItems.CopyFrom(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor})">
            <summary>
            Copies from.
            </summary>
            <param name="dataDescriptors">The data descriptors.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedLogEntry">
            <summary>
            Wrapped log entry. Presents a log entry, as defined in the Data DLL.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedLogEntry.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedLogEntry"/> class.
            </summary>
            <param name="statusLog">
            The status log.
            </param>
            <exception cref="T:System.ArgumentNullException">statusLog is null
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedLogEntry.#ctor(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedLogEntry"/> class.
            </summary>
            <param name="trailerExtra">
            The trailer extra.
            </param>
            <exception cref="T:System.ArgumentNullException">trailerExtra is null
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader">
            <summary>
            The wrapped run header.
            Converts internal run header to public interface
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader"/> class.
            </summary>
            <param name="runHeader">The run header.</param>
            <exception cref="T:System.ArgumentNullException">run header is null</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.Comment1">
            <summary>
            Gets the first comment about this data stream.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.Comment2">
            <summary>
            Gets the second comment about this data stream.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.EndTime">
            <summary>
            Gets the time of last scan in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.ErrorLogCount">
            <summary>
            Gets the count of error log entries
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.ExpectedRunTime">
            <summary>
            Gets the expected data acquisition time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.FilterMassPrecision">
            <summary>
            Gets the number of digits of precision suggested for formatting masses
            in the filters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.FirstSpectrum">
            <summary>
            Gets the first spectrum (scan) number (typically 1).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.HighMass">
            <summary>
            Gets the highest recorded mass in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.InAcquisition">
            <summary>
            Gets a value indicating whether this file is being created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.LastSpectrum">
            <summary>
            Gets the last spectrum (scan) number.
            If this is less than 1, then there are no scans acquired yet.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.LowMass">
            <summary>
            Gets the lowest recorded mass in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.MassResolution">
            <summary>
            Gets the mass resolution of this instrument.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.MaxIntegratedIntensity">
            <summary>
            Gets the max integrated intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.MaxIntensity">
            <summary>
            Gets the max intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.SpectraCount">
            <summary>
            Gets the count of recorded spectra
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.StartTime">
            <summary>
            Gets the time of first scan in file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.StatusLogCount">
            <summary>
            Gets the count of status log entries
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.ToleranceUnit">
            <summary>
            Gets the tolerance units
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.TrailerExtraCount">
            <summary>
            Gets the count of "trailer extra" records.
            Typically, same as the count of scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.TrailerScanEventCount">
            <summary>
            Gets the count of "scan events"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedRunHeader.TuneDataCount">
            <summary>
            Gets the count of tune data entries
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents">
            <summary>
            The wrapped scan events.
            Converts internal data to public interface IScanEvents
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents"/> class.
            </summary>
            <param name="msDevice">The MS device.
            Since this is internal: Caller will validate
            that this is not null.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents.GetEvent(System.Int32)">
            <summary>
            Get an event, using indexed event number (zero based).
            This gets events from all segments in order,
            use "ScanEvents" to get the total count of events.
            </summary>
            <param name="eventNumber">The event Number.</param>
            <returns>
            The event.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when eventNumber is out of range</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents.GetEvent(System.Int32,System.Int32)">
            <summary>
            Get an event, indexed by the segment and event numbers (zero based).
            </summary>
            <param name="segmentIndex">The segment index.</param>
            <param name="eventNumber">The event number.</param>
            <returns>
            The event.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When event number out of range</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents.GetEventCount(System.Int32)">
            <summary>
            Gets the number of events in a specific segment (0 based)
            </summary>
            <param name="segmentIndex">The segment number.</param>
            <returns>The number of events in this segment</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">segment Number</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents.ScanEvents">
            <summary>
            Gets the total number of scan events, in all segments
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents.Segments">
            <summary>
            Gets the number segments.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanEvents.GetAllScanEvents(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice)">
            <summary>
            Gets all scan events.
            </summary>
            <param name="msDevice">
            The mass spec Device.
            </param>
            <returns>
            All the scan events
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter">
            <summary>
            The wrapped scan filter.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter"/> class.
            </summary>
            <param name="filterScanEvent">
            The filter scan event.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>
            The filter.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.AccurateMass">
            <summary>
            Gets the accurate mass setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.CompensationVoltageCount">
            <summary>
            Gets the number of compensation voltage values
            </summary>
            <value>
            The size of compensation voltage array
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SouceFragmentaionValueCount">
            <summary>
            Gets the number of Source Fragmentation values
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SourceFragmentationValue(System.Int32)">
            <summary>
            Retrieves a source fragmentation value at 0-based index.
            </summary>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SouceFragmentaionValueCount"/> to get the count of
            source fragmentation values.
            </remarks>
            <param name="index">
            Index of source fragmentation value to be retrieved
            </param>
            <returns>
            Source Fragmentation Value (sid) at 0-based index
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.CompensationVoltageValue(System.Int32)">
            <summary>
            Retrieves a compensation voltage value at 0-based index.
            </summary>
            <param name="index">
            Index of compensation voltage to be retrieved
            </param>
            <returns>
            Compensation voltage value at 0-based index
            </returns>
            <remarks>
            Use <see cref="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.CompensationVoltageCount"/> to get the count of
            compensation voltage values.
            </remarks>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetSourceFragmentationInfoValid(System.Int32)">
            <summary>
            Get source fragmentation info valid, at zero based index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.SourceFragmentationInfoValidType"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.IndexToMultipleActivationIndex(System.Int32)">
            <summary>
            Convert a simple mass index to an index to the unique mass, taking into account multiple activations
            </summary>
            <param name="index">
            Simple mass index to convert
            </param>
            <returns>
            Corresponding index of the unique mass
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.LocaleName">
            <summary>
            Gets or sets the locale name.
            This can be used to affect string conversion.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MassPrecision">
            <summary>
            Gets or sets the mass precision, which is used to format the filter (in ToString).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MetaFilters">
            <summary>
            Gets or sets additional instrument defined filters (can be bit flags). No general definition.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SourceFragmentationInfoValid">
            <summary>
            Gets or sets an array of values which determines if the source fragmentation values are valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ScanData">
            <summary>
            Gets or sets the ScanData setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Polarity">
            <summary>
            Gets or sets the Polarity setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SourceFragmentation">
            <summary>
            Gets or sets the SourceFragmentation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MSOrder">
            <summary>
            Gets or sets the MSOrder setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MassAnalyzer">
            <summary>
            Gets or sets the Mass Analyzer setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Detector">
            <summary>
            Gets or sets the Detector setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Dependent">
            <summary>
            Gets or sets the Dependent setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ScanMode">
            <summary>
            Gets or sets the Scan Mode setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SourceFragmentationType">
            <summary>
            Gets or sets the Source Fragmentation Type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.TurboScan">
            <summary>
            Gets or sets the Turbo Scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.IonizationMode">
            <summary>
            Gets or sets the Ionization Mode setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Corona">
            <summary>
            Gets or sets the corona scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.DetectorValue">
            <summary>
            Gets or sets the detector value.
            </summary>
            <value>Floating point detector value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Wideband">
            <summary>
            Gets or sets the wideband scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SectorScan">
            <summary>
            Gets or sets the sector scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Lock">
            <summary>
            Gets or sets the lock scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.FieldFreeRegion">
            <summary>
            Gets or sets the field free region setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Ultra">
            <summary>
            Gets or sets the ultra scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Enhanced">
            <summary>
            Gets or sets the enhanced scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MultiplePhotonDissociation">
            <summary>
            Gets or sets the multi-photon dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MultiplePhotonDissociationValue">
            <summary>
            Gets or sets the multi-photon dissociation value.
            </summary>
            <value>Floating point multi-photon dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ElectronCaptureDissociation">
            <summary>
            Gets or sets the electron capture dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ElectronCaptureDissociationValue">
            <summary>
            Gets or sets the electron capture dissociation value.
            </summary>
            <value>Floating point electron capture dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.PhotoIonization">
            <summary>
            Gets or sets the photo ionization setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.PulsedQDissociation">
            <summary>
            Gets or sets the dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.PulsedQDissociationValue">
            <summary>
            Gets or sets the pulsed dissociation value.
            </summary>
            <value>Floating point pulsed dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ElectronTransferDissociation">
            <summary>
            Gets or sets the electron transfer dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ElectronTransferDissociationValue">
            <summary>
            Gets or sets the electron transfer dissociation value.
            </summary>
            <value>Floating point electron transfer dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.HigherEnergyCiD">
            <summary>
            Gets or sets the higher energy cid setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.HigherEnergyCiDValue">
            <summary>
            Gets or sets the higher energy cid value.
            </summary>
            <value>Floating point higher energy cid value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Multiplex">
            <summary>
            Gets or sets the Multiplex type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ParamA">
            <summary>
            Gets or sets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ParamB">
            <summary>
            Gets or sets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ParamF">
            <summary>
            Gets or sets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MultiNotch">
            <summary>
            Gets or sets the Multi notch (Synchronous Precursor Selection) type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ParamR">
            <summary>
            Gets or sets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ParamV">
            <summary>
            Gets or sets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.Name">
            <summary>
            Gets or sets the event Name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SupplementalActivation">
            <summary>
            Gets or sets supplemental activation type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MultiStateActivation">
            <summary>
            Gets or sets MultiStateActivation type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.CompensationVoltage">
            <summary>
            Gets or sets Compensation Voltage Option setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.CompensationVoltType">
            <summary>
            Gets or sets compensation Voltage type setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.UniqueMassCount">
            <summary>
            Gets the number of unique masses, taking into account multiple activations.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ThermoFisher#CommonCore#Data#Interfaces#IScanFilter#ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.ScanTypeIndex">
            <summary>
            Gets the scan type index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MassCount">
            <summary>
            Gets the mass count.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetReaction(System.Int32)">
            <summary>
            The get reaction.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.IReaction"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetMass(System.Int32)">
            <summary>
            The get mass.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetEnergy(System.Int32)">
            <summary>
            The get energy.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetPrecursorRangeValidity(System.Int32)">
            <summary>
            The get precursor range validity.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetFirstPrecursorMass(System.Int32)">
            <summary>
            The get first precursor mass.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetLastPrecursorMass(System.Int32)">
            <summary>
            The get last precursor mass.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetIsolationWidth(System.Int32)">
            <summary>
            The get isolation width.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetIsolationWidthOffset(System.Int32)">
            <summary>
            The get isolation width offset.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetEnergyValid(System.Int32)">
            <summary>
            The get energy valid.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.EnergyType"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetActivation(System.Int32)">
            <summary>
            The get activation.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetIsMultipleActivation(System.Int32)">
            <summary>
            The get is multiple activation.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.MassRangeCount">
            <summary>
            Gets the mass range count.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetMassRange(System.Int32)">
            <summary>
            The get mass range.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.Range"/>.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.SourceFragmentationInfoCount">
            <summary>
            Gets the source fragmentation info count.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanFilter.GetSourceFragmentationInfo(System.Int32)">
            <summary>
            The get source fragmentation info.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanStatistics">
            <summary>
            The wrapped scan statistics.
            Converts from internal data to public type.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanStatistics.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanStatistics"/> class.
            </summary>
            <param name="scanIndex">Index of the scan.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if scanIndex is null</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanStatistics.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanStatistics"/> class.
            </summary>
            <param name="scanIndex">Index of the scan.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if scanIndex is null</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanStatistics.LazyScanType">
            <summary>
            Sets the lazy scan type.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanStatistics.CopyFrom(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex)">
            <summary>
            Copies from.
            </summary>
            <param name="scanIndex">Index of the scan.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedScanStatistics.CopyFrom(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex)">
            <summary>
            Copies from.
            </summary>
            <param name="scanIndex">Index of the scan.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSequenceRow">
            <summary>
            The wrapped sequence row. Converts internal data to public type.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSequenceRow.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSequenceRow"/> class.
            </summary>
            <param name="sequenceRow">The sequence row.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when sequenceRow is null</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSequenceRow.CopyFrom(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow)">
            <summary>
            Copies from.
            </summary>
            <param name="seqRow">The sequence row.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSingleValueStatusLog">
            <summary>
            The wrapped single value status log.
            Converts internal data to the public interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSingleValueStatusLog.#ctor(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSingleValueStatusLog"/> class.
            </summary>
            <param name="statusLogEntries">
            The status log entries.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSingleValueStatusLog.Times">
            <summary>
            Gets the retention times for each value (x values to plot)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSingleValueStatusLog.Values">
            <summary>
            Gets the values logged for each time (the trended data, y values to plot).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DataModel.WrappedSingleValueStatusLog.CopyFrom(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry})">
            <summary>
            copy from statusLogEntries
            </summary>
            <param name="statusLogEntries">
            The status log entries.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodDataAccess">
            <summary>
            Data for a particular device, from an instrument method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodDataAccess.OpenStream(ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.String)">
            <summary>
            Opens a stream on created storage
            </summary>
            <param name="stgDevice">The storage containing data for a device</param>
            <param name="streamName">The stream within the device</param>
            <returns>Access to the requested stream</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodDataAccess.GetStreamNames(ThermoFisher.CommonCore.RawFileReader.IOleStorage)">
            <summary>
            get stream names.
            </summary>
            <param name="stgDevice">
            The storage device.
            </param>
            <returns>
            The names.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodDataAccess.MethodText">
            <summary>
            Gets the plain text form of an instrument method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodDataAccess.StreamBytes">
            <summary>
            Gets all streams for this instrument, apart from the "Text" stream.
            Typically an instrument has a stream called "Data" containing the method in binary or XML.
            Other streams (private to the instrument) may also be created.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodDataAccess.Open(ThermoFisher.CommonCore.RawFileReader.IOleStorage)">
            <summary>
            Open the streams for the device, and retrieve the text description.
            </summary>
            <param name="stgDevice">Storage containing device data</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodDataAccess.AvailableStreams">
            <summary>
            Gets or sets the available streams.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DeviceStorage">
            <summary>
            Reader for instrument method device data.
            Class is a wrapper over Win32 API's.
            Deals with IOleStorage and IOleStream
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.DeviceStorage"/> class. 
            Constructor with filename as parameter
            </summary>
            <param name="fileName">
            method data file
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.GetStorageNames(ThermoFisher.CommonCore.RawFileReader.IOleStorage,ThermoFisher.CommonCore.RawFileReader.StgType)">
            <summary>
            Get the list of storage names, of a particular storage type
            </summary>
            <param name="storage">Storage to open</param>
            <param name="storageType">Type of storage</param>
            <returns>The names of the storages</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.FileHeaderErrors">
            <summary>
            The file header errors.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.FileHeaderErrors.NoError">
            <summary>
            There was no error
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.FileHeaderErrors.ComError">
            <summary>
            There was a COM error
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.FileHeaderErrors.CrcError">
            <summary>
            There was a CRC error
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.FileHeaderErrors.OpenStreamError">
            <summary>
            Cannot open file stream
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.ReadHeaderResult">
            <summary>
            The read header result.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.ReadHeaderResult.ErrorClass">
            <summary>
            Gets or sets the error class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.ReadHeaderResult.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.ReadHeaderResult.Header">
            <summary>
            Gets or sets the header.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.ReadFileHeader">
            <summary>
            Reads the header from the instrument method file
            </summary>
            <returns>The file header</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.OpenDeviceComponent(System.String)">
            <summary>
            Loads component details from storage.
            </summary>
            <param name="deviceName">
            Name of component
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodDataAccess"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.EnumSubStgsNoRecursion(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.Facade.StorageDescription})">
            <summary>
            Enumerates the sub STGS no recursion.
            </summary>
            <param name="storageDescriptions">The storage descriptions.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.OpenStorage(ThermoFisher.CommonCore.RawFileReader.StgMode)">
            <summary>
            Open a storage file
            </summary>
            <param name="accessMode">The access mode.</param>
            <returns>
            The error message, or empty string if OK
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.Dispose(System.Boolean)">
            <summary>
            Cleans up the resources 
            </summary>
            <param name="isDisposable">bool, flag whether .Net resources needs to be released or not</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.DeviceStorage.Dispose">
            <summary>
            Releases all resources 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters">
            <summary>
            Provides static methods to convert enumeration between the legacy FileIO and CommonCore.data
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToDevice(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes)">
            <summary>
            Common Core Devices from VirtualDeviceTypes.
            </summary>
            <param name="value">The VirtualDeviceTypes.</param>
            <returns>The converted type</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>type</c> is out of range.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToVirtualDeviceType(ThermoFisher.CommonCore.Data.Business.Device)">
            <summary>
            Convert common core Device type to the virtual device types.
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToScanFilter(System.Collections.Generic.IEnumerable{ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent})">
            <summary>
            To the scan filter.
            </summary>
            <param name="values">The values.</param>
            <returns>List of scan filer</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToEventAccurateMass(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes)">
            <summary>
            Convert an event accurate mass.
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToAccurateMass(ThermoFisher.CommonCore.Data.FilterEnums.EventAccurateMass)">
            <summary>
            Convert an accurate mass to event value.
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.MakeFlagsTable">
            <summary>
            Map flag bit to peak options, with a static table
            </summary>
            <returns>
            The table of options for each flag
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToPeakOptions(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak)">
            <summary>
            Convert flags (such as "reference peak) from FT format to "PeakOptions" format
            </summary>
            <param name="value">The peak with flags to be converted.</param>
            <returns>The converted flags</returns>
            <exception cref="T:System.ArgumentNullException">Null label peak type argument.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToTriState(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IsDependent)">
            <summary>
            Convert to 3 state variable (on, off any).
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToTriState(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnAnyOffTypes)">
            <summary>
             Convert to 3 state variable (on, off any).
            </summary>
            <param name="value">The value.</param>
            <returns>Converted flag.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToTriState(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OffOnTypes)">
            <summary>
             Convert to 3 state variable (on, off any).
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToOffOnType(ThermoFisher.CommonCore.Data.FilterEnums.TriState)">
            <summary>
             Convert from Tri-state to "Off On Any"to 3.
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToOnAnyOffType(ThermoFisher.CommonCore.Data.FilterEnums.TriState)">
            <summary>
             Convert from Tri-state to "On Any off".
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToDetectorType(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.DetectorType)">
            <summary>
            To the type of the detector.
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToDetectorType(ThermoFisher.CommonCore.Data.FilterEnums.DetectorType)">
            <summary>
            To the type of the detector.
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToScanModeType(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes)">
            <summary>
            To the type of the scan mode.
            </summary>
            <param name="value">The value.</param>
            <returns>Converted flag.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Invalid scan data types type.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToScanType(ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType)">
            <summary>
            From mode to the type of the scan.
            </summary>
            <param name="value">The value.</param>
            <returns>Converted flag.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToSourceFragmentationInfoValidType(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SourceCIDValidTypes)">
            <summary>
            Convert type of "source fragmentation information valid".
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ConvertIntegratorEvent(ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.FalconEvent)">
            <summary>
            convert integrator event from PMD format to Data format
            </summary>
            <param name="old">
            The old event.
            </param>
            <returns>
            The converted <see cref="T:ThermoFisher.CommonCore.Data.Business.IntegratorEvent"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToDataUnits(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits)">
            <summary>
            Convert from C# Reader format to common core format of data units.
            Conversion is accurate for UV units, and approximate for others.
            in particular "units mUnits and uUnits" are considered "Volts".
            "Other" and "Unknown" convert to "None".
            </summary>
            <param name="value">The value from C# Reader.</param>
            <returns>Converted unit</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the units are not a valid value</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.ToAbsorbanceUnits(ThermoFisher.CommonCore.Data.Business.DataUnits)">
            <summary>
            Convert from CommonCore format to IO format of data units.
            Conversion is accurate for UV units, and approximate for others.
            in particular "units mUnits and uUnits" are considered "Volts".
            "Other" and "Unknown" convert to "None".
            </summary>
            <param name="value">The value from CommonCore format.</param>
            <returns>Converted unit</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the units are not a valid value</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ExtensionMethods.TypeConverters.DateTimeToFileTime(System.DateTime)">
            <summary>
            Converts the date time to file time.
            </summary>
            <param name="dateTime">
            The date time.
            </param>
            <returns>
            The <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits">
            <summary>
            The absorbance units.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.Unknown">
            <summary>
            The unknown.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.Au">
            <summary>
            The straight Absorbance unit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.MilliAu">
            <summary>
            The milli Absorbance unit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.MicroAu">
            <summary>
            The micro Absorbance unit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.OtherAu">
            <summary>
            Some other Absorbance unit. make sure you fill in Y axis string below
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.None">
            <summary>
            No absorbance data contained in the data object, or no data which scaling
            has any meaning for.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.MilliUnits">
            <summary>
            The milli units.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.MicroUnits">
            <summary>
            The micro units.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.AbsorbanceUnits.OtherUnits">
            <summary>
            The other straight units.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes">
            <summary>
            The data types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.Empty">
            <summary>
            The data type is null/empty.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.Char">
            <summary>
            <para>The data type is char.</para>
            Note: this is referred as a byte.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.TrueFalse">
            <summary>
            The data type is true or false.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.YesNo">
            <summary>
            The data type is yes or no.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.OnOff">
            <summary>
            The data type is on or off.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.UnsignedChar">
            <summary>
            The data type is unsigned char.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.Short">
            <summary>
            The data type is short.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.UnsignedShort">
            <summary>
            The data type is unsigned short.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.Long">
            <summary>
            <para>The data type is long.</para>
            Note: this is referred as a long (4-byte) in C++. It's not the same size as long in C#.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.UnsignedLong">
            <summary>
            <para>The data type is unsigned long.</para>
            Note: this is referred as an unsigned long (4-byte) in C++. It's not the same size as unsigned long in C#.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.Float">
            <summary>
            The data type is float.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.Double">
            <summary>
            The data type is double.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.CharString">
            <summary>
            The data type is a char string.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.WideCharString">
            <summary>
            The data type is a wide char string.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.EndOfDataType">
            <summary>
            The end of data type
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.FieldNames">
            <summary>
            The field names.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.FieldNames.GlobalMutexNamePrefix">
            <summary>
            The global mutex name prefix
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqConstants">
            <summary>
            The old LCQ constants.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqConstants.MaxExtDetectorChannels">
            <summary>
            The maximum ext detector channels
            External detector channels in use -- 1 to 4
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums">
            <summary>
            Enumerated types for old LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.InstrumentControl">
            <summary>
            The instrument control.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.InstrumentControl.Direct">
            <summary>
            Start direct.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.InstrumentControl.ContactClosure">
            <summary>
            Start by contact closure.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeUnit">
            <summary>
            The syringe unit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeUnit.MlMin">
            <summary>
            ml per min.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeUnit.MlHr">
            <summary>
            ml per hour.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeUnit.UlMin">
            <summary>
            micro l per min.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeUnit.UlHr">
            <summary>
            micro l per hour.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeBrand">
            <summary>
            The syringe brand.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeBrand.Hamilton">
            <summary>
            Made by Hamilton.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeBrand.Unimetrics">
            <summary>
            Made by <c>Unimetrics</c>.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SyringeBrand.Other">
            <summary>
            Some other make
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsType">
            <summary>
            The MS programming type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsType.IsNonItcl">
            <summary>
            is non ITCL.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsType.IsItcl">
            <summary>
            is ITCL. (Ion Trap Control Language)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.DivertBetweenRuns">
            <summary>
            The divert valve state between runs.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.DivertBetweenRuns.DivertToWaste">
            <summary>
            Divert to waste.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.DivertBetweenRuns.DivertToSource">
            <summary>
            Divert to source.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.FractionCollectorChoice">
            <summary>
            The fraction collector choice.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.FractionCollectorChoice.FcBasePeak">
            <summary>
            fraction collector trigger by base peak.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.FractionCollectorChoice.FcMolecularWeight">
            <summary>
            fraction collector trigger by molecular weight.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.DataMode">
            <summary>
            The data mode.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.DataMode.Profile">
            <summary>
            Scan is profile.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.DataMode.Centroid">
            <summary>
            Scan is centroid.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanMode">
            <summary>
            The MS scan mode.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanMode.MsMode">
            <summary>
            The MS mode.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanMode.MsMs">
            <summary>
            The MS/MS mode.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanMode.Cid">
            <summary>
            CID mode.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanMode.MSn">
            <summary>
            The MS to the nth mode.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanType">
            <summary>
            The MS scan type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanType.ScanTypeFull">
            <summary>
            Scan type full.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanType.ScanTypeSim">
            <summary>
            Scan type SIM.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanType.ScanTypeZoom">
            <summary>
            Scan type zoom.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MsScanType.ScanTypeSrm">
            <summary>
            The scan type SRM.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ModeLargest">
            <summary>
            The mode of largest.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ModeLargest.NthLargestIntensity">
            <summary>
            The nth largest intensity.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ModeLargest.NthLargestIntensityPrecursor">
            <summary>
            The nth largest intensity precursor.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ModeLargest.UsePreviousMass">
            <summary>
            use previous mass.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ModeLargest.UsePreviousList">
            <summary>
            Use the previous list of ions, then select the ion from the list
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ShowAxisLabel">
            <summary>
            The show axis label.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ShowAxisLabel.ShowAlways">
            <summary>
            show always.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ShowAxisLabel.ShowOnPrint">
            <summary>
            show on print.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ShowAxisLabel.ShowNever">
            <summary>
            show never.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.NormalizeType">
            <summary>
            The normalize type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.NormalizeType.LargestInSection">
            <summary>
            Normalize to largest in section.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.NormalizeType.LargestInDisplay">
            <summary>
            Normalize to  largest in display.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.NormalizeType.LargestInAll">
            <summary>
            Normalize to  largest in all data
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SpectrumStyle">
            <summary>
            The spectrum style.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SpectrumStyle.AutoStyle">
            <summary>
            auto style based on data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SpectrumStyle.ProfileStyle">
            <summary>
            Use profile style.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SpectrumStyle.StickStyle">
            <summary>
            Use stick style.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SpectrumStyle.ShadeStyle">
            <summary>
            Use shade style.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes">
            <summary>
            The chromatogram trace types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.StartMsChroTraces">
            <summary>
            The start of MS chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroMassRangeTrace">
            <summary>
            Chromatogram mass range trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroTicTrace">
            <summary>
            Chromatogram tic trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroBasePeakTrace">
            <summary>
            Chromatogram base peak trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroFragmentTrace">
            <summary>
            Chromatogram fragment trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.EndMsChroTraces">
            <summary>
            The end of MS Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.StartAnalogChroTraces">
            <summary>
            The start analog Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroAnalog1Trace">
            <summary>
            Chromatogram analog 1 trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroAnalog2Trace">
            <summary>
            Chromatogram analog 2 trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroAnalog3Trace">
            <summary>
            Chromatogram analog 3 trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroAnalog4Trace">
            <summary>
            Chromatogram analog 4 trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.EndAnalogChroTraces">
            <summary>
            The end of analog Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.StartPdaChroTraces">
            <summary>
            The start of PDA Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroWavelengthRangeTrace">
            <summary>
            Chromatogram wavelength range trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroTotalAbsorbanceTrace">
            <summary>
            Chromatogram total absorbance trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroSpectrumMaxTrace">
            <summary>
            Chromatogram spectrum max trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.EndPdaChroTraces">
            <summary>
            The end of PDA Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.StartUvChroTraces">
            <summary>
            The start of UV Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroChannelATrace">
            <summary>
            Chromatogram channel a trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroChannelBTrace">
            <summary>
            Chromatogram channel b trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroChannelCTrace">
            <summary>
            Chromatogram channel c trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroChannelDTrace">
            <summary>
            Chromatogram channel d trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.EndUvChroTraces">
            <summary>
            The end of UV Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.StartA2DChroTraces">
            <summary>
            The start a2d Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroA2DChannel1Trace">
            <summary>
            Chromatogram Analog to Digital channel 1 trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroA2DChannel2Trace">
            <summary>
            Chromatogram Analog to Digital channel 2 trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroA2DChannel3Trace">
            <summary>
            Chromatogram Analog to Digital channel 3 trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.ChroA2DChannel4Trace">
            <summary>
            Chromatogram Analog to Digital channel 4 trace.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.EndA2DChroTraces">
            <summary>
            The end of a2d Chromatogram traces.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceTypes.EndAllChroTraces">
            <summary>
            The end of all Chromatogram traces.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceOperator">
            <summary>
            The Chromatogram trace operator. When math is done on two traces, here is the operations allowed
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceOperator.Blank">
            <summary>
            No operator: blank.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceOperator.Minus">
            <summary>
            The minus operator.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ChroTraceOperator.Plus">
            <summary>
            The plus operator.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SmoothingTypes">
            <summary>
            The smoothing types.
            Used to describe the types of smoothing available for chromatograms and spectra
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SmoothingTypes.BoxSmoothing">
            <summary>
            The box (moving mean) smoothing.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.SmoothingTypes.GaussSmoothing">
            <summary>
            Gaussian smoothing.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ToleranceUnit">
            <summary>
            The tolerance unit.
            Used to describe the types of mass tolerance units  for  spectra
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ToleranceUnit.Mmu">
            <summary>
            units MMU.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ToleranceUnit.Ppm">
            <summary>
            Parts Per Million.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ToleranceUnit.Amu">
            <summary>
            Atomic Mass Units (Dalton).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.Style">
            <summary>
            The style.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.Style.PointToPoint">
            <summary>
            point to point (connected points), profile.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.Style.Stick">
            <summary>
            Stick (vertical lines), centroid data
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode">
            <summary>
            The scan mode.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.NoScan">
            <summary>
            The no scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.FullScan">
            <summary>
            The full scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.SimSrmCrm">
            <summary>
            Scan is SIM, SRM or CRM.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.ZoomScan">
            <summary>
            A zoom scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.MstoMsn">
            <summary>
            The MS to MS to the nth.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.MsntoMsn">
            <summary>
            The MS to the nth to MS to the nth.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.ZMstoMsn">
            <summary>
            The zoom MS to MS to the nth..
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.ZMsntoMsn">
            <summary>
            The zoom MS to the nth to MS to the nth.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.MstozMs">
            <summary>
            The MS to zoom MS.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.MsntozMsn">
            <summary>
            The MS to the nth to zoom MS to the nth.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.NeutralLoss">
            <summary>
            neutral loss scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.NeutralGain">
            <summary>
            neutral gain scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ScanMode.Parent">
            <summary>
            parent scan.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MapViewAccessor">
            <summary>
            The map view accessor.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MapViewAccessor.ScanIndex">
            <summary>
            Map scan index.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MapViewAccessor.StatusLog">
            <summary>
            Map status log.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MapViewAccessor.TrailerExtra">
            <summary>
            Map trailer extra.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MapViewAccessor.TuneData">
            <summary>
            Map tune data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MapViewAccessor.UvScanIndex">
            <summary>
            Ma UV scan index.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MapViewAccessor.UvPeakData">
            <summary>
            Map UV peak data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.MapViewAccessor.EndOfMapViewAccessor">
            <summary>
            The end of map view accessor.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants">
            <summary>
                The raw file constants.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.NotSupportedVersion">
            <summary>
                Raw file versions below 30 are not supported.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatCurrentVersion">
            <summary>
            The current version.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion03">
            <summary>
            The format version03
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion06">
            <summary>
            The format version06
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion07">
            <summary>
                The format version 7.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion08">
            <summary>
            The format version8
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion09">
            <summary>
            The format version9
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion11">
            <summary>
            The format version11
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion12">
            <summary>
            The format version12
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion13">
            <summary>
            The format version13
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion14">
            <summary>
            The format version14
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion15">
            <summary>
            The format version15
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion30">
            <summary>
            The format version30
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion31">
            <summary>
            The format version 31.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion32">
            <summary>
            The format version32
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion34">
            <summary>
            The format version34
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion36">
            <summary>
            The format version36
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion37">
            <summary>
            The format version37
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion39">
            <summary>
            The format version39
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion40">
            <summary>
            The format version 40.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion41">
            <summary>
            The format version 41.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion44">
            <summary>
            The format version 44.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion45">
            <summary>
            The format version 45.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion48">
            <summary>
            The format version 48.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion49">
            <summary>
            The format version 49.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion51">
            <summary>
            The format version 51.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion52">
            <summary>
            The format version 52.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion54">
            <summary>
            The format version 54.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion58">
            <summary>
            The format version 58.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion62">
            <summary>
                The format version 62.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion63">
            <summary>
                The format version 63.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion65">
            <summary>
                The format version 65.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FormatVersion66">
            <summary>
                The format version 66.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.Post64BitFileSizeAllowanceVersion">
            <summary>
                The post 64 bit file size allowance version.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.Pre64BitFileSizeAllowanceVersion">
            <summary>
                The pre 64 bit file size allowance version.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.MaxControllers">
            <summary>
                The max controllers.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.MaxUserLabels">
            <summary>
                The max user labels.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.OriginalVialStringLength">
            <summary>
                The original vial string length.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.PathLength">
            <summary>
                The path length.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.RawFileSignature">
            <summary>
                The raw file signature.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FinnId">
            <summary>
            The finn identifier
            2-byte ID for Finnigan / Enterprise file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.FilterEnergyTolerance">
            <summary>
            The tolerance for filter energy.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.ToleranceEpsilon">
            <summary>
            Used to allow small differences in comparisons (e.g. mass difference).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileConstants.ScanTypeIndexNotSpecified">
            <summary>
            If the scan type is not specified.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.RawFileWriterConstants">
            <summary>
            The raw file writer constants.  
            Imported legacy error and severity values from platform to maintain values.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums">
            <summary>
                The scan filter enumerations.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes">
            <summary>
                The accurate mass types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes.Off">
            <summary>
                Accurate Mass off.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes.On">
            <summary>
                Accurate Mass on.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes.Internal">
            <summary>
                Accurate Mass internal.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes.External">
            <summary>
                Accurate Mass external.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes.AcceptAnyAccurateMass">
            <summary>
                Accept any accurate mass.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.DetectorType">
            <summary>
                The detector type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.DetectorType.IsValid">
            <summary>
                The is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.DetectorType.Any">
            <summary>
                The any.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.DetectorType.IsInValid">
            <summary>
                The is in valid.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterSourceHighVal">
            <summary>
            The filter source high val.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterSourceHighVal.SourceCIDHigh">
            <summary>
            Apply source CID high filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterSourceHighVal.AcceptAnySourceCIDHigh">
            <summary>
            accept any source CID high.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterSourceLowVal">
            <summary>
            The filter source low val.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterSourceLowVal.SourceCIDLow">
            <summary>
            Apply source CID low filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterSourceLowVal.AcceptAnySourceCIDLow">
            <summary>
            accept any source CID low.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterStringParseState">
            <summary>
                Determines how filter parsing is going
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterStringParseState.Incomplete">
            <summary>
            Filter is incomplete
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterStringParseState.Good">
            <summary>
            Filter good
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterStringParseState.Bad">
            <summary>
            Filter is badly formatted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterStringParseState.Next">
            <summary>
            Next token must be inspected
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FreeRegions">
            <summary>
            The field free regions.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FreeRegions.FreeRegion1">
            <summary>
                The free region 1.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FreeRegions.FreeRegion2">
            <summary>
                The free region 2.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FreeRegions.AnyFreeRegion">
            <summary>
                The any free region.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes">
            <summary>
            The ionization modes.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.ElectronImpact">
            <summary>
                The electron impact.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.ChemicalIonization">
            <summary>
                The chemical ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.FastAtomBombardment">
            <summary>
                The fast atom bombardment.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.Electrospray">
            <summary>
                The electrospray.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.AtmosphericPressureChemicalIonization">
            <summary>
                The atmospheric pressure chemical ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.Nanospray">
            <summary>
            <c>nano-spray</c>.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.Thermospray">
            <summary>
            thermo-spray ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.FieldDesorption">
            <summary>
            field desorption.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.MatrixAssistedLaserDesorptionIonization">
            <summary>
            matrix assisted laser desorption ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.GlowDischarge">
            <summary>
            glow discharge.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.AcceptAnyIonizationMode">
            <summary>
            The accept any ionization mode.
            Only applies to filtering.
            If this appears in a file, no mode string is shown.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.PaperSprayIonization">
            <summary>
             paper spray ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.CardNanoSprayIonization">
            <summary>
            Card <c>nanospray</c> ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM1">
            <summary>
            The extension ionization mode 1.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM2">
            <summary>
            The extension ionization mode 2.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM3">
            <summary>
            The extension ionization mode 3.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM4">
            <summary>
            The extension ionization mode 4.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM5">
            <summary>
            The extension ionization mode 5.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM6">
            <summary>
            The extension ionization mode 6.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM7">
            <summary>
            The extension ionization mode 7.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM8">
            <summary>
            The extension ionization mode 8.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IM9">
            <summary>
            The extension ionization mode 9.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes.IonModeBeyondKnown">
            <summary>
            The ion mode is beyond known types.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IsDependent">
            <summary>
                The possible values for scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IsDependent.No">
            <summary>
                Not Dependent.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IsDependent.Yes">
            <summary>
                Is Dependent.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IsDependent.Any">
            <summary>
                Any Type.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes">
            <summary>
                The mass analyzer types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes.ITMS">
            <summary>
                Ion Trap MS.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes.TQMS">
            <summary>
            Triple quad MS.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes.SQMS">
            <summary>
                Single Quad MS.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes.TOFMS">
            <summary>
                TOF MS.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes.FTMS">
            <summary>
                FTMS analyzer.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes.Sector">
            <summary>
                Sector analyzer.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes.Any">
            <summary>
                Any analyzer.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes.MRTOF">
            <summary>
            MultiReflection Time of Flight
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MetaFilterType">
            <summary>
                Meta Filter
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MetaFilterType.None">
            <summary>
            No meta filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MetaFilterType.Hcd">
            <summary>
            HCD meta filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MetaFilterType.Etd">
            <summary>
            ETD meta filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MetaFilterType.Cid">
            <summary>
            CID meta filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MetaFilterType.Uvpd">
            <summary>
            UVPD meta filter.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MetaFilterType.Msn">
            <summary>
            Msn meta filter.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OffOnTypes">
            <summary>
                For raw file types whose "Off" value is 0.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OffOnTypes.Off">
            <summary>
                The off. Used in these modes
            <c>
                SFWidebandOff
                SFSupplementalActivationOff
                SFMultiStateActivationOff
                SFMultiplexOff
                SFParam_A_Off
                SFParam_B_Off
                SFParam_F_Off
                SFParam_K_Off
                SFParam_R_Off
                SFParam_V_Off
            </c>
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OffOnTypes.On">
            <summary>
            The feature is on.
            Used by these filter codes.
            <c>
                SFWidebandOn
                SFSupplementalActivationOn
                SFMultiStateActivationOn
                SFMultiplexOn
                SFParam_A_On
                SFParam_B_On
                SFParam_F_On
                SFParam_K_On
                SFParam_R_On
                SFParam_V_On
            </c>
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OffOnTypes.Any">
            <summary>
                The any.
            Used by these filter codes.
            <c>
                SFAcceptAnyWideband
                SFAcceptAnySupplementalActivation
                SFAcceptAnyMultiStateActivation
                SFAcceptAnyMultiplex
                SFAcceptAnyParam_A
                SFAcceptAnyParam_B
                SFAcceptAnyParam_F
                SFAcceptAnyParam_K
                SFAcceptAnyParam_R
                SFAcceptAnyParam_V
            </c>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnAnyOffTypes">
            <summary>
                The on any off types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnAnyOffTypes.On">
            <summary>
                The on.
                SFDetectorValid
                SFMultiPhotonDissociationOn
                SFElectronCaptureDissociationOn
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnAnyOffTypes.Any">
            <summary>
                The any.
                SFAcceptAnyDetector
                SFAcceptAnyMultiPhotonDissociation
                SFAcceptAnyElectronCaptureDissociation
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnAnyOffTypes.Off">
            <summary>
                The off.
                SFDetectorNotValid
                SFMultiPhotonDissociationOff
                SFElectronCaptureDissociationOff
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnOffTypes">
            <summary>
                For raw file types whose "On" value is 0.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnOffTypes.On">
            <summary>
                Feature is on. Used for these features:
            <c>
                SFSourceCIDon
                SFTurboScanOn
                SFCoronaOn
                SFLockOn
                SFUltraOn
                SFEnhancedOn
                SFPhotoIonizationOn
                SFPulsedQDissociationOn
                SFElectronTransferDissociationOn
                SFHigherenergyCiDOn
                SFCompensationVoltageOn
            </c>
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnOffTypes.Off">
            <summary>
                The feature is off.
            Used by these filter codes
            <c>
                SFSourceCIDoff
                SFTurboScanOff
                SFCoronaOff
                SFLockOff
                SFUltraOff
                SFEnhancedOff
                SFPhotoIonizationOff
                SFPulsedQDissociationOff
                SFElectronTransferDissociationOff
                SFHigherenergyCiDOff
                SFCompensationVoltageOff
            </c>
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnOffTypes.Any">
            <summary>
                any mode accepted. Used for these features:
            <c>
                SFAcceptAnySourceCID
                SFAcceptAnyTurboScan
                SFAcceptAnyCorona
                SFAcceptAnyLock
                SFAcceptAnyUltra
                SFAcceptAnyEnhanced
                SFAcceptAnyPhotoIonization
                SFAcceptAnyPulsedQDissociation
                SFAcceptAnyElectronTransferDissociation
                SFAcceptAnyHigherenergyCiD
                SFAcceptAnyCompensationVoltage
            </c>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.PolarityTypes">
            <summary>
                The polarity types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.PolarityTypes.Negative">
            <summary>
                The negative.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.PolarityTypes.Positive">
            <summary>
                The positive.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.PolarityTypes.Any">
            <summary>
                The any.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.PrecursorEnergy">
            <summary>
                The precursor energy.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.PrecursorEnergy.IsValid">
            <summary>
                The is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.PrecursorEnergy.Any">
            <summary>
                The any.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanDataTypes">
            <summary>
                The scan data types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanDataTypes.Centroid">
            <summary>
                The centroid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanDataTypes.Profile">
            <summary>
                The profile.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanDataTypes.Any">
            <summary>
                The any.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanEventAccurateMassTypes">
            <summary>
                The scan event accurate mass enumeration saved in the raw file. This should not be
                exposed outside of the reader.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanEventAccurateMassTypes.Internal">
            <summary>
                The public.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanEventAccurateMassTypes.External">
            <summary>
                The external.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanEventAccurateMassTypes.Off">
            <summary>
                The off.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanEventAccurateMassTypes.Any">
            <summary>
                Any: Not supported in raw files, only used for filtering
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes">
            <summary>
                The scan types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.NotSpecified">
            <summary>
            Type is not specified.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.Full">
            <summary>
            full scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.Zoom">
            <summary>
            Scan type zoom.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.SIM">
            <summary>
            Scan type SIM.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.SRM">
            <summary>
            Scan type SRM.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.CRM">
            <summary>
            Scan type CRM.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.Any">
            <summary>
            Any scan type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.Q1MS">
            <summary>
            quad 1 MS.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes.Q3MS">
            <summary>
            quad 3 MS.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SectorScans">
            <summary>
                The sector scans.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SectorScans.BSCAN">
            <summary>
            Magnet scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SectorScans.ESCAN">
            <summary>
            Electrostatic scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SectorScans.Any">
            <summary>
            Any sector scanned.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SegmentScanEventType">
            <summary>
                Determines if a scan uses segment and event numbers
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SegmentScanEventType.SegmentScanEventSet">
            <summary>
                Segment and scan event is set
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SegmentScanEventType.AcceptAnySegmentScanEvent">
            <summary>
                Accept any segment scan event
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMCompensationVoltageEnergy">
            <summary>
            The SIM compensation voltage energy modes.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMCompensationVoltageEnergy.SIMCompensationVoltageEnergySet">
            <summary>
            SIM compensation voltage energy set
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMCompensationVoltageEnergy.AcceptAnySIMCompensationVoltageEnergy">
            <summary>
            Accept any SIM compensation voltage energy
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMSourceCIDEnergy">
            <summary>
            The SIM source CID energy.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMSourceCIDEnergy.SIMSourceCIDEnergySet">
            <summary>
            The SIM source CID energy has been set.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMSourceCIDEnergy.AcceptAnySIMSourceCIDEnergy">
            <summary>
            accept any SIM source CID energy.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SourceCIDValidTypes">
            <summary>
                The source cid valid types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SourceCIDValidTypes.SourceCIDEnergyValid">
            <summary>
                The source cid energy valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SourceCIDValidTypes.AcceptAnySourceCIDEnergy">
            <summary>
                The accept any source cid energy.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SourceCIDValidTypes.CompensationVoltageEnergyValid">
            <summary>
                The 'SourceCIDEnergyValid" array is now doing double duty
                for the CVEnergyValid values as well (binary compatibility
                issue). So I added this value to the enumeration to indicate that
                the energy value is for CV, not SID
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes">
            <summary>
                The voltage types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes.NoValue">
            <summary>
                No Value - e.g. CV or SID
                SFSourceCIDTypeNoValue
                SFCompensationVoltageNoValue
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes.SingleValue">
            <summary>
                Single Value - example: sid=40 or cv=40
                SFSourceCIDTypeSingleValue
                SFCompensationVoltageSingleValue
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes.Ramp">
            <summary>
                Ramp - example: sid=40-50
                SFSourceCIDTypeRamp
                SFCompensationVoltageRamp
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes.SIM">
            <summary>
                SIM - example : SIM [100@40, 200@50]
                SFSourceCIDTypeSIM
                SFCompensationVoltageSIM
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes.Any">
            <summary>
                Accept any type.
                SFAcceptAnySourceCIDType
                SFAcceptAnyCompensationVoltageType
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes">
            <summary>
                The MS order types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.NeutralGain">
            <summary>
                The neutral gain.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.NeutralLoss">
            <summary>
                The neutral loss.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.ParentScan">
            <summary>
                The parent scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.AcceptAnyMSorder">
            <summary>
                Accept any MS order.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS">
            <summary>
             MS data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS2">
            <summary>
             MS/MS data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS3">
            <summary>
                The m s 3.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS4">
            <summary>
                The m s 4.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS5">
            <summary>
                The m s 5.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS6">
            <summary>
                The m s 6.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS7">
            <summary>
                The m s 7.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS8">
            <summary>
                The m s 8.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS9">
            <summary>
                The m s 9.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS10">
            <summary>
                The m s 10.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS11">
            <summary>
                The m s 11.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS12">
            <summary>
                The m s 12.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS13">
            <summary>
                The m s 13.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS14">
            <summary>
                The m s 14.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS15">
            <summary>
                The m s 15.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS16">
            <summary>
                The m s 16.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS17">
            <summary>
                The m s 17.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS18">
            <summary>
                The m s 18.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS19">
            <summary>
                The m s 19.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS20">
            <summary>
                The m s 20.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS21">
            <summary>
                The m s 21.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS22">
            <summary>
                The m s 22.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS23">
            <summary>
                The m s 23.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS24">
            <summary>
                The m s 24.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS25">
            <summary>
                The m s 25.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS26">
            <summary>
                The m s 26.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS27">
            <summary>
                The m s 27.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS28">
            <summary>
                The m s 28.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS29">
            <summary>
                The m s 29.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS30">
            <summary>
                The m s 30.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS31">
            <summary>
                The m s 31.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS32">
            <summary>
                The m s 32.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS33">
            <summary>
                The m s 33.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS34">
            <summary>
                The m s 34.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS35">
            <summary>
                The m s 35.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS36">
            <summary>
                The m s 36.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS37">
            <summary>
                The m s 37.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS38">
            <summary>
                The m s 38.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS39">
            <summary>
                The m s 39.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS40">
            <summary>
                The m s 40.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS41">
            <summary>
                The m s 41.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS42">
            <summary>
                The m s 42.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS43">
            <summary>
                The m s 43.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS44">
            <summary>
                The m s 44.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS45">
            <summary>
                The m s 45.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS46">
            <summary>
                The m s 46.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS47">
            <summary>
                The m s 47.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS48">
            <summary>
                The m s 48.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS49">
            <summary>
                The m s 49.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS50">
            <summary>
                The m s 50.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS51">
            <summary>
                The m s 51.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS52">
            <summary>
                The m s 52.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS53">
            <summary>
                The m s 53.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS54">
            <summary>
                The m s 54.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS55">
            <summary>
                The m s 55.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS56">
            <summary>
                The m s 56.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS57">
            <summary>
                The m s 57.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS58">
            <summary>
                The m s 58.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS59">
            <summary>
                The m s 59.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS60">
            <summary>
                The m s 60.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS61">
            <summary>
                The m s 61.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS62">
            <summary>
                The m s 62.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS63">
            <summary>
                The m s 63.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS64">
            <summary>
                The m s 64.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS65">
            <summary>
                The m s 65.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS66">
            <summary>
                The m s 66.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS67">
            <summary>
                The m s 67.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS68">
            <summary>
                The m s 68.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS69">
            <summary>
                The m s 69.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS70">
            <summary>
                The m s 70.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS71">
            <summary>
                The m s 71.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS72">
            <summary>
                The m s 72.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS73">
            <summary>
                The m s 73.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS74">
            <summary>
                The m s 74.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS75">
            <summary>
                The m s 75.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS76">
            <summary>
                The m s 76.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS77">
            <summary>
                The m s 77.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS78">
            <summary>
                The m s 78.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS79">
            <summary>
                The m s 79.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS80">
            <summary>
                The m s 80.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS81">
            <summary>
                The m s 81.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS82">
            <summary>
                The m s 82.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS83">
            <summary>
                The m s 83.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS84">
            <summary>
                The m s 84.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS85">
            <summary>
                The m s 85.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS86">
            <summary>
                The m s 86.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS87">
            <summary>
                The m s 87.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS88">
            <summary>
                The m s 88.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS89">
            <summary>
                The m s 89.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS90">
            <summary>
                The m s 90.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS91">
            <summary>
                The m s 91.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS92">
            <summary>
                The m s 92.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS93">
            <summary>
                The m s 93.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS94">
            <summary>
                The m s 94.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS95">
            <summary>
                The m s 95.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS96">
            <summary>
                The m s 96.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS97">
            <summary>
                The m s 97.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS98">
            <summary>
                The m s 98.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS99">
            <summary>
                The m s 99.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes.MS100">
            <summary>
                The m s 100.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMenergyType">
            <summary>
            The SIM energy type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMenergyType.SID">
            <summary>
            SID energy
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SIMenergyType.Cv">
            <summary>
            CV energy
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FromScanEventAccurateMass(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanEventAccurateMassTypes)">
            <summary>
                The method converts from scan event accurate mass enumeration read from the raw file to
                the Scan Filter (public) Accurate Mass enumeration.
            </summary>
            <param name="massTypesType">
                The scan event's mass type read from the raw file.
            </param>
            <returns>
                The <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes" /> enumeration.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ToleranceUnits">
            <summary>
                The tolerance units.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ToleranceUnits.Mmu">
            <summary>
                Milli-mass unit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ToleranceUnits.Ppm">
            <summary>
                Parts per million.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ToleranceUnits.Amu">
            <summary>
                Atomic Mass Unit.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums">
            <summary>
            The tune data enumerations, for legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType">
            <summary>
            The source type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Unknown">
            <summary>
            The unknown.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Ei">
            <summary>
            electron impact.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Ci">
            <summary>
            chemical ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Esi">
            <summary>
            electro-spray ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Apci">
            <summary>
            atmospheric pressure chemical ionization.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Ld">
            <summary>
            laser desorption.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Fab">
            <summary>
            fast atom bombardment.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Pb">
            <summary>
            particle beam.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.TuneDataEnums.SourceType.Tms">
            <summary>
            thermo-spray ionization.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes">
            <summary>
                The virtual device types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes.NoDevice">
            <summary>
                No device.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes.MsDevice">
            <summary>
                MS Device
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes.MsAnalogDevice">
            <summary>
                Basically same as UV_DEVICE but acquired through MS (not to be confused with UV)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes.AnalogDevice">
            <summary>
                The Analog Device card in the PC
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes.PdaDevice">
            <summary>
                PDA Device
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes.UvDevice">
            <summary>
                UV Device
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes.StatusDevice">
            <summary>
                Special device that has no scan data, but status log only (HN)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.DeviceContainer">
            <summary>
            The device container allow a mimmally initalized version of the device to exists
            which can support version checks or other needs.
            All "large data" is perfomed on first access of the FullDevice.
            "PartialDevice" can be used in a dispose call, as unititze items from
            "FullDevice" will not need to be disposed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.DeviceContainer.PartialDevice">
            <summary>
            Gets or sets an instance of the device that has been minimally initialized
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.DeviceContainer.FullDevice">
            <summary>
            Gets or sets an instance of the device, which contains all data.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.FileHeaderLoader">
            <summary>
            The file header loader. Reads an Xcalibur file header.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.FileHeaderLoader.LoadFromFile(System.String)">
            <summary>
            Create a File Header interface to read a file header.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Access to the file header</returns>
            <exception cref="T:System.ArgumentException">Thrown when there are problems with the file name</exception>
            <exception cref="T:System.ApplicationException">Only 64 bit applications are supported by this project</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig">
            <summary>
            The AutoSamplerConfig interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig.TrayIndex">
            <summary>
            Gets the tray index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig.TrayName">
            <summary>
            Gets the tray name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig.TrayShape">
            <summary>
            Gets the tray shape.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig.VialIndex">
            <summary>
            Gets the vial index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig.VialsPerTray">
            <summary>
            Gets the vials per tray.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig.VialsPerTrayX">
            <summary>
            Gets the vials per tray x.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IAutoSamplerConfig.VialsPerTrayY">
            <summary>
            Gets the vials per tray y.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures">
            <summary>
            The additional (optional) features which can be returned with a scan.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures.None">
            <summary>
            Nothing but mass intensity and peak flags
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures.NoiseAndBaseline">
            <summary>
            Noise and baseline values
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures.Chagre">
            <summary>
            Return Charge Data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures.Resolution">
            <summary>
            Return Resolution data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures.Profile">
            <summary>
            Profile data may be needed
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures.Debug">
            <summary>
            Debug data may be needed
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures.All">
            <summary>
            Return all data
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice">
            <summary>
                The Device interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.DeviceType">
            <summary>
                Gets the device type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.ErrorLogEntries">
            <summary>
                Gets the error log entries.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.InstrumentId">
            <summary>
                Gets the instrument id.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.RunHeader">
            <summary>
                Gets the run header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.StatusLogEntries">
            <summary>
                Gets the status log entries.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.OffsetOfEndOfDevice">
            <summary>
            Gets the absolute position of the end of this device data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.InAcquisition">
            <summary>
            Gets or sets a value indicating whether this was initialized when the file was in acquisition.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.Initialize">
            <summary>
            Support for lazy init of device.
            Device construction does "some work" to validate a device.
            Any "heavy data decoding" is delayed until the device is first used.
            </summary>
            <returns>The device</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.GetScanIndex(System.Int32)">
            <summary>
            The method gets the scan index for the scan number.
            </summary>
            <param name="spectrum">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex"/> object for the scan number.
            </returns>
            <exception cref="T:System.Exception">
            If the scan number is not in range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.GetRetentionTime(System.Int32)">
            <summary>
            The method gets the retention time for the scan number.
            </summary>
            <param name="spectrum">
            The scan number.
            </param>
            <returns>
            The retention time for the scan number.
            </returns>
            <exception cref="T:System.Exception">
            If the scan number is not in range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.GetPacket(System.Int32,System.Boolean,System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            Gets the packet.
            </summary>
            <param name="scanNumber">The scan number.</param>
            <param name="includeReferenceAndExceptionData">if set to <c>true</c> [include reference and exception data].</param>
            <param name="channelNumber">For UV device only, negative one (-1) for getting all the channel data by the given scan number</param>
            <param name="packetScanDataFeatures">Optional data which can be returned with a scan</param>
            <returns>The data for the scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice.GetSegmentPeaks(System.Int32,System.Int32@,System.Int32@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket@,System.Boolean)">
            <summary>
            Gets the segment peaks.
            </summary>
            <param name="scanNum">
            The scan number.
            </param>
            <param name="numSegments">
            The number segments.
            </param>
            <param name="numAllPeaks">
            The number all peaks.
            </param>
            <param name="packet">
            The packet.
            </param>
            <param name="includeReferenceAndExceptionData">
            if set to <c>true</c> [include reference and exception data].
            </param>
            <returns>
            The data for the scan
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IErrorLog">
            <summary>
            The Error Log interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IErrorLog.Count">
            <summary>
                Gets the number of entries in the error log.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IErrorLog.GetItem(System.Int32)">
            <summary>
            The method gets an error log item by looking up the index
            </summary>
            <param name="index">The index.</param>
            <returns>return the entries in the log by index</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent">
            <summary>
            The FilterScanEvent interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.MetaFilters">
            <summary>
            Gets or sets the meta filters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.FilterMassPrecision">
            <summary>
            Gets or sets the filter mass precision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.LocaleName">
            <summary>
            Gets or sets the locale name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.TotalSourceValues">
            <summary>
            Gets the total source values, which is all CID and CV.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.CompensationVoltagesValid">
            <summary>
            Gets the table of compensation voltages valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.SourceCidVoltagesValid">
            <summary>
            Gets the table of source CID valid.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.NumCompensationVoltageValues">
            <summary>
            Calculate the number of compensation voltage values.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.SetFilterMassResolutionByMassPrecision(System.Int32)">
            <summary>
            set filter mass resolution by mass precision.
            Example: "precision =3", resolution = "0.001"
            </summary>
            <param name="precision">
            The precision.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.SetFilterMassResolution(System.Double)">
            <summary>
            set filter mass resolution.
            </summary>
            <param name="massResolution">
            The mass resolution.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.ToString">
            <summary>
            convert to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent.NumSourceCidInfoValues">
            <summary>
            Gets the number of source CID info values.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IIcisStatusLog">
            <summary>
            Defines status from ICIS system instruments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IIcisStatusLog.Status">
            <summary>
            Gets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId">
            <summary>
                The Instrument Id interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.AbsorbanceUnit">
            <summary>
                Gets or sets the absorbance unit.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.ChannelLabels">
            <summary>
                Gets the channel labels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.Flags">
            <summary>
                Gets the flags.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.HardwareVersion">
            <summary>
                Gets the hardware rev.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.IsValid">
            <summary>
                Gets a value indicating whether is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.Model">
            <summary>
                Gets the model.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.Name">
            <summary>
                Gets the name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.SerialNumber">
            <summary>
                Gets the serial number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.SoftwareVersion">
            <summary>
                Gets the software rev.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.AxisLabelX">
            <summary>
                Gets the x axis.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.AxisLabelY">
            <summary>
                Gets the y axis.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentId.IsTsqQuantumFile">
            <summary>
            Gets a value indicating whether this instance is TSQ quantum file.
            </summary>
            <value>
            <c>true</c> if this instance is TSQ quantum file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder">
            <summary>
            Provides methods to write an instrument method file.<para/>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder.Name">
            <summary>
            Gets the instrument method file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder.FileHeader">
            <summary>
            Gets the file header for the instrument method file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder.UpdateFileHeaderDescription(System.String)">
            <summary>
            Updates the file header field - "Description".
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder.UpdateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.IFileHeader)">
            <summary>
            Update the instrument method file header with the file header values passed in.  
            Only updates object values in memory, does not write to disk.
            </summary>
            <param name="fileHeader">The file header.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder.GetDevices">
            <summary>
            Get the list of device methods which are currently defined in this instrument method.<para/>
            Returns an empty list, if this is a newly created instrument method.<para/>
            ---
            In order to add/update device method, caller should first call this to get the list of devices.<para/>
            Once you've the list, you can start adding a new device method or editing/removing an existing device method.
            </summary>
            <returns>The list of device methods.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder.SaveAs(System.String)">
            <summary>
            Save this instrument methods to a file.<para/>
            It should overwrite the instrument methods file if the file exists; otherwise, a 
            new file should be created.
            </summary>
            <param name="fileName">File name of the instrument method.</param>
            <returns>True if save successfully; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">name;@The name cannot be empty.</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor">
            <summary>
            The Memory Mapped Accessor interface that has read and write capabilities.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader">
            <summary>
            The Memory Map Reader interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.InitialOffset">
            <summary>
            Gets the initial offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.SizeOfView">
            <summary>
            Gets the size of view.
            </summary>
            <value>
            The size of view.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.StreamId">
            <summary>
            Gets the stream id.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadStructArray``1(System.Int64,System.Int64@)">
            <summary>
            Reads the structure array.
            </summary>
            <typeparam name="T">Type of structure</typeparam>
            <param name="offset">The offset into the map.</param>
            <param name="numberOfBytesRead">The number of bytes read.</param>
            <returns>Array of structures</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadByte(System.Int64)">
            <summary>
            The method reads a byte.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadBytes(System.Int64,System.Int32)">
            <summary>
            The method reads an array of bytes.
            </summary>
            <param name="offset">The offset into the map.</param>
            <param name="count">
            The count.
            </param>
            <returns>
            The byte array.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadDouble(System.Int64)">
            <summary>
            The method reads a double.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadDoubles(System.Int64,System.Int32)">
            <summary>
            Reads an array of double.
            </summary>
            <param name="offset">The offset into the map.</param>
            <param name="count">The count.</param>
            <returns>The array of doubles</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadFloat(System.Int64)">
            <summary>
            The method reads a float.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadFloats(System.Int64,System.Int32)">
            <summary>
            Reads floats, as an array
            </summary>
            <param name="offset">The offset into the map.</param>
            <param name="count">The count.</param>
            <returns>The array of floats</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadInt(System.Int64)">
            <summary>
            The method reads an integer.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadInts(System.Int64,System.Int32)">
            <summary>
            Reads the integers.
            </summary>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>The array of integers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadUnsignedInts(System.Int64,System.Int32)">
            <summary>
            The method reads an array of unsigned integers.
            </summary>
            <param name="offset">The offset into the map.</param>
            <param name="count">
            The number of unsigned integers to read.
            </param>
            <returns>
            The array of unsigned integers.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadPreviousRevisionAndConvert``1(System.Int64,System.Int32)">
            <summary>
            The method reads a previous revision structure struct and convert it to the current target revision.
            </summary>
            <param name="offset">
            The position from the beginning of the file to start reading.
            </param>
            <param name="sizeOfPreviousRevStruct">
            The size of previous revision structure.
            </param>
            <typeparam name="T">
            The type of the target structure.
            </typeparam>
            <returns>
            The target structure.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadShort(System.Int64)">
            <summary>
            Reads the short.
            </summary>
            <param name="offset">The offset into the map.</param>
            <returns>The short</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadString(System.Int64,System.Int64@)">
            <summary>
            Reads the string.
            </summary>
            <param name="offset">The offset into the map.</param>
            <param name="numOfBytesRead">The number of bytes read.</param>
            <returns>The string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadStrings(System.Int64,System.Int64@)">
            <summary>
            The method reads a collection of strings starting at the supplied offset
            </summary>
            <param name="offset">
            The position to start reading.
            </param>
            <param name="numOfBytesRead">The number of bytes read</param>
            <returns>
            The collection of strings.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadSimpleStructure``1(System.Int64)">
            <summary>
            This method reads a simple structure at the start position.
            Simple structure should have only basic fields <c>(int, float etc)</c>
            and no internally marshaled data (such as fixed size arrays, or ref types)
            </summary>
            <param name="offset">
            The start position.
            </param>
            <typeparam name="T">
            The structure to read.
            </typeparam>
            <returns>
            The structure.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadSimpleStructureArray``1(System.Int64,System.Int32)">
            <summary>
            This method reads a simple structure array at the start position.
            Simple structure should have only basic fields <c>(int, float etc)</c>
            and no internally marshaled data (such as fixed size arrays, or ref types)
            </summary>
            <param name="offset">
            The start position.
            </param>
            <param name="count">Number of array elements</param>
            <typeparam name="T">
            The structure to read.
            </typeparam>
            <returns>
            The structure.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadStructure``1(System.Int64,System.Int64@)">
            <summary>
            The over loaded method reads the structure at the start position,
            using the Marshal class to determine the size.
            </summary>
            <param name="offset">
            The start position.
            </param>
            <param name="numberOfBytesRead">The number of byte read</param>
            <typeparam name="T">
            The structure to read.
            </typeparam>
            <returns>
            The structure.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadStructure``1(System.Int64,System.Int32)">
            <summary>
            The over loaded method reads the structure at the start position,
            The structure size is passed in.
            </summary>
            <param name="offset">
            The start position.
            </param>
            <param name="numberOfBytesToRead">The number of bytes to read</param>
            <typeparam name="T">
            The structure to read.
            </typeparam>
            <returns>
            The structure.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadUnsignedInt(System.Int64)">
            <summary>
            The method reads an unsigned integer.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.UInt32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadUnsignedShort(System.Int64)">
            <summary>
            The method reads an unsigned short.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.UInt16"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadWideChars(System.Int64,System.Int64@)">
            <summary>
            Read a number of wide characters, and convert to string.
            If there is a '0' in the string, the string length will be adjusted.
            </summary>
            <param name="offset">The offset into the view.</param>
            <param name="numOfBytesRead">The number of bytes read.</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadWideChars(System.Int64,System.Int64@,System.UInt32)">
            <summary>
            Read a number of wide characters, and convert to string
            </summary>
            <param name="offset">Offset into the view</param>
            <param name="numOfBytesRead">Number of bytes read by this call (added to input value)</param>
            <param name="stringSize">Number of 2 byte chars</param>
            <returns>converted string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader.ReadLargeData(System.Int64,System.Int32)">
            <summary>
            read an array of bytes from a view, expecting a large data array.
            This uses 64 bit items, to cut down Marshalling overheads
            </summary>
            <param name="startPos">
            The start position.
            </param>
            <param name="count">The count of bytes to read</param>
            <returns>
            The array
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter">
            <summary>
            The Memory Map Writer interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.WriteStruct``1(System.Int64,``0)">
            <summary>
            Writes the structure.
            </summary>
            <typeparam name="T">
            Type of structure
            </typeparam>
            <param name="offset">
            The offset.
            </param>
            <param name="data">
            The data.
            </param>
            <returns>
            The number of bytes written
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.WriteStruct``1(System.Int64,``0,System.Int32)">
            <summary>
            write a struct.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <param name="data">
            The data.
            </param>
            <param name="numBytesWrite">
            The number of bytes to write.
            </param>
            <typeparam name="T">Type of structure to write
            </typeparam>
            <returns>
            The number of bytes written
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.WriteFloat(System.Int64,System.Single)">
            <summary>
            Writes the float to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.WriteDouble(System.Int64,System.Double)">
            <summary>
            Writes the double to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.WriteByte(System.Int64,System.Byte)">
            <summary>
            Writes the byte to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.WriteBytes(System.Int64,System.Byte[])">
            <summary>
            Writes the array of bytes to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.WriteShort(System.Int64,System.Int16)">
            <summary>
            Writes the short to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.WriteInt(System.Int64,System.Int32)">
            <summary>
            Writes the integer to the memory mapped file.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter.IncrementInt(System.Int32)">
            <summary>
            Using Interlocked operation to increment the specified INT (4-byte) variable and
            stores the result, as an atomic operation against memory-mapped files in .NET.
            Note: This method is marked as UNSAFE, which is required for operating
            memory-mapped file pointer.
            </summary>
            <param name="offset">The number of bytes into the accessor at which to begin writing.</param>
            <returns>The incremented value</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMethod">
            <summary>
            The Method interface, for instrument method files
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMethod.MethodSize">
            <summary>
            Gets the method size.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMethod.StartingOffset">
            <summary>
            Gets the starting offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMethod.OriginalStorageName">
            <summary>
            Gets the original storage name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMethod.StorageDescriptions">
            <summary>
            Gets the storage descriptions.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMethod.SaveMethodFile(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.String,System.Boolean)">
            <summary>
            save a method file.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="methodFilePath">
            The method file path.
            </param>
            <param name="forceOverWrite">
            The force over write.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileDeviceWriter">
            <summary>
            The RawFileDeviceWriter interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileDeviceWriter.Save(System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Int64,System.Int64@)">
            <summary>
            The save.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <param name="packetDataOffset">
            The packet data offset.
            </param>
            <param name="controllerHeaderOffset">
            The controller header offset.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileDeviceWriter.Refresh">
            <summary>
            Refresh data from memory maps
            </summary>
            <returns>
            True if OK
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileDeviceWriter.RunHeader">
            <summary>
            Gets the run header.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo">
            <summary>
            The RawFileInfo interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.BlobSize">
            <summary>
                Gets the blob size.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.BlobStart">
            <summary>
                Gets the blob start.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.ComputerName">
            <summary>
                Gets or sets the computer name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.HasExpMethod">
            <summary>
                Gets a value indicating whether has experiment method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.IsInAcquisition">
            <summary>
                Gets a value indicating whether is in acquisition.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.MsDataOffset">
            <summary>
                Gets or sets the mass spec data offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.NextAvailableControllerIndex">
            <summary>
                Gets the next available controller index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.NumberOfVirtualControllers">
            <summary>
                Gets the number of virtual controllers.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.TimeStamp">
            <summary>
            Gets the time stamp.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.UserLabels">
            <summary>
                Gets the user texts.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.VirtualControllers">
            <summary>
                Gets the virtual controller data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.NumberOfVirtualControllersOfType(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes)">
            <summary>
            The number of virtual controllers of type.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileInfo.UpdateVirtualController(System.Int32,System.Int64,System.Int64,System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes)">
            <summary>
            Updates the virtual controller.
            </summary>
            <param name="numVirControllers">The number virtual controllers.</param>
            <param name="virOffset">The virtual data offset </param>
            <param name="offset">The offset.</param>
            <param name="virDeviceIndex">Index of the virtual device.</param>
            <param name="virDeviceType">Type of the virtual device.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent">
            <summary>
            The ScanEvent interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.AccurateMassType">
            <summary>
            Gets the accurate mass type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.CompensationVoltage">
            <summary>
            Gets the compensation voltage.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.CompensationVoltageType">
            <summary>
            Gets the compensation voltage type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Corona">
            <summary>
            Gets the corona value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.DependentDataFlag">
            <summary>
            Gets the dependent data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Detector">
            <summary>
            Gets the Detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.DetectorValue">
            <summary>
            Gets the detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ElectronCaptureDissociation">
            <summary>
            Gets the electron capture dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ElectronCaptureDissociationType">
            <summary>
            Gets the electron capture dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ElectronTransferDissociation">
            <summary>
            Gets the electron transfer dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ElectronTransferDissociationType">
            <summary>
            Gets the electron transfer dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Enhanced">
            <summary>
            Gets the enhanced.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.FreeRegion">
            <summary>
            Gets the free region.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.HigherEnergyCid">
            <summary>
            Gets the higher energy CID.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.HigherEnergyCidType">
            <summary>
            Gets the higher energy CID type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.IonizationMode">
            <summary>
            Gets the ionization mode.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.IsCustom">
            <summary>
            Gets a value indicating whether the scan event is custom - true if trailer
                scan event should be used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.IsValid">
            <summary>
            Gets a value indicating whether the scan event is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Lock">
            <summary>
            Gets the lock.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.MsOrder">
            <summary>
            Gets the MS order.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.MassAnalyzerType">
            <summary>
            Gets the mass analyzer type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.MassCalibrators">
            <summary>
            Gets the mass calibrators.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.MassRanges">
            <summary>
            Gets the mass ranges.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.MultiPhotonDissociation">
            <summary>
            Gets the multi photon dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.MultiPhotonDissociationType">
            <summary>
            Gets the multi photon dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.MultiStateActivation">
            <summary>
            Gets the multi state activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Multiplex">
            <summary>
            Gets the multiplex.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ParamA">
            <summary>
            Gets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ParamB">
            <summary>
            Gets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ParamF">
            <summary>
            Gets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.SpsMultiNotch">
            <summary>
            Gets the parameter k.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ParamR">
            <summary>
            Gets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ParamV">
            <summary>
            Gets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.PhotoIonization">
            <summary>
            Gets the photo ionization.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Polarity">
            <summary>
            Gets the polarity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.PulsedQDissociation">
            <summary>
            Gets the pulsed q dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.PulsedQDissociationType">
            <summary>
            Gets the pulsed q dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Reactions">
            <summary>
            Gets the reactions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ScanDataType">
            <summary>
            Gets the scan data type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ScanType">
            <summary>
            Gets the scan type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ScanTypeIndex">
            <summary>
            Gets the scan type index. Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.SectorScan">
            <summary>
            Gets the sector scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.SourceFragmentation">
            <summary>
            Gets the source fragmentation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.SourceFragmentationMassRanges">
            <summary>
            Gets the source fragmentation mass ranges.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.SourceFragmentationType">
            <summary>
            Gets value to indicate how source fragmentation values are interpreted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.SourceFragmentations">
            <summary>
            Gets or sets the source fragmentations.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.SupplementalActivation">
            <summary>
            Gets the supplemental activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.TurboScan">
            <summary>
            Gets the turbo scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Ultra">
            <summary>
            Gets the ultra.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.Wideband">
            <summary>
            Gets the wideband.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.ToAutoFilterString(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.Int32,System.Int32,System.Int32)">
            <summary>
            To the automatic filter string.
            </summary>
            <param name="scanEvent">The scan event.</param>
            <param name="massPrecision">The mass precision.</param>
            <param name="charsMax">The chars maximum.</param>
            <param name="energyPrecision">The energy precision.</param>
            <returns>Auto filter string.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent.GetRunHeaderFilterMassPrecision">
            <summary>
            Gets the run header filter mass precision.
            </summary>
            <returns>the run header filter mass precision</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit">
            <summary>
            Define an editable scan event interface
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.AccurateMassType">
            <summary>
            Gets or sets the accurate mass type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ScanDataType">
            <summary>
            Gets or sets the scan data type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Polarity">
            <summary>
            Gets or sets the Polarity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.MsOrder">
            <summary>
            Gets or sets the scan power setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MSOrderTypes"/> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.DependentDataFlag">
            <summary>
            Gets or sets the dependent scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.SourceFragmentation">
            <summary>
            Gets or sets source fragmentation scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ScanType">
            <summary>
            Gets or sets the scan type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Detector">
            <summary>
            Gets or sets the Detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.MassAnalyzerType">
            <summary>
            Gets or sets the mass analyzer type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.SourceFragmentationType">
            <summary>
            Gets or sets a value which indicates how source fragmentation values are interpreted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.TurboScan">
            <summary>
            Gets or sets the turbo scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.IonizationMode">
            <summary>
            Gets or sets the ionization mode.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.DetectorValue">
            <summary>
            Gets or sets the detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Corona">
            <summary>
            Gets or sets the corona value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Wideband">
            <summary>
            Gets or sets the wideband.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.SectorScan">
            <summary>
            Gets or sets the sector scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Ultra">
            <summary>
            Gets or sets the ultra.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Lock">
            <summary>
            Gets or sets the lock.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Enhanced">
            <summary>
            Gets or sets the enhanced.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.FreeRegion">
            <summary>
            Gets or sets the free region.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.MultiPhotonDissociation">
            <summary>
            Gets or sets the multi photon dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.MultiPhotonDissociationType">
            <summary>
            Gets or sets the multi photon dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ElectronCaptureDissociation">
            <summary>
            Gets or sets the electron capture dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ElectronCaptureDissociationType">
            <summary>
            Gets or sets the electron capture dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.PulsedQDissociation">
            <summary>
            Gets or sets the pulsed q dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.PulsedQDissociationType">
            <summary>
            Gets or sets the pulsed q dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.PhotoIonization">
            <summary>
            Gets or sets the photo ionization.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ElectronTransferDissociationType">
            <summary>
            Gets or sets the electron transfer dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.SupplementalActivation">
            <summary>
            Gets or sets the supplemental activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.SpsMultiNotch">
            <summary>
            Gets or sets SPS Multi notch (Synchronous Precursor Selection)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ParamR">
            <summary>
            Gets or sets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ParamV">
            <summary>
            Gets or sets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ParamA">
            <summary>
            Gets or sets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ParamB">
            <summary>
            Gets or sets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ParamF">
            <summary>
            Gets or sets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.MultiStateActivation">
            <summary>
            Gets or sets the multi state activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.Multiplex">
            <summary>
            Gets or sets the multiplex.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.HigherEnergyCid">
            <summary>
            Gets or sets the higher energy CID.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.HigherEnergyCidType">
            <summary>
            Gets or sets the higher energy CID type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.ElectronTransferDissociation">
            <summary>
            Gets or sets the electron transfer dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.CompensationVoltage">
            <summary>
            Gets or sets the compensation voltage.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanEventEdit.CompensationVoltageType">
            <summary>
            Gets or sets the compensation voltage type.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawObjectBase">
            <summary>
            Base of objects which can be loaded from a raw file.
            Defines ability to load an object.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawObjectBase.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRealTimeAccess">
            <summary>
            The RealTimeAccess interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRealTimeAccess.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRealTimeAccess.HeaderFileMapName">
            <summary>
            Gets the header file map name. <para/>
            It's only meaningful in Generic data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRealTimeAccess.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRealTimeAccess.RefreshViewOfFile">
            <summary>
            Close and reopen all of the file mapping objects for this file object
            </summary>
            <returns>True refresh succeed, false otherwise </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader">
            <summary>
            The RunHeader interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.Revision">
            <summary>
            Gets the software revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.EndTime">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.FirstSpectrum">
            <summary>
            Gets the first spectrum.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.LastSpectrum">
            <summary>
            Gets the last spectrum.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.LowMass">
            <summary>
            Gets the low mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.HighMass">
            <summary>
            Gets the high mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.MaxIntensity">
            <summary>
            Gets the maximum intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.MaxIntegratedIntensity">
            <summary>
            Gets the max integrated intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.Comment1">
            <summary>
            Gets the comment 1.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.Comment2">
            <summary>
            Gets the comment 2.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.DataPktFilename">
            <summary>
            Gets the data Packet filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.ErrorLogFilename">
            <summary>
            Gets the error log filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.ErrorLogPos">
            <summary>
            Gets or sets the error log position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.ExpectedRunTime">
            <summary>
            Gets the expected run time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.FilterMassPrecision">
            <summary>
            Gets the filter mass precision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.InstIdFilename">
            <summary>
            Gets the instrument id file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.InstScanEventsFilename">
            <summary>
            Gets the instrument scan events file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.IsInAcquisition">
            <summary>
            Gets a value indicating whether the device is in acquisition.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.MassResolution">
            <summary>
            Gets the mass resolution.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.NumErrorLog">
            <summary>
            Gets the number of error logs.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.NumSpectra">
            <summary>
            Gets the number of spectra.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.NumStatusLog">
            <summary>
            Gets the number of  status log.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.NumTrailerExtra">
            <summary>
            Gets the number of  trailer extra.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.NumTrailerScanEvents">
            <summary>
            Gets the number of  trailer scan events.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.NumTuneData">
            <summary>
            Gets the number of  tune data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.PacketPos">
            <summary>
            Gets or sets the packet position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.RunHeaderPos">
            <summary>
            Gets the run header position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.ScanEventsFilename">
            <summary>
            Gets the scan events file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.SpectFilename">
            <summary>
            Gets the spectra file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.SpectrumPos">
            <summary>
            Gets or sets the spectrum position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.StatusLogFilename">
            <summary>
            Gets the status log filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.StatusLogHeaderFilename">
            <summary>
            Gets the status log header filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.StatusLogPos">
            <summary>
            Gets or sets the status log position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.ToleranceUnit">
            <summary>
            Gets the tolerance unit.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.TrailerExtraFilename">
            <summary>
            Gets the trailer extra filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.TrailerExtraPos">
            <summary>
            Gets or sets the trailer extra position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.TrailerHeaderFilename">
            <summary>
            Gets the trailer header filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.TrailerScanEventsFilename">
            <summary>
            Gets the trailer scan events filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.TrailerScanEventsPos">
            <summary>
            Gets or sets the trailer scan events position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.TuneDataFilename">
            <summary>
            Gets the tune data filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.TuneDataHeaderFilename">
            <summary>
            Gets the tune data header filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.RunHeaderStruct">
            <summary>
            Gets the internal run header struct.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader.Copy(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="src">The source.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex">
            <summary>
                The Scan Index interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex.NumberPackets">
            <summary>
                Gets the number packets.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex.PacketType">
            <summary>
                Gets the packet type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex.DataOffset">
            <summary>
                Gets the data offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex.StartTime">
            <summary>
                Gets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex.Tic">
            <summary>
                Gets the Tic value.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow">
            <summary>
                The Sequence Row interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.Barcode">
            <summary>
            Gets the barcode.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.BarcodeStatus">
            <summary>
            Gets the barcode status.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.CalLevel">
            <summary>
                Gets the calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.CalibFile">
            <summary>
            Gets the calibration file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.Comment">
            <summary>
                Gets the comment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.ConcentrationDilutionFactor">
            <summary>
                Gets the concentration or dilution factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.ExtraUserColumns">
            <summary>
            Gets the extra user columns.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.InjectionVolume">
            <summary>
                Gets the injection volume
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.Inst">
            <summary>
            Gets the instrument.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.InternalStandardAmount">
            <summary>
                Gets the internal standard amount
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.RawFileName">
            <summary>
            Gets the raw file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.Revision">
            <summary>
                Gets the format revision of this object
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.RowNumber">
            <summary>
                Gets the sequence row number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.SampleId">
            <summary>
                Gets the sample id
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.SampleName">
            <summary>
                Gets the sample name
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.SampleType">
            <summary>
                Gets the (application specific) sample type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.SampleVolume">
            <summary>
                Gets the sample volume
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.SampleWeight">
            <summary>
                Gets the sample weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.UserTexts">
            <summary>
            Gets the user texts.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.ISequenceRow.Vial">
            <summary>
                Gets the short vial string (obsolete?)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog">
            <summary>
            The Status Log interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.Count">
            <summary>
                Gets the number of Status log items.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.DataDescriptors">
            <summary>
                Gets the data descriptors.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.GetItem(System.Double)">
            <summary>
            The method performs a binary search to find the status entry that is closest to the given retention time.
            </summary>
            <param name="retentionTime">
            The retention time.
            </param>
            <returns>
            The status entry containing the <see cref="T:System.Collections.Generic.List`1"/> of label value pairs for the retention time. 
            If there are no entries in the log, it will an empty list.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.GetItemValues(System.Int32)">
            <summary>
            The method gets all the log entries' value pair at the specified index.
            </summary>
            <param name="index">
            The index into the "status log header" for this field.
            </param>
            <returns>
            All the log entries' value pair at the specified index.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.GetStatusRecordByIndex(System.Int32)">
            <summary>
            Gets the status log for a given index into the set of logs.
            This returns the log and it's time stamp.
            </summary>
            <param name="index">Index into table of logs <c>(from 0 to RunHeader.NumStatusLog-1)</c></param>
            <returns>The log values for the given index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.GetStatusLogEntryByIndex(System.Int32)">
            <summary>
            Gets the (raw) status log data at a given index in the log.
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="index">Index (from 0 to "RunHeader.StatusLogCount -1")</param>
            <returns>Log data at the given index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.GetStatusLogEntryByRetentionTime(System.Double)">
            <summary>
            Gets the (raw) status log data at a given retention time in the log.
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="retentionTime">Retention time</param>
            <returns>Log data at the given retention time</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.StatusLogPlottableData">
            <summary>
            Gets the labels and index positions of the status log items which may be plotted.
            That is, the numeric items.
            </summary>
            <returns>Labels names are returned by "Key" and the index into the log is "Value".</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog.GetSortedStatusLogEntryByIndex(System.Int32)">
            <summary>
            Get a status log record from the sorted log
            which fixes out of order or duplictae instrument data
            </summary>
            <param name="index"></param>
            <returns>The log entry</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IUserIdStamp">
            <summary>
            The UserIdStamp interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IUserIdStamp.DateAndTime">
            <summary>
                Gets or sets the time when this stamp was created
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IUserIdStamp.UserName">
            <summary>
                Gets or sets the name of the user who acquired the file. For example "John Smith"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IUserIdStamp.WindowsLogin">
            <summary>
                Gets or sets the login name of the operator who acquired the file. For example "jsmith"
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.LoaderBase">
            <summary>
            Class for various file loaders, with common
            file header format
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.LoaderBase.Header">
            <summary>
            Gets or sets the file header.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.LoaderBase.CheckForValidVersion(System.String)">
            <summary>
            Check for valid version of the file
            </summary>
            <param name="fileType">
            The file Type.
            </param>
            <returns>
            The version number
            </returns>
            <exception cref="T:System.Exception">
            If version is not valid
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader">
            <summary>
            The processing method file loader.
            Loads data from PMD file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value>
              <c>true</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ProcessingMethodFileName">
            <summary>
            Gets the processing method file name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader"/> class. 
            Default constructor initializes a new instance of ProcessingMethodFileLoader class.
            Must be called prior to data access
            </summary>
            <param name="fileName">
            The file path.
            </param>
            <exception cref="T:System.ArgumentException">
            The file path is empty or null.
            </exception>
            <exception cref="T:System.Exception">
            A problem encountered when reading the raw file.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.LoadProcessingMethodFile(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor)">
            <summary>
            Load data from a processing method file.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ViewType">
            <summary>
            Gets the view type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.RawFileName">
            <summary>
            Gets the raw file name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.SkipLegacyCustomReports(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            skip any legacy custom reports (not imported)
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position in the view.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated map offset
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadSummaryReports(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read the summary reports
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position in the view.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated map offset
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadPrograms(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read the programs (EXE).
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position in the view.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated map offset
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadReports(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read the report names.
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position in the view.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated map offset
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadLibrarySearch(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read library search settings
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position, in the map
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated start, for the next object
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadSpecEnhancement(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read spec enhancement settings
            </summary>
            <param name="viewer">
            The viewer (memory map).
            </param>
            <param name="startPos">
            The start position, in the map.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated start, for the next object
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadProcessingMethodOptions(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            read processing method options.
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position, in the map.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated start, for the next object
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadStandardReport(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read standard report options
            </summary>
            <param name="viewer">
            The viewer (memory map).
            </param>
            <param name="startPos">
            The start position, in the map.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated start, for the next object.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadPeakDetection(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read peak detection settings
            </summary>
            <param name="viewer">
            The viewer (memory map).
            </param>
            <param name="startPos">
            The start position, in the map.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated start, for the next object.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ReadRtChro(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read and skip real time report settings
            </summary>
            <param name="viewer">
            The viewer (memory map).
            </param>
            <param name="startPos">
            The start position, in the map.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The updated start, for the next object.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.ProcessingMethodOptions">
            <summary>
            Gets the processing method options.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.StandardReport">
            <summary>
            Gets Options for "standard reports"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.PeakDetection">
            <summary>
            Gets the peak detection.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.SpecEnhancementOptions">
            <summary>
            Gets the spec enhancement options.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.LibrarySearch">
            <summary>
            Gets the library search.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.LibraryConstraints">
            <summary>
            Gets the library constraints.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.SampleReports">
            <summary>
            Gets the sample reports.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.Programs">
            <summary>
            Gets the programs.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.SummaryReports">
            <summary>
            Gets the summary reports.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.PeakDisplayOptions">
            <summary>
            Gets the peak display options.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.PeakPurity">
            <summary>
            Gets the peak purity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.Components">
            <summary>
            Gets the components.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.ProcessingMethodFileLoader.MassOptions">
            <summary>
            Gets or sets the mass options.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.IErrors">
            <summary>
            The Errors interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.IErrors.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.IErrors.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader">
            <summary>
            The raw file loader.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader"/> class from being created.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader"/> class. 
            Default constructor initializes a new instance of RawFile class.
            Must be called prior to data access
            </summary>
            <param name="fileName">
            The file path.
            </param>
            <exception cref="T:System.ArgumentException">
            The file path is empty or null.
            </exception>
            <exception cref="T:System.Exception">
            A problem encountered when reading the raw file.
            </exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.RawFileName">
            <summary>
            Gets the raw file path.
            </summary>
            <value>
            The raw file path.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value>
              <c>true</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.AutoSamplerConfig">
            <summary>
            Gets the auto sampler config.
            </summary>
            <value>
            The automatic sampler configuration.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
            <value>
            The method information.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.RawFileInformation">
            <summary>
            Gets or sets the raw file information.
            </summary>
            <value>
            The raw file information.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.Devices">
            <summary>
            Gets the devices.
            </summary>
            <value>
            The devices.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.Sequence">
            <summary>
            Gets or sets the sequence.
            </summary>
            <value>
            The sequence.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.StreamId">
            <summary>
            Gets the stream id.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.HeaderFileMapName">
            <summary>
            Gets the header file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.AuditTrailInfo">
            <summary>
            Gets the audit trail information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.TestIfStillInAcquisition">
            <summary>
            Test if the file is still in acquisition.
            </summary>
            <returns>
            True if the file is still in acquisition.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.Dispose">
            <summary>
                The dispose.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.ExportInstrumentMethod(System.String,System.Boolean)">
            <summary>
            The export instrument method.
            </summary>
            <param name="methodFilePath">
            The method file path.
            </param>
            <param name="forceOverwrite">
            The force overwrite.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.LoadRawFile(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Boolean)">
            <summary>
            Load the raw file.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="isCreateMutexFailed">Indicate whether the named mutex is successfully acquired or not</param>
            <exception cref="T:System.Exception">
            Thrown if the file is not a recognized format. The file is either not a THERMO Fisher
            Raw file or the version is less than the initial version of XCALIBUR files.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.ReadMetaData(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64)">
            <summary>
            Read various blocks describing the raw file
            </summary>
            <param name="viewer">View into file</param>
            <param name="startPos">offset into view</param>
            <returns>Updated position</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.InitializeDevices(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader)">
            <summary>
            Initialize device data, for "complete file" or "real time"
            Reform CRC check on completed files.
            </summary>
            <param name="viewer">view into file</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.IsLcqFormat(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64)">
            <summary>
            Test if the file is old LCQ format
            </summary>
            <param name="viewer">view into file</param>
            <param name="startPos">offset into view</param>
            <returns>True if this method decoded the data as LCQ format</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.ValidateCrc(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader)">
            <summary>
            The validate CRC.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <exception cref="T:System.Exception">Thrown if CRC is no valid
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.LoadInstrumentMethod(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            load the instrument method.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="startPos">
            The start position in the view.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.ValidCrc(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader)">
            <summary>
            Test that the raw file checksum is valid
            </summary>
            <param name="viewer">Bytes of the raw file</param>
            <returns>True on passing test</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.InitialDeviceLists">
            <summary>
            Initials the device lists.
            </summary>
            <exception cref="T:System.Exception">Thrown if a device cannot be added to the list</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.GetAuditTrailInfo">
            <summary>
            Gets the audit trail information.
            </summary>
            <returns>Audit trail object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.CreateInAcquisitionDeviceList(System.Int32@)">
            <summary>
            create the list of devices when in acquisition.
            Cannot "lazy load" here, as we need to "claim" a reference count
            to all devices, and all of their temp files.
            </summary>
            <param name="refreshFailCounter">
            The refresh fail counter.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader.RefreshDevices(System.Int32)">
            <summary>
            Refreshes the devices.
            </summary>
            <param name="numVc">
            The number of virtual controllers.
            </param>
            <exception cref="T:System.Exception">Thrown if device entry cannot be created
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoaderHelper">
            <summary>
            The raw file loader helper.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoaderHelper.InstrumentIndexToControllerIndex(ThermoFisher.CommonCore.Data.Business.Device,System.Int32,System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo})">
            <summary>
            Convert instruments index to controller index.
            </summary>
            <param name="instrumentType">Type of the instrument.</param>
            <param name="instrumentIndex">Index of the instrument.</param>
            <param name="virtualControllerInfos">The list of virtual controller information.</param>
            <returns>The index into the table of controllers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoaderHelper.GetVirtualControllerInfo(ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader,ThermoFisher.CommonCore.Data.Business.Device,System.Int32,System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo},ThermoFisher.CommonCore.RawFileReader.Facade.DeviceContainer[],ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice@)">
            <summary>
            get virtual controller info.
            </summary>
            <param name="loader"></param>
            <param name="instrumentType">
            The instrument type.
            </param>
            <param name="instrumentIndex">
            The instrument index.
            </param>
            <param name="virtualControllerInfos">
            The virtual controller information.
            </param>
            <param name="detectors">
            The detectors.
            </param>
            <param name="selectedDevice">
            The selected device.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoaderHelper.GetDeviceRunHeader(System.Guid,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice)">
            <summary>
            Gets the device run header.
            </summary>
            <param name="loaderId">The loader ID</param>
            <param name="selectedDevice">The device key.</param>
            <returns>The run header</returns>
            <exception cref="T:System.Exception">Thrown on null device or null run header</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader">
            <summary>
            The sequence file loader. Loads data from SLD file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value>
              <c>true</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader.SequenceInfo">
            <summary>
            Gets the sequence info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader.SequenceFileName">
            <summary>
            Gets or sets the sequence file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader.Samples">
            <summary>
            Gets the samples.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader"/> class. 
            Must be called prior to data access
            </summary>
            <param name="fileName">
            The file path.
            </param>
            <exception cref="T:System.ArgumentException">
            The file path is empty or null.
            </exception>
            <exception cref="T:System.Exception">
            A problem encountered when reading the raw file.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader.LoadSequenceFile(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor)">
            <summary>
            Load sequence file.
            </summary>
            <param name="viewer">
            The viewer. (memory mapped file)
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.SequenceFileLoader.ReadMetaData(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32)">
            <summary>
            Read meta data.
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start of the data (index into map)
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The offset into the map after this data
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Facade.StorageDescription">
            <summary>
            The storage description.
            Describes an instrument method storage,
            including the device name, device descriptive name (display name),
            and the text description of the method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Facade.StorageDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.StorageDescription"/> class.
            </summary>
            <param name="storageName">
            The storage name.
            </param>
            <param name="description">
            The description.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.StorageDescription.Description">
            <summary>
            Gets or sets the device descriptive (display) name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.StorageDescription.StorageName">
            <summary>
            Gets or sets the storage name. This is the device's "registry name".
            This name should not be shown to the operator as "device name".
            Use "Description" instead for the devices' display name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Facade.StorageDescription.MethodText">
            <summary>
            Gets or sets the "plain text" version of the instrument method.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FastScanFromMsData">
            <summary>
            The fast scan from raw data class, which supplies code needed for the
            chromatogram batch generator to get data from the IRawDataPlus interface.
            Enhanced version uses methods which only return mass and intensity data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FastScanFromMsData.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice,ThermoFisher.CommonCore.Data.Business.ScanFilterHelper,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.FastScanFromMsData"/> class.
            </summary>
            <param name="msData">
            The MS data reader.
            </param>
            <param name="helper">Scan filter, which may be null.
                When not null: All data needing these scans has the same filter</param>
            <param name="includeReferenceAndExceptionData">True if ref and exception peaks should be used</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FastScanFromMsData.ParallelReader(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader[])">
            <summary>
            The parallel reader.
            </summary>
            <param name="scanIndex">
            The scan index.
            </param>
            <returns>
            The array of scans, read in parallel.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FastScanFromMsData.Reader(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader)">
            <summary>
            The scan reader.
            </summary>
            <param name="simpleScanHeader">
            Data about the scan.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.AutoSamplerConfigStruct">
            <summary>
            The auto sampler config struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.BufferInfoStruct">
            <summary>
            Defines the BufferInfo type for backward compatibility with FileIO.<para/>
            Ex. HomePage real time plot checks the Number Element field in scan index buffer info,<para/>
            to determine whether the scans data is available for display and <para/>
            raw file stitching is also using it. 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.GenericItems.GenericDataItemStruct">
            <summary>
                Generic Data Item structure.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.GenericItems.GenericDataItemStruct.StringLengthOrPrecision">
            <summary>
            String length for <see cref="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.CharString"/>
            <see cref="F:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes.WideCharString"/>
            or precision for FLOAT and DOUBLE.
            For FLOAT and DOUBLE, set LOWORD(n) = precision, 
            and HIWORD(n) = 0 for normal format and = 1 for 
            scientific notation (e.g. 1.056e-7)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.InstIdInfoStruct">
            <summary>
                Structure for Instrument Id Information.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.OldInstidinfo1">
            <summary>
                Old structure for Instrument Id Information.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct">
            <summary>
            The run header struct.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.Revision">
            <summary>
                software revision level
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.NumStatusLog">
            <summary>
                # of status log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.NumErrorLog">
            <summary>
                # of error log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.SpectPos32Bit">
            <summary>
                offset of where the scan indexes starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.PacketPos32Bit">
            <summary>
                offset of where the virtual data starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.StatusLogPos32Bit">
            <summary>
                offset of where the status log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.ErrorLogPos32Bit">
            <summary>
                offset of where the error log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.RunHeaderPos32Bit">
            <summary>
                Offset of where the run header starts in the virtual controller data. This block is
                new for Xcalibur, need to be in shared memory.
                if time permits will come up with a scheme to force these names into a separate memory
                pool that only this object knows about so the disk file will not contain this data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.MassResolution">
            <summary>
                Start of Xcalibur changes phase 2
                1/2 Peak width for current device (e.g. 0.5 for unit resolution)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.ExpectedRunTime">
            <summary>
                Expected run time based on experiment method.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.InstIDFile">
            <summary>
                Instrument identification block.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.InstScanEventsFile">
            <summary>
                Scan events written during collection (e.g. Tune or data dependent)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.TrailerScanEventsFile">
            <summary>
                Per scan scan event objects
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.TrailerHeaderFile">
            <summary>
                Instrument specific scan trailer header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.TrailerExtraFile">
            <summary>
                Instrument specific scan trailer data (not TRAILER)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.StatusLogHeaderFile">
            <summary>
                Instrument specific status log header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.TuneDataHeaderFile">
            <summary>
                Instrument specific tune data header
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.ToleranceUnit">
            <summary>
                can be PPM, AMU, MMU
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.FilterMassPrecision">
            <summary>
                how many digits to display in filter strings.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.SpectPos">
            <summary>
                Offset of where the scan indexes starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.PacketPos">
            <summary>
                offset of where the virtual data starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.StatusLogPos">
            <summary>
                offset of where the status log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.ErrorLogPos">
            <summary>
                offset of where the error log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.RunHeaderPos">
            <summary>
                offset of where the run header starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.Extra0Pos">
            <summary>
                Extra file pointers and counts for later use.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct.InstrumentType">
            <summary>
                Requested by eric for not using hardcoded instrument types in the code i.e instead of saying in the code if(InstrumentType == "Quantum" ) do this way if(instrumentType==1)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct1">
            <summary>
                The run header struct version 1.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct1.Revision">
            <summary>
                software revision level
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct1.NumStatusLog">
            <summary>
                # of status log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct1.NumErrorLog">
            <summary>
                # of error log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct1.SpectPos32Bit">
            <summary>
                offset of where the scan indexes starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct1.PacketPos32Bit">
            <summary>
                offset of where the virtual data starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct1.StatusLogPos32Bit">
            <summary>
                offset of where the status log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct1.ErrorLogPos32Bit">
            <summary>
                offset of where the error log starts in the virtual controller data
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2">
            <summary>
            The run header struct.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.Revision">
            <summary>
                software revision level
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.NumStatusLog">
            <summary>
                # of status log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.NumErrorLog">
            <summary>
                # of error log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.SpectPos32Bit">
            <summary>
                offset of where the scan indexes starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.PacketPos32Bit">
            <summary>
                offset of where the virtual data starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.StatusLogPos32Bit">
            <summary>
                offset of where the status log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.ErrorLogPos32Bit">
            <summary>
                offset of where the error log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.RunHeaderPos32Bit">
            <summary>
                Offset of where the run header starts in the virtual controller data. This block is
                new for Xcalibur, need to be in shared memory.
                if time permits will come up with a scheme to force these names into a separate memory
                pool that only this object knows about so the disk file will not contain this data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.MassResolution">
            <summary>
                Start of Xcalibur changes phase 2
                1/2 Peak width for current device (e.g. 0.5 for unit resolution)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.ExpectedRunTime">
            <summary>
                Expected run time based on experiment method.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.InstIDFile">
            <summary>
                Instrument identification block.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.InstScanEventsFile">
            <summary>
                Scan events written during collection (e.g. Tune or data dependent)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.TrailerScanEventsFile">
            <summary>
                Per scan scan event objects
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.TrailerHeaderFile">
            <summary>
                Instrument specific scan trailer header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.TrailerExtraFile">
            <summary>
                Instrument specific scan trailer data (not TRAILER)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.StatusLogHeaderFile">
            <summary>
                Instrument specific status log header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct2.TuneDataHeaderFile">
            <summary>
                Instrument specific tune data header
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3">
            <summary>
            The run header struct.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.Revision">
            <summary>
                software revision level
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.NumStatusLog">
            <summary>
                # of status log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.NumErrorLog">
            <summary>
                # of error log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.SpectPos32Bit">
            <summary>
                offset of where the scan indexes starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.PacketPos32Bit">
            <summary>
                offset of where the virtual data starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.StatusLogPos32Bit">
            <summary>
                offset of where the status log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.ErrorLogPos32Bit">
            <summary>
                offset of where the error log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.RunHeaderPos32Bit">
            <summary>
                Offset of where the run header starts in the virtual controller data. This block is
                new for Xcalibur, need to be in shared memory.
                if time permits will come up with a scheme to force these names into a separate memory
                pool that only this object knows about so the disk file will not contain this data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.MassResolution">
            <summary>
                Start of Xcalibur changes phase 2
                1/2 Peak width for current device (e.g. 0.5 for unit resolution)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.ExpectedRunTime">
            <summary>
                Expected run time based on experiment method.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.InstIDFile">
            <summary>
                Instrument identification block.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.InstScanEventsFile">
            <summary>
                Scan events written during collection (e.g. Tune or data dependent)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.TrailerScanEventsFile">
            <summary>
                Per scan scan event objects
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.TrailerHeaderFile">
            <summary>
                Instrument specific scan trailer header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.TrailerExtraFile">
            <summary>
                Instrument specific scan trailer data (not TRAILER)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.StatusLogHeaderFile">
            <summary>
                Instrument specific status log header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.TuneDataHeaderFile">
            <summary>
                Instrument specific tune data header
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct3.ToleranceUnit">
            <summary>
                can be PPM, AMU, MMU
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4">
            <summary>
            The run header struct.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.Revision">
            <summary>
                software revision level
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.NumStatusLog">
            <summary>
                # of status log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.NumErrorLog">
            <summary>
                # of error log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.SpectPos32Bit">
            <summary>
                offset of where the scan indexes starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.PacketPos32Bit">
            <summary>
                offset of where the virtual data starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.StatusLogPos32Bit">
            <summary>
                offset of where the status log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.ErrorLogPos32Bit">
            <summary>
                offset of where the error log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.RunHeaderPos32Bit">
            <summary>
                Offset of where the run header starts in the virtual controller data. This block is
                new for Xcalibur, need to be in shared memory.
                if time permits will come up with a scheme to force these names into a separate memory
                pool that only this object knows about so the disk file will not contain this data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.MassResolution">
            <summary>
                Start of Xcalibur changes phase 2
                1/2 Peak width for current device (e.g. 0.5 for unit resolution)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.ExpectedRunTime">
            <summary>
                Expected run time based on experiment method.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.InstIDFile">
            <summary>
                Instrument identification block.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.InstScanEventsFile">
            <summary>
                Scan events written during collection (e.g. Tune or data dependent)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.TrailerScanEventsFile">
            <summary>
                Per scan scan event objects
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.TrailerHeaderFile">
            <summary>
                Instrument specific scan trailer header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.TrailerExtraFile">
            <summary>
                Instrument specific scan trailer data (not TRAILER)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.StatusLogHeaderFile">
            <summary>
                Instrument specific status log header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.TuneDataHeaderFile">
            <summary>
                Instrument specific tune data header
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.ToleranceUnit">
            <summary>
            can be PPM, AMU, MMU
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct4.FilterMassPrecision">
            <summary>
                how many digits to display in filter strings.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5">
            <summary>
            The run header struct.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.Revision">
            <summary>
                software revision level
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.NumStatusLog">
            <summary>
                # of status log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.NumErrorLog">
            <summary>
                # of error log records written in this file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.SpectPos32Bit">
            <summary>
                offset of where the scan indexes starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.PacketPos32Bit">
            <summary>
                offset of where the virtual data starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.StatusLogPos32Bit">
            <summary>
                offset of where the status log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.ErrorLogPos32Bit">
            <summary>
                offset of where the error log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.RunHeaderPos32Bit">
            <summary>
                Offset of where the run header starts in the virtual controller data. This block is
                new for Xcalibur, need to be in shared memory.
                if time permits will come up with a scheme to force these names into a separate memory
                pool that only this object knows about so the disk file will not contain this data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.MassResolution">
            <summary>
                Start of Xcalibur changes phase 2
                1/2 Peak width for current device (e.g. 0.5 for unit resolution)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.ExpectedRunTime">
            <summary>
                Expected run time based on experiment method.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.InstIDFile">
            <summary>
                Instrument identification block.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.InstScanEventsFile">
            <summary>
                Scan events written during collection (e.g. Tune or data dependent)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.TrailerScanEventsFile">
            <summary>
                Per scan scan event objects
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.TrailerHeaderFile">
            <summary>
                Instrument specific scan trailer header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.TrailerExtraFile">
            <summary>
                Instrument specific scan trailer data (not TRAILER)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.StatusLogHeaderFile">
            <summary>
                Instrument specific status log header data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.TuneDataHeaderFile">
            <summary>
                Instrument specific tune data header
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.ToleranceUnit">
            <summary>
                can be PPM, AMU, MMU
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.FilterMassPrecision">
            <summary>
                how many digits to display in filter strings.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.SpectPos">
            <summary>
                Offset of where the scan indexes starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.PacketPos">
            <summary>
                offset of where the virtual data starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.StatusLogPos">
            <summary>
                offset of where the status log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.ErrorLogPos">
            <summary>
                offset of where the error log starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.RunHeaderPos">
            <summary>
                offset of where the run header starts in the virtual controller data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct5.Extra0Pos">
            <summary>
                Extra file pointers and counts for later use.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct">
            <summary>
            The file header structure.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.FinnID">
            <summary>
                2-byte ID for Finnigan / Enterprise file -- constant for all Enterprise files
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.FinnSig">
            <summary>
                Finnigan signature
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.FileType">
            <summary>
                file type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.FileRev">
            <summary>
                file revision - actually, this is the file format version.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.Created">
            <summary>
                file-creation audit information.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.CheckSum">
            <summary>
                file creation 32-bit CRC
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.Changed">
            <summary>
                file-change audit information (i.e. when file is closed)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.TimesEdited">
            <summary>
                count of times the file was edited
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.TimesCalibrated">
            <summary>
                count of times calibrated
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.Reserved">
            <summary>
                reserved space in the header, for future use
                do not expose access to these values.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.FileDescription">
            <summary>
                user's narrative description of the file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct.EndOfData">
            <summary>
                end-of-data marker
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileTimeStruct">
            <summary>
                The File Time structure from C++.
                Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileTimeStruct.HighDateTime">
            <summary>
                Specifies the high 32 bits of the FILETIME.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileTimeStruct.LowDateTime">
            <summary>
                Specifies the low 32 bits of the FILETIME.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct1">
            <summary>
            The filter info struct 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct2">
            <summary>
            The filter info struct 2.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct3">
            <summary>
            The filter info struct 3.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct4">
            <summary>
            The filter info struct 4.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct50">
            <summary>
            The filter info struct 50.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct51">
            <summary>
            The filter info struct 51.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct54">
            <summary>
            The filter info struct 54.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct62">
            <summary>
            The filter info struct 62.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct63">
            <summary>
            The filter info struct 63.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FilterInfo.FilterInfoStruct">
            <summary>
            The filter info struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct">
            <summary>
                The mass range structure.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct"/> struct - copy constructor.
            </summary>
            <param name="lowMass">
            The low end of the mass range.
            </param>
            <param name="highMass">
            The high end of the mass range.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct.LoadArray(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            Loads the array.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="startPos">The start position.</param>
            <returns>Array of mass range</returns>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct.LowMass">
            <summary>
                Gets or sets the low end of the mass range.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct.HighMass">
            <summary>
                Gets or sets the high end of the mass range.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct.#ctor(ThermoFisher.CommonCore.Data.Business.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct"/> struct.
            </summary>
            <param name="range">
            The range (to copy from).
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MethodInfoStruct">
            <summary>
            The method info structure in the raw file
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct">
            <summary>
            The MS reaction struct - current version.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.CollisionEnergyValid">
            <summary>
                Set to 1 to use in scan filtering. High order bits hold the
                activation type enumeration bits 0xffe, and the flag for multiple
                activation (bit 0x1000).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.RangeIsValid">
            <summary>
                If TRUE, <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.PrecursorMass" /> is still the center mass but the
                <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.FirstPrecursorMass" /> and <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.LastPrecursorMass" />
                are also valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.FirstPrecursorMass">
            <summary>
                if <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.RangeIsValid" /> == TRUE, this value defines the start of the
                precursor isolation range.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.LastPrecursorMass">
            <summary>
                if <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct.RangeIsValid" /> == TRUE, this value defines the end of the
                precursor isolation range
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct1">
            <summary>
            The MS reaction struct version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct2">
            <summary>
            The MS reaction struct version 2.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct2.CollisionEnergyValid">
            <summary>
            Set to 1 to use in scan filtering. High order bits hold the
            activation type enumeration bits 0xffe, and the flag for multiple
            activation (bit 0x1000).
            these features can be WST individually with the new access
            functions, or as a UINT with the new CollisionEnergyValidEx
            function
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3">
            <summary>
            The MS reaction struct version 3.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.CollisionEnergyValid">
            <summary>
                Set to 1 to use in scan filtering. High order bits hold the
                activation type enumeration bits 0xffe, and the flag for multiple
                activation (bit 0x1000).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.RangeIsValid">
            <summary>
                If TRUE, <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.PrecursorMass" /> is still the center mass but the
                <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.FirstPrecursorMass" /> and <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.LastPrecursorMass" />
                are also valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.FirstPrecursorMass">
            <summary>
                if <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.RangeIsValid" /> == TRUE, this value defines the start of the
                precursor isolation range.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.LastPrecursorMass">
            <summary>
                if <see cref="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct3.RangeIsValid" /> == TRUE, this value defines the end of the
                precursor isolation range
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.AuditDataStruct1">
            <summary>
            The audit data struct 1, for legacy LCQ
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.AuditDataStruct">
            <summary>
            The audit data struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.AutoSamplerInfoStruct">
            <summary>
            The auto sampler info struct, from legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.AxisParmStruct">
            <summary>
            The axis parameters struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.ChroTraceStruct1">
            <summary>
            The chromatogram trace struct 1, from legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.ChroTraceStruct">
            <summary>
            The chromatogram trace struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.FractionCollectorStruct">
            <summary>
            The fraction collector struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstMethodColumnInfoStruct">
            <summary>
            The instrument method column info struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstMethodGcStruct">
            <summary>
            The instrument method GC struct from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.PairValuesStruct">
            <summary>
            The pair values struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstMethodInletStruct">
            <summary>
            The instrument method inlet struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstMethodLcStruct">
            <summary>
            The instrument method LC struct, from legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstrumentConfigStruct1">
            <summary>
            The instrument configuration struct version 1, from legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstrumentConfigStruct">
            <summary>
            The instrument configuration struct, from legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstrumentRunInfoStruct">
            <summary>
            The instrument run info struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn">
            <summary>
            The digital in (legacy LCQ).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn"/> struct.
            </summary>
            <param name="din">
            The digital in.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.UserDin2">
            <summary>
            Gets the user digital in 2.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.UserDin1">
            <summary>
            Gets the user digital in 1.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.DivertInjectBit1">
            <summary>
            Gets the divert inject bit 1.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.ApcItcFail">
            <summary>
            Gets the APC ITC fail.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.CapillaryRtdFail">
            <summary>
            Gets the capillary RTD fail.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.IonGaugePressureOk">
            <summary>
            Gets the ion gauge pressure OK.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.LoadInject">
            <summary>
            Gets the load inject.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.Kvcl8">
            <summary>
            Gets the KVCL 8.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.OctFreqOn">
            <summary>
            Gets the <c>octapole</c> frequency on.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.VacuumOk">
            <summary>
            Gets the vacuum OK.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.ConvPressOk">
            <summary>
            Gets the <c>conv</c> pressure OK.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.IonGaugeOn">
            <summary>
            Gets the ion gauge on.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.RefSineOn">
            <summary>
            Gets the ref sine on.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.DigitalIn.SwrFail">
            <summary>
            Gets the SWR fail.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.AsStatusStruct">
            <summary>
            Auto Sampler Status
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.LcStatusStruct">
            <summary>
            LC Subsystem Status
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.UvStatusStruct">
            <summary>
            UV Detector Status
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.SpStatusStruct">
            <summary>
            Syringe Pump status 
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TpStatusStruct">
            <summary>
            Turbo pump status
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.ReadBackStruct">
            <summary>
            The read back struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstStatusStruct">
            <summary>
            Instrument Status
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.LcDetectorStruct">
            <summary>
            The LC detector struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.LcDumpValueStruct">
            <summary>
            The LC dump value struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.LcEventStruct">
            <summary>
            The LC event struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.LcqTrailerExtraStruct">
            <summary>
            The LCQ trailer extra struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.LcTableStruct">
            <summary>
            The LC table struct from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.MsDependentDataStruct2">
            <summary>
            The MS dependent data struct 2 for legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.MsDependentDataStruct">
            <summary>
            The MS dependent data struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.MsMethodInfoStruct">
            <summary>
            The MS method info struct from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.MsScanEventStruct">
            <summary>
            The mass spec scan event struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.MsSegmentStruct">
            <summary>
            The MS segment struct from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.NonItclStruct1">
            <summary>
            The non ITCL struct version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.NonItclStruct">
            <summary>
            The non ITCL struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.ProbeInfoStruct">
            <summary>
            The probe info struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RealTimeChroInfoStruct">
            <summary>
            The real time chromatogram info struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RealTimeSpecInfoStruct">
            <summary>
            The real time spec info struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtChroLabelStruct1">
            <summary>
            The real time chromatogram label struct version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtChroLabelStruct51">
            <summary>
            The real time chromatogram label struct version 51.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtChroLabelStruct">
            <summary>
            The real time chromatogram label struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtChroNormStruct">
            <summary>
            The real time chromatogram norm struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtChroOtherStruct">
            <summary>
            The real time chromatogram other struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtChroStyleStruct">
            <summary>
            The real time chromatogram style struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtSpecColorStruct1">
            <summary>
            The real time spectrum color struct version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtSpecColorStruct">
            <summary>
            The real time spectrum color struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtSpecLabelStruct">
            <summary>
            The real time spectrum label struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtSpecNormStruct">
            <summary>
            The Real Time spectrum normalization struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtSpecOtherStruct">
            <summary>
            The real time spec other struct, for legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.RtSpecRangesStruct">
            <summary>
            The real time spectrum ranges struct, from legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.SlopeInterceptStruct">
            <summary>
            The slope intercept struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.SyringeStruct">
            <summary>
            The syringe struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TemperatureTableStruct">
            <summary>
            The temperature table struct, from legacy LCQ files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TrailerStruct">
            <summary>
            The trailer struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TuneDataStruct1">
            <summary>
            Tune data structure version 1
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TuneDataStruct3">
            <summary>
            Tune data structure version 3-5
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TuneDataStruct">
            <summary>
            The latest version of Tune data structure
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.LcqgTuneDataStruct">
            <summary>
            The old LCQ tune data struct
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.VariableListStruct">
            <summary>
            The variable list struct, from legacy LCQ files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.HighMassAccuracyCentroidStruct">
            <summary>
            The High Mass Accuracy Centroid structure
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.HighMassAccuracyCentroidStruct.Mass">
            <summary>
            Gets or sets the mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.HighMassAccuracyCentroidStruct.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.NoiseInfoPacketStruct">
            <summary>
            The noise information packet structure.
            Note: this is defined as a simple set of "internal fields" to
            exactly match the binary struct format.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.NoiseInfoPacketStruct.Mass">
            <summary>
            Gets or sets the mass.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.NoiseInfoPacketStruct.Noise">
            <summary>
            Gets or sets the noise.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.NoiseInfoPacketStruct.Baseline">
            <summary>
            Gets or sets the baseline.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.ProfileDataPacket63">
            <summary>
            The packet header structure for LR SP profile packets.
            This is defined for structure size only.
            Data is decoded as individual fields.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.ProfileDataPacket64">
            <summary>
            The profile data packet at file version 64.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.PacketHeaderStruct">
            <summary>
            The packet header structure for FT profile packets.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.ProfileSegmentStruct">
            <summary>
                The profile segment structure.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.ProfileSubsegmentStruct">
            <summary>
                The profile sub-segment structure.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.HRLRSPPackets.HighResSpTypeStruct">
            <summary>
            The high resolution spectrum type struct.
            This struct is never access "as a struct" and
            is decoded one field at a time from memory.
            It is only declared so that it's size can be calculated.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.HRLRSPPackets.LowResSpTypeStruct">
            <summary>
            The low resolution spectrum type struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.HRLRSPPackets.StandardAccuracyStruct">
            <summary>
            The standard accuracy struct.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.UVPackets.AsrProfileIndexStruct">
            <summary>
                The Adjustable Scan Rate profile packet index structure.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.UVPackets.AsrProfileIndexStructOld">
            <summary>
                The Adjustable Scan Rate profile packet index structure.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct1">
            <summary>
                The raw file info structure version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct2">
            <summary>
                The raw file info structure version 2.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct3">
            <summary>
                The raw file info structure version 3.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct3.IsExpMethodPresent">
            <summary>
                If true, there is an experiment method in the file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct4">
            <summary>
                The raw file info structure version 4.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct4.IsExpMethodPresent">
            <summary>
                If true, there is an experiment method in the file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct">
            <summary>
                The raw file information structure - current version.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct.IsExpMethodPresent">
            <summary>
                If true, there is an experiment method in the file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct">
            <summary>
            The scan event info struct.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.IsCustom">
            <summary>
            Set to TRUE if trailer scan event should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.Detector">
            <summary>
            Set to SFDetectorValid if detector value is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.SourceFragmentationType">
            <summary>
            Indicates how source fragmentation values are interpreted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.ScanTypeIndex">
            <summary>
                Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.AccurateMassType">
            <summary>
            Will be translated to Scan Filter's Accurate Mass enumeration.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.ComparePart1(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct)">
            <summary>
            Compares items in this event, up to the reactions tests.
            Reaction tests are done differently by various callers.
            </summary>
            <param name="other">The other.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
             The return value has the following meanings: 
             Value              Meaning 
             Less than zero     This object is less than the <paramref name="other"/> parameter.
             Zero               This object is equal to <paramref name="other"/>. 
             Greater than zero  This object is greater than <paramref name="other"/>. 
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.GetHash1">
            <summary>
            A method which merges 8 byte sized flags into a unique 64 bit code
            For faster sorting
            </summary>
            <returns>Has of first 8 items</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.GetHash2">
            <summary>
            A method which precicely merges 8 byte sized flags into a unique 64 bit code
            For faster sorting
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.GetHash3">
            <summary>
            A method which precicely merges 8 byte sized flags into a unique 64 bit code
            For faster sorting
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.GetHash4">
            <summary>
            A method which precicely merges 5 small (less than 6 bit) flags into a unique 32 bit code
            Then adds the "scan type index" as a second 32 bits
            For faster sorting
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.ComparePart1Hash1(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct)">
            <summary>
            Compares items in this event, up to the reactions tests.
            Reaction tests are done differently by various callers.
            Skips 8 items, which are tested by hash1
            </summary>
            <param name="other">The other.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
             The return value has the following meanings: 
             Value              Meaning 
             Less than zero     This object is less than the <paramref name="other"/> parameter.
             Zero               This object is equal to <paramref name="other"/>. 
             Greater than zero  This object is greater than <paramref name="other"/>. 
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct.ComparePart1Hash1Hash2(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct)">
            <summary>
            Compares items in this event, up to the reactions tests.
            Reaction tests are done differently by various callers.
            Skips 8 items, which are tested by hash1 and  8 tested by hash2
            </summary>
            <param name="other">The other.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
             The return value has the following meanings: 
             Value              Meaning 
             Less than zero     This object is less than the <paramref name="other"/> parameter.
             Zero               This object is equal to <paramref name="other"/>. 
             Greater than zero  This object is greater than <paramref name="other"/>. 
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct2">
            <summary>
                The scan event info struct version 2.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct2.IsCustom">
            <summary>
                Set to TRUE if trailer scan event should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct2.Detector">
            <summary>
                Set to SFDetectorValid if detector value is valid.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct3">
            <summary>
                The scan event info struct version 3.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct3.IsCustom">
            <summary>
                Set to TRUE if trailer scan event should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct3.Detector">
            <summary>
                Set to SFDetectorValid if detector value is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct3.SourceFragmentationType">
            <summary>
                Indicates how source fragmentation values are interpreted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct3.ScanTypeIndex">
            <summary>
                Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct50">
            <summary>
                The scan event info struct version 50.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct50.IsCustom">
            <summary>
                Set to TRUE if trailer scan event should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct50.Detector">
            <summary>
                Set to SFDetectorValid if detector value is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct50.SourceFragmentationType">
            <summary>
                Indicates how source fragmentation values are interpreted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct50.ScanTypeIndex">
            <summary>
                Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct51">
            <summary>
            The scan event info struct version 51.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct51.IsCustom">
            <summary>
                Set to TRUE if trailer scan event should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct51.Detector">
            <summary>
                Set to SFDetectorValid if detector value is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct51.SourceFragmentationType">
            <summary>
                Indicates how source fragmentation values are interpreted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct51.ScanTypeIndex">
            <summary>
                Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct51.AccurateMassTypesType">
            <summary>
            Will be translated to Scan Filter's Accurate Mass enumeration.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct54">
            <summary>
            The scan event info struct version 54.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct54.IsCustom">
            <summary>
                Set to TRUE if trailer scan event should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct54.Detector">
            <summary>
                Set to SFDetectorValid if detector value is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct54.SourceFragmentationType">
            <summary>
                Indicates how source fragmentation values are interpreted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct54.ScanTypeIndex">
            <summary>
                Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct54.AccurateMassTypesType">
            <summary>
                Will be translated to Scan Filter's Accurate Mass enumeration.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct62">
            <summary>
            The scan event info struct version 62.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct62.IsCustom">
            <summary>
                Set to TRUE if trailer scan event should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct62.Detector">
            <summary>
                Set to SFDetectorValid if detector value is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct62.SourceFragmentationType">
            <summary>
                Indicates how source fragmentation values are interpreted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct62.ScanTypeIndex">
            <summary>
                Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct62.AccurateMassTypesType">
            <summary>
                Will be translated to Scan Filter's Accurate Mass enumeration.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct63">
            <summary>
            The scan event info struct version 63.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct63.IsCustom">
            <summary>
                Set to TRUE if trailer scan event should be used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct63.Detector">
            <summary>
                Set to SFDetectorValid if detector value is valid.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct63.SourceFragmentationType">
            <summary>
                Indicates how source fragmentation values are interpreted
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct63.ScanTypeIndex">
            <summary>
                Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct63.AccurateMassTypesType">
            <summary>
                Will be translated to Scan Filter's Accurate Mass enumeration.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct">
            <summary>
            The scan index structure - current version.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct.ScanTypeIndex">
            <summary>
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct.PacketType">
            <summary>
                HIWORD == SIScanData (optional), LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct.CycleNumber">
            <summary>
                Cycle number used to associate events within a scan event cycle.
                For example, on the first cycle of scan events, all the events
                would set this to '1'. On the second cycle, all the events would
                set this to '2'. This field must be set by devices if supporting
                compound names for filtering. However, it may be set in all
                acquisitions to help processing algorithms.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct1">
            <summary>
            The scan index structure - version 1.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct1.ScanTypeIndex">
            <summary>
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct1.PacketType">
            <summary>
                HIWORD == SIScanData (optional), LOWORD == scan type
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct2">
            <summary>
            The scan index structure - version 2.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct2.ScanTypeIndex">
            <summary>
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct2.PacketType">
            <summary>
                HIWORD == SIScanData (optional), LOWORD == scan type
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.UvScanIndexStruct">
            <summary>
                The UV scan index structure - current version.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.UvScanIndexStructOld">
            <summary>
            The scan index structure - old version.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SeqRowInfoStruct">
            <summary>
                The sequence row information structure in the raw file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct">
            <summary>
            The sequence file info struct.
            Implements the public interface ISequenceInfo against
            an SLD file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.ProcessingMode">
            <summary>
            The processing mode, of an Xcalibur sequence.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.ProcessingMode.XcaliburProcessing">
            <summary>
            This sequence designed to run with Xcalibur
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.ProcessingMode.TargetProcessing">
            <summary>
            This sequence designed to run with Target.
            Value, for legacy import only
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.SequenceInfoLcq">
            <summary>
            Sequence file information: LCQ version
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.SequenceInfo1">
            <summary>
            Sequence file information: Original Xcalibur version
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.SequenceInfo">
            <summary>
            Sequence file information: Current Xcalibur version
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.UserPrivateLabel">
            <summary>
            Gets the user private label.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.TrayConfiguration">
            <summary>
            Gets or sets a description of the auto sampler tray
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.Bracket">
            <summary>
            Gets or sets the sequence bracket type.
            This determines which groups of samples use the same calibration curve.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.UserLabel">
            <summary>
            Gets the user configurable column names
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.ColumnWidth">
            <summary>
            Gets the display width of each sequence column
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.TypeToColumnPosition">
            <summary>
            Gets the column order (see home page?)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.NumRows">
            <summary>
            Gets or sets the number of samples.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load the sequence information from the current file
            </summary>
            <param name="viewer">View into memory mapped file</param>
            <param name="dataOffset">offset for this object</param>
            <param name="fileRevision">file version</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.Initialization">
            <summary>
            Initializes this instance object with default values.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct.GetSequenceInfo">
            <summary>
            Gets the sequence information.
            Convert the sequence info struct to byte array.
            </summary>
            <returns>Byte array of the sequence info structure</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.StructureConversion">
            <summary>
                The class contains structure conversion utilities.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.StructureConversion.ConvertFrom32Bit(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct)">
            <summary>
            The method copies the virtual controller information from 32 bit values.
            </summary>
            <param name="info">
            The raw file information structure.
            </param>
            <returns>
            The converted <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.RawFileInfoStruct"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.StructureConversion.ConvertFrom32Bit(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct)">
            <summary>
            The method copies the run header information from the 32 bit values.
            </summary>
            <param name="runheader">
            The run header.
            </param>
            <returns>
            The converted <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SystemTimeStruct">
            <summary>
            The system time structure from C++.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.UserIdStampStruct">
            <summary>
            The user id structure for the raw file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.UserIdStampStruct.LoginNameLength">
            <summary>
                Length of logon ID string and user ID
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.UserIdStampStruct.TimeStamp">
            <summary>
                Date and time that the file was changed using C++ FILETIME structure (64-bits), precision is to 100 nanoseconds.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.UserIdStampStruct.WindowsLogin">
            <summary>
                Windows login name. Two bytes per char (NT default string representation)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.UserIdStampStruct.UserName">
            <summary>
                User (full) name
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.VirtualControllerInfoStruct">
            <summary>
            The virtual controller information structure.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.VirtualControllerInfoStruct.#ctor(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldVirtualControllerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.VirtualControllerInfoStruct"/> struct by
            copying from the old controller (i.e. 32 bit) structure.
            </summary>
            <param name="old">
            The old controller structure.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldVirtualControllerInfo">
            <summary>
            The old virtual controller information structure.
            Pre-version-64 structure, used a 32 bit file pointer (offset).
            Causes problems if raw file is larger than 2GB.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FilterParserFactory">
            <summary>
            Tool to create a parser, for validating filter strings
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FilterParserFactory.CreateFilterParser">
            <summary>
            Create a parser, for validating filter strings
            </summary>
            <returns>An interface to validate filter strings</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.FilterParserFactory.FilterParserWrapper">
            <summary>
            Wrapper class, to ensure state is reset on each parse call.
            See notes in GetFilterFromString
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FilterParserFactory.FilterParserWrapper.EnergyPrecision">
            <summary>
            Gets or sets the precision expected for collision energy
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.FilterParserFactory.FilterParserWrapper.MassPrecision">
            <summary>
            Gets or sets the precision expected for mass values
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.FilterParserFactory.FilterParserWrapper.GetFilterFromString(System.String)">
            <summary>
            Parse a string, returning the scan filter codes.
            </summary>
            <param name="text">String to parse</param>
            <returns>Parsed filter, or null if invalid</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakIntensityChromatogramPoint">
            <summary>
            Private class to pull the Base peak intensity value from a scan header (MS only)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakIntensityChromatogramPoint.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            Always "false" for this type, as it uses only the header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakIntensityChromatogramPoint.RetentionTimeRange">
            <summary>
            Gets or sets the retention time range of this chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakIntensityChromatogramPoint.ScanSelector">
            <summary>
            Gets or sets the mechanism to select scans for inclusion in the chromatogram
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakIntensityChromatogramPoint.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            method to calculate the chromatogram data value from a scan
            </summary>
            <param name="scan">the scan</param>
            <returns>Base peak intensity, from scan header</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakMassChromatogramPoint">
            <summary>
            Private class to pull the Base peak mass value from a scan header (MS only)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakMassChromatogramPoint.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            Always "false" for this type, as it uses only the header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakMassChromatogramPoint.RetentionTimeRange">
            <summary>
            Gets or sets the retention time range of this chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakMassChromatogramPoint.ScanSelector">
            <summary>
            Gets or sets the mechanism to select scans for inclusion in the chromatogram
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentBasePeakMassChromatogramPoint.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            method to calculate the chromatogram data value from a scan
            </summary>
            <param name="scan">The scan to analyze</param>
            <returns>The base peak of the scan</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileAccess">
            <summary>
            Class containing logic to open an instrument method, and to
            pass required interface methods down to business logic.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileAccess.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileAccess"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileAccess.Create(System.String)">
            <summary>
            Create access to method data
            </summary>
            <param name="fileName">
            The file name.
            </param>
            <returns>
            Interface to read method
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader">
            <summary>
            Class containing business logic specific to loading an instrument method file contents
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.Devices">
            <summary>
            Gets the data for of all devices in this method.
            Keys are the registered device names.
            A method contains only the "registered device name"
            which may not be the same as the "device display name" (product name).
            Instrument methods do not contain device product names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.FileHeader">
            <summary>
            Gets the file header for the method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused a recorded error.
            If so, there may be additional information in FileError
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.IsOpen">
            <summary>
            Gets a value indicating whether a file was successfully opened.
            Inspect "FileError" when false
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.Descriptions">
            <summary>
            Gets or sets the descriptions.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader"/> class. 
            Constructor: Load data from file
            </summary>
            <param name="fileName">
            File to load
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.GetDataForAllInstruments(ThermoFisher.CommonCore.RawFileReader.DeviceStorage,System.String[])">
            <summary>
            Get data from all instruments
            </summary>
            <param name="storage">Root storage of the method file</param>
            <param name="names">Names of the instruments</param>
            <returns>Data for each instrument</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.LoadDataFromStorage(ThermoFisher.CommonCore.RawFileReader.DeviceStorage)">
            <summary>
            Load data from storage.
            </summary>
            <param name="storage">
            The storage.
            </param>
            <returns>
            Error information
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.GetDeviceNames">
            <summary>
            Get the list of device names in the method file
            </summary>
            <returns>The list of names</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.MyErrors">
            <summary>
            my errors.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.MyErrors.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.MyErrors"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.MyErrors.HasError">
            <summary>
            Gets or sets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.MyErrors.HasWarning">
            <summary>
            Gets a value indicating whether this file has detected a warning.
            If this is false: Other warning properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.MyErrors.ErrorCode">
            <summary>
            Gets or sets the error code number.
            Typically this is a windows system error number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.MyErrors.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileLoader.MyErrors.WarningMessage">
            <summary>
            Gets the warning message.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileReader">
            <summary>
            Class to read data from a meth file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentMethodFileReader.OpenMethod(System.String)">
            <summary>
            Create an IInstrumentMethodFileAccess interface to
            read data from a method (.meth) file
            </summary>
            <param name="fileName">File to open</param>
            <returns>Interface to read data from file</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.InstrumentTicChromatogramPoint">
            <summary>
            Private class to pull the Tic value from a scan header
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentTicChromatogramPoint.RequiresScanData">
            <summary>
            Gets a value indicating whether this point type needs "scan data".
            Always "false" for this type, as it uses only the header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentTicChromatogramPoint.RetentionTimeRange">
            <summary>
            Gets or sets the retention time range of this chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.InstrumentTicChromatogramPoint.ScanSelector">
            <summary>
            Gets or sets the mechanism to select scans for inclusion in the chromatogram
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.InstrumentTicChromatogramPoint.ValueForScan(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanWithHeader)">
            <summary>
            method to calculate the chromatogram data value from a scan
            </summary>
            <param name="scan">The scan number</param>
            <returns>The Tic of this scan</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.LocklessReader">
            <summary>
            class to manage multiple threads accessing the same file, with no locks
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.LocklessReader.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.LocklessReader"/> class.
            </summary>
            <param name="fileLoader">The loader.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.LocklessReader.FileLoader">
            <summary>
            Gets the file loader.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.LocklessReader.CreateThreadAccessor">
            <summary>
            This interface method creates a thread safe access to raw data, for use by a single thread.
            Each time a new thread (async call etc.) is made for accessing raw data, this method must be used to
            create a private object for that thread to use.
            This interface does not require that the application performs any locking.
            In some implementations this may have internal locking (such as when based on a real time file, which is continually changing in size),
            and in some implementations it may be lock-less.
            </summary>
            <returns>An interface which can be used by a thread to access raw data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter">
            <summary>
            Class to convert from "user" settings for a chromatogram
            into objects ready for use by the chromatogram generator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.Delivery">
            <summary>
            Gets the delivery, configured to generate a chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.FileMassPrecision">
            <summary>
            Gets or sets the file mass precision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.ParseError">
            <summary>
            Gets a filter string which failed to parse.
            If this is "not empty" there was a parsing error on a supplied
            filter string, and the "Delivery" will be set to null.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.TimeRange">
            <summary>
            Gets or sets the time range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.Tolerance">
            <summary>
            Gets or sets the mass tolerance.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.AddBasePeakMasses">
            <summary>
            Gets or sets a value indicating whether to add base masses.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.Execute">
            <summary>
            Create chromatogram construction tool for one trace
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CalculateMassRange(ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess[],System.Int32,System.Boolean)">
            <summary>
            calculate (final) mass range for chromatogram, by adding tolerance for single ion mode.
            Single ion mode is detected as "high mass == 0.0" or "low and high are same".
            </summary>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="massRanges">
            The mass ranges.
            </param>
            <param name="range">
            The range.
            </param>
            <param name="hasTolerance">
            Set if the class has a tolerance to be applied
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.Range" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateBaseMassOfFullMassRangeChromatogram(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Create a chromatogram point generator which can generate the mass with the largest
            intensity of of all data in a scan.
            </summary>
            <param name="startTime">
            Start time of chromatogram
            </param>
            <param name="endTime">
            End time of chromatogram
            </param>
            <param name="toleranceOptions">
            Mass tolerance settings
            </param>
            <param name="thisTrace">
            Settings for this chromatogram trace
            </param>
            <returns>
            Tool to sum all data in a scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateBasePeakDelivery(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Create delivery, which will generate a Base Peak Chromatogram
            </summary>
            <param name="startTime">
            The start time.
            </param>
            <param name="endTime">
            The end time.
            </param>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="thisTrace">
            The this trace.
            </param>
            <returns>
            An object to create the desired chromatogram.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateBasePeakMassOverMassRangeChromatogram(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess[],System.Int32)">
            <summary>
            Create delivery, which will generate a chromatogram with the base peak mass over a Mass Range
            </summary>
            <param name="startTime">
            The start time.
            </param>
            <param name="endTime">
            The end time.
            </param>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="thisTrace">
            The this trace.
            </param>
            <param name="massRanges">Mass ranges for this chromatogram</param>
            <param name="rangeCount">Number of mass ranges to use</param>
            <returns>
            An object to create the desired chromatogram.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateBasePeakOverMassRangeChromatogram(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess[],System.Int32)">
            <summary>
            Create delivery, which will generate a chromatogram with base peak intensity over a Mass Range
            </summary>
            <param name="startTime">
            The start time.
            </param>
            <param name="endTime">
            The end time.
            </param>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="thisTrace">
            The this trace.
            </param>
            <param name="massRanges">Mass ranges for this chromatogram</param>
            <param name="rangeCount">Number of mass ranges to use</param>
            <returns>
            An object to create the desired chromatogram.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateDeliveryForTrace(ThermoFisher.CommonCore.Data.Business.Range,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Create tools to calculate each chromatogram data point
            based on the mode.
            For example: Sum of masses in a range (XIC).
            Sum of all data in scan (Tic).
            </summary>
            <param name="timeRange">Time limits of this chromatogram</param>
            <param name="toleranceOptions">Mass tolerance settings</param>
            <param name="thisTrace">Chromatogram settings</param>
            <returns>Data for chromatogram generator</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateFragmentChromatogramDelivery(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Create delivery, which will generate a Fragment Chromatogram
            </summary>
            <param name="startTime">
            The start time.
            </param>
            <param name="endTime">
            The end time.
            </param>
            <param name="toleranceOptions">
            The mass tolerance options.
            </param>
            <param name="thisTrace">
            The this trace.
            </param>
            <returns>
            An object to create the desired chromatogram.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateInstrumentTicChromatogram(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Design a chromatogram point builder which just gets the Tic value from each scan header.
            </summary>
            <param name="startTime">
            Start time of chromatogram.
            </param>
            <param name="endTime">
            End time of chromatogram.
            </param>
            <param name="toleranceOptions">
            Mass tolerance settings
            </param>
            <param name="thisTrace">
            Trace settings
            </param>
            <returns>
            Tic chromatogram generator
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateMassRangeChromatogram(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings,ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess[],System.Int32)">
            <summary>
            Create delivery, which will generate a Mass Range Chromatogram (XIC)
            </summary>
            <param name="startTime">
            The start time.
            </param>
            <param name="endTime">
            The end time.
            </param>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="thisTrace">
            The this trace.
            </param>
            <param name="massRanges">Mass ranges for this chromatogram</param>
            <param name="rangeCount">Number of mass ranges to use</param>
            <returns>
            An object to create the desired chromatogram.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateMassRangeDelivery(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Create delivery, which will generate a Mass Range Chromatogram (XIC)
            </summary>
            <param name="startTime">
            The start time.
            </param>
            <param name="endTime">
            The end time.
            </param>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="thisTrace">
            The this trace.
            </param>
            <returns>
            An object to create the desired chromatogram.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateScanSelect(ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            create a scan selection method.
            </summary>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="thisTrace">
            The this trace.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanSelect"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateTicDelivery(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Create Tic delivery, which will generate a Total Ion Chromatogram
            </summary>
            <param name="startTime">
            The start time.
            </param>
            <param name="endTime">
            The end time.
            </param>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="thisTrace">
            The this trace.
            </param>
            <returns>
            An object to create the desired chromatogram.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.CreateTotalOfMassRangeChromatogram(System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings)">
            <summary>
            Create a chromatogram point generator which can sum all data in a scan.
            </summary>
            <param name="startTime">
            Start time of chromatogram
            </param>
            <param name="endTime">
            End time of chromatogram
            </param>
            <param name="toleranceOptions">
            Mass tolerance settings
            </param>
            <param name="thisTrace">
            Settings for this chromatogram trace
            </param>
            <returns>
            Tool to sum all data in a scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.MsChromatogramSettingsConverter.GetFilterFromString(System.String)">
            <summary>
            Get a filter interface from a string.
            </summary>
            <param name="filter">The filter string.</param>
            <returns>
            An interface representing the filter fields, converted from the supplied string.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.NamespaceDoc">
            <summary>
            Contains factories to read various Xcalibur data system files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.NativeMethods">
            <summary>
            The native methods, pulled from OLE 32 DLL.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StreamSeek">
            <summary>
            The stream seek.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StreamSeek.Set">
            <summary>
            set position
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StreamSeek.Current">
            <summary>
            seek to current position
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StreamSeek.End">
            <summary>
            seek to end.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StgMove">
            <summary>
            The storage move mode.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMove.Move">
            <summary>
            Move data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMove.Copy">
            <summary>
            Copy data
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StgCommit">
            <summary>
            The storage commit.
            specify the conditions for performing the commit
             operation in the IStorage::Commit and IStream::Commit methods.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgCommit.Consolidate">
            <summary>
            Windows 2000 and Windows XP: Indicates that a storage should be consolidated
             after it is committed, resulting in a smaller file on disk.
             This flag is valid only on the outermost storage object that
             has been opened in transacted mode. It is not valid for streams. 
            The STGC_CONSOLIDATE flag can be combined with any other STGC flags.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgCommit.DangerouslyCommitMerelyToDiskCache">
            <summary>
            Commits the changes to a write-behind disk cache, but does not save
             the cache to the disk. In a write-behind disk cache, 
            the operation that writes to disk actually writes to a disk cache,
             thus increasing performance. The cache is eventually written to the disk,
             but usually not until after the write operation has already returned.
             The performance increase comes at the expense of an increased risk 
            of losing data if a problem occurs before the cache is saved and the 
            data in the cache is lost.
            If you do not specify this value, then committing changes to root-level 
            storage objects is robust even if a disk cache is used. 
            The two-phase commit process ensures that data is stored on the disk
             and not just to the disk cache.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgCommit.Default">
            <summary>
            You can specify this condition with STGC_CONSOLIDATE, or some combination of the other three flags in this list of elements.
             Use this value to increase the readability of code.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgCommit.OnlyIfCurrent">
            <summary>
            Prevents multiple users of a storage object from overwriting each other's changes.
             The commit operation occurs only if there have been no changes to the saved 
            storage object because the user most recently opened it. 
            Thus, the saved version of the storage object is the same version that
             the user has been editing. If other users have changed the storage object,
             the commit operation fails and returns the STG_E_NOTCURRENT value.
             To override this behavior, call the IStorage::Commit or IStream::Commit method
             again using the STGC_DEFAULT value.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgCommit.Overwrite">
            <summary>
            The commit operation can overwrite existing data to reduce overall space requirements.
             This value is not recommended for typical usage because it is not as robust as the
             default value. In this case, it is possible for the commit operation to fail after
             the old data is
             overwritten, but before the new data is completely committed. Then, neither the old version nor the new version of the storage object will be intact.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StatFlag">
            <summary>
            The STATFLAG enumeration values indicate whether the method should try to return
             a name in the <c>pwcsName</c> member of the STATSTG structure.
             The values are used in the ILockBytes::Stat, IStorage::Stat, and IStream::Stat methods to
             save memory when the <c>pwcsName</c> member is not required.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StatFlag.Default">
            <summary>
            Requests that the statistics include the <c>pwcsName</c> member of the STATSTG structure.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StatFlag.NoName">
            <summary>
            Requests that the statistics not include the <c>pwcsName</c> member of the STATSTG structure.
             If the name is omitted, there is no need for the
             ILockBytes::Stat, IStorage::Stat, and IStream::Stat methods 
            to allocate and free memory for the string value of the name, 
            therefore the method reduces time and resources used in an allocation and free operation.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.IOleStorage">
            <summary>
            IOleStorage interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.CreateStream(System.String,ThermoFisher.CommonCore.RawFileReader.StgMode,System.Int32,System.Int32)">
            <summary>
            create OLE stream.
            </summary>
            <param name="pwcsName">
            The stream name.
            </param>
            <param name="grfMode">
            The storage mode.
            </param>
            <param name="reserved1">
            The reserved 1.
            </param>
            <param name="reserved2">
            The reserved 2.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.IOleStream"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.OpenStream(System.String,System.IntPtr,ThermoFisher.CommonCore.RawFileReader.StgMode,System.Int32)">
            <summary>
            open a stream.
            </summary>
            <param name="pwcsName">
            The stream name.
            </param>
            <param name="reserved1">
            The reserved 1.
            </param>
            <param name="grfMode">
            The mode.
            </param>
            <param name="reserved2">
            The reserved 2.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.IOleStream"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.CreateStorage(System.String,ThermoFisher.CommonCore.RawFileReader.StgMode,System.Int32,System.Int32)">
            <summary>
            create a storage.
            </summary>
            <param name="pwcsName">
            The name.
            </param>
            <param name="grfMode">
            The mode.
            </param>
            <param name="reserved1">
            The reserved 1.
            </param>
            <param name="reserved2">
            The reserved 2.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.IOleStorage"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.OpenStorage(System.String,ThermoFisher.CommonCore.RawFileReader.IOleStorage,ThermoFisher.CommonCore.RawFileReader.StgMode,System.IntPtr,System.Int32)">
            <summary>
            Opens an existing storage object with the specified name according to
             the specified access mode. The name must not exceed 31 characters
             in length (not including the string terminator).
             The 000 through 01f characters, serving as the
             first character of the stream/storage name, are reserved for use by OLE.
             This is a compound file restriction, not a structured storage restriction.
            </summary>
            <param name="pwcsName">
            A pointer to a wide character null-terminated Unicode string that 
            contains the name of the storage object to open. 
            The 000 through 01f characters, serving as the first character
             of the stream/storage name, are reserved for use by OLE. 
            This is a compound file restriction, not a structured storage restriction.
             It is ignored if <c>pstgPriority</c> is non-NULL.
            </param>
            <param name="pstgPriority">
            Priority Must be NULL. A non-NULL value will return STG_E_INVALIDPARAMETER.
            </param>
            <param name="grfMode">
            Specifies the access mode to use when opening the storage object. For descriptions of the possible values, see STGM Constants. Other modes you choose must at least specify STGM_SHARE_EXCLUSIVE when calling this method.
            </param>
            <param name="snbExclude">
            Exclude Must be NULL. A non-NULL value will return STG_E_INVALIDPARAMETER.
            </param>
            <param name="reserved">
            Reserved for future use; must be zero.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.IOleStorage"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.CopyTo(System.Int32,System.Guid@,System.IntPtr,ThermoFisher.CommonCore.RawFileReader.IOleStorage)">
            <summary>
            The CopyTo method copies the entire contents of an open storage object to another storage object.
            </summary>
            <param name="ciidExclude">The number of elements in the array pointed to by <c>rgiidExclude</c>.
             If <c>rgiidExclude</c> is NULL, then <c>ciidExclude</c> is ignored.</param>
            <param name="rgiidExclude">An array of interface identifiers (IIDs) that either the caller
             knows about and does not want copied or that the storage object does not support,
             but whose state the caller will later explicitly copy. The array can include IStorage,
             indicating that only stream objects are to be copied, and IStream, indicating that only storage
             objects are to be copied. An array length of zero indicates that only the state exposed by the IStorage
             object is to be copied; all other interfaces on the object are to be ignored.
             Passing NULL indicates that all interfaces on the object are to be copied.</param>
            <param name="snbExclude">A string name block (refer to SNB) that specifies a block of storage 
            or stream objects that are not to be copied to the destination. These elements are not created at the destination.
             If IID_IStorage is in the <c>rgiidExclude</c> array, this parameter is ignored. This parameter may be NULL.</param>
            <param name="pstgDest">A pointer to the open storage object into which this storage object is to be copied.
             The destination storage object can be a different implementation of the IStorage interface from the source storage object.
             Thus, IStorage::CopyTo can use only publicly available methods of the destination storage object.
            If <c>pstgDest</c> is open in transacted mode, it can be reverted by calling its IStorage::Revert method.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.MoveElementsTo(System.String,ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.String,ThermoFisher.CommonCore.RawFileReader.StgMove)">
            <summary>
            The MoveElementTo method copies or moves a sub-storage or stream from this
             storage object to another storage object.
            </summary>
            <param name="pwcsName">Pointer to a wide character null-terminated Unicode string that contains the name of the element
             in this storage object to be moved or copied.</param>
            <param name="pstgDest">IStorage pointer to the destination storage object.</param>
            <param name="pwcsNewName">Pointer to a wide character null-terminated unicode string that contains the new name for the element in its new storage object.</param>
            <param name="grfFlags">Specifies whether the operation should be a move (STGMOVE_MOVE) or a copy (STGMOVE_COPY). See the STGMOVE enumeration.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.Commit(ThermoFisher.CommonCore.RawFileReader.StgCommit)">
            <summary>
            The Commit method ensures that any changes made to a storage object open 
            in transacted mode are reflected in the parent storage.
             For non-root storage objects in direct mode, 
            this method has no effect. For a root storage, it reflects the changes
             in the actual device; for example, a file on disk. For a root storage object opened 
            in direct mode, always call the IStorage::Commit method prior to Release. 
            IStorage::Commit flushes all memory buffers to the disk for a root storage
             in direct mode and will return an error code upon failure. Although Release
             also flushes memory buffers to disk, it has no capacity to return any error
             codes upon failure. Therefore, calling 
            Release without first calling Commit causes indeterminate results.
            </summary>
            <param name="grfCommitFlags">Controls how the changes are committed to the storage object.
            See the STGC enumeration for a definition of these values.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.Revert">
            <summary>
            The Revert method discards all changes that have been made to the storage object since the last commit operation.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.EnumElements(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            The method retrieves a pointer to an enumerator
             object that can be used to enumerate the storage
             and stream objects contained within this storage object.
            </summary>
            <param name="reserved1">Reserved 1 is Reserved for future use; must be zero.</param>
            <param name="reserved2">Reserved for future use; must be NULL.</param>
            <param name="reserved3">Reserved for future use; must be zero.</param>
            <returns>Pointer to <c>IEnumSTATSTG*</c> pointer variable
            that receives the interface pointer to the new enumerator object.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.DestroyElement(System.String)">
            <summary>
            The DestroyElement method removes the specified storage or stream from this storage object.
            </summary>
            <param name="pwcsName">A pointer to a wide character null-terminated Unicode string that contains
            the name of the storage or stream to be removed.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.RenameElement(System.String,System.String)">
            <summary>
            The RenameElement method renames the specified sub-storage or stream in this storage object.
            </summary>
            <param name="pwcsOldName">Pointer to a wide character null-terminated Unicode string that contains the name of the sub-storage or stream to be changed.</param>
            <param name="pwcsNewName">Pointer to a wide character null-terminated Unicode string that contains the new name for the specified sub-storage or stream.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.SetElementTimes(System.String,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <summary>
            The SetElementTimes method sets the modification, access, and creation times of the specified storage element, if the underlying file system supports this method.
            </summary>
            <param name="pwcsName">The name of the storage object element whose times are to be modified. If NULL, the time is set on the root storage rather than one of its elements.</param>
            <param name="pctime">Either the new creation time for the element or NULL if the creation time is not to be modified.</param>
            <param name="patime">Either the new access time for the element or NULL if the access time is not to be modified.</param>
            <param name="pmtime">Either the new modification time for the element or NULL if the modification time is not to be modified.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.SetClass(System.Guid@)">
            <summary>
            The SetClass method assigns the specified class identifier (CLSID) to this storage object.
            </summary>
            <param name="clsid">The CLSID that is to be associated with the storage object.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.SetStateBits(System.Int32,System.Int32)">
            <summary>
             stores up to 32 bits of state information in this storage object. This method is reserved for future use.
            </summary>
            <param name="grfStateBits">Specifies the new values of the bits to set. No legal values are defined for these bits; they are all reserved for future use and must not be used by applications.</param>
            <param name="grfMask">A binary mask indicating which bits in <c>grfStateBits</c> are significant in this call.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStorage.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,ThermoFisher.CommonCore.RawFileReader.StatFlag)">
            <summary>
            The Stat method retrieves the STATSTG structure for this open storage object.
            </summary>
            <param name="pstatstg">On return, pointer to a STATSTG structure where this method places information about the open storage object. This parameter is NULL if an error occurs.</param>
            <param name="grfStatFlag">Specifies that some of the members in the STATSTG structure are not returned, thus saving a memory allocation operation.
            Values are taken from the STATFLAG enumeration.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.LockType">
            <summary>
            The LOCKTYPE enumeration values indicate the type of locking requested
             for the specified range of bytes.
            The values are used in the ILockBytes::LockRegion and IStream::LockRegion methods.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.LockType.Exclusive">
            <summary>
            If this lock is granted, writing to the specified range of bytes is
             prohibited except by the owner that was granted this lock.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.LockType.OnlyOnce">
            <summary>
            If this lock is granted, no other LOCK_ONLYONCE lock can be obtained on the range. Usually this lock type is an alias for some other lock type.
             Thus, specific implementations can have additional behavior associated with this lock type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.LockType.Write">
            <summary>
            If this lock is granted, the specified range of bytes can be opened and read any number of times,
            but writing to the locked range is prohibited except for the owner that was granted this lock.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StgType">
            <summary>
            values are used in the type member of the STATSTG structure to indicate the type of the storage element. A storage element is a storage object,
             a stream object, or a byte-array object (LOCKBYTES).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgType.LockBytes">
            <summary>
            Indicates that the storage element is a byte-array object.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgType.Property">
            <summary>
            Indicates that the storage element is a property storage object.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgType.Storage">
            <summary>
            Indicates that the storage element is a storage object.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgType.Stream">
            <summary>
            Indicates that the storage element is a stream object.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.IOleStream">
            <summary>
            Replacement for UCOMIOleStream (and ComTypes.IOleStream) interface.
            for Read() and Write().
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.Read(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.
            </summary>
            <param name="pv">A pointer to the buffer which the stream data is read into.</param>
            <param name="cb">The number of bytes of data to read from the stream object.</param>
            <param name="pcbRead">[out] Returns the actual number of bytes read from the stream object.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.Write(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
             writes a specified number of bytes into the stream object starting at the current seek pointer.
            </summary>
            <param name="pv">A pointer to the buffer that contains the data that is to be written to the stream.
             A valid pointer must be provided for this parameter even when <code>cb</code> is zero.</param>
            <param name="cb">The number of bytes of data to attempt to write into the stream. This value can be zero.</param>
            <param name="pcbWritten">[out] Returns the actual number of bytes written to the stream object. </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.Seek(System.Int64,ThermoFisher.CommonCore.RawFileReader.StreamSeek)">
            <summary>
            changes the seek pointer to a new location.
             The new location is relative to either the beginning of the stream,
             the end of the stream, or the current seek pointer. 
            </summary>
            <param name="dlibMove">The displacement to be added to the location 
            indicated by the <c>origin</c> parameter. If <c>dwOrigin</c> is STREAM_SEEK_SET,
             this is interpreted as an unsigned value rather than a signed value.</param>
            <param name="origin">The origin for the displacement specified in <c>dlibMove</c>.
             The origin can be the beginning of the file (STREAM_SEEK_SET),
             the current seek pointer (STREAM_SEEK_CUR), or the end of the file (STREAM_SEEK_END).
             For more information about values, see the STREAM_SEEK enumeration.</param>
            <returns> the value of the new seek pointer from the beginning of the stream.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.SetSize(System.Int64)">
            <summary>
            changes the size of the stream object.
            </summary>
            <param name="libNewSize">Specifies the new size, in bytes, of the stream.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.CopyTo(ThermoFisher.CommonCore.RawFileReader.IOleStream,System.Int64,System.Int64@)">
            <summary>
            The CopyTo method copies a specified number of bytes
             from the current seek pointer in the stream to the current seek pointer in another stream.
            </summary>
            <param name="pstm">A pointer to the destination stream. The stream pointed to by <c>pstm</c>
             can be a new stream or a clone of the source stream.</param>
            <param name="cb">The number of bytes to copy from the source stream.</param>
            <param name="pcbRead">A pointer to the location where this method writes the actual
             number of bytes read from the source. You can set this pointer to NULL.
             In this case, this method does not provide the actual number of bytes read.</param>
            <returns> the actual number of bytes written to the destination.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.Commit(ThermoFisher.CommonCore.RawFileReader.StgCommit)">
            <summary>
             ensures that any changes made to a stream object open in transacted mode are reflected in the parent storage
            . If the stream object is open in direct mode, IStream::Commit has
             no effect other than flushing all memory buffers to the next-level storage object.
             The COM compound file implementation of streams does not support opening streams in transacted mode.
            </summary>
            <param name="grfCommitFlags">Controls how the changes for the stream object are committed.
            See the STGC enumeration for a definition of these values.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.Revert">
            <summary>
            discards all changes that have been made to a transacted stream since the last IStream::Commit call. On streams open in
             direct mode and streams using the COM compound file implementation of IStream::Revert, this method has no effect.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.LockRegion(System.Int64,System.Int64,ThermoFisher.CommonCore.RawFileReader.LockType)">
            <summary>
            restricts access to a specified range of bytes in the stream.
            Supporting this functionality is optional since some file systems do not provide it.
            </summary>
            <param name="libOffset">Integer that specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Integer that specifies the length of the range, in bytes, to be restricted.</param>
            <param name="lockType">Specifies the restrictions being requested on accessing the range.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.UnlockRegion(System.Int64,System.Int64,ThermoFisher.CommonCore.RawFileReader.LockType)">
            <summary>
            removes the access restriction on a range of bytes previously restricted with IStream::LockRegion.
            </summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Specifies, in bytes, the length of the range to be restricted.</param>
            <param name="lockType">Specifies the access restrictions previously placed on the range.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,ThermoFisher.CommonCore.RawFileReader.StatFlag)">
            <summary>
            retrieves the STATSTG structure for this stream.
            </summary>
            <param name="pstatstg">Pointer to a STATSTG structure where this method places information about this stream object.</param>
            <param name="grfStatFlag">Specifies that this method does not return some of the members in the STATSTG structure,
            thus saving a memory allocation operation. Values are taken from the STATFLAG enumeration.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IOleStream.Clone">
            <summary>
            creates a new stream object with its own seek pointer that references the same bytes as the original stream.
            </summary>
            <returns> pointer to the new stream object.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.IEnumSTATSTG">
            <summary>
            <c>IEnumSTATSTG</c> interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IEnumSTATSTG.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATSTG[],System.Int32@)">
            <summary>
             retrieves a specified number of STATSTG structures,
             that follow in the enumeration sequence. If there are fewer than the requested
             number of STATSTG structures that remain in the enumeration sequence,
             it retrieves the remaining STATSTG structures.
            </summary>
            <param name="celt">The number of STATSTG structures requested.</param>
            <param name="rgelt">An array of STATSTG structures returned.</param>
            <param name="pceltFetched">The number of STATSTG structures retrieved in the <c>rgelt</c> parameter.</param>
            <returns>S_OK on success</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IEnumSTATSTG.Skip(System.Int32)">
            <summary>
             skips a specified number of STATSTG structures in the enumeration sequence.
            </summary>
            <param name="celt">The number of STATSTG structures to skip.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IEnumSTATSTG.Reset">
            <summary>
            resets the enumeration sequence to the beginning of the STATSTG structure array.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.IEnumSTATSTG.Clone">
            <summary>
            creates a new enumerator that contains the same enumeration state as the current
             STATSTG structure enumerator. Using this method, a client
             can record a particular point in the enumeration
             sequence and then return to that point at a later time.
             The new enumerator supports the same <c>IEnumSTATSTG</c> interface.
            </summary>
            <returns>A pointer to the variable that receives the <c>IEnumSTATSTG</c> interface pointer.
            If the method is unsuccessful, the value of the <c>ppenum</c> parameter is undefined.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StgMode">
            <summary>
            The storage mode.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.Convert">
            <summary>
            Creates the new object while preserving existing data in a stream named "Contents".
             In the case of a storage object or a byte array,
             the old data is formatted into a stream regardless of whether the existing
             file or byte array currently contains a layered storage object.
             This flag can only be used when creating a root storage object.
             It cannot be used within a storage object; for example,
             in IStorage::CreateStream. It is also not valid to use this flag and
             the STGM_DELETEONRELEASE flag simultaneously.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.Create">
            <summary>
            Indicates that an existing storage object or stream should be removed before the new object replaces it.
            A new object is created when this flag is specified only if the existing object has been successfully removed.
            This flag is used when attempting to create:
            A storage object on a disk, but a file of that name exists.
            An object inside a storage object, but an object with the specified name exists.
            A byte array object, but one with the specified name exists.
            This flag cannot be used with open operations, such as <c>StgOpenStorageEx</c> or IStorage::OpenStream.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.DeleteOnRelease">
            <summary>
            Indicates that the underlying file is to be automatically destroyed
            when the root storage object is released. 
            This feature is most useful for creating temporary files.
            This flag can only be used when creating a root object,
             such as with <c>StgCreateStorageEx</c>.
             It is not valid when opening a root object, 
            such as with <c>StgOpenStorageEx</c>, or when creating or opening a sub-element,
             such as with IStorage::CreateStream. 
            It is also not valid to use this flag and the STGM_CONVERT flag simultaneously.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.Direct">
            <summary>
            Indicates that, in direct mode, each change to a storage or stream element is written as it occurs.
            This is the default if neither STGM_DIRECT nor STGM_TRANSACTED is specified.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.FailIfThere">
            <summary>
            Causes the create operation to fail if an existing object with the specified name exists.
             In this case, STG_E_FILEALREADYEXISTS is returned. This is the default creation mode; that is,
             if no other create flag is specified, STGM_FAILIFTHERE is implied.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.NoScratch">
            <summary>
            Indicates that, in transacted mode, a temporary scratch file is usually used
             to save modifications until the Commit method is called.
            Specifying STGM_NOSCRATCH permits the unused portion
             of the original file to be used as work space instead of
             creating a new file for that purpose.
            This does not affect the data in the original file,
             and in certain cases can result in improved performance.
            It is not valid to specify this flag without also specifying STGM_TRANSACTED,
            and this flag may only be used in a root open.
            For more information about NoScratch mode, see the Remarks section.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.NoSnapShot">
            <summary>
            This flag is used when opening a storage object with STGM_TRANSACTED and
             without STGM_SHARE_EXCLUSIVE or STGM_SHARE_DENY_WRITE.
            In this case, specifying STGM_NOSNAPSHOT prevents the
            system-provided implementation from creating a snapshot copy of the file.
            Instead, changes to the file are written to the end of the file.
            Unused space is not reclaimed unless consolidation is performed
            during the commit, and there is only one current writer on the file.
            When the file is opened in no snapshot mode, another open operation
            cannot be performed without specifying STGM_NOSNAPSHOT.
            This flag may only be used in a root open operation.
            For more information about NoSnapshot mode, see the Remarks section.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.Priority">
            <summary>
            Opens the storage object with exclusive access to the most 
            recently committed version. Thus, other users cannot commit
            changes to the object while you have it open in priority mode.
            You gain performance benefits for copy operations,
            but you prevent others from committing changes.
            Limit the time that objects are open in priority mode.
            You must specify STGM_DIRECT and STGM_READ with priority mode,
            and you cannot specify STGM_DELETEONRELEASE. STGM_DELETEONRELEASE 
            is only valid when creating a root object, such as with <c>StgCreateStorageEx</c>.
            It is not valid when opening an existing root object, such as with <c>StgOpenStorageEx</c>.
            It is also not valid when creating or opening a sub-element,
            such as with IStorage::OpenStorage.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.Read">
            <summary>
            Indicates that the object is read-only, meaning that modifications cannot be made.
            For example, if a stream object is opened with STGM_READ,
            the ISequentialStream::Read method may be called,
            but the ISequentialStream::Write method may not. Similarly,
            if a storage object opened with STGM_READ,
            the IStorage::OpenStream and IStorage::OpenStorage methods may be called,
            but the IStorage::CreateStream and IStorage::CreateStorage methods may not.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.ReadWrite">
            <summary>
            Enables access and modification of object data.
            For example, if a stream object is created or opened in this mode,
            it is possible to call both IStream::Read and IStream::Write.
            Be aware that this constant is not a simple binary OR operation
            of the STGM_WRITE and STGM_READ elements.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.ShareDenyNone">
            <summary>
            Specifies that subsequent openings of the object are not denied read or write access.
            If no flag from the sharing group is specified, this flag is assumed.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.ShareDenyRead">
            <summary>
            Prevents others from subsequently opening the object in STGM_READ mode.
            It is typically used on a root storage object.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.ShareDenyWrite">
            <summary>
            Prevents others from subsequently opening the object for STGM_WRITE or STGM_READWRITE access.
             In transacted mode, sharing of STGM_SHARE_DENY_WRITE or STGM_SHARE_EXCLUSIVE can significantly
             improve performance because they do not require snapshots.  
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.ShareExclusive">
            <summary>
            Prevents others from subsequently opening the object in any mode.
             Be aware that this value is not a simple bitwise OR operation
             of the STGM_SHARE_DENY_READ and STGM_SHARE_DENY_WRITE values.
             In transacted mode, sharing of STGM_SHARE_DENY_WRITE or STGM_SHARE_EXCLUSIVE
             can significantly improve performance because they do not require snapshots. 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.Simple">
            <summary>
            Provides a faster implementation of a compound file in a limited,
             but frequently used, case. For more information, see the Remarks section.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.Transacted">
            <summary>
            Indicates that, in transacted mode, changes are buffered
             and written only if an explicit commit operation is called.
             To ignore the changes, call the Revert method in the IStream,
             IStorage, or IPropertyStorage interface.
             The COM compound file implementation of IStorage does not 
            support transacted streams, which means that streams can be
             opened only in direct mode, and you cannot revert changes
             to them, however transacted storages are supported. 
            The compound file, stand-alone, and NTFS file system implementations 
            of IPropertySetStorage similarly do not support transacted, 
            simple property sets because these property sets are stored in streams.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StgMode.Write">
            <summary>
            Enables you to save changes to the object, 
            but does not permit access to its data. 
            The provided implementations of the 
            IPropertyStorage and IPropertySetStorage interfaces do not support this write-only mode.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.NoDataScanFromRawData">
            <summary>
            The "no data" scan from raw data class, which supplies code needed for the
            chromatogram batch generator to get scan information from the IRawDataPlus interface.
            This version returns scan event and index information only.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.NoDataScanFromRawData.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.NoDataScanFromRawData"/> class.
            </summary>
            <param name="rawData">
              The raw data.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.NoDataScanFromRawData.Reader(ThermoFisher.CommonCore.Data.Interfaces.ISimpleScanHeader)">
            <summary>
            The scan reader.
            </summary>
            <param name="simpleScanHeader">
            The scan index, to the available scans.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Business.SimpleScanWithHeader"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess">
            <summary>
            Loads a processing method (PMD) file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.FileHeader">
            <summary>
            Gets the file header for the processing method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.IsOpen">
            <summary>
            Gets a value indicating whether a file was successfully opened.
            Inspect "FileError" when false
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.MethodOptions">
            <summary>
            Gets some global settings from a PMD
            These settings apply to all components in the quantitation section.
            Some settings affect qualitative processing.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.StandardReport">
            <summary>
            Gets the "Standard report" settings from a processing method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.PeakDetection">
            <summary>
            Gets peak detection settings (Qualitative processing)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.SpectrumEnhancement">
            <summary>
            Gets Spectrum Enhancement settings (Qualitative processing)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.LibrarySearch">
            <summary>
            Gets options for NIST library search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.LibrarySearchConstraints">
            <summary>
            Gets constraints for NIST library search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.SampleReports">
            <summary>
            Gets the list of reports
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.Programs">
            <summary>
            Gets the list of programs
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.SummaryReports">
            <summary>
            Gets the list of reports
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.PeakDisplayOptions">
            <summary>
            Gets additional options about the peak display (peak labels etc).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.PeakPuritySettings">
            <summary>
            Gets setting for PDA peak purity
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.Components">
            <summary>
            Gets the list of compounds.
            This includes all integration, calibration and other settings 
            which are specific to each component.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.RawFileName">
            <summary>
            Gets the raw file name, which was used to design this method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.ViewType">
            <summary>
            Gets the "View type" saved in a PMD file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileAccess.MassOptions">
            <summary>
            Gets or sets the (global) mass tolerance and precision settings for the method
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileReader">
            <summary>
            Class to read data from Xcalibur PMD files
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ProcessingMethodFileReader.OpenProcessingMethod(System.String)">
            <summary>
            Create an IProcessingMethodFileAccess interface to
            read data from a processing method (PMD) file.
            The entire contents of the file are loaded into memory objects.
            The file is not kept open on disk, and so this interfaces has no 
            "Save", "Close" or "Dispose" methods.
            </summary>
            <param name="fileName">File to open</param>
            <returns>Interface to read data from the processing method file</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.RawFileAccess">
            <summary>
            The raw file access.
            This class adds functionality of "validating a disk file name" to the base.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccess.Create(System.String)">
            <summary>
            Create access to a file
            </summary>
            <param name="fileName">
            The file name.
            </param>
            <returns>
            The RawFileAccess
            </returns>
            <exception cref="T:System.ArgumentException">on null file
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccess.Create(ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader)">
            <summary>
            Create access to a file
            </summary>
            <param name="loader">
            The file loader.
            </param>
            <returns>
            The RawFileAccess
            </returns>
            <exception cref="T:System.ArgumentException">on null file
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccess.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.RawFileAccess"/> class. 
            </summary>
            <param name="loader">
            Loader of the file.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccess.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.RawFileAccess"/> class. 
            </summary>
            <param name="fileName">
            Name of the file.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccess.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <exception cref="T:System.Exception">Thrown if dispose fails</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase">
            <summary>
            The raw file access base.
            This provides an implementation of the IRawDataPlus against ".raw" files.
            Derived classes add specific (internal) functionality, such as thread handling.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase"/> class.
            </summary>
            <param name="loader">The loader.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.AutoSamplerInformation">
            <summary>
            Gets the auto sampler information.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.FileHeader">
            <summary>
            Gets the raw file header.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.ExportInstrumentMethod(System.String,System.Boolean)">
            <summary>
            Save instrument method file.
            </summary>
            <param name="methodFilePath">
            The method file path.
            </param>
            <param name="forceOverwrite">
            Force over write. If true, and file already exists, attempt to delete existing file first.
            If false: UnauthorizedAccessException will occur if there is an existing read only file.
            </param>
            <returns>
            True if export was achieved
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanTypeAsString(System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice)">
            <summary>
            get scan type as string.
            </summary>
            <param name="scanNum">
            The scan number.
            </param>
            <param name="massSpecDevice">
            The mass spec device.
            </param>
            <returns>
            The scan type.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.FilterScanEventForScan(System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice)">
            <summary>
            Gets The filter scan event for scan.
            </summary>
            <param name="scanNum">
            The scan number.
            </param>
            <param name="massSpecDevice">
            The mass spec device.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.CreateFilterFromScanEvent(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            Get a filter interface from a scan event interface.
            Permits filtering to be done based on programmed events, such as
            an item from the "ScanEvents" table,
            or from constructed data using <see cref="T:ThermoFisher.CommonCore.Data.Business.ScanEventBuilder"/>.
            This method initializes the filter based on the current raw file
            (for example: mass precision)
            </summary>
            <param name="scanEvent">
            The event data.
            </param>
            <returns>
            An interface representing the filter fields, converted from the supplied event.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.ValidateOpenFile">
            <summary>
            Validate that the raw file is open and loaded OK.
            </summary>
            <exception cref="T:System.Exception">If there was some problem opening the file
            </exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.ComputerName">
            <summary>
            Gets the name of the computer, used to create this file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.ReallyHasInstrumentMethod">
            <summary>
            Test if we really have an instrument method.
            </summary>
            <returns>
            True if there is a valid method.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetAllInstrumentFriendlyNamesFromInstrumentMethod">
            <summary>
            Get all instrument friendly names from the instrument method.
            </summary>
            <returns>
            The instrument friendly names"/&gt;.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetChromatogramDataEx(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx[],System.Int32,System.Int32)">
            <summary>
            Create a chromatogram from the data stream.
                        Extended version:
                        Parameters include option for component names.
                        Includes base peak data for each scan.
            </summary>
            <param name="settings">Definition of how the chromatogram is read
                        </param><param name="startScan">First scan to read from. -1 for "all data"
                        </param><param name="endScan">Last scan to read from. -1 for "all data"
                        </param>
            <returns>
            Chromatogram points
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.RetentionTimeRangeFromScans(System.Int32,System.Int32)">
            <summary>
            Convert from a range of scans to a time range.
            </summary>
            <param name="startScan">First scan to read from. -1 for "from start of data"</param>
            <param name="endScan">Last scan to read from. -1 for "to end of data"</param>
            <returns>The retention time range of the supplied scans</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.FixScanLimits(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader,System.Int32@,System.Int32@)">
            <summary>
            Handle rule that either start or end can be -1, for "use limits from header"
            </summary>
            <param name="info">
            run header info
            </param>
            <param name="startScan">
            start scan
            </param>
            <param name="endScan">
            end scan
            </param>
            <returns>
            true if the range is valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetChromatogramDataEx(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx[],System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Create a chromatogram from the data stream.
                        Extended version:
                        Parameters include option for component names.
                        Includes base peak data for each scan.
            </summary>
            <param name="settings">Definition of how the chromatogram is read
                        </param><param name="startScan">First scan to read from. -1 for "all data"
                        </param><param name="endScan">Last scan to read from. -1 for "all data"
                        </param><param name="toleranceOptions">For mass range or base peak chromatograms,
                        if the ranges have equal mass values,
                        then <paramref name="toleranceOptions"/> are used to determine a band
                        subtracted from low and added to high to search for matching masses.
                        For example: with 5 ppm tolerance, the caller can pass a single mass value (same low and high) for each mass range,
                        and get chromatograms of those masses +/- 5 ppm.
                        </param>
            <returns>
            Chromatogram points
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.CreateMsChromatograms(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx[],ThermoFisher.CommonCore.Data.Business.MassOptions,System.Int32,System.Int32)">
            <summary>
            The create MS chromatograms.
            </summary>
            <param name="settings">_s
            The settings.
            </param>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="startScan">
            The start scan.
            </param>
            <param name="endScan">
            The end scan.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IChromatogramDataPlus"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetCompoundNames(System.String)">
            <summary>
            Gets the unique compound names as arrays of strings by given filter.
            </summary>
            <param name="scanFilter">The scan Filter.</param>
            <returns>
            The compound names
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetCompoundNames">
            <summary>
            Gets the unique compound names as arrays of strings.
            </summary>
            <returns>
            The Compound Names.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetErrorLogItem(System.Int32)">
            <summary>
            Gets an entry from the instrument error log.
            </summary>
            <param name="index">Zero based index.
            The number of records available is RunHeaderEx.ErrorLogCount</param>
            <returns>
            An interface to read a specific log entry
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetFilterForScanNumber(System.Int32)">
            <summary>
            Get the filter (scanning method) for a scan number. This method is only defined for MS detectors.
            Calling for other detectors or with no selected detector is a coding
            error which may result in a null return or exceptions, depending on the implementation.
            </summary>
            <param name="scan">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IScanFilter"/>.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.RequireMassSpec(System.String)">
            <summary>
            Requires the MS Device
            </summary>
            <param name="reason">The reason. (Calling method)</param>
            <returns>The mass spec device</returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if not an mass spec</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetFilterFromString(System.String,System.Int32)">
            <summary>
            Get a filter interface from a string, with a given mass precisions
            </summary>
            <param name="filter">The filter string.</param>
            <param name="precision">Precisions of masses (number of decimal places)</param>
            <returns>
            An interface representing the filter fields, converted from the supplied string.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetFilterFromString(System.String)">
            <summary>
            Get a filter interface from a string.
            </summary>
            <param name="filter">The filter string.</param>
            <returns>
            An interface representing the filter fields, converted from the supplied string.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Get filtered scan enumerator.
            </summary>
            <param name="filter">The filter.
                        </param>
            <returns>
            An enumerator which can be used to <c>foreach</c> over all scans in a file, which match a given filter.
                        Note that each "step" through the enumerator will access further data from the file.
                        To get a complete list of matching scans in one call, the "ToArray" extension can be called,
                        but this will result in a delay as all scans in the file are analyzed to return this array.
                        For fine grained iterator control, including "back stepping" use <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetFilteredScanEnumeratorOverTime(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Double,System.Double)">
            <summary>
            Get filtered scan enumerator.
            </summary>
            <param name="filter">
            The filter.
                        </param>
            <param name="startTime">
            The start Time.
            </param>
            <param name="endTime">
            The End Time.
            </param>
            <returns>
            An enumerator which can be used to <c>foreach</c> over all scans in a time range, which match a given filter.
                        Note that each "step" through the enumerator will access further data from the file.
                        To get a complete list of matching scans in one call, the "ToArray" extension can be called,
                        but this will result in a delay as all scans in the time range are analyzed to return this array.
                        For fine grained iterator control, including "back stepping" use <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetFilteredScanIterator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Obtain an interface to iterate over a scans which match a specified filter.
                        The iterator is initialized at "scan 0" such that "GetNext" will return the first matching scan in the file.
                        This is a low level version of <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)"/>
            </summary>
            <param name="filter">The filter to match scans against</param>
            <returns>The iterator</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanDependents(System.Int32,System.Int32)">
            <summary>
            Get scan dependents.
            Returns a list of scans, for which this scan was the parent.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="filterPrecisionDecimals">
            The filter precision decimals.
            </param>
            <returns>
            Information about how data dependent scanning was performed.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanEventForScanNumber(System.Int32)">
            <summary>
            Gets the scan event for scan number.
            </summary>
            <param name="scanNum">The scan number.</param>
            <returns>The scan event for the given scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanEventStringForScanNumber(System.Int32)">
            <summary>
            Gets the scan event as a string for a scam
            </summary>
            <param name="scan">The scan number.</param>
            <returns>
            The event as a string.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanFiltersFromCompoundName(System.String)">
            <summary>
            Get the scan filters which match a compound name.
            When implemented against raw files, this may have a performance impact on applications.
            For files which have a programmed event table, this will be fast,
            as the information can be taken directly from the events.
            If there is no event table, then event data is checked for every scan in the file (slower).
            </summary>
            <param name="compoundName">The compound name.</param>
            <returns>
            The array of matching scan filters (in string format).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanFiltersFromCompoundNames(System.String[])">
            <summary>
            Get the scan filters which match each compound name.
            When implemented against raw files, this may have a performance impact on applications.
            For files which have a programmed event table, this will be fast,
            as the information can be taken directly from the events.
            If there is no event table, then event data is checked for every scan in the file (slower).
            </summary>
            <param name="compoundNames">The compound names.</param>
            <returns>
            The arrays of matching scan filters (in string format) for each compound.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetStatusLogAtPosition(System.Int32)">
            <summary>
            Gets the status log data, from all log entries, based on a specific position in the log.
            For example: "position" may be selected from one of the key value pairs returned from <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.StatusLogPlottableData" />
            in order to create a trend plot of a particular value.
            The interface returned has an array of retention times and strings.
            If the position was selected by using <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.StatusLogPlottableData" />, then the strings may be converted "ToDouble" to get
            the set of numeric values to plot.
            </summary>
            <param name="position">The position within the list of available status log values.</param>
            <returns>
            An interface containing the times and logged values for the selected status log field.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.HasMsData">
            <summary>
            Gets a value indicating whether this file has MS data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.ScanEvents">
            <summary>
            Gets the scan events.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.StatusLogPlottableData">
            <summary>
            Gets the labels and index positions of the status log items which may be plotted.
            That is, the numeric items.
            Labels names are returned by "Key" and the index into the log is "Value".
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.TestScan(System.Int32,System.String)">
            <summary>
            Test if a scan passes a filter.
            If all matching scans in a file are required, consider using <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumerator(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)" /> or <see cref="M:ThermoFisher.CommonCore.Data.Interfaces.IRawDataPlus.GetFilteredScanEnumeratorOverTime(ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Double,System.Double)" />
            </summary>
            <param name="scan">the scan number</param>
            <param name="filter">the filter to test</param>
            <returns>
            True if this scan passes the filter
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.TestScanInternal(System.Int32,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter)">
            <summary>
            Test if a scan passes a filter.
            </summary>
            <param name="scan">the scan number</param>
            <param name="filterFields">the filter to test</param>
            <returns>
            True if this scan passes the filter
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.IsTsqQuantumFile">
            <summary>
            Test if this file is from the Quantum family of MS
            </summary>
            <returns>true if quantum style file</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.UserLabel">
            <summary>
            Gets the set of user labels
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.CreationDate">
            <summary>
            Gets the date when this data was created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.CreatorId">
            <summary>
            Gets the name of person creating data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.FileName">
            <summary>
            Gets the name of acquired file (excluding path).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetAllInstrumentNamesFromInstrumentMethod">
            <summary>
            Gets names of all instruments stored in the raw file's copy of the instrument method file.
            </summary>
            <returns>
            The instrument names.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetFilters">
            <summary>
            Calculate the filters for this raw file, and return as an array
            </summary>
            <returns>
            Auto generated list of unique filters
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetFiltersForScanRange(System.Int32,System.Int32)">
            <summary>
            Calculate the filters for this raw file within the range of scans supplied, and return as an array
            </summary>
            <param name="startScan">First scan to analyze</param>
            <param name="endScan">Last scan to analyze</param>
            <returns>
            Auto generated list of unique filters
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetAutoFilters">
            <summary>
            Return the filter strings for this file
            </summary>
            <returns>
            A string for each auto filter from the raw file
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetCentroidStream(System.Int32,System.Boolean)">
            <summary>
            Get the centroids saved with a profile scan
            </summary>
            <param name="scanNumber">Scan number</param>
            <param name="includeReferenceAndExceptionPeaks">determines if peaks flagged as ref should be returned</param>
            <returns>
            centroid stream for specified <paramref name="scanNumber" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetAdvancedPacketData(System.Int32)">
            <summary>
            Get the advanced LT/FT formats data, such as the noise data, baseline data, label peaks and frequencies
            </summary>
            <param name="scanNumber">The scan number.</param>
            <returns>
            Returns an IAdvancedPacketData object which contains noise data, baseline data, label peaks and frequencies for specified <paramref name="scanNumber" />.
            It might return empty arrays for scans which do not have these data.
            </returns>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedMsDeviceException">Thrown if the selected device is not of type MS</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetChromatogramData(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Create a chromatogram from the data stream
            </summary>
            <param name="settings">Definition of how the chromatogram is read</param>
            <param name="startScan">First scan to read from. -1 for "all data"</param>
            <param name="endScan">Last scan to read from. -1 for "all data"</param>
            <param name="toleranceOptions">For mass range or base peak chromatograms,
            if the ranges have equal mass values,
            then <paramref name="toleranceOptions" /> are used to determine a band
            subtracted from low and added to high to search for matching masses</param>
            <returns>
            Chromatogram points
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.CreateSimpleMsChromatogramsWithTolerance(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32,ThermoFisher.CommonCore.Data.Business.MassOptions)">
            <summary>
            Generate MS chromatograms, not returning base peak data.
            </summary>
            <param name="settings">Chromatogram settings</param>
            <param name="startScan">First scan in chromatogram</param>
            <param name="endScan">Last scan in chromatogram</param>
            <param name="toleranceOptions">Mass tolerance</param>
            <returns>The chromatogram</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetChromatogramData(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32)">
            <summary>
            Create a chromatogram from the data stream
            </summary>
            <param name="settings">Definition of how the chromatogram is read</param>
            <param name="startScan">First scan to read from. -1 for "all data"</param>
            <param name="endScan">Last scan to read from. -1 for "all data"</param>
            <returns>
            Chromatogram points
            </returns>
            <exception cref="T:System.ArgumentNullException">Null settings argument.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.CreateSimpleMsChromatograms(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32)">
            <summary>
            Create simple MS chromatograms.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="startScan">
            The start scan.
            </param>
            <param name="endScan">
            The end scan.
            </param>
            <returns>
            The chromatogram data
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.ApplyDelays(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],ThermoFisher.CommonCore.Data.Business.ChromatogramSignal[])">
            <summary>
            Apply delays to chromatograms, where specified.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="signal">
            The signal.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetInstrumentCountOfType(ThermoFisher.CommonCore.Data.Business.Device)">
            <summary>
            Get the number of instruments (data streams) of a certain classification.
            For example: the number of UV devices which logged data into this file.
            </summary>
            <param name="type">The device type to count</param>
            <returns>
            The number of devices of this type
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetInstrumentData">
            <summary>
            Gets the definition of the selected instrument.
            </summary>
            <returns>
            data about the selected instrument, for example the instrument name
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetInstrumentType(System.Int32)">
            <summary>
            Get the device type for an instrument data stream
            </summary>
            <param name="index">The data stream</param>
            <returns>The device at type the index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown if index is negative or beyond
            the device count</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanStatsForScanNumber(System.Int32)">
            <summary>
            Get the scan statistics for a scan
            </summary>
            <param name="scanNumber">scan number</param>
            <returns>Statistics for scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanType(System.Int32)">
            <summary>
            Gets the type of the scan.
            </summary>
            <param name="scanNum">The scan number.</param>
            <returns>The scan type, as string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetSegmentEventTable">
            <summary>
            Gets the segment event table for the current instrument
            </summary>
            <returns>
            A two dimensional array of events. The first index is segment index (segment number-1).
            The second is event index (event number -1) within the segment.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetSegmentedScanFromScanNumber(System.Int32,ThermoFisher.CommonCore.Data.Business.ScanStatistics)">
            <summary>
            Get a segmented scan. This is the primary scan from the raw file.
            FT instrument files (such as Calcium) will have a second format of the scan (a centroid stream)
            </summary>
            <param name="scanNumber">Scan number to read</param>
            <param name="stats">statistics for the scan</param>
            <returns>The segmented scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.RequireDevice(System.String)">
            <summary>
            Require a device to have been selected.
            </summary>
            <param name="reason">
            The reason.
            </param>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown in no device has been selected
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.RequireChromatographicDevice(System.String)">
            <summary>
            Require a chromatographic device to have been selected.
            </summary>
            <param name="reason">
            The reason.
            </param>
            <exception cref="T:ThermoFisher.CommonCore.Data.Business.NoSelectedDeviceException">Thrown in no chromatographic device has been selected
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetStatusLogEntriesCount">
            <summary>
            returns the number of entries in the current instrument's status log
            </summary>
            <returns>the number of entries in the current instrument's status log</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetStatusLogForRetentionTime(System.Double)">
            <summary>
            Gets the status log for retention time.
            </summary>
            <param name="retentionTime">The retention time.</param>
            <returns>
            <see cref="T:ThermoFisher.CommonCore.Data.Business.LogEntry" /> object containing status log information.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetStatusLogHeaderInformation">
            <summary>
            Returns the header information for the current instrument's status log
            </summary>
            <returns>
            The headers (list of prefixes for the strings).
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.CheckEmptyStatusLog(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IStatusLog)">
            <summary>
            check for empty status log.
            </summary>
            <param name="logEntries">
            The log entries.
            </param>
            <returns>
            true if empty
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetStatusLogValues(System.Int32,System.Boolean)">
            <summary>
            Returns the Status log values for the current instrument
            </summary>
            <param name="statusLogIndex">Index into table of status logs</param>
            <param name="ifFormatted">true if they should be formatted (recommended for display).
            Unformatted values can be returned with default precision (for float or double)
            Which may be better for graphing</param>
            <returns>
            The status log values.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTrailerExtraHeaderInformation">
            <summary>
            Gets the trailer extra header information. This is common across all scan numbers
            </summary>
            <returns>
            The headers.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTrailerExtraInformation(System.Int32)">
            <summary>
            Gets the array of headers and values for this scan number. The values are formatted as per the header settings.
            </summary>
            <param name="scanNumber">The scan for which this information is needed</param>
            <returns>
            Extra information about the scan
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTrailerExtraValues(System.Int32,System.Boolean)">
            <summary>
            returns the Trailer Extra values for the specified scan number. 
            </summary>
            <param name="scanNumber">scan who's data is needed</param>
            <param name="ifFormatted">If true, then the values will be formatted as per the header settings.
            If false, then numeric values have default formatting (generally more precision)</param>
            <returns>string representation of the scan trailer information</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTrailerExtraValue(System.Int32,System.Int32)">
            <summary>
            returns the Trailer Extra value for a specific field in the specified scan number. 
            The object type depends on the field type.
            </summary>
            <param name="scanNumber">scan who's data is needed</param>
            <param name="field">zero based filed number in the record, as per header </param>
            <returns>Value of requested field</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTrailerExtraValues(System.Int32)">
            <summary>
            returns the Trailer Extra values for all fields in the specified scan number. 
            The object types depend on the field types.
            </summary>
            <param name="scanNumber">scan who's data is needed</param>
            <returns>Value of requested field</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTuneData(System.Int32)">
            <summary>
            Gets the tune data.
            </summary>
            <param name="tuneDataIndex">Index of the tune data.</param>
            <returns>The tune data log</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTuneDataValues(System.Int32)">
            <summary>
            Gets the tune data values, as an array of objects
            with types as per the tune data header.
            </summary>
            <param name="tuneDataIndex">Index of the tune data.</param>
            <returns>The tune data values (as objects)</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetStatusLogEntry(System.Int32)">
            <summary>
            Gets the (raw) status log data at a given index in the log.
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="index">Index (from 0 to "RunHeaderEx.StatusLogCount"-1)</param>
            <returns>Log data at the given index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetSortedStatusLogEntry(System.Int32)">
            <summary>
            Gets the (raw) status log data at a given index in the sorted log.
            The form of the log removes duplicate and out of order times
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="index">Index (from 0 to "GetStatusLogEntriesCount() -1")</param>
            <returns>Log data at the given index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetStatusLogEntry(System.Double)">
            <summary>
            Gets the (raw) status log data at a given retention time in the log.
            Designed for efficiency, this method does not convert logs to display string format.
            </summary>
            <param name="retentionTime">Retention time/</param>
            <returns>Log data at the given time</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTuneDataCount">
            <summary>
            return the number of tune data entries
            </summary>
            <returns>
            The number of tune methods.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTuneDataHeaderInformation">
            <summary>
            Return the header information for the current instrument's tune data
            </summary>
            <returns>
            The format definition for tune data.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetTuneDataValues(System.Int32,System.Boolean)">
            <summary>
            return tune data values for the specified index
            </summary>
            <param name="tuneDataIndex">index into tune tables</param>
            <param name="ifFormatted">true if formatting should be done</param>
            <returns>
            The tune data.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.InAcquisition">
            <summary>
            Gets a value indicating whether the file is being acquired (not complete).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.IncludeReferenceAndExceptionData">
            <summary>
            Gets or sets a value indicating whether reference and exception peaks should be returned (by default they are not)
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.InstrumentCount">
            <summary>
            Gets the number of instruments (data streams) in this file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetInstrumentMethod(System.Int32)">
            <summary>
            Gets an instrument method.
            </summary>
            <param name="index">The index.</param>
            <returns>
            A text version of the method
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.InstrumentMethodsCount">
            <summary>
            Gets the number of instrument methods in this file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.HasInstrumentMethod">
            <summary>
            Gets a value indicating whether this file has an instrument method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.IsCentroidScanFromScanNumber(System.Int32)">
            <summary>
            Test if a scan is centroid format
            </summary>
            <param name="scanNumber">Number of the scan</param>
            <returns>
            True if the scan is centroid format
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.IsOpen">
            <summary>
            Gets a value indicating whether the data file was successfully opened
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.Path">
            <summary>
            Gets the path to original data. (path set when acquired)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.RetentionTimeFromScanNumber(System.Int32)">
            <summary>
            Get the retention time (minutes) from a scan number
            </summary>
            <param name="scanNumber">Scan number</param>
            <returns>
            Retention time (start time) of scan
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.RunHeaderEx">
            <summary>
            Gets extended the run header details.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.RunHeader">
            <summary>
            Gets the current instrument's run header
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.SampleInformation">
            <summary>
            Gets various details about the sample (such as comments).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.ScanNumberFromRetentionTime(System.Double)">
            <summary>
            Get a scan number from a retention time
            </summary>
            <param name="time">Retention time (minutes)</param>
            <returns>
            Scan number in the data stream for this time.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.SelectedInstrument">
            <summary>
            Gets the instrument as last set by a call to <see cref="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.SelectInstrument(ThermoFisher.CommonCore.Data.Business.Device,System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.SelectInstrument(ThermoFisher.CommonCore.Data.Business.Device,System.Int32)">
            <summary>
            Sets the current instrument in the raw file.
            This method must be called before subsequent calls to access data specific 
            to an instrument (e.g. MS or UV data) may be made. All requests for data specific 
            to an instrument will be forwarded to the current instrument until the current 
            instrument is changed. The instrument number is used to indicate which instrument 
            to use if there are more than one registered instruments of the same type (e.g. multiple UV detectors). 
            Instrument numbers for each type are numbered starting at 1. 
            </summary>
            <param name="instrumentType">Type of instrument</param>
            <param name="instrumentIndex">Stream number</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c></c> is out of range.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.Cached(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem)">
            <summary>
            Count the number currently in the cache
            </summary>
            <param name="item">Item type to count</param>
            <returns>
            The number of items in this cache
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.ClearCache(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem)">
            <summary>
            Clear items in the cache
            </summary>
            <param name="item">item type to clear</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.SetCaching(ThermoFisher.CommonCore.Data.Interfaces.RawCacheItem,System.Int32,System.Boolean)">
            <summary>
            Request the object to keep a cache of the listed item.
            Setting the caching to "zero" disables further caching.
            </summary>
            <param name="item">Item to cache</param>
            <param name="limit">Limit of number of items to cache</param>
            <param name="useCloning">(optional, default false) if set True, all values returned from the cache are unique  (cloned) references.
            By default, the cache just keeps references to the objects</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetScanEvents(System.Int32,System.Int32)">
            <summary>
            When deciding what data should be read from a scan, centroids or regular scan
            (or if the data is needed at all)
            scan event data is needed.
            This method permits events to be read as a block for a range of scans,
            which may reduce overheads involved in requesting one by one.
            Potentially, in some data models, the same "event" may apply to several scans
            so it is permissible for the same reference to appear multiple times.
            </summary>
            <param name="firstScanNumber">The first scan whose event is needed</param>
            <param name="lastScanNumber">The last scan</param>
            <returns>
            An array of scan events
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">firstScanNumber;First scan must not be below Last scan</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetSimplifiedCentroids(System.Int32)">
            <summary>
            This method is similar to GetCentroidStream in the IRawData interface.
            The method returns only the mass and intensity values from
            the "centroid stream" data for a scan. This is also known as "Label Stream"
            Values for flags etc. are not returned, saving data space and improving efficiency.
            This method never returns "reference and exception peak" data.
            The method is designed for improved performance in custom XIC generators.
            </summary>
            <param name="scanNumber">The scan who's mass intensity data are needed</param>
            <returns>Mass and intensity values from the scan "centroid data".</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetSimplifiedScan(System.Int32)">
            <summary>
            This method is similar to GetSegmentedScanFromScanNumber in the IRawData interface.
            The method returns only the mass and intensity values from
            the scan data for a scan. 
            Values for flags etc. are not returned, saving data space and improving efficiency.
            This method never returns "reference and exception peak" data.
            The method is designed for improved performance in custom XIC generators.
            </summary>
            <param name="scanNumber">The scan who's mass intensity data are needed</param>
            <returns>Mass and intensity values from the scan.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetAdditionalScanData(System.Int32)">
            <summary>
            Gets additional (binary) data from a scan.
            The format of this data is custom (per instrument) and can be decoded into
            objects by a specific decoder for the detector type.
            </summary>
            <param name="scan">Scan whose data is needed</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.GetExtendedScanData(System.Int32)">
            <summary>
            Gets additional (binary) data from a scan.
            The format of this data is custom (per instrument) and can be decoded into
            objects by a specific decoder for the detector type.
            </summary>
            <param name="scan">Scan whose data is needed</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileAccessBase.DisposeOfLoader">
            <summary>
            Permits derived (internal) classes to indicate that the loader is no longer needed,
            without having to create public or protected access to the loader.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.RawFileReaderAdapter">
            <summary>
            This static class contains factories to open raw files
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileReaderAdapter.FileFactory(System.String)">
            <summary>
            Create an IRawDataExtended interface to read data from a raw file
            </summary>
            <param name="fileName">File to open</param>
            <returns>Interface to read data from file</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileReaderAdapter.ThreadedFileFactory(System.String)">
            <summary>
            Open a raw file, which will be accessed from multiple threads.
            </summary>
            <param name="fileName">File to open</param>
            <returns>Interface to create objects for each thread to use</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.RawFileReaderAdapter.FileHeaderFactory(System.String)">
            <summary>
            Opens an Xcalibur family file, and returns information from the header.
            The file is not kept open.
            For example: Reads headers from <c>.raw, .sld, .pmd</c> files.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Interface to read a file header</returns>
            <exception cref="T:System.ArgumentException">Thrown when there are problems with the file name</exception>
            <exception cref="T:System.ApplicationException">Only 64 bit applications are supported by this project</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor">
            <summary>
            The memory map accessor.
            Provides methods to access mapped file data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.#ctor(ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile,System.String,System.IO.MemoryMappedFiles.MemoryMappedViewAccessor,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor"/> class.
            </summary>
            <param name="mmf">The memory mapped raw file handler</param>
            <param name="streamId">The stream identifier.</param>
            <param name="viewAccessor">The view accessor.</param>
            <param name="initialOffset">The initial offset.</param>
            <param name="sizeOfView">The size of view.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.WriteStruct``1(System.Int64,``0)">
            <summary>
            Writes the structure.
            </summary>
            <typeparam name="T">Struct type</typeparam>
            <param name="offset">The offset.</param>
            <param name="data">The data.</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.WriteStruct``1(System.Int64,``0,System.Int32)">
            <summary>
            Writes the structure.
            </summary>
            <typeparam name="T">Struct type</typeparam>
            <param name="offset">The offset.</param>
            <param name="data">The data.</param>
            <param name="numBytesWrite">The size of structure.</param>
            <returns>Number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.WriteFloat(System.Int64,System.Single)">
            <summary>
            Writes the float to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written (4)</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.WriteDouble(System.Int64,System.Double)">
            <summary>
            Writes the double to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>the number of bytes written (8)</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.WriteByte(System.Int64,System.Byte)">
            <summary>
            Writes the byte to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written (1)</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.WriteBytes(System.Int64,System.Byte[])">
            <summary>
            Writes the array of bytes to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.WriteShort(System.Int64,System.Int16)">
            <summary>
            Writes the short to the memory mapped file.
            </summary>
            <param name="offset">The start position.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written (2)</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.WriteInt(System.Int64,System.Int32)">
            <summary>
            Writes the integer to the memory mapped file.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            <returns>The number of bytes written (4)</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.IncrementInt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader">
            <summary>
            The memory map reader.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.Accessor">
            <summary>
            Gets the accessor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.MemoryMappedFile">
            <summary>
            Gets or sets the memory mapped file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.#ctor(ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile,System.String,System.IO.MemoryMappedFiles.MemoryMappedViewAccessor,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader"/> class.
            </summary>
            <param name="mmf">
            The memory Mapped File.
            </param>
            <param name="streamId">
            The stream id.
            </param>
            <param name="viewAccessor">
            The view accessor.
            </param>
            <param name="initialOffset">
            The initial offset.
            </param>
            <param name="sizeOfView">
            The size of view.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.InitialOffset">
            <summary>
            Gets the initial offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.SizeOfView">
            <summary>
            Gets the size of view.
            </summary>
            <value>
            The size of view.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.StreamId">
            <summary>
            Gets the stream id.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadStructArray``1(System.Int64,System.Int64@)">
            <summary>
            Reads the structure array.
            </summary>
            <typeparam name="T">Type of structure</typeparam>
            <param name="offset">The offset into the map.</param>
            <param name="numberOfBytesRead">The number of bytes read.</param>
            <returns>Array of structures</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadByte(System.Int64)">
            <summary>
            The method reads a byte.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadBytes(System.Int64,System.Int32)">
            <summary>
            The method reads an array of bytes.
            </summary>
            <param name="offset">Offset from start of memory map</param>
            <param name="count">The count.</param>
            <returns>
            The byte array.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadDouble(System.Int64)">
            <summary>
            The method reads a double.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadDoubles(System.Int64,System.Int32)">
            <summary>
            Reads an array of double.
            </summary>
            <param name="offset">The offset into the map.</param>
            <param name="count">The count.</param>
            <returns>The array of doubles</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadFloat(System.Int64)">
            <summary>
            The method reads a float.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadFloats(System.Int64,System.Int32)">
            <summary>
            Reads floats, as an array
            </summary>
            <param name="offset">The offset into the map.</param>
            <param name="count">The count.</param>
            <returns>The array of floats</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadInt(System.Int64)">
            <summary>
            The method reads an integer.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadInts(System.Int64,System.Int32)">
            <summary>
            Reads the integers, where count is typically small
            </summary>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>
            The array of integers
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadUnsignedLongInts(System.Int64,System.Int32)">
            <summary>
            read unsigned long integers, as an array.
            </summary>
            <param name="offset">
            The offset into the map.
            </param>
            <param name="count">
            The count.
            </param>
            <returns>
            The array of unsigned long integers.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadUnsignedInts(System.Int64,System.Int32)">
            <summary>
            read unsigned integers.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <param name="count">
            The count.
            </param>
            <returns>
            The array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadPreviousRevisionAndConvert``1(System.Int64,System.Int32)">
            <summary>
            Read a previous revision of a type and convert to latest.
            Previous struct is assumed to be at the start of the latest struct
            using sequential layout.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <param name="sizeOfPreviousRevStruct">
            The size of previous rev struct.
            </param>
            <typeparam name="T">Type to return
            </typeparam>
            <returns>
            The converted object.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadShort(System.Int64)">
            <summary>
            Reads the short.
            </summary>
            <param name="offset">The offset into the memory map.</param>
            <returns>The short</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadString(System.Int64,System.Int64@)">
            <summary>
            read string.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <param name="numOfBytesRead">
            The number of bytes read.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadWideChars(System.Int64,System.Int64@)">
            <summary>
            Read a number of wide characters, and convert to string.
            If there is a '0' in the string, the string length will be adjusted.
            </summary>
            <param name="offset">The offset into the view.</param>
            <param name="numOfBytesRead">The number of bytes read.</param>
            <returns> The converted string </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadWideChars(System.Int64,System.Int64@,System.UInt32)">
            <summary>
            Read a number of wide characters, and convert to string.
            If there is a '0' in the string, the string length will be adjusted.
            </summary>
            <param name="offset">Offset into the view</param>
            <param name="numOfBytesRead">Number of bytes read by this call (added to input value)</param>
            <param name="stringSize">Number of 2 byte chars</param>
            <returns>converted string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadWideCharArray(System.Int64,System.Int64@,System.UInt32)">
            <summary>
            read an array of wide (2 byte) char.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <param name="numOfBytesRead">
            The number of bytes read.
            </param>
            <param name="stringSize">
            The string size.
            </param>
            <returns>
            The characters
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadStrings(System.Int64,System.Int64@)">
            <summary>
            read a list of strings
            </summary>
            <param name="offset">
            The offset.
            </param>
            <param name="numBytesRead">
            The number bytes read.
            </param>
            <returns>
            The strings
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadSimpleStructure``1(System.Int64)">
            <summary>
            Read a simple structure.
            This must be a fixed size struct, with no embedded fixed arrays,
            ref types or any other marshaled items.
            Example: struct containing 2 doubles. 
            </summary>
            <param name="offset">
            The offset.
            </param>
            <typeparam name="T">type of struct
            </typeparam>
            <returns>
            The structure
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadSimpleStructureArray``1(System.Int64,System.Int32)">
            <summary>
            read simple structure array.
            This must be a fixed size struct, with no embedded fixed arrays,
            ref types or any other marshaled items.
            Example: struct containing 2 doubles.
            </summary>
            <param name="offset">
            The offset into the memory map.
            </param>
            <param name="count">
            The count (array length).
            </param>
            <typeparam name="T">type of struct
            </typeparam>
            <returns>
            The struct array.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadLargeData(System.Int64,System.Int32)">
            <summary>
            read an array of bytes from a view, expecting a large data array.
            This uses 64 bit items, to cut down Marshalling overheads
            </summary>
            <param name="startPos">
            The start position.
            </param>
            <param name="count">The count of bytes to read</param>
            <returns>
            The array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadStructure``1(System.Int64,System.Int64@)">
            <summary>
            read structure.
            </summary>
            <param name="offset">
            The offset into the memory map.
            </param>
            <param name="numOfBytesRead">
            The number of bytes read.
            </param>
            <typeparam name="T">type of structure
            </typeparam>
            <returns>
            The structure
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadStructure``1(System.Int64,System.Int32)">
            <summary>
            read a structure.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <param name="numOfBytesRead">
            The number of bytes read.
            </param>
            <typeparam name="T">Type to read
            </typeparam>
            <returns>
            The object which was read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadUnsignedInt(System.Int64)">
            <summary>
            read unsigned integer.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <returns>
            The <see cref="T:System.UInt32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ReadUnsignedShort(System.Int64)">
            <summary>
            read unsigned short.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <returns>
            The <see cref="T:System.UInt16"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.ConvertBytesToStructure``1(System.Collections.IEnumerable)">
            <summary>
            The method converts an <see cref="T:System.Collections.IEnumerable"/> object to a structure.
            </summary>
            <param name="bytes">
            The bytes array.
            </param>
            <typeparam name="T">
            Structure to convert to.
            </typeparam>
            <returns>
            The structure.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemMapReader.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileHelper">
            <summary>
            A helper class to provide common methods to release/close and get memory mapped file accessor, etc.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileHelper.ReleaseAndCloseMemoryMappedFile(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Boolean)">
            <summary>
            Releases and close the memory mapped file and viewer
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="forceToCloseMmf">if set to <c>true</c> [force to close MMF].</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileHelper.GetMemoryMappedViewer(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Guid,System.String,System.Int64,System.Int64,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType)">
            <summary>
            Gets the memory mapped viewer.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="loaderId">The loader identifier.</param>
            <param name="mapName">Name of the map.</param>
            <param name="offset">The offset.</param>
            <param name="size">The size.</param>
            <param name="inAcquisition">if set to <c>true</c> [in acquisition].</param>
            <param name="accessMode">The access mode.</param>
            <param name="type">The type.</param>
            <returns>Memory mapped file accessor</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileHelper.GetMemoryMappedViewer(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Guid,System.String,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType)">
            <summary>
            Gets the memory mapped viewer.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="loaderId">The loader identifier.</param>
            <param name="mapName">Name of the map.</param>
            <param name="inAcquisition">if set to <c>true</c> [in acquisition].</param>
            <param name="accessMode">The access mode.</param>
            <param name="type">The type.</param>
            <returns>Memory mapped file accessor</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileHelper.IsFailedToMapAZeroLengthFile(System.String,System.String@)">
            <summary>
            Determines whether [is failed to map a zero length file] [the specified stream identifier].
            </summary>
            <param name="streamId">The stream identifier.</param>
            <param name="errors">The error messages</param>
            <returns>True tried to map a zero length file; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileHelper.IsFailedToMapAZeroLengthFile(System.String)">
            <summary>
            Determines whether [is failed to map a zero length file] [the specified stream identifier].
            </summary>
            <param name="streamId">The stream identifier.</param>
            <returns>True tried to map a zero length file; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileHelper.ConstructStreamId(System.Guid,System.String)">
            <summary>
            Constructs the stream identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <returns>Memory mapped file ID</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode">
            <summary>
            Memory Mapped File access mode
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.Open">
            <summary>
            Open an existing memory mapped file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.Create">
            <summary>
            Create an memory mapped file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.Read">
            <summary>
            Allow to read
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.Write">
            <summary>
            Allow to write
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.Id">
            <summary>
            Prefixing a local namespace share memory mapped object name with a raw file loader ID
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.Global">
            <summary>
            Prefixing the file mapping object names with "Global\" allows processes to communicate with each other 
            even if they are in different terminal server sessions. (use mainly in Acquisition)
            This requires that the first process must have the SeCreateGlobalPrivilege privilege.
            without prefixing the file mapping object names with "Global\", the sharing named memory is visible to 
            local process
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenRead">
            <summary>
            The open read
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenReadWrite">
            <summary>
            The open read write
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenCreateRead">
            <summary>
            The open create read
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenCreateReadWrite">
            <summary>
            The open create read write
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenReadGlobal">
            <summary>
            The open read global
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenReadWriteGlobal">
            <summary>
            The open read write global
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenCreateReadGlobal">
            <summary>
            The open create read global
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenCreateReadWriteGlobal">
            <summary>
            The open create read write global
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenReadId">
            <summary>
            The open read identifier
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenCreateReadLoaderId">
            <summary>
            The open create read loader identifier
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode.OpenCreateReadWriteLoaderId">
            <summary>
            The open create read write loader identifier
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType">
            <summary>
            Memory mapped file type 
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType.Persisted">
            <summary>
            create a memory-mapped file that is mapped to an existing file on disk
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType.NonPersisted">
            <summary>
            create a memory-mapped file that is not mapped to an existing file on disk
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile">
            <summary>
            The memory mapped file for viewing a raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile"/> class from being created.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.#ctor(System.Guid,System.String,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile"/> class.
            </summary>
            <param name="loaderId">The loader identifier.</param>
            <param name="fileName">Name of the file.</param>
            <param name="accessMode">The access mode.</param>
            <param name="type">The type.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.IsOpenSucceed">
            <summary>
            Gets a value indicating whether this instance is open succeed.
            </summary>
            <value>
            <c>true</c> if this instance is open succeed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.Errors">
            <summary>
            Gets a value indicating whether this <see cref="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile"/> is errors.
            </summary>
            <value>
              <c>true</c> if errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.MemMappedFileName">
            <summary>
            Gets the currently mapped memory map file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.StreamId">
            <summary>
            Gets the stream id.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.IncrementRefCount">
            <summary>
            increment the ref count.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.DecrementRefCount">
            <summary>
            decrement the ref count.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.GetRefCount">
            <summary>
            get the ref count.
            </summary>
            <returns>
            The reference count
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.Dispose">
            <summary>
            The dispose method closes the memory mapped file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.GetRandomAccessViewer(System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
            <summary>
            Gets the random access viewer.
            Create a view that starts at 0 offset (begin) and ends approximately at the end of the memory-mapped file.
            </summary>
            <param name="fileAccess">
            The file Access.
            </param>
            <returns>
            Access to the mapped data
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.GetRandomAccessViewer(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
            <summary>
            Gets the random access viewer.
            </summary>
            <param name="offset">The offset. The byte at which to start the view.</param>
            <param name="size">The size. The size of the view. Specify 0 (zero) to create a view that starts at offset and ends approximately at the end of the memory-mapped file.</param>
            <param name="fileAccess">The file access</param>
            <returns>Access to the mapped data</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.GetMappedFileInformation(System.String,System.IO.FileInfo@)">
            <summary>
            Gets the mapped file information.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="mmfInfo">store the mapped disk file information.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.CreateMemoryMappedFileSecurity">
            <summary>
            create memory mapped file security token.
            This is a slow method (needs to access user's permissions)
            but can be static, as the user's permission doesn't change.
            </summary>
            <returns>
            The <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.OpenExistMemoryMappedFile(System.String,System.String,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,System.IO.MemoryMappedFiles.MemoryMappedFile@)">
            <summary>
            Opens the exist memory mapped file.
            </summary>
            <param name="globalMapName">Name of the map.</param>
            <param name="localMapName">Name of the local map.</param>
            <param name="accessMode">memory mapped file rights</param>
            <param name="mmf">The MMF.</param>
            <returns>map name</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.CreateMemoryMappedFileFromFile(ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,System.String,System.String,System.String,System.IO.MemoryMappedFiles.MemoryMappedFile@)">
            <summary>
            Creates the memory mapped file from file.
            </summary>
            <param name="accessMode">memory map access mode</param>
            <param name="fileName">The file path.</param>
            <param name="globalMapName">Name of the MMF with Global prefix.</param>
            <param name="localMapName">Map name without the Global prefix</param>
            <param name="memoryMappedFile">A reference of a memory mapped file object</param>
            <returns>Memory mapped file name</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFile.CreateNonPersistedMemoryMappedFile(ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,System.String,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFile@)">
            <summary>
            Creates a non persisted memory mapped file.
            </summary>
            <param name="accessMode">Memory mapped file access mode</param>
            <param name="mapName">Name of the map file with the Global prefix.</param>
            <param name="localMapName">Name of the map file without the Global prefix</param>
            <param name="size">The size.</param>
            <param name="memoryMappedFile">Memory mapped file object.</param>
            <returns>Map name</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager">
            <summary>
                The singleton class tracks the memory mapped files that have been open.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager"/> class from being created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.Close(System.String,System.Boolean)">
            <summary>
            The method disposes the memory mapped file and stops tracking it.
            </summary>
            <param name="streamId">
            The stream id - serves as the key.
            </param>
            <param name="forceToClose">True close the specified memory mapped file even if it's reference to the map; false skip it if the reference count is more than zero.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.GetRandomAccessViewer(System.Guid,System.String,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType)">
            <summary>
            Gets the random access viewer.
            </summary>
            <param name="id">The identifier.</param>
            <param name="fileName">Name of the file.</param>
            <param name="inAcquisition">if set to <c>true</c> [refresh memory map file].</param>
            <param name="accessMode">The access mode.</param>
            <param name="type">The type.</param>
            <returns>Memory mapped file accessor.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.GetRandomAccessViewer(System.Guid,System.String,System.Int64,System.Int64,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType)">
            <summary>
            Gets the random access viewer.
            </summary>
            <param name="loaderId">The loader identifier.</param>
            <param name="mapName">Name of the share memory mapped file.</param>
            <param name="offset">The offset.</param>
            <param name="size">The size.</param>
            <param name="inAcquisition">if set to <c>true</c> [refresh memory map file].</param>
            <param name="accessMode">The access mode.</param>
            <param name="type">The type.</param>
            <returns>Memory mapped file accessor.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.IsOpen(System.String)">
            <summary>
            Determines whether the specified file path is open.
            </summary>
            <param name="streamId">The file path.</param>
            <returns>true if open</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.GetErrors(System.String)">
            <summary>
            Gets the errors.
            </summary>
            <param name="streamId">Name of the file.</param>
            <returns>Error Message</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.RemoveLastErrors(System.String)">
            <summary>
            Remove last errors. Cleans up the last errors for this stream id.
            </summary>
            <param name="streamId">
            The stream id.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager.GetMemoryMappedFile(System.Guid,System.String,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileAccessMode,ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedFileType,System.Int64)">
            <summary>
            Gets the memory mapped file.
            </summary>
            <param name="loaderId">The loader identifier.</param>
            <param name="mapName">Name of the map.</param>
            <param name="accessMode">The access mode.</param>
            <param name="type">The type.</param>
            <param name="size">The size.</param>
            <returns>The memory mapped file object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods">
            <summary>
            The reader extension methods.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadByteExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read a byte, updating the position.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadShortExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read a short, updating position.
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The <see cref="T:System.Int16"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadDoubleExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read double, updating position.
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadIntExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read an integer, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadFloatExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read a float from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadUnsignedShortExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read an unsigned short from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The <see cref="T:System.UInt16"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadUnsignedIntExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read an unsigned integer from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The <see cref="T:System.UInt32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadStringExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read a string from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadWideCharsExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            Read a number of wide characters, and convert to string.
            If there is a '0' in the string, the string length will be adjusted.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="startPos">Offset into the view.</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadStructureExt``1(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            Read a structure ext, updating the position
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="startPos">
            The start position.
            </param>
            <typeparam name="T">Type of struct
            </typeparam>
            <returns>
            The struct which was read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadPreviousRevisionAndConvertExt``2(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            Reads the previous revision and convert.
            </summary>
            <typeparam name="T">Current Type</typeparam>
            <typeparam name="TPrev">Previous Type</typeparam>
            <param name="viewer">The viewer.</param>
            <param name="startPos">The start position.</param>
            <returns>The object which was read</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadBytesExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@,System.Int32)">
            <summary>
            read an array of bytes from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <param name="count">The count of bytes to read</param>
            <returns>
            The array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadLargeData(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@,System.Int32)">
            <summary>
            read an array of bytes from a view, expecting a large data array.
            This uses 64 bit items, to cut down Marshalling overheads
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <param name="count">The count of bytes to read</param>
            <returns>
            The array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadIntsExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read an array of integer from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            Data stored in integer array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadUnsignedIntsExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read an array of unsigned integers from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            Data stored in unsigned integer array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadUnsignedIntsExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@,System.Int32)">
            <summary>
            read an array of bytes from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <param name="count">
            The count of values to read.
            </param>
            <returns>
            Data stored unsigned integer array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadDoublesExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            Reads the doubles ext.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="startPos">The start position.</param>
            <returns>Data stored in double array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadFloatsExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@,System.Int32)">
            <summary>
            Read a set of floats, and return as an array.
            </summary>
            <param name="viewer">
            The viewer. (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <param name="count">
            The count of objects to load.
            </param>
            <returns>
            The array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadStringsExt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            read an list of strings from a view, updating the start position
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The strings
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.ReadStructArrayExt``1(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@)">
            <summary>
            Read struct array, updating the position.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="startPos">
            The start position.
            </param>
            <typeparam name="T">Type of array element
            </typeparam>
            <returns>
            The array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.LoadRawFileObjectExt``1(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Func{``0},System.Int32,System.Int64@)">
            <summary>
            load a raw file object, updating the start position.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="func">
            The function to construct the type.
            </param>
            <param name="fileVersion">
            The file version.
            </param>
            <param name="startPos">
            The start position.
            </param>
            <typeparam name="T">Type to load
            </typeparam>
            <returns>
            The object loaded
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.LoadRawFileObjectArray``1(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64@)">
            <summary>
            load a raw file object array.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="fileVersion">
            The file version.
            </param>
            <param name="startPos">
            The start position.
            </param>
            <typeparam name="T">Type of data in array
            </typeparam>
            <returns>
            The array of objects
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.ReaderExtensionMethods.LoadRawFileObjectExt``1(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64@)">
            <summary>
            load raw file object extended.
            </summary>
            <param name="viewer">
            The viewer. (memory map)
            </param>
            <param name="fileVersion">
            The file version.
            </param>
            <param name="startPos">
            The start position.
            </param>
            <typeparam name="T">Type of object to read
            </typeparam>
            <returns>
            The object
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Readers.WriterExtensionMethods">
            <summary>
            The writer extension methods.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.WriterExtensionMethods.WriteFloat(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,System.Single,System.Int64@)">
            <summary>
            Writes the float.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="startPos">The start position.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.WriterExtensionMethods.WriteDouble(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,System.Double,System.Int64@)">
            <summary>
            Writes the double.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="startPos">The start position.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.WriterExtensionMethods.WriteByte(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,System.Byte,System.Int64@)">
            <summary>
            Writes the byte.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="startPos">The start position.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.WriterExtensionMethods.WriteBytes(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,System.Byte[],System.Int64@)">
            <summary>
            Writes the bytes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="startPos">The start position.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Readers.WriterExtensionMethods.WriteShort(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,System.Int16,System.Int64@)">
            <summary>
            Writes the short.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="startPos">The start position.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorCannotConvertToMsDevice">
            <summary>
              Looks up a localized string similar to Cannot convert device to MS Device!.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorEmptyNullFileName">
            <summary>
              Looks up a localized string similar to File path is empty or null!.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidAccurateMassType">
            <summary>
              Looks up a localized string similar to Invalid Accurate mass Type..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidBarcodeStatusType">
            <summary>
              Looks up a localized string similar to Invalid Barcode Status Type..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidDeviceType">
            <summary>
              Looks up a localized string similar to Invalid Device Type..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidFileName">
            <summary>
              Looks up a localized string similar to The file name is invalid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidInstrumentType">
            <summary>
              Looks up a localized string similar to Invalid Instrument type..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidInstrumentTypeIndex">
            <summary>
              Looks up a localized string similar to Invalid instrument type index..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidPacketType">
            <summary>
              Looks up a localized string similar to Invalid Packet Type..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidSampleType">
            <summary>
              Looks up a localized string similar to Invalid Sample Type..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidToleranceUnit">
            <summary>
              Looks up a localized string similar to Invalid tolerance unit..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorInvalidVirtualDeviceType">
            <summary>
              Looks up a localized string similar to Invalid Virtual Device Type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorMapAZeroLenghtFile">
            <summary>
              Looks up a localized string similar to Cannot map a zero-length file..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorMissingInstrumentIdInfo">
            <summary>
              Looks up a localized string similar to Missing instrument id information.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorMissingRawFileInfo">
            <summary>
              Looks up a localized string similar to Missing raw file information..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNoInstrumentSelected">
            <summary>
              Looks up a localized string similar to No instrument selected..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNonMsDevice">
            <summary>
              Looks up a localized string similar to This is not MS device..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNoOpenRawFile">
            <summary>
              Looks up a localized string similar to No open raw file..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNullChromatogramSettingsArgrument">
            <summary>
              Looks up a localized string similar to Null chromatogram settings argument.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNullFileHeaderArgument">
            <summary>
              Looks up a localized string similar to Null file header argument..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNullInstrumentIdArgument">
            <summary>
              Looks up a localized string similar to Null instrument id argument..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNullRunHeader">
            <summary>
              Looks up a localized string similar to Null run header returned from RawFileReader.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNullRunHeaderArgument">
            <summary>
              Looks up a localized string similar to Null run header argument..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNullScanIndexArgument">
            <summary>
              Looks up a localized string similar to Null scan index argument..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNullSequenceRowArgument">
            <summary>
              Looks up a localized string similar to Null sequence row argument..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.ErrorNullUvScanIndexArgument">
            <summary>
              Looks up a localized string similar to Null UV scan index argument..
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Resources.TraceSourceName">
            <summary>
              Looks up a localized string similar to RawFileReaderTracer.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ScanDependentDetails">
            <summary>
            Local version of ScanDependentsDetails
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanDependentDetails.ScanIndex">
            <summary>
            Gets or sets the index of the scan.
            </summary>
            <value>
            The index of the scan.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanDependentDetails.FilterString">
            <summary>
            Gets the filter string.
            </summary>
            <value>
            The filter string.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanDependentDetails.PrecursorMassArray">
            <summary>
            Gets or sets the precursor array.
            </summary>
            <value>
            The precursor mass array.
            </value>]
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanDependentDetails.IsolationWidthArray">
            <summary>
            Gets or sets the isolation width array.
            </summary>
            <value>
            The isolation width array.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanDependentDetails.FilterData">
            <summary>
            Gets or sets the filter data.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ScanDependents">
            <summary>
            The scan dependents. Provides information about the relationship between
            data dependant scans and the scan, whose data triggered the dependant scan.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ScanDependents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.ScanDependents"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanDependents.RawFileInstrumentType">
            <summary>
            Gets or sets the type of the raw file instrument.
            </summary>
            <value>
            The type of the raw file instrument.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanDependents.ScanDependentDetailArray">
            <summary>
            Gets or sets the scan dependent detail array.
            </summary>
            <value>
            The scan dependent detail array.
            </value>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ScanHeaderForChro">
            <summary>
            Local class to represent a scan header, to satisfy interfaces for Chromatogram generation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanHeaderForChro.ScanIndex">
            <summary>
            Gets the Index for the scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanHeaderForChro.MsScanIndex">
            <summary>
            Gets the Index for the MS scan
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ScanHeaderForChro.#ctor(System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.ScanHeaderForChro"/> class. 
            </summary>
            <param name="scan">
            Scan number
            </param>
            <param name="index">
            Index data for scan
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanHeaderForChro.RetentionTime">
            <summary>
            Gets the retention time (start time) of a scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanHeaderForChro.ScanNumber">
            <summary>
            Gets the scan's number
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ScanWithSimpleDataLocal">
            <summary>
            Defines an implementation of "IScanWithSimpleData",
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanWithSimpleDataLocal.ScanEvent">
            <summary>
            Gets or sets the scan event.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.ScanWithSimpleDataLocal.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.SequenceFileReader">
            <summary>
            Class to read data from an SLD file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SequenceFileReader.OpenSequence(System.String)">
            <summary>
            Create an ISequenceFileAccess interface to
            read data from a sequence (SLD) file
            </summary>
            <param name="fileName">File to open</param>
            <returns>Interface to read data from file</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess">
            <summary>
            Loads a sequence (SLD) file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess.FileHeader">
            <summary>
            Gets the file header for the sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error
            </summary>
            <value></value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess.IsOpen">
            <summary>
            Gets a value indicating whether true if a file was successfully opened.
            Inspect "FileError" when false
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess.Info">
            <summary>
            Gets additional information about a sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SequenceFileAccess.Samples">
            <summary>
            Gets the set of samples in the sequence
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder">
            <summary>
            The simple detector chromatogram builder.
            Makes chromatograms from devices other than MS
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder"/> class.
            </summary>
            <param name="device">
            The device (to create chromatograms from).
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.CreateChromatograms(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32)">
            <summary>
            Generate chromatograms for all detectors, except for MS
            </summary>
            <param name="settings">Input parameters</param>
            <param name="startScan">first scan in chromatogram</param>
            <param name="endScan">last scan in chromatogram</param>
            <returns>The Chromatogram</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.BuildNonMsChromatograms(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.KeyValuePair{System.Int32,ThermoFisher.CommonCore.Data.Business.Range}[],System.Int32)">
            <summary>
            Builds the non MS chromatograms.
            </summary>
            <param name="settings">The settings.</param>
            <param name="numberOfChromatograms">The number of chromatograms</param>
            <param name="scans">The number of scans.</param>
            <param name="firstScan">The first scan.</param>
            <param name="lastScan">The last scan.</param>
            <param name="numberOfNonMassRangeSumChros">The number of non mass range sum chromatograms.</param>
            <param name="massRangeArray">The mass range array.</param>
            <param name="massRanges">The number of mass ranges.</param>
            <returns>Chromatogram results</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ReadDataFromScan(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult[][],System.Collections.Generic.KeyValuePair{System.Int32,ThermoFisher.CommonCore.Data.Business.Range}[],System.Int32,System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SegmentData},ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Int32,System.Int32)">
            <summary>
            read data from scan.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="allData">
            All results data.
            </param>
            <param name="wavelengthRanges">
            The wavelength ranges.
            </param>
            <param name="wavelengthRangeCount">
            The wavelength range count.
            </param>
            <param name="scanData">
            The scan data.
            </param>
            <param name="scanIndex">
            The scan index.
            </param>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="firstScan">
            The first scan.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.BuildChannelTraces(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult[][],System.Int32,System.Int32)">
            <summary>
            Builds the channel traces.
            UV channels, or analog channels.
            </summary>
            <param name="settings">Parameters for the chromatograms.</param>
            <param name="results">Table of all chromatogram</param>
            <param name="firstScan">The first scan.</param>
            <param name="lastScan">The last scan.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.BuildTraceTypesFromHeader(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult[][],ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket,System.Int32,System.Int32,System.Int32)">
            <summary>
            For chromatograms which need the scan index data only, fill in the data.
            </summary>
            <param name="settings">Parameters for the chromatograms</param>
            <param name="results">Table of all chromatogram results</param>
            <param name="packets">Data in scan</param>
            <param name="scanNumber">The scan number</param>
            <param name="firstScan">The first scan</param>
            <param name="numberOfNonMassRangeSumChromatograms">The number of non mass range sum chromatograms</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChannelToIndex(ThermoFisher.CommonCore.Data.Business.TraceType)">
            <summary>
            Convert a channel number into a channel index
            which is used to offset into a scan
            </summary>
            <param name="channel">Channel type</param>
            <returns>Channel index (0 to 7), or -1 if not a valid channel</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.MakeSignal(ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult[])">
            <summary>
            Convert a set of data peaks into signal
            </summary>
            <param name="dataPeak">Data to convert</param>
            <returns>Converted Signal</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult">
            <summary>
            The chromatogram result (1 point in chromatogram).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult.BasePeak">
            <summary>
            Gets or sets the base peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult.IsSaturated">
            <summary>
            Gets or sets a value indicating whether this point is saturated.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult.Time">
            <summary>
            Gets or sets the time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.SimpleDetectorChromatogramBuilder.ChroResult.ScanNumber">
            <summary>
            Gets or sets the scan number.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StreamIo">
            <summary>
            Wrapper class for using IOleStream.
            For additional read/write examples see version in "foundation Apps" project.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StreamIo.#ctor(ThermoFisher.CommonCore.RawFileReader.IOleStream)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StreamIo"/> class.
            </summary>
            <param name="stream">
            The stream.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StreamIo.ReadCharArray(System.Int32)">
            <summary>
            read char array from stream.
            The stream is "wide characters" (unicode)
            </summary>
            <param name="bytesLength"> The number of bytes to read from stream.   </param>
            <returns> The stream of bytes into a string  </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StreamIo.Read(System.Byte[])">
            <summary>
            read an array from the stream.
            </summary>
            <param name="data">
            The data.
            </param>
            <exception cref="T:System.IO.IOException">Thrown when not able to read data
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig">
            <summary>
            The auto sampler config.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.TrayIndex">
            <summary>
            Gets or sets the tray index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.TrayName">
            <summary>
            Gets or sets the tray name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.TrayShape">
            <summary>
            Gets or sets the tray shape.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.VialIndex">
            <summary>
            Gets or sets the vial index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.VialsPerTray">
            <summary>
            Gets or sets the vials per tray.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.VialsPerTrayX">
            <summary>
            Gets or sets the vials per tray x.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.VialsPerTrayY">
            <summary>
            Gets or sets the vials per tray y.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.AutoSamplerConfigStruct">
            <summary>
            Gets the auto sampler configuration struct.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Loads the specified viewer.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="fileRevision">The file revision.</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig.Initialization">
            <summary>
            Initializations this instance.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog">
            <summary>
            The error log.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="runHeader">
            The run header.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.#ctor(System.Guid,System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <param name="runHeader">
            The run header.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.HeaderFileMapName">
            <summary>
            Gets the header file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.GetItem(System.Int32)">
            <summary>
            The get item.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">The viewer (memory map into file).</param>
            <param name="dataOffset">The data offset (into the memory map).</param>
            <param name="fileRevision">The file revision.</param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>True refresh succeed, false otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLog.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem">
            <summary>
            The error log item.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem.RetentionTime">
            <summary>
            Gets the retention time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem.ErrorText">
            <summary>
            Gets the error text.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem.#ctor(System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem"/> class.
            The error is a list of text strings indexed by the retention time.
            </summary>
            <param name="retentionTime">
            The retention time.
            </param>
            <param name="text">
            The text.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem.CompareTo(ThermoFisher.CommonCore.RawFileReader.StructWrappers.ErrorLogItem)">
            <summary>
            Compare the current instance's retention time with another object of the same type.
            </summary>
            <param name="other">
            The other instance.
            </param>
            <returns>
            -1 indicates the RT of the current instance is less than another object, 
            0 indicates same, 
            1 indicates the RT of the current instance is greater than another object.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader">
            <summary>
                The file header.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.#ctor">
            <summary>
            Initializes a new instance of the FileHeader class.
            Sets default file type to raw file and some other defaults.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.#ctor(ThermoFisher.CommonCore.Data.Interfaces.IFileHeader)">
            <summary>
            Copy constructor
            Initializes a new instance of the FileHeader class to the values of an existing IFileHeader object.
            </summary>
            <param name="fromFileHeader">The IFileHeader object.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.FromHeader(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.FileHeaderStruct)">
            <summary>
            Wrap a file header struct.
            </summary>
            <param name="header">File header to wrap.</param>
            <returns>An object which wraps the given struct.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.CreateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.FileType,System.String)">
            <summary>
            Creates an initial header file object for file writing (i.e. raw file, sequence file, method file, etc.) 
            with the specified file type and description.
            This method will also initialize the internal fields, such as set the creation/modified date to current date time,
            and set the who created/modified to be the person who is currently logged on to the Windows OS.
            </summary>
            <param name="fileType">File type, i.e. raw file, sequence file, method file, etc.</param>
            <param name="description">[Optional] The description about the file.</param>
            <returns>The file header object.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.IsKnownFileType(System.UInt16)">
            <summary>
            Gets the type of the file.
            </summary>
            <param name="fileType">Type of the file.</param>
            <returns>True the file type is known type; false otherwise.</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.Revision">
            <summary>
                Gets or sets the format revision of this file.
                Note: this does not refer to revisions of the content.
                It defines revisions of the binary files structure.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.IsSignatureValid">
            <summary>
            The is signature valid.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.FileDescription">
            <summary>
                Gets or sets the file description.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.CheckSum">
            <summary>
            Gets the check sum.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.NumberOfTimesModified">
            <summary>
            Gets or sets the number of times modified.
            </summary>
            <value>
            The number of times the file has been modified.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.NumberOfTimesCalibrated">
            <summary>
            Gets or sets the number of times calibrated.
            </summary>
            <value>
            The number of times calibrated.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.WhoCreatedId">
            <summary>
            Gets or sets the who created id.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.WhoCreatedLogon">
            <summary>
            Gets or sets the who created logon.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.WhoModifiedId">
            <summary>
            Gets or sets the who modified id.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.WhoModifiedLogon">
            <summary>
            Gets or sets the who modified logon.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.FileType">
            <summary>
            Gets or sets the file type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.CreationDate">
            <summary>
            Gets or sets the creation date.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.ModifiedDate">
            <summary>
            Gets or sets the modified date.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.UpdateFileHeaderCheckSum(System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Calculates and updates the checksum for the file header.  Will calculate using the header written to the stream of the binary writer.  
            Requires the header to be previously written to the binary writer stream.
            </summary>
            <param name="writer">Binary writer with the written file header</param>
            <param name="errors">Any errors that occur during calculation</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.UpdateFileHeaderChecksum(ThermoFisher.CommonCore.RawFileReader.IOleStorage,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Updates the file header checksum.
            </summary>
            <param name="rootStorage">The root storage.</param>
            <param name="errors">Stores the last error information.</param>
            <returns>True if successful; otherwise false.</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.FileHeaderStruct">
            <summary>
            Gets the file header struct, only needed internally for writing file header.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.Initialize">
            <summary>
            Initialize fields and properties, on load.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.GetCheckSumSeed">
            <summary>
            Gets the check sum seed.
            </summary>
            <returns>Check sum seed value.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.IsValidRevision">
            <summary>
            Determines whether this is a valid revision.
            </summary>
            <returns>True it's a valid file revision; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.IsNewerRevision">
            <summary>
            Test if this may be a valid file but with a newer format.
            </summary>
            <returns>true: if the file version > the version complied into of the software that's running.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader.ResetChecksum">
            <summary>
            The resets the checksum in the header to 0.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection">
            <summary>
                The generic data collection. The generic data collection has two parts. The data descriptors and the generic
                data. The class creates a memory mapped stream view of the data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="dataDescriptors">
            The data descriptors.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.#ctor(System.Guid,System.String,System.String,System.Func{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection"/> class.
            </summary>
            <param name="loaderId">Loader ID</param>
            <param name="headerMapFileName">Name of the header map file.</param>
            <param name="dataMapFileName">Name of the data map file.</param>
            <param name="numDataFuc">The number data.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.#ctor(System.Guid,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection" /> class.
            <remarks>
            Due to the fact that some generic data collection's descriptors and data are not stored in contiguous
            blocks, we cannot automatically set the memory mapped stream's current position (e.g. the MS device's
            Trailer data's descriptor is written before the tune data and the trailer data themselves are written after
            the trailer scan events).
            </remarks>
            </summary>
            <param name="loaderId">The loader ID</param>
            <param name="numberOfElements">The number of elements.</param>
            <param name="newMmfOffset">The new MMF offset.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.DataDescriptors">
            <summary>
                Gets the data descriptors.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.TotalSize">
            <summary>
                Gets the total size of the data collection. In the case where the data descriptors and the
                data collections are written in contiguous blocks, the container will have to update its viewer
                position because the data entries may not have been read.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.HeaderFileMapName">
            <summary>
            Gets the header file map name. <para/>
            It's only meaningful in Generic data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.NumElementsFunc">
            <summary>
            Gets the number of elements function.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The method loads the generic collection from file by getting the descriptors and setting
                up the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob"/> structures.
            </summary>
            <param name="viewer">
            The view stream.
            </param>
            <param name="dataOffset">
            The starting position of the collection - this is used to create a local memory mapped stream.
            </param>
            <param name="fileRevision">
            The number of elements.
            </param>
            <returns>
            The number of bytes loaded.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.LoadDataDescriptors(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            load data descriptors.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes loaded.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.LoadGenericDataEntries(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The method calls <see cref="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager"/> to get an <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor"/>
                object for the memory mapped view stream that represents the status log's "blob". It will then
                divide the blob into individual status log entries without actually reading in the status log items.
            </summary>
            <param name="viewer">View into memory map
            </param>
            <param name="dataOffset">
            The starting dataOffset of the collection - this is used to create a local memory mapped stream.
            </param>
            <param name="numberOfElements">
            The number of elements.
            </param>
            <exception cref="T:System.Exception">
            Thrown if there is a problem getting the binary collectionStreamViewer for the memory mapped view stream.
            </exception>
            <returns>
            The position after all the records
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.RemoveAll">
            <summary>
            remove all data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor">
            <summary>
            The descriptor for a generic data item. It contains information 
            (e.g. label, type, size, item offset, etc) for loading the 
            data from the raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.#ctor(System.String,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor"/> class.
            </summary>
            <param name="label">
            The label.
            </param>
            <param name="dataType">
            The data type.
            </param>
            <param name="stringLengthOrPrecision">
            The string length or precision.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.DataType">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.IsScientificNotation">
            <summary>
            Gets a value indicating whether to use scientific notation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.ItemSize">
            <summary>
            Gets the size of the data item in bytes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.Label">
            <summary>
            Gets the label for the data item.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.LengthOrPrecision">
            <summary>
            Gets the length (for strings) or precision (for floats and doubles).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.GetInternalGenericDataItemStruct">
            <summary>
            The get internal generic data item struct.
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.GenericItems.GenericDataItemStruct"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.SetScientificNotation">
            <summary>
            The method sets the <see cref="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.IsScientificNotation"/> flag.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor.SetSizeAndPrecision">
            <summary>
            The method sets the size and and the precision/length of the data.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.IGenericDataPack">
            <summary>
            Defines a method of packing log records into a byte array
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.IGenericDataPack.ConvertDataEntryToByteArray(System.Object[],System.Byte[]@)">
            <summary>
            convert data entry to byte array.
            </summary>
            <param name="data">The log entries. </param>
            <param name="buffer">The buffer for storing the log entries in byte array.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of log entries do not match the header definitions</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.IGenericDataPack.ConvertDataEntryToByteArray(System.Object[])">
            <summary>
            convert data entry to byte array.
            </summary>
            <param name="data">The log entries. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of log entries do not match the header definitions</exception>
            <returns>the log entries as a byte array</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors">
            <summary>
            The collection of data descriptors.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors"/> class.
            </summary>
            <param name="capacity">
            The capacity.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.TotalDataSize">
            <summary>
            Gets the total size of the data blob being described.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.FieldOffset">
            <summary>
            Gets the offset from the start of a data block to a specific field
            permitting individual fields to be decoded.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.AllValid">
            <summary>
            Gets the "all valid" table.
            Fields may have optional validity flags (per record)
            When that feature is not used, all fields are valid.
            This internal array is initialized to "all values valid'
            so it does not have to be recreated each scan
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Loads from the specified viewer.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="fileRevision">The file revision.</param>
            <returns>The number of bytes reader</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.AddItem(ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor)">
            <summary>
            add an item.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.CalcBufferSize">
            <summary>
            Calculate the buffer size. (The size of a record).
            </summary>
            <returns>
            The size of one record.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.ConvertDataEntryToByteArray(System.Object[],System.Byte[]@)">
            <summary>
            The convert data entry to byte array.
            </summary>
            <param name="data">The log entries. </param>
            <param name="buffer">The buffer for storing the log entries in byte array.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of log entries do not match the header definitions</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors.ConvertDataEntryToByteArray(System.Object[])">
            <summary>
            convert data entry to byte array.
            </summary>
            <param name="data">The log entries. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of log entries do not match the header definitions</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataSizes">
            <summary>
            The singleton class to calculate data sizes.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataSizes.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataSizes"/> class from being created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataSizes.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataSizes.SizeInByes(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes,System.UInt32)">
            <summary>
            The method calculates the of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.DataTypes"/> type size in byes.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="count">
            The count - optional for string types.
            </param>
            <returns>
            The size in bytes.
            </returns>
            <exception cref="T:System.Exception">
            Thrown if there is an error calculating size (e.g. the type does not exist).
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue">
            <summary>
            Encapsulates the generic value structure that is read from the raw file .
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue"/> class. The value is set
            to an empty string.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue"/> class.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue.ToString">
            <summary>
            The method returns the string representation of value. For floats and doubles, it uses the
            data descriptor's precision value to determine the value format.
            </summary>
            <returns>
            The <see cref="T:System.String"/> representation of value.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue.ToString(System.Boolean)">
            <summary>
            The to string.
            </summary>
            <param name="ifFormatted">
            The if formatted.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.ILogDecoder">
            <summary>
            The log decoder interface is used to decode values for all generic logs.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.ILogDecoder.GetValue(System.Int64@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor)">
            <summary>
            Get the value of a field, with minimal decoding
            </summary>
            <param name="dataOffset">offset into map</param>
            <param name="dataDescriptor">definition of type</param>
            <returns>The value as an object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.ILogDecoder.DecipherValue(System.Int64@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor)">
            <summary>
            Decipher a value.
            </summary>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="dataDescriptor">
            The data descriptor.
            </param>
            <returns>
            The value, as an object
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob">
            <summary>
            The class encapsulates a blob that contains a list of label value pairs.
            This holds information about where to find the binary record.
            the records can be "decoded once" similar to a Lazy pattern, and saved in a cache.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.ILogDecoder,System.Int64,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob"/> class.
            </summary>
            <param name="decoder">
            The log reader.
            </param>
            <param name="offset">
            The offset.
            </param>
            <param name="descriptors">
            The descriptors.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob.GetAllValues">
            <summary>
            Returns all the values, no formatting.
            </summary>
            <returns>The values, as the nearest .net type</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob.GetItemAt(System.Int32)">
            <summary>
            The method gets the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair"/> object at the specified index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair"/> object or null if the index exceeds the
            number of elements in the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair"/> collection.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob.GetValueAt(System.Int32)">
            <summary>
            Returns the value of a specific field.
            </summary>
            <param name="index">Field number</param>
            <returns>The value, as the nearest .net type</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob.ReadLabelValuePairs">
            <summary>
                The method checks the cache to see if the label value pairs have been read. If not, it will read them and
                use the <see cref="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob._descriptors" /> to decipher them, cache them, and returns them.
            </summary>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" /> of label value pairs.
            </returns>
            <exception cref="T:System.Exception">
                Thrown if the descriptors are empty - there is no way to interpret the blob.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob.ValidItem(System.Int32)">
            <summary>
            Test if this is a valid item number.
            </summary>
            <param name="index">
            The index of the required item.
            </param>
            <returns>
            True if this is a valid item.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob.ValidateDescriptors">
            <summary>
            Validate descriptors.
            </summary>
            <exception cref="T:System.Exception">on null descriptors
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob.ValidItems(System.Int64)">
            <summary>
            decode which log items are valid.
            </summary>
            <param name="startPos">
            The start position on the view.
            </param>
            <returns>
            .// array of valid item flags
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair">
            <summary>
                The class that represents the label value pair - normally used in status log entries.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair.#ctor(System.String,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair"/> class.
            </summary>
            <param name="label">
            The label.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair.Label">
            <summary>
                Gets the label.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair.Value">
            <summary>
                Gets the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.GenericValue" /> object containing the value.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair.ToString">
            <summary>
                The to string.
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LogDecoder">
            <summary>
            Decodes values in logs (status logs, tune method logs, etc.)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LogDecoder.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LogDecoder"/> class.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LogDecoder.GetValue(System.Int64@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor)">
            <summary>
            Get the value of a field, with minimal decoding
            </summary>
            <param name="dataOffset">offset into map</param>
            <param name="dataDescriptor">definition of type</param>
            <returns>The value as an object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LogDecoder.DecipherValue(System.Int64@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor)">
            <summary>
            Decipher a value.
            </summary>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="dataDescriptor">
            The data descriptor.
            </param>
            <returns>
            The value, as an object
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LogDecoder.DecodeCharString(System.Int64@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor)">
            <summary>
            Decode char string.
            </summary>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="dataDescriptor">
            The data descriptor.
            </param>
            <returns>
            The decoded string
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LogDecoder.DecodeWideCharString(System.Int64@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor)">
            <summary>
            Decode a wide char string.
            </summary>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="dataDescriptor">
            The data descriptor.
            </param>
            <returns>
            The decoded string.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatio">
            <summary>
            The ion ratio.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatio.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatioTest">
            <summary>
            The ion ratio test settings
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatioTest.IonRatioTestInfo">
            <summary>
            The ion ratio test info. struct when file rev >=56
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatioTest.IonRatioTest55">
            <summary>
            The ion ratio test 55. struct when file rev less than 56
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatioTest.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatioTest.MZ">
            <summary>
            Gets the Mass to be tested
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatioTest.TargetRatio">
            <summary>
            Gets the Expected ratio 
            The ratio of the qualifier ion response to the component ion response. 
            Range: 0 - 200%
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.IonRatioTest.WindowPercent">
            <summary>
            Gets the Window to determine how accurate the match must be
            The ratio must be +/- this percentage.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Level">
            <summary>
            The (calibration or QC) level.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Level.LevelInfo">
            <summary>
            The level info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Level.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Level.ReplicateCollection">
            <summary>
            Gets replicate data, as saved in a PMD file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Level.Name">
            <summary>
            Gets the name for this calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Level.BaseAmount">
            <summary>
            Gets the amount of calibration compound (usually a concentration) for this level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Level.TestPercent">
            <summary>
            Gets the QC test <c>standard: 100 * (yobserved-ypredicted)/ypreditced</c>
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints">
            <summary>
            The (NIST) library search constraints.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.ConstraintsInfo">
            <summary>
            The constraints info.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndividualConstraintsInfo">
            <summary>
            The individual constraints info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints"/> class.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndividualConstraintWrapper">
            <summary>
            The individual constraint wrapper, to return data as required interface.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndividualConstraintWrapper.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndividualConstraintsInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndividualConstraintWrapper"/> class.
            </summary>
            <param name="info">
            The info.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndividualConstraintWrapper.ElementCondition">
            <summary>
            Gets the condition on this element (greater, less or equal to value)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndividualConstraintWrapper.Value">
            <summary>
            Gets the comparison value for this element constraint.
            Used in a a test as per "ElementCondition"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndividualConstraintWrapper.Element">
            <summary>
            Gets the element to constrain
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfo">
            <summary>
            The ion constraint info.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfoWrapper">
            <summary>
            The ion constraint info wrapper, to implement the required interface
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfoWrapper.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfoWrapper"/> class.
            </summary>
            <param name="info">
            The info.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfoWrapper.Constraint">
            <summary>
            Gets the method of ion constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfoWrapper.MassToCharge">
            <summary>
            Gets the mass to charge ratio of the constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfoWrapper.From">
            <summary>
            Gets the from value of the constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintInfoWrapper.To">
            <summary>
            Gets the To value of the constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraints">
            <summary>
            Gets the Ion Constraints (see NIST documentation for details)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IndivdualConstraints">
            <summary>
            Gets the individual element constraints (limits on specific elements)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.MolecularWeightEnabled">
            <summary>
            Gets a value indicating whether molecular weight constraint is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.MinMolecularWeight">
            <summary>
            Gets the minimum molecular weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.MaximumMolecularWeight">
            <summary>
            Gets the maximum molecular weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.NameFragmentEnabled">
            <summary>
            Gets a value indicating whether name fragment constraint is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.DbEnabled">
            <summary>
            Gets a value indicating whether DB constraint is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.FineEnabled">
            <summary>
             Gets a value indicating whether Fine constraint is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.EpaEnabled">
            <summary>
            Gets a value indicating whether EPA (Environmental Protection Agency) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.NihEnabled">
            <summary>
            Gets a value indicating whether NIH (National Institute of Health) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.TscaEnabled">
            <summary>
            Gets a value indicating whether TSCA (Toxic Substances Control Act) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.UspEnabled">
            <summary>
            Gets a value indicating whether USP (United States Pharmacopoeia) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.EinecsEnabled">
            <summary>
            Gets a value indicating whether EINECS (European Inventory of Existing Commercial Chemical Substances) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.RtecsEnabled">
            <summary>
            Gets a value indicating whether RTECS (Registry of Toxic Effects of Chemical Substances) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.HodocEnabled">
            <summary>
            Gets a value indicating whether HODOC (Handbook of Data on Organic Compounds) constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IrEnabled">
            <summary>
            Gets a value indicating whether IR constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.ElementsEnabled">
            <summary>
            Gets a value indicating whether Elements constraint is applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.ElementsMethod">
            <summary>
            Gets the element constraint method (used when ElementsEnabled)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintsEnabled">
            <summary>
            Gets a value indicating whether Ion Constraints are enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.IonConstraintMethod">
            <summary>
            Gets the method of Ion Constraints (used when IonConstraintsEnabled)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.NameFragment">
            <summary>
            Gets the name fragment constraint
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchConstraints.Element">
            <summary>
            Gets the Element constraint
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions">
            <summary>
            The library search options, as contained in an Xcalibur PMD file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.LibSearchInfo1">
            <summary>
            The lib search info version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.LibSearchInfo">
            <summary>
            The (NIST) lib search info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load, (from file)
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes loaded.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.SearchList">
            <summary>
            Gets the list of libraries to search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.UserLibrary">
            <summary>
            Gets the name of the user library (for append operation)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.SimilarityMode">
            <summary>
            Gets the similarity setting for NIST search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.IdentityMode">
            <summary>
            Gets the identity mode for NIST search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.LibrarySearchType">
            <summary>
            Gets the type of NIST search
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.MolecularWeight">
            <summary>
            Gets the molecular weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.SearchMolecularWeightEnabled">
            <summary>
            Gets a value indicating whether search with Molecular Weight is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.ReverseSearch">
            <summary>
            Gets a value indicating whether reverse search is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.AppendUserLibrary">
            <summary>
            Gets a value indicating whether to append to the user library
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.SearchMolecularWeight">
            <summary>
            Gets the search molecular weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.MaxHits">
            <summary>
            Gets the maximum number of reported search hits
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.MatchFactor">
            <summary>
            Gets the match factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.ReverseMatchFactor">
            <summary>
            Gets the reverse match factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.ProbabilityPercent">
            <summary>
            Gets the Probability Percent (match limit)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.ApplyMassDefect">
            <summary>
            Gets a value indicating whether mass defect should be applied
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.DefectAtMass1">
            <summary>
            Gets the mass defect for the low mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.DefectAtMass2">
            <summary>
            Gets the mass defect for the High mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.Mass1">
            <summary>
            Gets the mass at which "DefectAtMass1" applies
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.LibrarySearchOptions.Mass2">
            <summary>
            Gets the mass at which "DefectAtMass2" applies
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method">
            <summary>
            The instrument method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method"/> class.
            </summary>
            <param name="header">
            The method header (not the raw file header).
            </param>
            <param name="methodFileLocation">
            The method file location.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.FileHeader">
            <summary>
            Gets the file header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.MethodSize">
            <summary>
            Gets the method size.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.OriginalStorageName">
            <summary>
            Gets the original storage name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.StartingOffset">
            <summary>
            Gets the starting offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.StorageDescriptions">
            <summary>
            Gets or sets the storage descriptions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.MethodInfoStruct">
            <summary>
            Gets the method info struct, only needed internally for writing raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.SaveMethodFile(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.String,System.Boolean)">
            <summary>
            Save instrument method file.
            </summary>
            <param name="viewer">Access to the raw file bytes</param>
            <param name="methodFilePath">
            The method file path.
            </param>
            <param name="forceOverWrite">
            Force over write. If true, and file already exists, attempt to delete existing file first.
            If false: UnauthorizedAccessException will occur if there is an existing read only file.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Loads the instrument method from the memory mapped raw file viewer passed in.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.GetMethodData(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.Facade.StorageDescription})">
            <summary>
            Gets the storage description.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="startPos">The start position.</param>
            <param name="storageDesc">The storage description</param>
            <returns>List of StorageDescription</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method.SaveMethodBytesToFile(System.Byte[],System.Int32)">
            <summary>
            The save method bytes to file.
            </summary>
            <param name="map">
            The map.
            </param>
            <param name="offset">
            The offset.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditData">
            <summary>
            The audit data, from legacy LCQ files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditData.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>
            The comment.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditData.WhatChanged">
            <summary>
            Gets or sets the what changed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditData.TimeChanged">
            <summary>
            Gets or sets the time changed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditData.AuditDataStruct">
            <summary>
            Gets the audit data struct.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditData.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">The viewer (memory map into file).</param>
            <param name="dataOffset">The data offset (into the memory map).</param>
            <param name="fileRevision">The file revision.</param>
            <returns>The number of bytes read </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditTrail">
            <summary>
            The audit trail from legacy LCQ files
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditTrail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditTrail"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditTrail.AuditDataInfo">
            <summary>
            Gets or sets the audit data info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditTrail.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AutoSampler">
            <summary>
            The auto sampler settings from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AutoSampler.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AxisParm">
            <summary>
            The axis parameters, from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AxisParm.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.ChroTrace">
            <summary>
            The chromatogram trace, from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.ChroTrace.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport">
            <summary>
            Defines a custom report, as in an Xcalibur PMD file
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ConditionCode">
            <summary>
            Determines when a report is active
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ConditionCode.Never">
            <summary>
            Never make report.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ConditionCode.Always">
            <summary>
            Always make report.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ConditionCode.Blank">
            <summary>
            Report when blank sample.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ConditionCode.Calibration">
            <summary>
            Report when calibration sample.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ConditionCode.Unknown">
            <summary>
            Report when unknown sample.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ConditionCode.QcStandard">
            <summary>
            Report when QC or standard.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ActionCode">
            <summary>
            The action code.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ActionCode.DoNothing">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ActionCode.RunExcelMacro">
            <summary>
            Run an excel macro.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ActionCode.RunProgram">
            <summary>
            Run a program.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ActionCode.ExportOnly">
            <summary>
            Export only.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportTypes">
            <summary>
            The report export types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportTypes.Nothing">
            <summary>
            No export.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportTypes.Xls">
            <summary>
            Export as XLS.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportTypes.Txt">
            <summary>
            Export as text.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportTypes.Csv">
            <summary>
            Export as CSV.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportContent">
            <summary>
            The export content.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportContent.Nothing">
            <summary>
            Do not export
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportContent.Results">
            <summary>
            Export the results.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.ExportContent.Quantitation">
            <summary>
            Export the quantitation.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.CustomReportInfo">
            <summary>
            The custom report info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.CustomReport.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load data
            </summary>
            <param name="viewer">
            The viewer (memory map)
            </param>
            <param name="dataOffset">
            The data offset into the map.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.GcMethod">
            <summary>
            The GC method, from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.GcMethod.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.IcisStatusLog">
            <summary>
            The ICIS status log, for legacy LCQ files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.IcisStatusLog.Status">
            <summary>
            Gets the ICIS status log.
            </summary>
            <value>
            The ICIS status log.
            </value>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.IcisStatusLog.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InletMethods">
            <summary>
            The inlet methods, for legacy LCQ files
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InletMethods.InletMethodsInfo">
            <summary>
            Gets the inlet methods info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InletMethods.GcMethodInfo">
            <summary>
            Gets the GC method info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InletMethods.LcMethodInfo">
            <summary>
            Gets the LC method info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InletMethods.AutoSamplerInfo">
            <summary>
            Gets the auto sampler info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InletMethods.ProbeInfoInfo">
            <summary>
            Gets the probe info info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InletMethods.SyringeInfo">
            <summary>
            Gets the syringe info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InletMethods.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstMethodColumnInfo">
            <summary>
            The instrument method column info, from legacy LCQ files
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstMethodColumnInfo.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstMethodSolvent">
            <summary>
            The instrument method solvent, from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstMethodSolvent.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig">
            <summary>
            Legacy instrument configuration data (LCQ data system)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.Inlet">
            <summary>
            Gets the inlet type -- either "ESI" or "APCI"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.MsModelName">
            <summary>
            Gets the MS Model
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.UvDetectorModel">
            <summary>
            Gets the UV detector model
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.Dad">
            <summary>
            Gets the DAD (Diode array detector) model.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.LcPumpModel">
            <summary>
            Gets the LC pump model.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.Autosampler">
            <summary>
            Gets the auto sampler model.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.Ad">
            <summary>
            Gets the AD converter model.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.MsModel">
            <summary>
            Gets the MS model number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.MsSerialNum">
            <summary>
            Gets the MS serial number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.LcModel">
            <summary>
            Gets the LC pump model number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.LcSerialNum">
            <summary>
            Gets the LC pump serial number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.DetModel">
            <summary>
            Gets the Detector model number (unused now)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.DetSerialNum">
            <summary>
            Gets the Detector serial number (unused now)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.AsModel">
            <summary>
            Gets the Auto sampler model number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.AsSerialNum">
            <summary>
            Gets the Auto sampler serial number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.ExtDet">
            <summary>
            Gets the External detector channels 1-4
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentConfig.ExtDetInUse(System.Int32)">
            <summary>
            Test if the ext detector is in use.
            </summary>
            <param name="n">
            The index.
            </param>
            <returns>
            true if in use
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentFile">
            <summary>
            The instrument file, from old LCQ
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentFile.AuditTrailInfo">
            <summary>
            Gets the audit trail information.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentFile.InstConfig">
            <summary>
            Gets the instrument configuration.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentFile.MsMethodInfo">
            <summary>
            Gets the MS method information.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentFile.RealTimeChroInfo">
            <summary>
            Gets the real time chromatogram information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentFile.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentRunInfo">
            <summary>
            The instrument run info data from legacy LCQ files
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentRunInfo.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentStatusLog">
            <summary>
            The instrument status log, from legacy LCQ files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentStatusLog.InstStatusStructInfo">
            <summary>
            Gets the instrument status struct info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentStatusLog.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentStatusLog"/> class.
            </summary>
            <param name="numItems">
            The number of items.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentStatusLog.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Itcl">
            <summary>
            The ITCL settings, for legacy LCQ files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Itcl.AcquisitionTime">
            <summary>
            Gets the acquisition time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Itcl.TuneMethod">
            <summary>
            Gets the tune method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Itcl.ItclProcedure">
            <summary>
            Gets the ITCL procedure.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Itcl.MsSegments">
            <summary>
            Gets the MS segments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Itcl.VariableLists">
            <summary>
            Gets the variable lists.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Itcl.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcDetector">
            <summary>
            The LC detector information
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcDetector.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcEvent">
            <summary>
            The LC event, from legacy LCQ files
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcEvent.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcMethod">
            <summary>
            The LC method (from legacy LCQ files)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcMethod.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter">
            <summary>
            The LCQ converter. Convert from legacy LCQ format to current raw data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqCreateXcalTrailerExtraHeader">
            <summary>
            LCQs the write Xcalibur trailer header.
            </summary>
            <returns>The converted data descriptors</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqCreateXcalTuneMethodHeader">
            <summary>
            converts The LCQ tune method header to Data Descriptor format.
            </summary>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqCreateXcalStatusLogHeader(System.Boolean,System.Boolean)">
            <summary>
            create xcalibur status log header from LCQ format log.
            To generate the trailer extra header for inclusion to the Xcalibur data file.
            </summary>
            <param name="incAs">if set to <c>true</c> include the auto sampler data.</param>
            <param name="incLc">if set to <c>true</c> include the LC data.</param>
            <returns>The converted log definition</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqCreateXcalTrailerScanEvent(System.Int32,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TrailerStruct@,System.Int32)">
            <summary>
            LCQs the trailer to xcalibur scan event.
            </summary>
            <param name="filterMassPrecision">precision for formatting mass</param>
            <param name="trailerInfo">The trailer information.</param>
            <param name="index">index into scans</param>
            <returns>The scan event</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.BoolToOnOffByte(System.Boolean)">
            <summary>
            Convert boolean value to "on off" and cast to byte.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqCreateXcalScanEvent(ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsScanEvent@)">
            <summary>
            Converts the LCQ scan event to Xcalibur scan event.
            To construct an Xcalibur scan event from a given LCQ scan event
            </summary>
            <param name="lcqScanEvent">The LCQ scan event.</param>
            <returns>The converted event</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqWriteXcalScanIndex(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TrailerStruct@,System.Int32,System.Boolean,System.Int64)">
            <summary>
            LCQs the index of the write xcalibur scan.
            </summary>
            <param name="writer">The writer.</param>
            <param name="trailerInfo">The trailer information.</param>
            <param name="i">The i.</param>
            <param name="hasExpMethod">if set to <c>true</c> [has experiment method].</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqWriteXcalUvScanIndex(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TrailerStruct@,System.Int32,System.Int32,System.Int64)">
            <summary>
            LCQs the index of the write xcalibur UV scan.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="trailerInfo">
            The trailer information.
            </param>
            <param name="msAnalogChannelsUsedCount">
            The MS analog channels used count.
            </param>
            <param name="i">
            The i.
            </param>
            <param name="offset">
            The offset.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqWriteXcalUvChannelData(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,System.Single[],System.Byte,System.Int64)">
            <summary>
            write xcalibur UV channel data.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="uvAnalogInput">
            The UV analog input.
            </param>
            <param name="msAnalogChannelsUsed">
            The MS analog channels used.
            </param>
            <param name="offset">
            The offset.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqWriteXcalTrailerExtra(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TrailerStruct@,System.Int64)">
            <summary>
            Write the xcalibur trailer extra.
            </summary>
            <param name="writer">Where the data is written</param>
            <param name="trailerInfo">The trailer information.</param>
            <param name="offset">Offset into memory map</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqWriteXcalTuneData(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.TuneDataStruct@,System.Int64)">
            <summary>
            LCQs the write xcalibur tune data.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="tuneDatastruct">
            The tune data struct.
            </param>
            <param name="offset">
            The offset.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.ByteToZeroOne(System.Byte)">
            <summary>
            convert byte to zero or one.
            </summary>
            <param name="b">
            The byte.
            </param>
            <returns>
            either 0 or 1
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.LcqWriteXcalStatusLog(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapWriter,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.OldLCQ.InstStatusStruct@,System.Boolean,System.Boolean,System.Int32,System.Int64)">
            <summary>
            Write the xcalibur status log.
            To generate the trailer extra header for inclusion to the Xcalibur data file.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="instStatusStructInfo">
            The instrument status structure information.
            </param>
            <param name="incAs">
            if set to <c>true</c> include the auto sampler data.
            </param>
            <param name="incLc">
            if set to <c>true</c> include the LC data.
            </param>
            <param name="blockSize">
            Size of the block.
            </param>
            <param name="offset">
            The offset.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqConverter.EncodeStatusMessage(System.Int32,System.String[],System.Int32)">
            <summary>
            encode a status message.
            </summary>
            <param name="statusCode">
            The status code.
            </param>
            <param name="statusStrings">
            The status strings.
            </param>
            <param name="maxLength">
            The max length.
            </param>
            <returns>
            The message as encoded bytes
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqScanHeader">
            <summary>
            The LCQ scan header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqScanHeader.TrailerStructInfo">
            <summary>
            Gets the trailer struct info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqScanHeader.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqScanHeader"/> class.
            </summary>
            <param name="numItems">The number items.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcqScanHeader.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcTable">
            <summary>
            The LC table, from legacy LCQ files
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcTable.StartPercent">
            <summary>
            Gets the start percent.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.LcTable.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsDependentData">
            <summary>
            The MS dependent data, for legacy LCQ files
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsDependentData.Mode">
            <summary>
            Gets or sets the mode or the largest.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsDependentData.Largest">
            <summary>
            Gets or sets the index of the largest.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsDependentData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsDependentData"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsDependentData.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsMethod">
            <summary>
            The MS method, from legacy LCQ files
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsMethod.MsMethodInfo">
            <summary>
            Gets the MS method info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsMethod.DumpValueInfo">
            <summary>
            Gets the dump value info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsMethod.FractionCollectorInfo">
            <summary>
            Gets the fraction collector info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsMethod.ItclInfo">
            <summary>
            Gets the ITCL info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsMethod.NonItclInfo">
            <summary>
            Gets the non ITCL info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsMethod.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsScanEvent">
            <summary>
            The MS scan event, from legacy LCQ files
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsScanEvent.MsScanEventStructInfo">
            <summary>
            Gets the MS scan event struct info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsScanEvent.MsDependentDataInfo">
            <summary>
            Gets the MS dependent data info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsScanEvent.ReactionsInfo">
            <summary>
            Gets the reactions info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsScanEvent.MassRangesInfo">
            <summary>
            Gets the mass ranges info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsScanEvent.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsSegment">
            <summary>
            The MS segment.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsSegment"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsSegment.MinSegmentTime">
            <summary>
            Gets the minimum segment time.
            minimum segment time (to correct old methods)
            On 3/14/96, the min MS Segment time was increased to 0.1 -- compensate while loading
            </summary>
            <value>
            The minimum segment time.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsSegment.MsScanEvents">
            <summary>
            Gets the MS scan events.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsSegment.AcquisitionTime">
            <summary>
            Gets the acquisition time.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.MsSegment.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl">
            <summary>
            The non ITCL data from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl.MinMsRunTime">
            <summary>
            Gets or sets the minimum MS run time.
            Minimum MS run time (to correct old methods)
            </summary>
            <value>
            The minimum MS run time.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl.NumSegments">
            <summary>
            Gets the number segments.
            </summary>
            <value>
            The number segments.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl.MassRejects">
            <summary>
            Gets the mass rejects.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl.MassPrecursors">
            <summary>
            Gets the mass precursors.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl.MsSegments">
            <summary>
            Gets the MS segments.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.NonItcl.ForceMassesInRange">
            <summary>
            Force all specified masses to be within the mass range of the instrument
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile">
            <summary>
            The old LCQ file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile"/> class from being created.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.RawFileLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile"/> class.
            </summary>
            <param name="rawFileLoader">The raw file loader.</param>
            <exception cref="T:System.ArgumentNullException">raw File Loader</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile.AuditTrailInfo">
            <summary>
            Gets the audit trail information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile.DecodeOldLcqFile(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Decodes the old LCQ file.
            This object is being converted or read from disk and therefore the data needs
            needs to read from either the mapped file or some other mechanism. This function
            is only intended for use with old LCQ data files.        
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="fileRevision">The file revision.</param>
            <returns>True able to decode the old LCQ file, false otherwise</returns>
            <exception cref="T:System.NotImplementedException">This is an old file type, the file version is less than 25</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile.ConstructScanEventSegments(ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentFile,ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData[],ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice)">
            <summary>
            Constructs the scan event segments.
            </summary>
            <param name="lcqInstFile">The LCQ instrument file.</param>
            <param name="lcqTuneData">The LCQ tune data.</param>
            <param name="massSpecDevice">The mass spec device.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile.GetMsAnalogChannelsUsedCount(System.Boolean,ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.InstrumentFile,System.Int32,System.Byte@)">
            <summary>
            Gets the mass spec analog channels used count.
            </summary>
            <param name="hasExperimentMethod">if set to <c>true</c> [has experiment method].</param>
            <param name="lcqInstFile">The LCQ instrument file.</param>
            <param name="massSpecAnalogChannelsUsedCount">The mass spec analog channels used count.</param>
            <param name="massSpecAnalogChannelsUsed">The mass spec analog channels used.</param>
            <returns>Used count</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.OldLcqFile.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.ProbeInfo">
            <summary>
            The probe info, from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.ProbeInfo.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation">
            <summary>
            The real time chromatogram information, from legacy LCQ files
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.RealTimeChroInfoStructInfo">
            <summary>
            Gets the real time chromatogram info struct info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.XAxisParm">
            <summary>
            Gets the x axis parameters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.YAxisParm">
            <summary>
            Gets the y axis parameters.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.RtChroNormInfo">
            <summary>
            Gets the real time chromatogram norm info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.RtChroLabelInfo">
            <summary>
            Gets the real time chromatogram label info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.RtChroOtherInfo">
            <summary>
            Gets the real time chromatogram other info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.RtChroStyleInfo">
            <summary>
            Gets the real time chromatogram style info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.ChroTraceInfo">
            <summary>
            Gets the chromatogram trace info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeChroInformation.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation">
            <summary>
            The real time spec information, from legacy LCQ files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.RealTimeSpecInfoStructInfo">
            <summary>
            Gets the real time spec info struct info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.XAxisParm">
            <summary>
            Gets the x axis parameters.
            </summary>
            <value>
            The x axis parameters.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.YAxisParm">
            <summary>
            Gets the y axis parameters.
            </summary>
            <value>
            The y axis parameters.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.ZAxisParm">
            <summary>
            Gets the z axis parameters.
            label offset flag and amount are ignored (they don't apply)
            </summary>
            <value>
            The z axis parameters.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.FilterInfo">
            <summary>
            Gets the filter info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.RtSpecNormInfo">
            <summary>
            Gets the real time spectrum normalization info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.RtSpecColorInfo">
            <summary>
            Gets the real time spectrum color info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.RtSpecLabelInfo">
            <summary>
            Gets the real time spectrum label info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.RtSpecOtherInfo">
            <summary>
            Gets the real time spectrum other info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.RtSpecRangesInfo">
            <summary>
            Gets the real time spectrum ranges info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RealTimeSpecInformation.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroLabel">
            <summary>
            The real time chromatogram label options from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroLabel.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroNorm">
            <summary>
            The real time chromatogram normalization options for legacy LCQ files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroNorm.FixScale">
            <summary>
            Gets or sets a value indicating whether the y axis scale is fixed.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroNorm.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroOther">
            <summary>
            The real time chromatogram other data, for legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroOther.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroStyle">
            <summary>
            The real time chromatogram style, for legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtChroStyle.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecColor">
            <summary>
            The real time spec color for legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecColor.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecLabel">
            <summary>
            The real time spec label options.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecLabel.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecNorm">
            <summary>
            The Real Time spec normalization settings, from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecNorm.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecOther">
            <summary>
            The real time spec other settings, for legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecOther.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecRanges">
            <summary>
            The real time spec ranges, from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.RtSpecRanges.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Syringe">
            <summary>
            The syringe, for legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.Syringe.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TemperatureTable">
            <summary>
            The temperature table, from legacy LCQ files
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TemperatureTable.TempTableInfo">
            <summary>
            Gets the temp table info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TemperatureTable.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TemperatureTable.ReadTemperatureTableStruct(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64@)">
            <summary>
            read temperature table struct.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="bytesToRead">
            The bytes to read.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <returns>
            The temperature table
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData">
            <summary>
            The tune data, from legacy LCQ files.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.TuneDataStructInfo">
            <summary>
            Gets the tune data struct info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.Norm">
            <summary>
            Gets the norm. UNUSED -- RF DAC for normal scan rate
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.Agc">
            <summary>
            Gets the AGC. UNUSED -- RF DAC for AGC scan rate
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.HighRes">
            <summary>
            Gets the high res. UNUSED -- RF DAC for high-res scan rate
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.Fast">
            <summary>
            Gets the fast. UNUSED -- RF DAC for fast scan rate
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.Vernier">
            <summary>
            Gets the <c>vernier</c>. UNUSED -- RF DAC for <c>vernier</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.CalQ1">
            <summary>
            Gets the cal q 1. UNUSED -- RF DAC for static operation at cal q 1
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.CalQ2">
            <summary>
            Gets the cal q 2.  UNUSED -- RF DAC for static operation at cal q 2
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.NormRea">
            <summary>
            Gets the norm Resonance ejection amplitude. UNUSED -- Resonance ejection amplitude for normal scan rate
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.AgcRea">
            <summary>
            Gets the AGC REA. UNUSED -- Resonance ejection amplitude for AGC scan rate
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.HighResRea">
            <summary>
            Gets the high res REA. UNUSED -- Resonance ejection amplitude for High Res scan rate
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.FastRea">
            <summary>
            Gets the fast REA. UNUSED -- Resonance ejection amplitude for Fast scan rate
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.IsolationWfAmp">
            <summary>
            Gets the isolation waveform amp. UNUSED -- Isolation waveform amplitude
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.InjectionRf">
            <summary>
            Gets the injection RF. UNUSED: Ion injection RF frequency slope and intercept
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.TubeCalVoltages">
            <summary>
            Gets the tube cal voltages. UNUSED -- Tube lens calibration voltages.  Presented to the user as 2x10 2-d array.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.TuneData.FixUpTuneDataDefaults(System.Int32)">
            <summary>
            fix up tune data defaults.
            </summary>
            <param name="fileRevision">
            The file revision.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.VariableList">
            <summary>
            The variable list, from legacy LCQ files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.VariableList.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex">
            <summary>
            The Adjustable Scan Rate profile index.
            For scans (especially PDA) when the data is only intensity values
            and the scan rate (x axis step, such as time, wavelength etc.) between values
            is "adjusted" to the rate indicated by the index record.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load ASR Profile index data (from file).
            </summary>
            <param name="viewer">The viewer (memory map into file).</param>
            <param name="dataOffset">The data offset (into the memory map).</param>
            <param name="fileRevision">The file revision.</param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.AbsorbanceUnitScale">
            <summary>
            Gets or sets the Absorbance Unit's scale.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.AbsorbanceUnitOffset">
            <summary>
            Gets the Absorbance Unit's offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.DataPosition">
            <summary>
            Gets the data position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.IsValidScan">
            <summary>
            Gets a value indicating whether is valid scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.NumberOfPackets">
            <summary>
            Gets the number of packets.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.TimeWavelengthStart">
            <summary>
            Gets the time wave length start.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.TimeWavelengthStep">
            <summary>
            Gets the time wave length step.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.WavelengthEnd">
            <summary>
            Gets the wave length end.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfileIndex.WavelengthStart">
            <summary>
            Gets the wave length start.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfilePacket">
            <summary>
            The AdjustableScanRate profile packet.
            This defines a simple scan type, where the scan data is just an "array of <c>int</c>".
            This is used for PDA detector data, where the "intensity" data is absorbance values
            The index indicates the start wavelength (wavelength of the first intensity)
            and the wavelength step, between readings.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfilePacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfilePacket"/> class.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">offset from start of memory map</param>
            <param name="fileRevision">
            The file format version.
            </param>
            <param name="scanIndex">
            The scan index.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfilePacket.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfilePacket.SegmentPeaks">
            <summary>
            Gets the segment peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfilePacket.Indices">
            <summary>
            Gets the indices.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.ASR.AdjustableScanRateProfilePacket.CreatePacket(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32,System.Int32)">
            <summary>
            create packet (scan data).
            </summary>
            <param name="viewer">
                The viewer.
            </param>
            <param name="dataOffset">Offset into memory map</param>
            <param name="fileRevision">
                The file format version.
            </param>
            <param name="scanIndexScanNumber">The scan number</param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SegmentData"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak">
            <summary>
            Peak information (can be profile point, centroid etc).
            Because a raw file can contain over 100 million profile points
            this must be a "struct" not a "class", or we drive the garbage collector wild
            and massively degrade performance on large files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak"/> struct. 
            </summary>
            <param name="labelPeak">
            The label peak.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak"/> struct. 
            With a given mass and intensity.
            </summary>
            <param name="mass">
            The mass.
            </param>
            <param name="intensity">
            The intensity.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak"/> struct. 
            With a given mass and 0 intensity.
            </summary>
            <param name="mass">
            The mass.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.#ctor(System.Double,System.Single,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak"/> struct. 
            With a given mass intensity and frequency.
            </summary>
            <param name="mass">
            The mass.
            </param>
            <param name="intensity">
            The intensity.
            </param>
            <param name="frequency">
            The frequency.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak"/> struct. 
            With a given mass and frequency.
            The "bool" parameter is a performance trick needed in C#.
            Since there is already a version with "double, double" adding a third (unused parameter)
            creates an overload.
            This is more efficient that using the 3 parameter constructor and
            passing "0.0" for intensity, as an additional assignment is needed.
            This overload is called millions of times from AddZeroPackets
            </summary>
            <param name="mass">
            The mass.
            </param>
            <param name="frequency">
            The frequency.
            </param>
            <param name="noIntensityOverload">
            The intensity.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.Position">
            <summary>
            Gets the position. This value must be set by a constructor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.Options">
            <summary>
            Gets or sets the options.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.Frequency">
            <summary>
            Gets the frequency. Must be set by constitution.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.IsReferenceOrException">
            <summary>
            Gets a value indicating whether this peak is reference or exception.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.IsSaturated">
            <summary>
            Gets a value indicating whether this peak is saturated.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak.CopyFlagsFrom(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak)">
            <summary>
            Copies a set of FT code flags (see usage)
            </summary>
            <param name="dp">Data peak value</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt">
            <summary>
            The high resolution spectrum data packet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="scanIndex">Index of the scan.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="includeRefPeaks">if set to <c>true</c> [include reference peaks].</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt.Compress(ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess)">
            <summary>
            Compress the scan to binary format for writing to a raw file
            </summary>
            <param name="segmentedScan">The segmented scan.</param>
            <returns>The compressed segmented scans in byte array</returns>
            <exception cref="T:System.ArgumentNullException">segmented Scan</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt.Convert(System.Int32,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Converts the specified number index structure.
            </summary>
            <param name="numIndexStruct">The number index structure.</param>
            <param name="sizeOfHiResSpTypeStruct">The size of high resolution spectrum type structure.</param>
            <param name="includeRefPeaks">if set to <c>true</c> [include reference peaks].</param>
            <param name="profileBlob">The profile BLOB.</param>
            <returns>Data for the scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt.MakeByteFlagsTable">
            <summary>
            Map peak options to flag bytes, with a static table
            </summary>
            <returns>
            The table of bytes for each combination of options
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.HrSpDataPkt.ExpandProfileBlob(System.Double,System.Double)">
            <summary>
            Expands the profile blob.
            </summary>
            <param name="lowMass">The low mass.</param>
            <param name="highMass">The high mass.</param>
            <returns>The converted data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt">
            <summary>
            The low resolution spectrum data packet.
            </summary>
            <seealso cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IMsPacket" />
            <seealso cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawObjectBase" />
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="scanIndex">Index of the scan.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt.Compress(ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess)">
            <summary>
            Called when [compress].
            </summary>
            <param name="segmentedScan">The segmented scan.</param>
            <returns>The compressed segmented scans in byte array</returns>
            <exception cref="T:System.ArgumentNullException">segmented Scan</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt.ExpandProfileBlob(System.Double,System.Double)">
            <summary>
            Expands the profile BLOB.
            </summary>
            <param name="lowMass">
            The low Mass.
            </param>
            <param name="highMass">
            The high Mass.
            </param>
            <returns>
            The profile data
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt2">
            <summary>
            The low res spectrum data packet 2.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt2.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt2"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="scanIndex">Index of the scan.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt2.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt2.Compress(ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess)">
            <summary>
            Called when [compress].
            </summary>
            <param name="segmentedScan">The segmented scan.</param>
            <returns>The compressed segmented scans in byte array</returns>
            <exception cref="T:System.ArgumentNullException">segmented Scan</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt2.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt2.MakeByteFlagsTable">
            <summary>
            Map peak options to flags, with a static table
            </summary>
            <returns>
            The table of bytes for each combination of options
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt2.ExpandProfileBlob">
            <summary>
            Expands the profile BLOB.
            </summary>
            <returns>The profile data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt3">
            <summary>
            The low resolution spectrum data packet 3.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt3.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt3"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="scanIndex">Index of the scan.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt3.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt3.Compress(ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess)">
            <summary>
            Compresses the low resolution spec data packet #3 segmented scan.
            </summary>
            <param name="segmentedScan">The segmented scan.</param>
            <returns>The compressed segmented scans in byte array.</returns>
            <exception cref="T:System.ArgumentNullException">segmented Scan</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt3.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt3.ExpandProfileBlob">
            <summary>
            Expands the profile BLOB.
            </summary>
            <returns>The expanded data</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt3.OnConvert(System.Single[],System.Int32,System.Int32)">
            <summary>
            Called when [convert].
            </summary>
            <param name="massIntensityPairs">The mass intensity pairs.</param>
            <param name="startPosition">The mi start position.</param>
            <param name="numPkts">The number PKTS.</param>
            <returns>The converted data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt4">
            <summary>
            The low resolution spectrum data packet 4.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt4.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt4"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="scanIndex">The number index structure. How many PROF_INDEX_DATA_PKT structures we have in the spectrum,
            note that we have <c>(nNumIndexStructures - 1)</c> scan segments in the spectrum</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt4.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt4.Compress(ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess)">
            <summary>
            Compresses the low resolution spec data packet #4 segmented scan.
            </summary>
            <param name="segmentedScan">The segmented scan.</param>
            <returns>The compressed segmented scans in byte array.</returns>
            <exception cref="T:System.ArgumentNullException">segmented Scan</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt4.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt4.ExpandProfileBlob">
            <summary>
            Expands the profile BLOB.
            </summary>
            <returns>
            The profile data
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.LowResSpDataPkt4.OnConvert(System.Single[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when [convert].
            </summary>
            <param name="massIntensityPairs">The mass intensity pairs.</param>
            <param name="startPos">The mi start position.</param>
            <param name="flags">The flags.</param>
            <param name="flagStartPos">The flag start position.</param>
            <param name="numPkts">The number PKTS.</param>
            <returns>Data for the scan</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.ProfileIndexDataPacket">
            <summary>
            Profile Index Data Packet
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.ProfileIndexDataPacket.DataPos">
            <summary>
            Gets or sets the data position.
            Offset into MS scan data
            </summary>
            <value>
            The data position.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.ProfileIndexDataPacket.LowMass">
            <summary>
            Gets the low mass.
            </summary>
            <value>
            The low mass.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.ProfileIndexDataPacket.HighMass">
            <summary>
            Gets the high mass.
            </summary>
            <value>
            The high mass.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.ProfileIndexDataPacket.MassTick">
            <summary>
            Gets the mass tick.
            This is the mass step between profile points.
            </summary>
            <value>
            The mass tick.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.ProfileIndexDataPacket.NumberPackets">
            <summary>
            Gets or sets the number of packets.
            </summary>
            <value>
            The number packets.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.ProfileIndexDataPacket.TotalPackets">
            <summary>
            Gets or sets the total packets.
            </summary>
            <value>
            The total packets.
            </value>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.HRLRSP.ProfileIndexDataPacket.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IMsPacket">
            <summary>
            The MS Packet interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IMsPacket.LabelPeaks">
            <summary>
            Gets the label peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IMsPacket.NoiseAndBaselines">
            <summary>
            Gets the noise and baselines.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IMsPacket.DebugData">
            <summary>
            Gets the debug data for a scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IMsPacket.ExtendedData">
            <summary>
            Gets the debug data for a scan.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket">
            <summary>
            The Packet interface.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket.SegmentPeaks">
            <summary>
            Gets the segmented peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak">
            <summary>
            The label peak information.
            Use struct here for performance:
            Since there are "many per scan" and "many scans per file"
            Over 10 million of these objects can be created per second
            when processing raw files, so if "class" is used
            This would cause frequent garbage collection, and kills parallel code
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.Mass">
            <summary>
            Gets or sets the mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.Resolution">
            <summary>
            Gets or sets the resolution.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.Baseline">
            <summary>
            Gets or sets the baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.Noise">
            <summary>
            Gets or sets the noise.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.Charge">
            <summary>
            Gets or sets the charge.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.IsException">
            <summary>
            Gets a value indicating whether the peak is an exception.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.IsReference">
            <summary>
            Gets a value indicating whether the peak is a reference.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks">
            <summary>
            The class contains label peaks and noise info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks.Peaks">
            <summary>
            Gets the Centroid peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks.IsNoiseUpdated">
            <summary>
            Gets or sets a value indicating whether noise has been updated.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks.SetLabelPeaks(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak[])">
            <summary>
            Set the label peaks.
            </summary>
            <param name="peaks">
            The _labelPeaks.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks.SetNoiseInfoPackets(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.NoiseInfoPacketStruct[])">
            <summary>
            The set noise info packets.
            </summary>
            <param name="noiseInfoPackets">
            The noise info packets.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks.InterpolateValues(System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Interpolate noise or baseline value.
            </summary>
            <param name="currentValue">
            The current value.
            </param>
            <param name="previousValue">
            The previous value.
            </param>
            <param name="currentMass">
            The current mass.
            </param>
            <param name="previousMass">
            The previous mass.
            </param>
            <param name="slope">
            The slope.
            </param>
            <returns>
            The interpolated value.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeaks.UpdateNoise">
            <summary>
            The update noise.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase">
            <summary>
            The Advanced packet base.
            This class defines base features of a mass spectrometry scan format
            used by advanced instruments, such as "Linear Trap" or <c>Orbitrap</c>.
            These detectors may store much more than just mass and intensity.
            They may store both profile and centroid data for the same scans.
            Centroid data may have additional fields, such as "resolution".
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Int32,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase" /> class.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="scanIndex">Index to scan to read</param>
            <param name="fileRevision">Raw file version</param>
            <param name="includeRefPeaks">
            The include ref peaks.
            </param>
            <param name="packetScanDataFeatures">Defines what optional data should be decoded</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.LabelPeaks">
            <summary>
            Gets the label peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.NoiseAndBaselines">
            <summary>
            Gets the noise and baselines.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.SegmentPeaks">
            <summary>
            Gets the segment peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CentroidCounts">
            <summary>
            Gets the centroid counts.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.Header">
            <summary>
            Gets the header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.IncludeRefPeaks">
            <summary>
            Gets a value indicating whether to include ref peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ProfileBlob">
            <summary>
            Gets the profile blob.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.DebugBlob">
            <summary>
            Gets the Debug blob.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedDataBlob">
            <summary>
            Gets the extended scan data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ReferencePeakArray">
            <summary>
            Gets the reference peak array.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.SegmentPeakList">
            <summary>
            Gets the segment peak list.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.UseFtProfileSubSegment">
            <summary>
            Gets a value indicating whether use ft profile sub segment.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.DefaultFeatureWord">
            <summary>
            Gets the default feature word.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.HasAccurateMassCentroids">
            <summary>
            Gets a value indicating whether the data has accurate mass centroids.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.HasWidths">
            <summary>
            Gets or sets a value indicating whether the data has peak widths.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.PacketScanDataFeatures">
            <summary>
            Gets the packet scan data features.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.DebugData">
            <summary>
            Gets the debug data for this scan.
            If there is no data, returns an empty array.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.EmptyExtendedScanData">
            <summary>
            class to define a safe data structure for "no data"
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass">
            <summary>
            Class to decode additional data saved with a scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.Transients">
            <summary>
            Gets the transients
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.DataSegments">
            <summary>
            Gets the data segments
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.DataSegment">
            <summary>
            Debug segment contains sub segments.
            Each has a header, followed by a block of data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.DataSegment.Header">
            <summary>
            Gets the header, which can be ued in an instrument specific way to decode this data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.DataSegment.Bytes">
            <summary>
            Gets the data in this segment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.DataSegment.FileBytes">
            <summary>
            Gets the data from the raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.DataSegment.Init(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Initialize this object, to lazy read the data
            </summary>
            <param name="viewer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.Transient">
            <summary>
            Gets a transient from the raw file
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.Transient.Header">
            <summary>
            Gets an instrument specific transient header
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.Transient.Data">
            <summary>
            Gets the data for this transient
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.Transient.FileData">
            <summary>
            Gets transient data from the raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.Transient.Init(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Create a lazy loader for this data
            </summary>
            <param name="viewer">access to the raw file</param>
            <param name="offset">offset into the view</param>
            <param name="blockWords">Size of the data in 32 bit words.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.UInt32)">
            <summary>
            constructs a class to get extended scan data
            </summary>
            <param name="viewer">view itto the raw file</param>
            <param name="offset">offset into the view</param>
            <param name="words">length of the data in 32 bit words</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtendedScanDataClass.InitializeDebugBlocks(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.UInt32)">
            <summary>
            Prepare to return charge envelopes and centroid annotations. Call this once and in advance of accessing properties.
            </summary>
            <param name="viewer">The byte buffer being marked as debug section in the orbitrap scan</param>
            <param name="offset">offset into view for this data</param>
            <param name="words">number of 32 bit words in this data</param>
            <returns>Returns true on success, false if the data structure doesn't match the demands. Keep in mind that missing APD info is fine.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CompressCentroids(ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData)">
            <summary>
            Compresses the centroid data into packet buffer.
            For LT certroid format, there may not be a "full" cetroid data. For any other format:
            The assumption of this routine is that the IMsInstrumentData that is passed in does contain
            centroid data. The profile information (if any) will be dropped from the writing
            in this routine.
            </summary>
            <param name="instData">The mass spec instrument data.</param>
            <returns>The compressed packet in byte array. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CalculateLabelsPerSegment(System.UInt32,System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.Data.Business.LabelPeak},System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess},System.Int32[])">
            <summary>
            Calculates the labels per segment.
            </summary>
            <param name="numSegments">The number segments.</param>
            <param name="labelPeaks">The label peaks.</param>
            <param name="massRanges">The mass ranges.</param>
            <param name="centroidSegmentsCounter">The centroid segments counter.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CopyCentroidToPacketBuffer(System.Collections.ObjectModel.ReadOnlyCollection{System.Int32},System.UInt32,ThermoFisher.CommonCore.Data.Business.SimpleScan,System.Byte[],System.Int32)">
            <summary>
            Copies the centroid to packet buffer.
            </summary>
            <param name="centroidSegmentsCounter">The centroid segments counter.</param>
            <param name="numSegments">The number segments.</param>
            <param name="centroidPeaks">The centroid peaks.</param>
            <param name="bytes">The bytes.</param>
            <param name="dataOffset">The data offset.</param>
            <returns>The number of bytes copied to the packet buffer.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CopyLabelsToPacketBuffer(System.Int32,System.Byte[],System.Int32,System.UInt32[],System.Boolean,System.Single[])">
            <summary>
            Copies the labels to packet buffer.
            </summary>
            <param name="numLabelPeaks">The number label peaks.</param>
            <param name="bytes">The bytes.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="features">The features.</param>
            <param name="hasWidths">if set to <c>true</c> [has widths].</param>
            <param name="widths">The widths.</param>
            <returns>The number of bytes copied to the packet buffer.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CopyMassRangesToPacketBuffer(System.Collections.ObjectModel.ReadOnlyCollection{ThermoFisher.CommonCore.Data.Interfaces.IRangeAccess},System.Byte[],System.Int32)">
            <summary>
            Copies the mass ranges to packet buffer.
            </summary>
            <param name="massRanges">The mass ranges.</param>
            <param name="bytes">The bytes.</param>
            <param name="dataOffset">The start position.</param>
            <returns>The number of bytes copied to the packet buffer.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CopyNoiseInfoToPacketBuffer(System.Int32,ThermoFisher.CommonCore.Data.Business.NoiseAndBaseline[],System.Byte[],System.Int32)">
            <summary>
            Copies the noise information to packet buffer.
            </summary>
            <param name="numNoisePackets">The number noise packets.</param>
            <param name="noiseData">The noise data.</param>
            <param name="bytes">The packet buffer.</param>
            <param name="dataOffset">The start position.</param>
            <returns>The number of bytes copied to the packet buffer</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CopyPacketHeaderToPacketBuffer(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.PacketHeaderStruct,System.Byte[],System.Int32)">
            <summary>
            Copies the packet header to packet buffer.
            </summary>
            <param name="packetHeaderInfo">The packet header information.</param>
            <param name="bytes">The bytes.</param>
            <param name="startPos">The start position.</param>
            <returns>The number of bytes copied to the packet buffer.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CreateAnEmptySegmentedScan">
            <summary>
            Creates an empty segmented scan object.
            </summary>
            <returns>An empty segmented scan with one profile point with zero values.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CreatePacketBuffer(System.UInt32,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.PacketHeaderStruct)">
            <summary>
            Creates the packet buffer.
            </summary>
            <param name="numSegments">The number segments.</param>
            <param name="packetHeaderInfo">The packet header information.</param>
            <returns>A byte array for storing packet data.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CreatePacketHeader(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Int32)">
            <summary>
            Initializes the packet header.
            </summary>
            <param name="numSegments">The number segments.</param>
            <param name="numLabelPeaks">The number label peaks.</param>
            <param name="totalCentroids">The number centroid data.</param>
            <param name="numNoisePackets">The number noise packets.</param>
            <param name="totalProfilePoints">The total profile points.</param>
            <param name="totalSubSegments">The total sub segments.</param>
            <param name="hasWidths">if set to <c>true</c> [has widths].</param>
            <param name="defaultFeatureWord">Default feature word.</param>
            <param name="sizeOfProfileSubSegmentStruct">Size of profile sub-segment struct - FT Profile is 12 and LT Profile is 8</param>
            <returns>The packet header struct object.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExtractLabelsInfo(ThermoFisher.CommonCore.Data.Business.LabelPeak[],System.Boolean,System.UInt32[]@,System.Single[]@)">
            <summary>
            Extracts the labels information.
            </summary>
            <param name="labelPeaks">The label peaks.</param>
            <param name="hasWidths">if set to <c>true</c> [has widths].</param>
            <param name="features">The features.</param>
            <param name="widths">The widths.</param>
            <returns>true if this is detected as MRTOF data (has saturated flags)</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.GetCoeffValues(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the coefficient values.
            </summary>
            <param name="scanEvent">The scan event.</param>
            <param name="coeff0">The coefficient value 0.</param>
            <param name="coeff1">The coefficient value 1.</param>
            <param name="coeff2">The coefficient value 2.</param>
            <param name="coeff3">The coefficient value 3.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.GetLabelPeaks(ThermoFisher.CommonCore.Data.Business.CentroidStream,System.Boolean@)">
            <summary>
            Gets the label peaks.
            </summary>
            <param name="centroidData">The centroid data.</param>
            <param name="hasWidths">if set to <c>true</c> [has widths].</param>
            <returns>The label peaks.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExpandCentroidData">
            <summary>
            The method reads the centroid "blob" and transforms them to <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak" /> objects.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CreateDefaultFlagSet(System.UInt32)">
            <summary>
            create default flag set, from the packed bits.
            </summary>
            <param name="defaultFlags">
            The default flags (bit fields).
            </param>
            <returns>
            A DataPeak which has been initialized with the default peak flags
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ApplyFlags(System.UInt32,System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak[],System.Int32,System.Boolean[])">
            <summary>
            apply flags to peak.
            </summary>
            <param name="feature">
            The feature.
            </param>
            <param name="limit">
            The limit.
            </param>
            <param name="centroidPeaks">
            The centroid peaks.
            </param>
            <param name="refsFound">
            The refs found so far.
            </param>
            <param name="isRefPeak">
            The is ref peak.
            </param>
            <returns>
            The (updated) number of reference peaks found
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ContinueProcessingLabelData">
            <summary>
            The method checks the flags in the default
            feature word to determine if we should
            continue processing label data.
            </summary>
            <returns>
            True to continue processing.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ConvertCentroidsToLabelPeaks(System.UInt32,System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak[],System.Int32,System.Byte,System.Byte,System.Int32@)">
            <summary>
            The method converts a set of centroid structures to label peaks.
            </summary>
            <param name="centroidCount">
            The centroid structures count.
            </param>
            <param name="blobIndex">
            The blob index.
            </param>
            <param name="labelPeaks">
            The label peaks.
            </param>
            <param name="startIndex">index for this segment in returned data</param>
            <param name="defaultChargeState">
            The default charge state.
            </param>
            <param name="defaultFlags">
            The default flags.
            </param>
            <param name="resolutionIndex">
            The resolution index.
            </param>
            <returns>
            The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ConvertHighMassAccuracyCentroidsToLabelPeaks(System.UInt32,System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak[],System.Int32,System.Byte,System.Byte,System.Int32@)">
            <summary>
            The method converts a set of centroid structures to label peaks.
            </summary>
            <param name="centroidCount">
            The centroid structures count.
            </param>
            <param name="blobIndex">
            The blob index.
            </param>
            <param name="labelPeaks">
            The label peaks.
            </param>
            <param name="startIndex">index for this segment in returned data</param>
            <param name="defaultChargeState">
            The default charge state.
            </param>
            <param name="defaultFlags">
            The default flags.
            </param>
            <param name="resolutionIndex">
            The resolution index.
            </param>
            <returns>
            The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.CountLabels">
            <summary>
            Count the total number of peaks in all segments
            </summary>
            <returns>total number of peaks</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.ExpandLabelData">
            <summary>
            The expand label peaks - the label peak structure is actually the
            Centroid structure. If this is a profile packet type, the centroid data
            peaks are stored in the <see cref="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase._labelStreamData" /> object.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.SetFlags(System.UInt32,System.Byte@)">
            <summary>
            The method sets flags.
            </summary>
            <param name="feature">
            The feature.
            </param>
            <param name="flags">
            The flags.
            </param>
            <returns>
            True if the feature is a reference or exception.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.AdvancedPacketBase.SetFlagsAndChargeState(System.UInt32,System.Byte@,System.Byte@)">
            <summary>
            The method sets the flags and the charge state.
            </summary>
            <param name="feature">
            The feature.
            </param>
            <param name="flags">
            The flags.
            </param>
            <param name="chargeState">
            nThe charge state.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtCentroidPacket">
            <summary>
            The FT centroid packet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtCentroidPacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Int32,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtCentroidPacket"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="index">Index to the scan</param>
            <param name="fileRevision">Raw file revision</param>
            <param name="includeRefPeaks">The include ref peaks.</param>
            <param name="packetScanDataFeatures">True if noise and baseline data is required</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket">
            <summary>
            The FTMS profile packet.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.HalfZeroPackets">
            <summary>
            The half zero packets.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Collections.Generic.IReadOnlyList{System.Double},System.Int32,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket"/> class.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="index">Index to scam</param>
            <param name="massCalibrators">
            The mass calibrators.
            </param>
            <param name="fileRevision">Raw file version</param>
            <param name="includeRefPeaks">
            The include ref peaks.
            </param>
            <param name="packetScanDataFeatures">True if noise and baseline data is required</param>
            <exception cref="T:System.Exception">
            Thrown if not enough mass calibrators was passed.
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.CreateDataPeakDelegate">
            <summary>
            The create data peak delegate is used to convert from un-calibrated data
            to calibrated mass/intensity values
            </summary>
            <param name="massOffset">
            The mass offset.
            </param>
            <param name="freq">The frequency</param>
            <returns>The mass converted peak</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.SegmentPeaks">
            <summary>
            Gets the segment peaks.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.CompressProfiles(ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData)">
            <summary>
            Compresses the FT Profiles.
            The following algorithm assumes that:
            - The packet buffer is not compressed (ALL packets in the DataPeak buffer match one in the packet buffer).
            - Each segment contains exactly one sub segment which in turn contains all data points of this segment.
            - The position of a DataPeak and a packet share the same unit (mass), i.e. no conversion (e.g. mass to frequency) is necessary.
            - The low mass of the segment's mass range is == the base abscissa of the segment.
            - The position of the first packet in the mass range == base abscissa + 1 * abscissa spacing.
            <para/>
            This is true with Endeavor spectra (up to now, at least) but not with spectra from
            Jupiter (does compression, stores frequencies, multiple sub segments).
            Therefore this function must be re-implemented in the FT_PROF packet class.
            </summary>
            <param name="instData">The mass spec instrument data.</param>
            <returns>The compressed packet in byte array. </returns>
            <exception cref="T:System.NotImplementedException">Compress Profile</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.AddZerosWithCorrection(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.CreateDataPeakDelegate,System.Double,System.Double,System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak},System.Int32,System.Single,System.Double@,System.Double,System.Int32)">
            <summary>
            add zeros with correction for out of order mass
            </summary>
            <param name="calibratedMassDelegate">
            The calibrated mass delegate.
            </param>
            <param name="baseAbscissa">
            The base abscissa.
            </param>
            <param name="abscissaSpacing">
            The abscissa spacing.
            </param>
            <param name="dataPeaks">
            The data peaks.
            </param>
            <param name="startPacketIndex">
            The start packet index.
            </param>
            <param name="massOffset">
            The mass offset.
            </param>
            <param name="minMass">
            The min mass.
            </param>
            <param name="freq">
            The frequency.
            </param>
            <param name="endPacket">
            The end packet.
            </param>
            <returns>
            The mass of the last zero
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.ComputeProfilePoints(System.Int32[],System.Tuple{System.UInt32[][],ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.ProfileSubsegment[][]},System.Int32[],ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.ProfileSegmentStruct[],System.Double[],ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.ProfileSubsegment[][],System.UInt32[][],System.Double[],System.Single[][]@)">
            <summary>
            Computes the profile points.
            </summary>
            <param name="subSegmentsCounter">The sub segments counter.</param>
            <param name="compBufferProfileSubSegments">The comp buffer profile sub segments.</param>
            <param name="segSubSegProfilePointsCounter">The segment's sub segment profile points counter.</param>
            <param name="profileSegmentInfo">The profile segment information.</param>
            <param name="frequencies">The frequencies.</param>
            <param name="profileSubSegments">The profile sub segments.</param>
            <param name="startProfilePacketIndex">Start index of the profile packet.</param>
            <param name="intensities">The intensities.</param>
            <param name="compProfilePoints">The comp profile points.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.CopyFtProfileToPacketBuffer(System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Tuple{System.UInt32[][],ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.ProfileSubsegment[][]},System.Collections.Generic.IReadOnlyList{System.Single[]},System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.ProfileSegmentStruct},System.Byte[],System.Int32)">
            <summary>
            Copies the FT profile to packet buffer.
            </summary>
            <param name="totalProfilePoints">The total profile points.</param>
            <param name="subSegmentsCounter">The sub segments counter.</param>
            <param name="compBufferProfileSubSegments">The comp buffer profile sub segments.</param>
            <param name="compProfilePoints">The comp profile points.</param>
            <param name="profileSegmentInfo">The profile segment information.</param>
            <param name="bytes">The bytes.</param>
            <param name="dataOffset">The data offset.</param>
            <returns>The number of bytes copied to the packet buffer.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.IncreaseMass(System.Double)">
            <summary>
            Ensure that as zero pad values are added, the mass increases.
            </summary>
            <param name="minMass">Minimum mass: The Mass of last accepted peak, or zero</param>
            <returns>New value for minimum mass</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.InitializeProfileSegmentInfo(System.Int32[],System.Int32,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.ProfileSegmentStruct[],System.Int32,System.Double[])">
            <summary>
            Initializes the profile segment information.
            </summary>
            <param name="segSubSegProfilePointsCounter">The segment's sub segment profile points counter.</param>
            <param name="segIndex">Index of the segment.</param>
            <param name="profileSegmentInfo">The profile segment information.</param>
            <param name="numSubSegments">The number sub segments.</param>
            <param name="frequencies">The frequencies.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.AddZeroPackets(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.CreateDataPeakDelegate,System.Double,System.Double,System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak},System.Int32,System.Int32,System.Single,System.Double@,System.Boolean)">
            <summary>
            The method adds zero packets.
            </summary>
            <param name="calibratedMassDelegate">
            Delegate to create a mass from the peak index, using calibration data
            </param>
            <param name="baseAbscissa">
            The base abscissa (start frequency)
            </param>
            <param name="abscissaSpacing">
            The abscissa (frequency) spacing between samples
            </param>
            <param name="dataPeaks">
            The data peaks.
            </param>
            <param name="startPacketIndex">
            The start packet index.
            </param>
            <param name="endPacketIndex">
            The end packet index.
            </param>
            <param name="massOffSet">Mass offset of the profile segment
            </param>
            <param name="minMass">minimum valid mass, so that masses are not added out of order</param>
            <param name="isAppending">
            The is appending.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.CalculateMass(System.Single,System.Double)">
            <summary>
            Creates the data peak.
            </summary>
            <param name="massOffset">The mass offset.</param>
            <param name="freq">The frequency</param>
            <returns>The (frequency to mass) converted peak</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.CalculateMassWithoutCoeff3(System.Single,System.Double)">
            <summary>
            Creates the data peak without coefficient 3.
            </summary>
            <param name="massOffset">The mass offset.</param>
            <param name="freq">The frequency</param>
            <returns>The (frequency to mass) converted peak</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.ExpandProfileBlob">
            <summary>
            Expand the profile blob.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.FlagReferencePeaks(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak},ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak,System.Int32,System.Int32)">
            <summary>
            flag reference peaks with "reference" or "exception", where the profile is part of
            an identified reference.
            </summary>
            <param name="dataPeaks">
            The data peaks.
            </param>
            <param name="refPeak">
            The reference peak.
            </param>
            <param name="startPeakIndex">
            The start peak index.
            </param>
            <param name="numDataPeaks">
            The number of data peaks.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.ProcessSubsegments(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.FtProfilePacket.CreateDataPeakDelegate,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.ProfileSegmentStruct,System.Int32,System.Int32,System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.DataPeak},System.Int32,System.Double)">
            <summary>
            The method processes the sub-segments.
            </summary>
            <param name="calibrateMassDelegate">Delegate to create a peak</param>
            <param name="segment">
            The segment.
            </param>
            <param name="blobIndex">
            The blob index.
            </param>
            <param name="segIndex">
            The segment index.
            </param>
            <param name="dataPeaks">
            The data peaks.
            </param>
            <param name="referencePeakIndex">
            The reference peak index.
            </param>
            <param name="minMass">Minimum mass (or last mass processed) to prevent out of order data</param>
            <returns>
            Item1: The mass offset of the last sub-segment. Item2: The profile index after the last added value
            Item3 the updated minMass
            Item4: the updated reference peak index
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapCentroidPacket">
            <summary>
            The Linear Trap centroid packet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapCentroidPacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Int32,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapCentroidPacket"/> class.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="index">
            The index.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <param name="includeRefPeaks">
            The include ref peaks.
            </param>
            <param name="packetScanDataFeatures">
            The packet scan data features.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapCentroidPacket.SegmentPeaks">
            <summary>
            Gets the segmented peaks. retrieve a DataPeak from the profile packet buffer.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapProfilePacket">
            <summary>
            The Linear Trap profile packet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapProfilePacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Int32,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapProfilePacket"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="index">index to scan whose data is needed</param>
            <param name="fileRevision">Raw file version</param>
            <param name="includeRefPeaks">The include ref peaks.</param>
            <param name="packetScanDataFeatures">True if noise and baseline data is required</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapProfilePacket.SegmentPeaks">
            <summary>
            Gets the segmented peaks. retrieve a DataPeak from the profile packet buffer.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapProfilePacket.CopyLtProfileToPacketBuffer(System.Int32,System.Int32[],ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.FTProfile.ProfileSegmentStruct[],System.Byte[],System.Int32,System.UInt32[],System.Single[][])">
            <summary>
            Copies the lt profile to packet buffer.
            </summary>
            <param name="totalProfilePoints">The total profile points.</param>
            <param name="segProfilePointsCounter">The segmented profile points counter.</param>
            <param name="profileSegmentInfo">The profile segment information.</param>
            <param name="bytes">The bytes.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="compProfileSubSegmentsNumWords">The comp profile sub segments number words.</param>
            <param name="compProfilePoints">The comp profile points.</param>
            <returns>The number of bytes copied to the packet buffer.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapProfilePacket.CompressProfiles(ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData)">
            <summary>
            Compresses the LT Profiles.
            The following algorithm assumes that:
            - The packet buffer is not compressed (ALL packets in the DataPeak buffer match one in the packet buffer).
            - Each segment contains exactly one sub segment which in turn contains all data points of this segment.
            - The position of a DataPeak and a packet share the same unit (mass), i.e. no conversion (e.g. mass to frequency) is necessary.
            - The low mass of the segment's mass range is == the base abscissa of the segment.
            - The position of the first packet in the mass range == base abscissa + 1 * abscissa spacing.
            <para/>
            This is true with Endeavor spectra (up to now, at least) but not with spectra from
            Jupiter (does compression, stores frequencies, multiple sub segments).
            Therefore this function must be re-implemented in the LT_PROF packet class.
            </summary>
            <param name="instData">The mass spec instrument data.</param>
            <returns>The compressed packet in byte array. </returns>
            <exception cref="T:System.NotImplementedException">Compress Profile</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.LinearTrapProfilePacket.ExpandProfileData">
            <summary>
            Expands the profile data.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.ProfileSubsegment">
            <summary>
            The profile sub-segment.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.ProfileSubsegment.ProfilePoints">
            <summary>
            Gets or sets the profile points.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.ProfileSubsegment.MassOffset">
            <summary>
            Gets or sets the mass offset.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.ProfileSubsegment.#ctor(System.UInt32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LTFT.ProfileSubsegment"/> class. 
            Create a sub-segment from data read from raw file
            </summary>
            <param name="profilePoints">
            Number of profile points
            </param>
            <param name="massOffset">
            Segment mass offset
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PacketConstants">
            <summary>
            The packet constants.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PacketConstants.MaxZeroPackets">
            <summary>
            The number of zero intensity packets to restore depends 
            on the smoothing limits in Xcalibur (currently 15).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PacketHelper">
            <summary>
            Helper functions for peak packet types, such as:
            identifying profile versus centroid scans
            testing if label data exists
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PacketHelper.IsCentroidScan(ThermoFisher.CommonCore.Data.Business.SpectrumPacketType,System.UInt32)">
            <summary>
            Helper functions for identifying profile versus centroid scans
            </summary>
            <param name="packetType">Type of the packet.</param>
            <param name="packetTypeFlags">Additional flags about the packet type</param>
            <returns>True if this is a centroid scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PacketHelper.HasLabelPeaks(ThermoFisher.CommonCore.Data.Business.SpectrumPacketType)">
            <summary>
            Determines whether [has label peaks].
            </summary>
            <param name="packetType">Type of the packet.</param>
            <returns>true if the scan has label peaks</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.ChannelUvPacket">
            <summary>
            The channel UV packet. (one or more channels of UV data)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.ChannelUvPacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.ChannelUvPacket"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="scanIndex">Index of the scan.</param>
            <param name="channelNum">The channel number.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.ChannelUvPacket.Index">
            <summary>
            Gets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.ChannelUvPacket.SegmentPeaks">
            <summary>
            Gets the segmented peaks.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.ChannelUvPacket.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.ChannelUvPacket.ExpandChannelBlob(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex)">
            <summary>
            Expands the profile BLOB.
            </summary>
            <param name="scanIndex">The index.</param>
            <returns>The data for the scan</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.MsAnalogPacket">
            <summary>
            The MS analog packet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.MsAnalogPacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.MsAnalogPacket"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="scanIndex">Index of the scan.</param>
            <param name="channelNum">The channel number.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.MsAnalogPacket.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.MsAnalogPacket.SegmentPeaks">
            <summary>
            Gets the segmented peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.MsAnalogPacket.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PDAUV.MsAnalogPacket.ExpandProfileBlob(System.Double,System.Double)">
            <summary>
            Expands the profile BLOB.
            </summary>
            <param name="shortWave">The short wave.</param>
            <param name="longWave">The long wave.</param>
            <returns>Data for the scan</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt">
            <summary>
            Profile spectrum packet
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt"/> class.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="scanIndex">
            The scan index.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt.ExpandProfileBlob">
            <summary>
            Expand the profile blob.
            </summary>
            <returns>
            The expanded data
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt2">
            <summary>
            The profile spectrum packet type 2.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt2.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt2"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="index">Index to scan who's data is needed</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt2.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt2.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt2.ExpandProfileBlob">
            <summary>
            Expands the profile BLOB.
            </summary>
            <returns>The profile data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt3">
            <summary>
            The profile spectrum packet 3.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt3.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt3"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="scanIndex">Index to scan whose data is needed</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt3.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt3.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.PROFSP.ProfSpPkt3.ExpandProfileBlob">
            <summary>
            Expands the profile BLOB.
            </summary>
            <returns>The expanded data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SegmentData">
            <summary>
            The segment data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SegmentData.DataPeaks">
            <summary>
            Gets or sets the data peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SegmentData.MassRange">
            <summary>
            Gets or sets the mass range.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SegmentData.FindPeakPos(System.Double)">
            <summary>
            find peak position.
            </summary>
            <param name="mass">
            The mass.
            </param>
            <returns>
            The index of the mass
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase">
            <summary>
            Low resolution data never has noise peaks, label data etc.
            Handle this in a base object
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase.LazySegmentPeaks">
            <summary>
            Gets or sets the lazy segment peaks.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase.LabelPeaks">
            <summary>
            Gets the label peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase.DebugData">
            <summary>
            Gets the debug data for a scan.
            Always empty for simple packets
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase.ExtendedData">
            <summary>
            Gets the debug data for a scan.
            Always empty for simple packets
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase.NoiseAndBaselines">
            <summary>
            Gets the noise and baselines.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.SimplePacketBase.SegmentPeaks">
            <summary>
            Gets the segmented peaks.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.StandardAccuracyPacket">
            <summary>
            The standard accuracy packet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.StandardAccuracyPacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex,System.Int32,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.StandardAccuracyPacket"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="scanIndex">Index of the scan.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="massCalibrators">if set to <c>true</c> [include reference peaks].</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.StandardAccuracyPacket.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.StandardAccuracyPacket.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.StandardAccuracyPacket.Convert(System.Int32,System.Int32,System.Double[],System.Byte[])">
            <summary>
            Converts the specified number index structure.
            </summary>
            <param name="numIndexStruct">The number index structure.</param>
            <param name="sizeOfStandardAccuracyStruct">The size of high resolution spectrum type structure.</param>
            <param name="massCalibrators">mass calibration data</param>
            <param name="profileBlob">The profile blob.</param>
            <returns>Data for the scan</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.StandardAccuracyPacket.ExpandProfileBlob(System.Double,System.Double)">
            <summary>
            Expands the profile blob.
            </summary>
            <param name="lowMass">The low mass.</param>
            <param name="highMass">The high mass.</param>
            <returns>The converted data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags">
            <summary>
            The xcalibur display (peak labeling) flags.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelWithRetentionTime">
            <summary>
            label with retention time.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelWithScanNumber">
            <summary>
            label with scan number.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelWithArea">
            <summary>
            The label with area.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelWithBasePeak">
            <summary>
            label with base peak.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelWithHeight">
            <summary>
            label with height.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelWithIstdResp">
            <summary>
            label with internal standard response.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelWithSignalToNoise">
            <summary>
            label with signal to noise.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelWithSaturation">
            <summary>
            label with saturation.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelBoxed">
            <summary>
            label should be boxed.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.XcaliburDisplayFlags.LabelRotated">
            <summary>
            label should be rotated.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions">
            <summary>
            The peak display options (as used in PMD files).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.PeakOptionsInfo">
            <summary>
            The peak options info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.ExcessWidth">
            <summary>
            Gets a value which extends (display) width so that peak is shown "not at edge"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelWithRetentionTime">
            <summary>
            Gets a value indicating whether to label peaks with RT
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelWithScanNumber">
            <summary>
            Gets a value indicating whether to label peaks with scan number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelWithArea">
            <summary>
            Gets a value indicating whether to label peaks with area
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelWithBasePeak">
            <summary>
            Gets a value indicating whether to label peaks with base peak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelWithHeight">
            <summary>
            Gets a value indicating whether to label peaks with height
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelWithIstdResp">
            <summary>
            Gets a value indicating whether to label peaks with internal standard response
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelWithSignalToNoise">
            <summary>
            Gets a value indicating whether to label peaks with signal to noise
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelWithSaturationFlag">
            <summary>
            Gets a value indicating whether to label peaks with saturation
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelRotated">
            <summary>
            Gets a value indicating whether to rotate peak label text
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakDisplayOptions.LabelBoxed">
            <summary>
            Gets a value indicating whether to draw a box around peak labels
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity">
            <summary>
            Defines the peak purity settings, as used in an Xcalibur PMD.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.PeakPurityInfo">
            <summary>
            The peak purity info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file)
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes loaded
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.DesiredPeakCoverage">
            <summary>
            Gets the % of the detected baseline for which we want to compute PeakPurity
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.EnableDetection">
            <summary>
            Gets a value indicating whether we want to compute Peak Purity
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.LimitWavelengthRange">
            <summary>
            Gets a value indicating whether we want to use
            the enclosed wavelength range, not the total scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.MaximumWavelength">
            <summary>
            Gets the high limit of the scan over which to compute
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.MinimumWavelength">
            <summary>
            Gets the low limit of the scan over which to compute
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.PeakPurity.ScanThreshold">
            <summary>
            Gets the max of a scan must be greater than this to be included
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions">
            <summary>
            Class to import PMD file Options
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.CalibrationType">
            <summary>
            Gets a value indicating whether the standards are internal or external.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.CalibrateAs">
            <summary>
            Gets a value indicating whether calibration is performed on concentration or amount
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.VoidTime">
            <summary>
            Gets a value determining how void time is calculated.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.ReportAs">
            <summary>
            Gets a value determining whether amounts or concentrations are reported.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.ChromatographyType">
            <summary>
            Gets a value determining how chromatography was performed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.RejectOutliers">
            <summary>
            Gets a value indicating whether outliers (on a cal curve) should be rejected.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.VoidTimeValue">
            <summary>
            Gets the added time of void volume, where void time is set to "Value"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.AllowedDevPercent">
            <summary>
            Gets the permitted % deviation from an expected standard amount.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.SearchWindow">
            <summary>
            Gets the search window for the expected time of a peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.MinScansInBaseline">
            <summary>
            Gets the minimum number of expected scans in a baseline
            Genesis: MinScansInBaseline
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.InitialNoiseScale">
            <summary>
            Gets a scale factor for the noise level in chromatographic peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.BaseNoiseLimit">
            <summary>
            Gets the limit on baseline noise
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.BackgroundWidth">
            <summary>
            Gets the background width (scans)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.BaseNoiseRejectionFactor">
            <summary>
            Gets the baseline noise rejection factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.UseAltPercentRsdCalc">
            <summary>
            Gets a value indicating whether the "alternate Percent RDS calculation" should be performed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.CalLevelsManuallyChanged">
            <summary>
            Gets a value indicating whether there was a "manual change" to calibration levels.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.GetDilutionLevels">
            <summary>
            Read the table of dilution levels
            </summary>
            <returns>The dilution levels</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.GetDilutionFactors">
            <summary>
            Gets a copy of the dilution target component factors table
            </summary>
            <returns>The dilution target component factors table</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.LowIntensityCutoff">
            <summary>
            Gets the low intensity cutoff
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.OptionsVersion1">
            <summary>
            The options version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.OptionsVersion12">
            <summary>
            The options version 12.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.Options">
            <summary>
            The options.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.LevelInfo">
            <summary>
            The (calibration) level info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.LevelInfo.BaseAmount">
            <summary>
            Gets or sets the base amount.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.LevelInfo.TestPercent">
            <summary>
            Gets or sets the test percent.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.LevelInfo.LevelName">
            <summary>
            Gets or sets the level name
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.TargetComponentFactor">
            <summary>
            The target component factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.TargetComponentFactor.BaseAmount">
            <summary>
            Gets or sets the base amount.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.TargetComponentFactor.TargetComponentName">
            <summary>
            Gets or sets the target component name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodOptions.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file)
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes loaded.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport">
            <summary>
            Class to import PMD file "standard reports"
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.StandardReportInfoVersion1">
            <summary>
            The standard report info version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.StandardReportInfo">
            <summary>
            Current structure for standard report data
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file)
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.AnalysisUnknown">
            <summary>
            Gets a value indicating whether the Analysis Unknown report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.ComponentUnknown">
            <summary>
            Gets a value indicating whether the Component Unknown report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.MethodUnknown">
            <summary>
            Gets a value indicating whether the Method Unknown report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.LogUnknown">
            <summary>
            Gets a value indicating whether the Log Unknown report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.AnalysisCalibration">
            <summary>
            Gets a value indicating whether the Analysis Calibration report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.ComponentCalibration">
            <summary>
            Gets a value indicating whether the Component Calibration report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.MethodCalibration">
            <summary>
            Gets a value indicating whether the Method Calibration report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.LogCalibration">
            <summary>
            Gets a value indicating whether the Log Calibration report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.AnalysisQc">
            <summary>
            Gets a value indicating whether the Analysis QC report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.ComponentQc">
            <summary>
            Gets a value indicating whether the Component QC report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.MethodQc">
            <summary>
            Gets a value indicating whether the Method QC report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.LogQc">
            <summary>
            Gets a value indicating whether the Log QC report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.AnalysisOther">
            <summary>
            Gets a value indicating whether the Analysis Other report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.ComponentOther">
            <summary>
            Gets a value indicating whether the Component Other report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.MethodOther">
            <summary>
            Gets a value indicating whether the Method Other report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.LogOther">
            <summary>
            Gets a value indicating whether the Log Other report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.SampleInformation">
            <summary>
            Gets a value indicating whether the Sample Information report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.RunInformation">
            <summary>
            Gets a value indicating whether the Run Information report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Chromatogram">
            <summary>
            Gets a value indicating whether the Chromatogram report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.PeakComponent">
            <summary>
            Gets a value indicating whether the PeakComponent report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Tune">
            <summary>
            Gets a value indicating whether the Tune report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Experiment">
            <summary>
            Gets a value indicating whether the Experiment report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Processing">
            <summary>
            Gets a value indicating whether the Processing report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Status">
            <summary>
            Gets a value indicating whether the Status report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Error">
            <summary>
            Gets a value indicating whether the Error report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Audit">
            <summary>
            Gets a value indicating whether the Audit report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.OpenAccess">
            <summary>
            Gets a value indicating whether the Open Access report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.ChroAnalysisReport">
            <summary>
            Gets a value indicating which of the two types of chromatogram analysis report is needed.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.Survey">
            <summary>
            Gets a value indicating whether the Survey report is needed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.ProcessingMethodStandardReport.PrintSignatureLine">
            <summary>
            Gets a value indicating whether to include a signature line in reports
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program">
            <summary>
            Represent a "program" to be called (as part of reporting) from an Xcalibur PMD file
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.ProgramInfo">
            <summary>
            The program info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load data (from file).
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.ProgramName">
            <summary>
            Gets the name of the program
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Parameters">
            <summary>
            Gets parameters to the program
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Action">
            <summary>
            Gets the action of this program (such as run exe, or export)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.ExportType">
            <summary>
            Gets the file save format of the export
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Enabled">
            <summary>
            Gets a value indicating whether report is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Standards">
            <summary>
            Gets a value indicating whether report is enabled for standards
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Qcs">
            <summary>
            Gets a value indicating whether report is enabled for QCs
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Unknowns">
            <summary>
            Gets a value indicating whether report is enabled for Unknowns
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Other">
            <summary>
            Gets a value indicating whether report is enabled for Other sample types
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Program.Synchronize">
            <summary>
            Gets a value indicating whether to synchronize this action.
            If false, other programs may be run in parallel with this.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection">
            <summary>
            The qualitative peak detection settings from a processing method.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.PeakDetectionInfoVersion1">
            <summary>
            The peak detection info version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.PeakDetectionInfoVersion12">
            <summary>
            The peak detection info version 12.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.PeakDetectionInfoVersion34">
            <summary>
            The peak detection info version 34.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.PeakDetectionInfoVersion42">
            <summary>
            The peak detection info version 42.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.PeakDetectionInfoVersion43">
            <summary>
            The peak detection info version 43.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.PeakDetectionInfoVersion44">
            <summary>
            The peak detection info version 44.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.PeakDetectionInfo">
            <summary>
            The peak detection info.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.FalconEvent">
            <summary>
            The falcon event. Structure for a single event
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.InitialEvents">
            <summary>
            Gets the initial events.
            </summary>
            <returns>
            The events
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ComponentName">
            <summary>
            Gets the component name
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.MassRangesInfo">
            <summary>
            Gets or sets the mass ranges info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ScanFilter">
            <summary>
            Gets the scan filter, as an interface.
            This same data is available in string form
            in the ChromatogramSettings property
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.MassRanges2">
            <summary>
            Gets or sets the mass ranges 2.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.FalconEvents">
            <summary>
            Gets or sets the falcon events.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.EnableDetection">
            <summary>
            Gets a value indicating whether peak detection is enabled.
            Note: This property is not used in product "Xcalibur"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IMaximizingMassesAccess#MassRequired">
            <summary>
            Gets the number of masses required to maximize
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IMaximizingMassesAccess#PercentMassesFound">
            <summary>
            Gets the percentage of masses which must maximize
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IMaximizingMassesAccess#MinimumPeakSeparation">
            <summary>
            Gets the minimum peak separation (time) for Mass-Maximizing detection
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IMaximizingMassesAccess#WindowSize">
            <summary>
            Gets the number of scans in the max-masses window
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IMaximizingMassesAccess#FilterWidth">
            <summary>
            Gets the box filter width for Mass-Maximizing detection
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IMaximizingMassesAccess#BackgroundWidth">
            <summary>
            Gets the number of scans averaged for a background
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.SmoothingPoints">
            <summary>
            Gets the number of smoothing points, for background analysis
            This setting is common to all integrators
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.DisplayWindowWidth">
            <summary>
            Gets the width of display window for the peak (in seconds)
            This is for presentation only
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IPeakLimitsAccess#IsLimitPeaksEnabled">
            <summary>
            Gets a value indicating whether peak limits are enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IPeakLimitsAccess#LimitPeaks">
            <summary>
            Gets a value indicating whether to Select top peak by area or height
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IPeakLimitsAccess#NumberOfPeaks">
            <summary>
            Gets the number of "top peaks" to select
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IPeakLimitsAccess#IsRelativePeakEnabled">
            <summary>
            Gets a value indicating whether "relative peak height threshold" is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IPeakLimitsAccess#PercentLargestPeak">
            <summary>
            Gets the percent of the largest peak, which is used for filtering
            peak detection results, when "IsRelativePeakEnabled"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IPeakLimitsAccess#PercentComponentPeak">
            <summary>
            Gets a the "percent of component peak" (limit)
            Only valid when PeakPercent is set to PercentOfComponentPeak
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IPeakLimitsAccess#PeakPercent">
            <summary>
            Gets a value indicating how peak percentages are specified
            (unused in product Xcalibur)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.PeakDetectionAlgorithm">
            <summary>
            Gets the Algorithm to use (Genesis, ICIS etc.)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.MassOptions">
            <summary>
            Gets or sets the mass options.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.MassPrecision">
            <summary>
            Gets Number of decimals used in defining mass values
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.MassTolerance">
            <summary>
            Gets tolerance used for mass
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ToleranceUnits">
            <summary>
            Gets units of mass tolerance
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ConvertLcqToleranceUnits(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.OldLcqEnums.ToleranceUnit)">
            <summary>
            convert LCQ tolerance units.
            </summary>
            <param name="toConvert">
            The to convert.
            </param>
            <returns>
            The converted units
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.IntegratorEvents">
            <summary>
            Gets the (Avalon) integrator events
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#BaselineWindow">
            <summary>
            Gets the number of scans in the baseline window.
            Each scan is checked to see if it should be considered a baseline scan.
            This is determined by looking at a number of scans (BaselineWindow) before
            and after the a data point. If it is the lowest point in the group it will be
            marked as a "baseline" point.
            Range: 1 - 500
            Default: 40
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#AreaNoiseFactor">
            <summary>
            Gets the area noise factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#PeakNoiseFactor">
            <summary>
            Gets the peak noise factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#ConstrainPeakWidth">
            <summary>
            Gets a value indicating whether to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#PeakHeightPercentage">
            <summary>
            Gets the percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the ConstrainPeak is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#TailingFactor">
            <summary>
            Gets the tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#MinimumPeakWidth">
            <summary>
            Gets the minimum peak width.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#MultipletResolution">
            <summary>
            Gets the <c>multiplet</c> resolution.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#AreaScanWindow">
            <summary>
            Gets the area scan window.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#AreaTailExtension">
            <summary>
            Gets the area tail extension.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#CalculateNoiseAsRms">
            <summary>
            Gets a value indicating whether noise is calculated using an RMS method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#NoiseMethod">
            <summary>
            Gets a value which indicates how the ICIS peak detector determines which signals are noise.
            The selected points can  determine a noise level, or be fed into an RMS calculator,
            depending on the RMS setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.IcisSettings">
            <summary>
            Gets the settings for the ICIS integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ConstrainPeak">
            <summary>
            Gets a value indicating whether a peak's width (the tail) must be constrained.
            This flag allows you to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ExpectedPeakWidth">
            <summary>
            Gets the width of a typical peak in seconds.
            This controls the minimum width that a peak is expected to have
            if valley detection is enabled.
            Integrator converts this to expectedPeakHalfWidth (minutes) by dividing by 120.
            With valley detection enabled,
            any valley points nearer than the expectedPeakHalfWidth (which is [expected width]/2)
            to the top of the peak are ignored.
            If a valley point is found outside the expected peak width,
            Genesis terminates the peak at that point.
            Genesis always terminates a peak when the signal reaches the baseline,
            independent of the value set for the expectedPeakHalfWidth.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#PeakHeightPercent">
            <summary>
            Gets a constraint on peak height.
            The percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the <c>ConstrainPeak</c> is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#SignalToNoiseThreshold">
            <summary>
            Gets the minimum acceptable signal to noise of a peak.
            Genesis ignores all chromatogram peaks that have signal-to-noise values
            that are less than the S/N Threshold value
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#TailingFactor">
            <summary>
            Gets the peak tailing factor.
            This controls how Genesis integrates the tail of a peak.
            This factor is the maximum ratio of the trailing edge to the leading side of a constrained peak.
            This applies only when the <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.ConstrainPeak"/> is true.
            The valid range is 0.5 through 9.0. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ValleyDetection">
            <summary>
            Gets a value indicating whether valley detection is performed.
            This parameter must be set to true when performing base to base integration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#PeakSignalToNoiseRatioCutoff">
            <summary>
            Gets the Peak Signal ToNoise Ratio Cutoff.
            The peak edge is set to values below this defined S/N. 
            This test assumes an edge of a peak is found when the baseline adjusted height of the edge is less than
            the ratio of the baseline adjusted apex height and the peak S/N cutoff ratio. 
            If the S/N at the apex is 500 and the peak S/N cutoff value is 200,
            Genesis defines the right and left edges of the peak when the S/N reaches a value less than 200.
            Range: 50.0 to 10000.0. 
            Technical equation:<c>if height &lt; (1/PeakSignalToNoiseRatioCutoff)*height(apex) => valley here</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ValleyThreshold">
            <summary>
            Gets the multiplier of the valley bottom
            that the peak trace can rise above a baseline (before or after the peak). 
            If the trace exceeds ValleyThreshold,
            Genesis applies valley detection peak integration criteria. 
            This method drops a vertical line from the apex of the valley between unresolved
            peaks to the baseline.
            The intersection of the vertical line and the baseline defines the end of the first
            peak and the beginning of the second peak. 
            This test is applied to both the left and right edges of the peak. 
            The ValleyThreshold criteria is useful for integrating peaks with long tails.
            Useful range: 1.001 to 1.5
            Note: Appears on product UI converted from factor to percentage as "Rise percentage".
            For example: 1.1 = 10%
            Code tests similar to the following:<code>
            if ((currentSignal-baseline) > ((valleyBottom-baseline) * ValleyThreshold))
            {
                side of peak has bottomed out, and risen above minimum
            }
            </code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ValleyDepth">
            <summary>
            Gets or the S/N range is 1.0 to 100.0. for valley detection.
            Technical equation:<c>height(here +/- VALLEY_WIDTH) > ValleyDepth*SNR+height(here) => valley here </c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#CalculateNoiseAsRms">
            <summary>
            Gets a value indicating whether to enable RMS noise calculation.
            If not set, noise is calculated peak to peak.
            It is set by default.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#BaselineNoiseLimit">
            <summary>
            Gets a noise limit, where the code stops attempting to find a better baseline.
            controls how the baseline is drawn in the noise data.
            The higher the baseline noise tolerance value,
            the higher the baseline is drawn through the noise data.
            The valid range is 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#MinScansInBaseline">
            <summary>
            Gets the minimum number of scans that Genesis uses to calculate a baseline.
            A larger number includes more data in determining an averaged baseline.
            The valid range is 2 to 100.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#BaselineNoiseRejectionFactor">
            <summary>
            Gets a factor which controls the width of the RMS noise band above and below the peak detection baseline
            and is applied to the raw RMS noise values to raise the effective RMS noise during peak detection.
            The left and right peak boundaries are assigned above the noise and, therefore,
            closer to the peak apex value in minutes. 
            This action effectively raises the peak integration baseline above the RMS noise level. 
            Range: 0.1 to 10.0.
            Default: 2.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#BackgroundUpdateRate">
            <summary>
            Gets the number of minutes between background scan recalculations.
            Baseline is refitted each time this interval elapses. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#BaseSignalToNoiseRatio">
            <summary>
            Gets a limit for the "baseline signal to noise ratio".
            A peak is considered ended if the following condition is met:
            <c>height &lt;= (BaseNoise * BaseSignalToNoiseRatio))</c>
            Where BaseNoise is the calculated noise on the fitted baseline,
            and height is the height above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#PercentLargestPeak">
            <summary>
            Gets the minimum acceptable percentage of the largest peak.
            Do not return peaks which have a height less than this % of the highest peak above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#FilterByRelativePeakHeight">
            <summary>
            Gets a value indicating whether filtering of peaks is by relative signal height
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.Options">
            <summary>
            Gets or sets the options.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.GenesisSettings">
            <summary>
            Gets the settings for the Genesis integrator
            Note: This property is under review.
            May return an alternative interface
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ChromatogramSettings">
            <summary>
            Gets the settings for creating a chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#Filter">
            <summary>
            Gets the scan filter.
            This determines which scans are included in the chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#ChroSettings">
            <summary>
            Gets the chromatogram settings.
            This defines how data for a chromatogram point is constructed from a scan.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ConvertRanges(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct[])">
            <summary>
            Convert mass ranges.
            </summary>
            <param name="massRangesInfo">
            The mass ranges info.
            </param>
            <returns>
            The converted ranges.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#ChroSettings2">
            <summary>
            Gets the chromatogram settings
            When there is a trace operator set,
            This defines how data for a chromatogram point is constructed from a scan for the chromatogram
            to be added or subtracted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#Instrument">
            <summary>
            Gets the device type.
            This defines which data stream within the raw file is used. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#TraceOperator">
            <summary>
            Gets the trace operator.
            If the operator is not "None" then a second chromatogram can be added to or subtracted from the first.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.FilterString">
            <summary>
            Gets or sets the filter string.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ManualNoise">
            <summary>
            Gets the manual noise range settings
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IManualNoiseAccess#UseManualNoiseRegion">
            <summary>
            Gets a value indicating whether manual noise should be used
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IManualNoiseAccess#ManualNoiseRtRange">
            <summary>
            Gets the manual noise region (time range in minutes)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.MaximizingMasses">
            <summary>
            Gets settings for the maximizing masses algorithm
            Note: This algorithm is not used by product "Xcalibur"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.LimitPeakSettings">
            <summary>
            Gets settings to limit (filter) the list of returned peaks
            after integration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.RetentionTimeWindow">
            <summary>
            Gets the time range, over which qualitative processing is done.
            Only peaks detected within this range are processed further
            (for example, library searched)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.ThermoFisher#CommonCore#Data#Interfaces#IManualNoiseAccess#ManualNoiseIntensityRange">
            <summary>
            Gets the manual noise region (intensity range)
            These values are not used by Xcalibur
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QualitativePeakDetection.InstrumentIndex">
            <inheritdoc />
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent">
            <summary>
            read from file, and give read access to all settings in "component" in a PMD file.
            Organizes the many fields into groups (interfaces)
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.XcaliburComponentType">
            <summary>
            The xcalibur component type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.XcaliburComponentType.AllTypes">
            <summary>
            All types.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.XcaliburComponentType.TargetCompound">
            <summary>
            Target compound.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.XcaliburComponentType.InternalStandard">
            <summary>
            Internal standard.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.XcaliburComponentType.Undefined">
            <summary>
            Undefined. Component not defined
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.XcaliburComponentType.RtReference">
            <summary>
            The retention time reference.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.XcaliburComponentType.Surrogate">
            <summary>
            Surrogate component.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ResponseIndex">
            <summary>
            The response index. Determines if peak height or area is
            used for the peak's response.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ResponseIndex.Area">
            <summary>
            Use area.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ResponseIndex.Height">
            <summary>
            Use height.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.OriginIndex">
            <summary>
            The origin index. Defines how calibration curve origin is used.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.OriginIndex.IgnoreOrigin">
            <summary>
            Ignore the origin.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.OriginIndex.ForceOrigin">
            <summary>
            Force through origin.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.OriginIndex.IncludeOrigin">
            <summary>
            Include (extra point) at origin.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex">
            <summary>
            The calibration curve regression index.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex.FirstOrder">
            <summary>
            Use first order fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex.SecondOrder">
            <summary>
            Use second order fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex.FirstOrderLogLog">
            <summary>
            Use first order log-log fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex.SecondOrderLogLog">
            <summary>
            Use second order log-log fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex.AverageRf">
            <summary>
            Use average response factor fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex.PointToPoint">
            <summary>
            Use point to point fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex.CubicSpline">
            <summary>
            Use cubic spline fit.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CurveIndex.Loess">
            <summary>
            locally weighted regression
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ComponentInfo">
            <summary>
            The component info.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ComponentInfoVersion5">
            <summary>
            The component info version 5.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ComponentInfoVersion4">
            <summary>
            The component info version 4.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ComponentInfoVersion3">
            <summary>
            The component info version 3.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ComponentInfoVersion2">
            <summary>
            The component info version 2.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ComponentInfoVersion1">
            <summary>
            The component info version 1.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.MassIntensityPair">
            <summary>
            The mass intensity pair.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.IntegratorEvents">
            <summary>
            Gets the (Avalon) integrator events
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ToleranceSettings">
            <summary>
            Gets mass tolerance for this component
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            load from file
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The offset into view after load
            </returns>
            <exception cref="T:System.NotSupportedException">Method using Surrogate
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ReadCalibrationAndQcLevels(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64)">
            <summary>
            read calibration and qc levels.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <param name="startPos">
            The start position.
            </param>
            <returns>
            The position after reading
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.FalconEvents">
            <summary>
            Gets or sets the falcon events.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.IstdUnits">
            <summary>
            Gets or sets the internal standard units.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.AdjustUsing">
            <summary>
            Gets the retention time reference component.
            Adjust the retention time, using this component as a reference
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.Name">
            <summary>
            Gets the name of this component
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.FilterString">
            <summary>
            Gets or sets the filter string.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ScanFilter">
            <summary>
            Gets or sets the scan filter.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IManualNoiseAccess#UseManualNoiseRegion">
            <summary>
            Gets a value indicating whether manual noise should be used
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IManualNoiseAccess#ManualNoiseRtRange">
            <summary>
            Gets the manual noise region (time range in minutes)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IManualNoiseAccess#ManualNoiseIntensityRange">
            <summary>
            Gets the manual noise region (intensity range)
            These values are not used by Xcalibur
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#BaselineWindow">
            <summary>
            Gets the number of scans in the baseline window.
            Each scan is checked to see if it should be considered a baseline scan.
            This is determined by looking at a number of scans (BaselineWindow) before
            and after the a data point. If it is the lowest point in the group it will be
            marked as a "baseline" point.
            Range: 1 - 500
            Default: 40
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#AreaNoiseFactor">
            <summary>
            Gets a noise level multiplier.
            This determines the peak edge after the location of the possible peak,
            allowing the peak to narrow or broaden without affecting the baseline. 
            Range: 1 - 500
            Default multiplier: 5
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#PeakNoiseFactor">
            <summary>
            Gets a noise level multiplier (a minimum S/N ratio).
            This determines the potential peak signal threshold. 
            Range: 1 - 1000
            Default multiplier: 10
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#ConstrainPeakWidth">
            <summary>
            Gets a value indicating whether to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#PeakHeightPercentage">
            <summary>
            Gets the percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the ConstrainPeak is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#TailingFactor">
            <summary>
            Gets the Tailing Factor.
            This controls how Genesis integrates the tail of a peak.
            This factor is the maximum ratio of the trailing edge to the leading side of a constrained peak.
            This applies only when the ConstrainPeak is true.
            The valid range is 0.5 through 9.0. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#MinimumPeakWidth">
            <summary>
            Gets the minimum number of scans required in a peak. 
            Range: 0 to 100. 
            Default: 3. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#MultipletResolution">
            <summary>
             Gets the minimum separation in scans between the apexes of two potential peaks.
             This is a criterion to determine if two peaks are resolved.
             Enter a larger number in a noisy environment when the signal is bouncing around.
             Range: 1 to 500.
             Default: 10 scans. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#AreaScanWindow">
            <summary>
            Gets the number of scans on each side of the peak apex to be allowed. 
            Range: 0 to 100.
            Default: 0 scans.
            0 specifies that all scans from peak-start to peak-end are to be included in the area integration.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#AreaTailExtension">
            <summary>
            Gets the number of scans past the peak endpoint to use in averaging the intensity.
            Range: 0 to 100. 
            Default: 5 scans.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#CalculateNoiseAsRms">
            <summary>
            Gets a value indicating whether noise is calculated using an RMS method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IIcisSettingsAccess#NoiseMethod">
            <summary>
            Gets an value which indicates how the ICIS peak detector determines which signals are noise.
            The selected points can  determine a noise level, or be fed into an RMS calculator,
            depending on the RMS setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.IcisSettings">
            <summary>
            Gets settings for the ICIS peak integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ConstrainPeak">
            <summary>
            Gets a value indicating whether a peak's width (the tail) must be constrained.
            This flag allows you to constrain the peak width of a detected peak (remove tailing)
            width is then restricted by specifying a peak height threshold and a tailing factor.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ExpectedPeakWidth">
            <summary>
            Gets the width of a typical peak in seconds.
            This controls the minimum width that a peak is expected to have
            if valley detection is enabled.
            Integrator converts this to expectedPeakHalfWidth (minutes) by dividing by 120.
            With valley detection enabled,
            any valley points nearer than the expectedPeakHalfWidth (which is [expected width]/2)
            to the top of the peak are ignored.
            If a valley point is found outside the expected peak width,
            Genesis terminates the peak at that point.
            Genesis always terminates a peak when the signal reaches the baseline,
            independent of the value set for the expectedPeakHalfWidth.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#PeakHeightPercent">
            <summary>
            Gets a constraint on peak height.
            The percent of the total peak height (100%) that a signal needs to be above the baseline
            before integration is turned on or off.
            This applies only when the <c>ConstrainPeak</c> is true.
            The valid range is 0.0 to 100.0%.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#SignalToNoiseThreshold">
            <summary>
            Gets the minimum acceptable signal to noise of a peak.
            Genesis ignores all chromatogram peaks that have signal-to-noise values
            that are less than the S/N Threshold value
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#TailingFactor">
            <summary>
            Gets the peak tailing factor.
            This controls how Genesis integrates the tail of a peak.
            This factor is the maximum ratio of the trailing edge to the leading side of a constrained peak.
            This applies only when the <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IGenesisRawSettingsAccess.ConstrainPeak"/> is true.
            The valid range is 0.5 through 9.0. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ValleyDetection">
            <summary>
            Gets a value indicating whether valley detection is performed.
            This parameter must be set to true when performing base to base integration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#PeakSignalToNoiseRatioCutoff">
            <summary>
            Gets the Peak Signal ToNoise Ratio Cutoff.
            The peak edge is set to values below this defined S/N. 
            This test assumes an edge of a peak is found when the baseline adjusted height of the edge is less than
            the ratio of the baseline adjusted apex height and the peak S/N cutoff ratio. 
            If the S/N at the apex is 500 and the peak S/N cutoff value is 200,
            Genesis defines the right and left edges of the peak when the S/N reaches a value less than 200.
            Range: 50.0 to 10000.0. 
            Technical equation:<c>if height &lt; (1/PeakSignalToNoiseRatioCutoff)*height(apex) => valley here</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ValleyThreshold">
            <summary>
            Gets the multiplier of the valley bottom
            that the peak trace can rise above a baseline (before or after the peak). 
            If the trace exceeds ValleyThreshold,
            Genesis applies valley detection peak integration criteria. 
            This method drops a vertical line from the apex of the valley between unresolved
            peaks to the baseline.
            The intersection of the vertical line and the baseline defines the end of the first
            peak and the beginning of the second peak. 
            This test is applied to both the left and right edges of the peak. 
            The ValleyThreshold criteria is useful for integrating peaks with long tails.
            Useful range: 1.001 to 1.5
            Note: Appears on product UI converted from factor to percentage as "Rise percentage".
            For example: 1.1 = 10%
            Code tests similar to the following:<code>
            if ((currentSignal-baseline) > ((valleyBottom-baseline) * ValleyThreshold))
            {
                side of peak has bottomed out, and risen above minimum
            }
            </code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#ValleyDepth">
            <summary>
            Gets or the S/N range is 1.0 to 100.0. for valley detection.
            Technical equation:<c>height(here +/- VALLEY_WIDTH) > ValleyDepth*SNR+height(here) => valley here </c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#CalculateNoiseAsRms">
            <summary>
            Gets a value indicating whether to enable RMS noise calculation.
            If not set, noise is calculated peak to peak.
            It is set by default.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#BaselineNoiseLimit">
            <summary>
            Gets a noise limit, where the code stops attempting to find a better baseline.
            controls how the baseline is drawn in the noise data.
            The higher the baseline noise tolerance value,
            the higher the baseline is drawn through the noise data.
            The valid range is 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#MinScansInBaseline">
            <summary>
            Gets the minimum number of scans that Genesis uses to calculate a baseline.
            A larger number includes more data in determining an averaged baseline.
            The valid range is 2 to 100.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#BaselineNoiseRejectionFactor">
            <summary>
            Gets a factor which controls the width of the RMS noise band above and below the peak detection baseline
            and is applied to the raw RMS noise values to raise the effective RMS noise during peak detection.
            The left and right peak boundaries are assigned above the noise and, therefore,
            closer to the peak apex value in minutes. 
            This action effectively raises the peak integration baseline above the RMS noise level. 
            Range: 0.1 to 10.0.
            Default: 2.0.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#BackgroundUpdateRate">
            <summary>
            Gets the number of minutes between background scan recalculations.
            Baseline is refitted each time this interval elapses. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#BaseSignalToNoiseRatio">
            <summary>
            Gets a limit for the "baseline signal to noise ratio".
            A peak is considered ended if the following condition is met:
            <c>height &lt;= (BaseNoise * BaseSignalToNoiseRatio))</c>
            Where BaseNoise is the calculated noise on the fitted baseline,
            and height is the height above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#PercentLargestPeak">
            <summary>
            Gets the minimum acceptable percentage of the largest peak.
            Do not return peaks which have a height less than this % of the highest peak above baseline.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IGenesisRawSettingsAccess#FilterByRelativePeakHeight">
            <summary>
            Gets a value indicating whether filtering of peaks is by relative signal height
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.GenesisSettings">
            <summary>
            Gets settings for the genesis peak integrator
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakLocationSettingsAccess#AdjustExpectedRT">
            <summary>
            Gets a value indicating whether the retention time should be adjusted based on a reference peak.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakLocationSettingsAccess#UserEnteredRT">
            <summary>
            Gets the expected time, as in the method (before any adjustments)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakLocationSettingsAccess#LocateMethod">
            <summary>
            Gets a value which determine how a single peak is found from the list of
            returned peaks from integrating the chromatogram.
            For example: Highest peak in time window.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakLocationSettingsAccess#SearchWindow">
            <summary>
            Gets the window, centered around the peak, in minutes.
            The located peak must be within a window of expected +/- width.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakLocationSettingsAccess#BaselineAndNoiseWindow">
            <summary>
            Gets the baseline and noise window.
            This setting is used to restrict the chromatogram.
            Only scans within the range "adjusted expected RT" +/- Window are processed.
            For example: a 1 minute window setting implies 2 minutes of data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakLocationSettingsAccess#FindSettings">
            <summary>
            Gets the settings for finding a peak based on spectral fit
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakLocationSettingsAccess#SignalToNoiseThreshold">
            <summary>
            Gets the signal to noise rejection parameter for peaks
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IFindSettingsAccess#ForwardThreshold">
            <summary>
            Gets the forward threshold for find algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IFindSettingsAccess#MatchThreshold">
            <summary>
            Gets the match threshold for find algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IFindSettingsAccess#ReverseThreshold">
            <summary>
            Gets the reverse threshold for find algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.SpecPoints">
            <summary>
            Gets or sets the spec points.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IFindSettingsAccess#SpecPoints">
            <summary>
            Gets the spec points.
            </summary>
            <value>The spec points.</value>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IFindSettingsAccess#GetFindSpectrum">
            <summary>
            Get a copy of the find spectrum
            </summary>
            <returns>
            The spectrum to find
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#Filter">
            <summary>
            Gets the scan filter.
            This determines which scans are included in the chromatogram.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#ChroSettings">
            <summary>
            Gets the chromatogram settings.
            This defines how data for a chromatogram point is constructed from a scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#ChroSettings2">
            <summary>
            Gets the chromatogram settings
            When there is a trace operator set,
            This defines how data for a chromatogram point is constructed from a scan for the chromatogram
            to be added or subtracted.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ConvertRanges(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct[])">
            <summary>
            Convert mass ranges.
            </summary>
            <param name="massRangesInfo">
            The mass ranges info.
            </param>
            <returns>
            The range array.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#Instrument">
            <summary>
            Gets the device type.
            This defines which data stream within the raw file is used. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakChromatogramSettingsAccess#TraceOperator">
            <summary>
            Gets the trace operator.
            If the operator is not "None" then a second chromatogram can be added to or subtracted from the first.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.MassRangesInfo">
            <summary>
            Gets or sets the mass ranges info.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.MassRangesInfo2">
            <summary>
            Gets or sets the mass ranges info 2.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CalibrationUnits">
            <summary>
            Gets or sets the calibration units.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.IstdReference">
            <summary>
            Gets or sets the internal standard reference.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CalibrationLevels">
            <summary>
            Gets or sets the calibration levels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.QcLevels">
            <summary>
            Gets or sets the qc levels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.Keys">
            <summary>
            Gets (custom) keys about this component
            This is treated as a comment field.
            Not used for any "built-in" calculations
            but may be used to annotate reports etc.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburComponentAccess#ManualNoiseSettings">
            <summary>
            Gets the settings for a manual noise region
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburComponentAccess#LocationSettings">
            <summary>
            Gets settings for peak location (expected retention time)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburComponentAccess#FindSettings">
            <summary>
            Gets settings for the spectral find algorithm.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburComponentAccess#ChromatogramSettings">
            <summary>
            Gets settings for creating the component chromatogram
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CalibrationSettings">
            <summary>
            Gets component calibration settings (including level tables)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.SystemSuitabilitySettings">
            <summary>
            Gets settings for the system suitability algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.PeakPuritySettings">
            <summary>
            Gets settings for the PDA peak purity algorithm
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#CalibrationLevels">
            <summary>
            Gets the table of calibration levels
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#QcLevels">
            <summary>
            Gets the table of QC levels
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#CalibrationCurve">
            <summary>
            Gets the calibration curve fitting method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#Weighting">
            <summary>
            Gets the weighting for calibration curve
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#Origin">
            <summary>
            Gets the calibration curve origin mode
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#Response">
            <summary>
            Gets a value which determines how the response should be measured (using either peak height or peak area).
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#Units">
            <summary>
            Gets the Unit for calibration
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#InternalStandard">
            <summary>
            Gets the name of the internal standard for this component
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#ContributionOfISTDToTarget">
            <summary>
            Gets the isotopic contribution of the internal standard to the target compound
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ITargetCompoundSettingsAccess#ContributionOfTargetToISTD">
            <summary>
            Gets the isotopic contribution of the target compound to the internal standard
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#EnableResolutionChecks">
            <summary>
            Gets a value indicating whether resolution checks will be performed
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#ResolutionThreshold">
            <summary>
            Gets the Resolution Threshold.
            The threshold value determines if a peak's resolution or ok or not.
            The default value is 90%.
            Resolution is defined as the ratio:
            <para>100 × V/P</para>
            where:
            <para>V = depth of the Valley: the difference in intensity from the chromatogram at the apex of the target peak
            to the lowest point in the valley between the target peak and a neighboring peak</para>
            <para>P = Peak height: the height of the target peak, above the peak's baseline</para>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#EnableSymmetryChecks">
            <summary>
            Gets a value indicating whether peak symmetry checks are to be performed.
            Symmetry is determined at a specified peak height
            and is a measure of how even-sided a peak is
            about a perpendicular dropped from its apex.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#SymmetryPeakHeight">
            <summary>
            Gets the Peak Height at which symmetry is measured.
            The default value is 50%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#SymmetryThreshold">
            <summary>
            Gets the Symmetry Threshold.
            The SOP defined Symmetry Threshold is > 70% at 50% peak height.
            This represents a realistic practical tolerance for capillary GC data.
            You can enter any value within the range 0% to 100%.
            The default value is 80% at 50% peak height.
            The algorithm determines symmetry at the <c>SymmetryPeakHeight</c>
            For the purposes of the test, a peak is considered symmetrical if:
            (Lesser of L and R) × 100 / (Greater of L and R) > Symmetry Threshold %
            where:
            <para>L = the distance from the left side of the peak to
            the perpendicular dropped from the peak apex</para>
            <para>R = the distance from the right side of the peak to
            the perpendicular dropped from the peak apex</para>
            Measurements of L and R are taken from the raw file without smoothing.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#EnablePeakClassificationChecks">
            <summary>
            Gets a value indicating whether peak classification checks are to be run
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#PeakWidthPeakHeight">
            <summary>
            Gets the Peak Height at which the suitability calculator tests the width of target peaks.
            You can enter any value within the range 0% to 100%. The default value is 50%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#MinPeakWidth">
            <summary>
            Gets the minimum peak width, at the specified peak height, for the peak width suitability test.
            The default value is 1.8. You can set any value in the range 0 to 30 seconds. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#MaxPeakWidth">
            <summary>
            Gets the maximum peak width, at the specified peak height, for the peak width suitability test.
            The default value is 3.6. You can set any value in the range 0 to 30 seconds. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#TailingPeakHeight">
            <summary>
            Gets the Peak Height at which the algorithm measures the tailing of target peaks.
            The default SOP value is 10%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#TailingFailureThreshold">
            <summary>
             Gets the failure threshold for the tailing suitability test.
             The default SOP defined failure threshold is %lt 2 at 10% peak height. The valid range is 1 to 50.
             Tailing is calculated at the value defined in <see cref="P:ThermoFisher.CommonCore.Data.ISystemSuitabilitySettingsAccess.TailingPeakHeight"/>.
             For the purposes of the test, a peak is considered to be excessively tailed if:
             <code>
             R / L > Failure Threshold %
             where:
             L = the distance from the left side of the peak to the perpendicular dropped from the peak apex
             R = the distance from the right side of the peak to the perpendicular dropped from the peak apex
             Measurements of L and R are taken from the raw file without smoothing.</code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#ColumnOverloadPeakHeight">
            <summary>
            Gets the Peak Height at which the algorithm measures column overloading.
            The default SOP value is 50%. You can enter any value within the range 0% to 100%. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#ColumnOverloadFailureThreshold">
            <summary>
            Gets the failure threshold value for the column overload suitability test.
            The default SOP defined threshold is 1.5 at 50% peak height. The valid range is 1 to 20.
            A peak is considered to be overloaded if:
            <code>
            L / R > Failure Threshold %
            where:
            L = the distance from the left side of the peak to the perpendicular dropped from the peak apex
            R = the distance from the right side of the peak to the perpendicular dropped from the peak apex
            Measurements of L and R are taken from the raw file without smoothing. </code>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#PeakWidthsForNoiseDetection">
            <summary>
            Gets the Number of Peak Widths for Noise Detection testing parameter for
            the baseline clipping system suitability test.
            The default value is 1.0 and the permitted range is 0.1 to 10.
            A peak is considered to be baseline clipped if there is no signal
            (zero intensity) on either side of the peak within the specified
            number of peak widths. The range is truncated to the quantitation window
            if the specified number of peak widths extends beyond the window’s edge.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#ISystemSuitabilitySettingsAccess#SignalToNoiseRatio">
            <summary>
            Gets the threshold for system suitability testing 
            of the signal-to-noise ratio. The default value is 20 and the
            permitted range is 1 to 500. The algorithm calculates the signal-to-noise ratio 
            within the quantitation window using only baseline signal.
            Any extraneous, minor, detected peaks are excluded from the calculation. 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakPuritySettingsAccess#DesiredPeakCoverage">
            <summary>
            Gets the % of the detected baseline for which we want to compute PeakPurity
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakPuritySettingsAccess#EnableDetection">
            <summary>
            Gets a value indicating whether we want to compute Peak Purity
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakPuritySettingsAccess#LimitWavelengthRange">
            <summary>
            Gets a value indicating whether we want to use
            the enclosed wavelength range, not the total scan
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakPuritySettingsAccess#MaximumWavelength">
            <summary>
            Gets the high limit of the scan over which to compute
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakPuritySettingsAccess#MinimumWavelength">
            <summary>
            Gets the low limit of the scan over which to compute
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#IPeakPuritySettingsAccess#ScanThreshold">
            <summary>
            Gets the max of a scan must be greater than this to be included
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.Options">
            <summary>
            Gets or sets the options.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.PeakDetection">
            <summary>
            Gets or sets the peak detection.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IInternalStandardSettingsAccess#ISTDAmount">
            <summary>
            Gets the amount of internal standard. Not used in any calculation yet.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IInternalStandardSettingsAccess#ISTDUnits">
            <summary>
            Gets the units for the internal standard
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationSettingsAccess#TargetCompoundSettings">
            <summary>
            Gets the target compound settings.
            </summary>
            <value>The target compound settings.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationSettingsAccess#InternalStandardSettings">
            <summary>
            Gets the internal standard settings.
            </summary>
            <value>The internal standard settings.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationSettingsAccess#ComponentType">
            <summary>
            Gets a value which determines if this component is a target compound or an internal standard
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.FitThreshold">
            <summary>
            Gets "Fit Threshold" defined as 
            Min fit threshold (0-1.0) for detection by spectral fit.
            This value is believed to be not currently used in Xcalibur code (may be for an older fit algorithm)?
            Returned for completeness only.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.CalibrationAndQuantificationThresholdLimits">
            <summary>
            Gets the calibration and quantification data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.DetectionThresholdLimits">
            <summary>
            Gets the detection threshold limits.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.UseAsRtReference">
            <summary>
            Gets a value indicating whether this is used as a RT Reference for another component.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.SmoothingPoints">
            <summary>
            Gets the number of points to be averaged in peak detection and integration.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.DisplayWindowWidth">
            <summary>
            Gets the suggested view width for displaying the chromatogram (seconds)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.PeakDetectionAlgorithm">
            <summary>
            Gets a value which determines which peak detector to use with the component
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationAndQuantificationThresholdLimitsAccess#CarryoverLimitThreshold">
            <summary>
            Gets the carry over limit threshold.
            </summary>
            <value>The carry over limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationAndQuantificationThresholdLimitsAccess#DetectionLimitThreshold">
            <summary>
            Gets the detection limit threshold.
            </summary>
            <value>The detection limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationAndQuantificationThresholdLimitsAccess#LinearityLimitThreshold">
            <summary>
            Gets the linearity limit threshold.
            </summary>
            <value>The linearity limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationAndQuantificationThresholdLimitsAccess#QuantitationLimitThreshold">
            <summary>
            Gets the quantitation limit threshold.
            </summary>
            <value>The quantitation limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationAndQuantificationThresholdLimitsAccess#RSquaredThreshold">
            <summary>
            Gets the R squared threshold.
            </summary>
            <value>The R squared threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#ICalibrationAndQuantificationThresholdLimitsAccess#LimitOfReporting">
            <summary>
            Gets the limit of reporting
            A value should only be reported if it is >= the limit of reporting.
            This value is used to calculate the ReportingLimitPassed flag.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IDetectionThresholdLimitsAccess#AreaThresholdLimit">
            <summary>
            Gets the Area limit threshold.
            </summary>
            <value>The Area limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IDetectionThresholdLimitsAccess#HeightThresholdLimit">
            <summary>
            Gets the height limit threshold.
            </summary>
            <value>The height limit threshold.</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburIonRatioTestSettingsAccess#Enabled">
            <summary>
            Gets a value indicating whether IRC tests are enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburIonRatioTestSettingsAccess#Standard">
            <summary>
            Gets the "standard" used 
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburIonRatioTestSettingsAccess#Method">
            <summary>
            Gets the Ion Ratio method
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburIonRatioTestSettingsAccess#WindowType">
            <summary>
            Gets the ion ratio window type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburIonRatioTestSettingsAccess#QualifierIonCoelution">
            <summary>
            Gets the qualifier ion co-elution limits (minutes)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.ThermoFisher#CommonCore#Data#Interfaces#IXcaliburIonRatioTestSettingsAccess#IonRatioConfirmationTests">
            <summary>
            Gets the table of masses for ion ratio testing
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.IonRatioConfirmation">
            <summary>
            Gets the settings for Ion Ration Confirmation
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.QuanComponent.InstrumentIndex">
            <inheritdoc />
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo">
            <summary>
                The raw file info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.#ctor(System.Guid,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo"/> class.
            </summary>
            <param name="loaderId">Unique id for this instance</param>
            <param name="fileName">The file path.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="inAcquisition">True if in the process of acquiring raw file</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.BlobSize">
            <summary>
                Gets the blob size.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.BlobStart">
            <summary>
                Gets the blob start.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.ComputerName">
            <summary>
                Gets or sets the computer name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.HasExpMethod">
            <summary>
                Gets a value indicating whether has experiment method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.HeaderFileMapName">
            <summary>
            Gets the header file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.IsInAcquisition">
            <summary>
                Gets or sets a value indicating whether is in acquisition.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.MsDataOffset">
            <summary>
                Gets or sets the MS data offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.NextAvailableControllerIndex">
            <summary>
                Gets the next available controller index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.NumberOfVirtualControllers">
            <summary>
                Gets the number of virtual controllers.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.RawFileInfoStruct">
            <summary>
            Gets or sets the raw file info struct.
            Setting only needed during raw file save. Refreshes controller data on set.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.TimeStamp">
            <summary>
                Gets the time stamp.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.UserLabels">
            <summary>
                Gets the user labels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.VirtualControllers">
            <summary>
                Gets the virtual controller data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Loads the raw file info structure from the mapped memory raw file using the viewer.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.NumberOfVirtualControllersOfType(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes)">
            <summary>
            The number of virtual controllers of type.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.TryReload(System.Boolean)">
            <summary>
            try to reload, without remapping.
            </summary>
            <param name="thorwError">
            throw exception on Error (else return false)
            </param>
            <returns>
            true if can reload
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Bad data loaded
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.UpdateVirtualController(System.Int32,System.Int64,System.Int64,System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes)">
            <summary>
            Updates the virtual controller.
            </summary>
            <param name="numVirControllers">The number of virtual controllers.</param>
            <param name="virOffset">The virtual data offset</param>
            <param name="offset">The offset.</param>
            <param name="virDeviceIndex">Index of the virtual device.</param>
            <param name="virDeviceType">Type of the virtual device.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.Save(System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the RawFileInfo to the provided binary writer.
            </summary>
            <param name="binaryWriter">Writer to use to save</param>
            <param name="errors">Any error information that occurred</param>
            <returns>True is successful</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.PopulateVirtualControllerData">
            <summary>
                The populate virtual controller data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.RawFileInfo.ValidateVirtualControllerData">
            <summary>
            Validates the virtual controller data.
            </summary>
            <returns>True if valid</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate">
            <summary>
            A calibration replicate, as read from an Xcalibur PMD file.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate.Replicateinfo">
            <summary>
            The replicate info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate.ResultFileName">
            <summary>
            Gets or sets the result file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate.ThermoFisher#CommonCore#Data#IReplicateDataAccess#Amount">
            <summary>
            Gets the amount of target compound in calibration or QC standard.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate.ThermoFisher#CommonCore#Data#IReplicateDataAccess#HeightRatio">
            <summary>
            Gets the Ratio of target peak height to ISTD peak height in result file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate.ThermoFisher#CommonCore#Data#IReplicateDataAccess#AreaRatio">
            <summary>
            Gets the Ratio of target peak area to ISTD peak area in result file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate.ThermoFisher#CommonCore#Data#IReplicateDataAccess#ExcludeFromCalibration">
            <summary>
            Gets a value indicating whether to exclude this data point from calibration curve.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Replicate.ThermoFisher#CommonCore#Data#IReplicateDataAccess#File">
            <summary>
            Gets the raw file name for the replicate
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport">
            <summary>
            The sample report, from PMD files.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.ReportTemplateInfo">
            <summary>
            The report template info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.ReportName">
            <summary>
            Gets the name of the report
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.Enabled">
            <summary>
            Gets a value indicating whether report is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.Standards">
            <summary>
            Gets a value indicating whether report is enabled for standards
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.Qcs">
            <summary>
            Gets a value indicating whether report is enabled for QCs
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.Unknowns">
            <summary>
            Gets a value indicating whether report is enabled for Unknowns
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.Other">
            <summary>
            Gets a value indicating whether report is enabled for Other sample types
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SampleReport.SaveAsType">
            <summary>
            Gets the file save format of the report
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter">
            <summary>
            Defines filter data, as may be embedded in a processing method, or chromatogram settings
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter._masses">
            <summary>
            Gets the masses. Masses for each MS step
            </summary>
            <value>
            The masses.
            </value>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter._precursorMassRanges">
            <summary>
            Gets the precursor mass ranges. Precursor mass range(s)
            </summary>
            <value>
            The precursor mass ranges.
            </value>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Name">
            <summary>
            Gets the name. event name - for named filters as an alternative to scan filters
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.MassRanges">
            <summary>
            Gets or sets the mass ranges. Mass range(s) for final scan
            </summary>
            <value>
            The mass ranges.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SourceFragmentations">
            <summary>
            Gets or sets the source fragmentations.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SourceFragmentationInfoValid">
            <summary>
            Gets a value used to indicate which m_SourceFragmentationInfo values are valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SourceFragmentationMassRanges">
            <summary>
            Gets the source fragmentation mass ranges.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.FixUpFilterDefaults(System.Int32)">
            <summary>
            fix up filter defaults, for a given raw file version.
            </summary>
            <param name="fileRevision">
            The file revision.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SetNumMasses(System.Int32)">
            <summary>
            Sets the number of (precursor) masses.
            </summary>
            <param name="n">
            The number of masses.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.AccurateMassType">
            <summary>
            Gets the accurate mass type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.CompensationVoltage">
            <summary>
            Gets the compensation voltage.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.CompensationVoltageType">
            <summary>
            Gets the compensation voltage type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Corona">
            <summary>
            Gets the corona value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.DependentDataFlag">
            <summary>
            Gets the dependent data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Detector">
            <summary>
            Gets the Detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.DetectorValue">
            <summary>
            Gets the detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ElectronCaptureDissociation">
            <summary>
            Gets the electron capture dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ElectronCaptureDissociationType">
            <summary>
            Gets the electron capture dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ElectronTransferDissociation">
            <summary>
            Gets the electron transfer dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ElectronTransferDissociationType">
            <summary>
            Gets the electron transfer dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Enhanced">
            <summary>
            Gets the enhanced.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.FreeRegion">
            <summary>
            Gets the free region.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.HigherEnergyCid">
            <summary>
            Gets the higher energy CID.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.HigherEnergyCidType">
            <summary>
            Gets the higher energy cid type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.IonizationMode">
            <summary>
            Gets the ionization mode.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.IsCustom">
            <summary>
            Gets a value indicating whether the scan event is custom - true if trailer
                scan event should be used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.IsValid">
            <summary>
            Gets a value indicating whether the scan event is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Lock">
            <summary>
            Gets the lock.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.MsOrder">
            <summary>
            Gets the MS order.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.MassAnalyzerType">
            <summary>
            Gets the mass analyzer type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.MassCalibrators">
            <summary>
            Gets the mass calibrators.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ThermoFisher#CommonCore#RawFileReader#Facade#Interfaces#IRawFileReaderScanEvent#MassRanges">
            <summary>
            Gets the mass ranges.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.MultiPhotonDissociation">
            <summary>
            Gets the multi photon dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.MultiPhotonDissociationType">
            <summary>
            Gets the multi photon dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.MultiStateActivation">
            <summary>
            Gets the multi state activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Multiplex">
            <summary>
            Gets the multiplex.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ParamA">
            <summary>
            Gets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ParamB">
            <summary>
            Gets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ParamF">
            <summary>
            Gets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SpsMultiNotch">
            <summary>
            Gets the parameter k.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ParamR">
            <summary>
            Gets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ParamV">
            <summary>
            Gets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.PhotoIonization">
            <summary>
            Gets the photo ionization.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Polarity">
            <summary>
            Gets the polarity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.PulsedQDissociation">
            <summary>
            Gets the pulsed q dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.PulsedQDissociationType">
            <summary>
            Gets the pulsed q dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Reactions">
            <summary>
            Gets the reactions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ScanDataType">
            <summary>
            Gets the scan data type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ScanType">
            <summary>
            Gets the scan type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ScanTypeIndex">
            <summary>
            Gets the scan type index. Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SectorScan">
            <summary>
            Gets the sector scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SourceFragmentation">
            <summary>
            Gets the source fragmentation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ThermoFisher#CommonCore#RawFileReader#Facade#Interfaces#IRawFileReaderScanEvent#SourceFragmentationMassRanges">
            <summary>
            Gets the source fragmentation mass ranges.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SourceFragmentationType">
            <summary>
            Gets value to indicate how source fragmentation values are interpreted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ThermoFisher#CommonCore#RawFileReader#Facade#Interfaces#IRawFileReaderScanEvent#SourceFragmentations">
            <summary>
            Gets or sets the source fragmentations.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.SupplementalActivation">
            <summary>
            Gets the supplemental activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.TurboScan">
            <summary>
            Gets the turbo scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Ultra">
            <summary>
            Gets the ultra.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.Wideband">
            <summary>
            Gets the wideband.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.ToAutoFilterString(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert to automatic filter string.
            </summary>
            <param name="scanEvent">The scan event.</param>
            <param name="massPrecision">The mass precision.</param>
            <param name="charsMax">The chars maximum.</param>
            <param name="energyPrecision">The energy precision.</param>
            <returns>The filter string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.GetRunHeaderFilterMassPrecision">
            <summary>
            get the run header filter mass precision.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Filter.CreateReaction(System.Int32)">
            <summary>
            create reaction.
            </summary>
            <param name="reaction">
            The reaction number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent">
            <summary>
            The filter scan event class is an internal class which hosts certain features
            of both filters and scan events.
            It supports the sorting code needing to "auto filter" a set of scan events.
            Scan events are conceptually immutable (records of what occurred).
            This class is mutable.
            The class is created internally by the "Filter string parser" and by "Scan Event".
            The class is exposed externally though "WrappedScanFilter" which has the (limited) public
            interface to read and modify a filter.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent" /> class.
            </summary>
            <param name="scanEvent">
            The scan event.
            </param>
            <param name="fromScan">
            The from scan.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.CompensationVoltagesValid">
            <summary>
            Gets the table of compensation voltages valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.FilterMassPrecision">
            <summary>
            Gets or sets the filter mass precision.
            </summary>
            <value>
            The filter mass precision.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.FilterMassResolution">
            <summary>
            Gets or sets the filter mass resolution.
            </summary>
            <value>
            The filter mass resolution.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.LocaleName">
            <summary>
            Gets or sets the name of the locale.
            </summary>
            <value>
            The name of the locale.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.MetaFilters">
            <summary>
            Gets or sets the meta filters. <c>{hcd, etd, cid}</c>
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SourceCidVoltagesValid">
            <summary>
            Gets the table of source CID valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.TotalSourceValues">
            <summary>
            Gets the total source values, which is all CID and CV.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.CompareExact(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent)">
            <summary>
            Compares the current object with another object of the same type.
            Exact compare for specialized qsort. Standard CompareTo considers items within an "instrument tolerance" as the same.
            This version uses 1.0E-6 for the tolerance.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following
            meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This
            object is equal to <paramref name="other" />. Greater than zero This object is greater than
            <paramref name="other" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.CompareTo(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following
            meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This
            object is equal to <paramref name="other" />. Greater than zero This object is greater than
            <paramref name="other" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.CreateReactions">
            <summary>
            create reactions table
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.Equals(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.GetFilterString(System.Int32)">
            <summary>
            Gets the filter string.
            </summary>
            <param name="filterMassPrecision">The filter mass precision.</param>
            <returns>The filter as a string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.NumCompensationVoltageValues">
            <summary>
            Count the number of compensation voltage values.
            </summary>
            <returns>The number of compensation voltage values</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.NumSourceCidInfoValues">
            <summary>
            Numbers the source fragmentation information values.
            </summary>
            <returns>the number of values</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SameParentMass(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator)">
            <summary>
            Check if this object has the parent mass as another.
            </summary>
            <param name="other">The other.</param>
            <returns>true if the same</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SameFirstParentMass(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator)">
            <summary>
            Check if this object has the parent mass as another.
            </summary>
            <param name="other">The other.</param>
            <returns>true if the same</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SetCompensationVoltageType(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes)">
            <summary>
            set compensation voltage type.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SetFilterMassResolution(System.Double)">
            <summary>
            when we set the number of digits to display in the filter masses,
            let's also set the comparison value to use in comparing filters.
            This value used to be 0.4 AMU
            Sets the filter mass resolution.
            </summary>
            <param name="massResolution">
            Mass Resolution to apply
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SetFilterMassResolutionByMassPrecision(System.Int32)">
            <summary>
            Sets the filter mass resolution by mass precision.
            </summary>
            <param name="n">The n.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SetMasses(System.Int32,System.Double)">
            <summary>
            set (precursor) masses.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SetNumMasses(System.Int32)">
            <summary>
            Set the number of precursor masses.
            </summary>
            <param name="n">
            The number of masses.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SetPrecursorEnergy(System.Int32,System.Double)">
            <summary>
            set precursor energy.
            </summary>
            <param name="n">
            The index to the precursor table.
            </param>
            <param name="energy">
            The energy.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SetPrecursorEnergyIsValidEx(System.Int32,System.UInt32)">
            <summary>
            set precursor energy is valid ex.
            </summary>
            <param name="n">
            The index to the precursor table.
            </param>
            <param name="ie">
            The extended energy valid flags.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SetSourceFragmentationType(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes)">
            <summary>
            set source fragmentation type.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.CompensationVoltageInfoValue(System.Int32,System.Double)">
            <summary>
            Sets the "i" indexed Compensations voltage information value.
            Skips over any items which have already been set for SID mode.
            </summary>
            <param name="i">The i.</param>
            <param name="value">The d value.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.NumCompensationVoltageInfoValues(System.Int32)">
            <summary>
            Sets the number of compensation voltage info values.
            </summary>
            <param name="n">
            The number.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.NumSourceFragmentationInfoValues(System.Int32)">
            <summary>
            Sets The number of source fragmentation info values.
            </summary>
            <param name="n">
            The number.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.SourceCidInfoValue(System.Int32,System.Double)">
            <summary>
            Sets the "i" indexed Compensations voltage information value.
            Skips over any items which have already been set for SID mode.
            </summary>
            <param name="i">The i.</param>
            <param name="value">The d value.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.CompareReactions(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent,System.Double)">
            <summary>
            Compares the reactions.
            </summary>
            <param name="other">The other reactions.</param>
            <param name="filterMassResolution">The filter mass resolution.</param>
            <returns>Standard comparison result</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.ScanEventToFilter(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.Boolean)">
            <summary>
            converts the event to filter.
            </summary>
            <param name="scanEvent">The scan event.</param>
            <param name="fromScan">True when this is data from a scan. False when it is typed filter text</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent.VoltageCount(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes,System.Int32)">
            <summary>
            Count the number of volt values used for a voltage type
            </summary>
            <param name="voltageType">Style of voltage values</param>
            <param name="all">All voltages in the scan event</param>
            <returns>The number of voltages</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterSorter">
            <summary>
            Filter sorting, designed to match same ordering as previous Xcalibur code.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterSorter.Qsort(System.Collections.Generic.IList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent})">
            <summary>
            Sort a list of events, using the <c>qsort</c> algorithm.
            This code is needed to precisely match results from legacy <c>fileio</c>.
            </summary>
            <param name="values">scan events to sort</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterSorter.ShortSort(System.Int32,System.Int32,System.Collections.Generic.IList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent})">
            <summary>
            Sort a small list of filters in a simple manner (about 8 items)
            </summary>
            <param name="low">Low index to sort from</param>
            <param name="high">High index to sort to</param>
            <param name="values">Data array to sort</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterSorter.Swap(System.Int32,System.Int32,System.Collections.Generic.IList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent})">
            <summary>
            Exchange two array elements
            </summary>
            <param name="a">First to exchange</param>
            <param name="b">Second to exchange</param>
            <param name="values">Array of data</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser">
            <summary>
            This class parses a filter string.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.IonModeSet">
            <summary>
            Lookup table of valid precursor activation codes
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRangesState">
            <summary>
            Parsing states for a mass range
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRangesState.LoMass">
            <summary>
            Expect low mass
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRangesState.CommaDash">
            <summary>
            Expect comma or dash (separator)
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRangesState.HiMass">
            <summary>
            Expect high mass
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRangesState.SidEnergy">
            <summary>
            Expect an energy value (after "@")
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRangesState.CommaBracket">
            <summary>
            Expect a common or "]"
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRangesState.RBracket">
            <summary>
            Found "]"
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseSimpleDoubleState">
            <summary>
            Parsing states for a simple double "123.456"
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseSimpleDoubleState.DigitsBeforeDecimal">
            <summary>
            Digits before decimal point
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseSimpleDoubleState.Decimal">
            <summary>
            Decimal point
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseSimpleDoubleState.DigitsAfterDecimal">
            <summary>
            Digits after decimal point
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser"/> class.
            </summary>
            <param name="scanEvent">
            The scan event.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.EnergyPrecision">
            <summary>
            Gets or sets the energy precision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.MetaFilters">
            <summary>
            Gets or sets the meta filters. (ETD, CID, HCD)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.MassPrecision">
            <summary>
            Sets the mass precision.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.GetFilterFromString(System.String)">
            <summary>
            Get filter from string (by parsing a string)
            </summary>
            <param name="filter">
            The filter sting to parse
            </param>
            <returns>
            The parsed filter
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseFilterStructString(System.String)">
            <summary>
            Parses the filter structure string.
            </summary>
            <param name="filterString">The filter string.</param>
            <returns>
            true if parse is valid</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ToFilterScanEvent(System.Boolean)">
            <summary>
            Convert to type IFilterScanEvent
            </summary>
            <param name="fromScan">
            true if this came from a scan's event.
            </param>
            <returns>
            Converted object
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SearchForOpenAndCloseParenthesis(System.Char[],System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32,System.Char,System.Char)">
            <summary>
            Search for open and close parenthesis, or a given style
            </summary>
            <param name="filterString">
            The filter string.
            </param>
            <param name="openParenthesisIndex">
            The open parenthesis index.
            </param>
            <param name="closeParenthesisIndex">
            The close parenthesis index.
            </param>
            <param name="openMatch">
            The open match count.
            </param>
            <param name="closeMatch">
            The close match count.
            </param>
            <param name="filterLength">
            The filter length.
            </param>
            <param name="openParenthesisCharacter">
            The open parenthesis character.
            </param>
            <param name="closeParenthesisCharacter">
            The close parenthesis character.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.IonMode(System.String,System.Int32)">
            <summary>
            Parse The ion mode.
            </summary>
            <param name="token">
            The token.
            </param>
            <param name="i">
            The index into the token.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.FieldParser(System.String@,System.Boolean@,System.String[],System.Action{System.Int32})">
            <summary>
            Parse one token
            </summary>
            <param name="token">The token.</param>
            <param name="setFlag">if set to <c>true</c> [set flag].</param>
            <param name="names">The names.</param>
            <param name="setMode">The set mode.</param>
            <returns>updated parse state</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.InitializeInternalProperties(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent)">
            <summary>
            Initialize internal properties.
            </summary>
            <param name="scanEvent">
            The scan event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.InitializeParser">
            <summary>
            Initialize the parser (before reading the filter string)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.GetTotalNumberActivations">
            <summary>
            Calculate the total number of activations.
            </summary>
            <returns>
            The total.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.GetSimCompensationVoltage(System.Int32,System.Double@)">
            <summary>
            Gets the SIM compensation voltage, at a given index
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="energy">
            The energy.
            </param>
            <returns>
            The energy type
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.GetSimSourceCid(System.Int32,System.Double@)">
            <summary>
            Get SIM source CID at a given index.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="energy">
            The energy.
            </param>
            <returns>
            The energy type
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseFilter(System.String)">
            <summary>
            Parse a filter string
            </summary>
            <param name="filterString">
            The filter string.
            </param>
            <returns>
            The state (Bad on failure to parse)
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseToken(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FilterStringParseState,System.String@)">
            <summary>
            Parse the next (white space separated) token.
            </summary>
            <param name="parseState">
            The parse state.
            </param>
            <param name="token">
            The token.
            </param>
            <returns>
            The updated parse state.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseSegmentScanEvent(System.Char[])">
            <summary>
            Parse for segment and scan event.
            </summary>
            <param name="filterStringArr">
            The filter string characters.
            </param>
            <returns>
            The parse state
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.DecodeSimpleInt(System.Char[],System.Int32)">
            <summary>
            Decode an integer. Must be less than 8 digits
            </summary>
            <param name="token">the text to parse</param>
            <param name="index">index into token</param>
            <returns>positive value or zero, if no digits. -1 on >=8 digits</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRanges(System.Char[])">
            <summary>
            Parse a mass ranges.
            </summary>
            <param name="token">
            The token to parse
            </param>
            <returns>
            The parse state.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMassRangesPlusEnergy(System.Char[])">
            <summary>
            Parses the mass ranges, plus energy
            parse mass ranges -- double or double-double separated by ','
            max of 50 ranges
            <c>'['  nnn.n [- nnn.n] [, [nnn.n [- nnn.n] ....] ']'</c>
            </summary>
            <param name="massRangesArr">The mass ranges array.</param>
            <returns>parse state</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SimpleDouble(System.Char[],System.Int32@,System.Double@,System.Int32,System.Boolean)">
            <summary>
            parse a "simple" double value: no e-notation
            "123.4"  or "123".
            Optionally permit leading sign
            </summary>
            <param name="filterString">The mass ranges array.</param>
            <param name="startPos">The start position.</param>
            <param name="value">The value.</param>
            <param name="precision">Mass precision</param>
            <param name="permitSign">True if value may have + or -</param>
            <returns>Parse state: Bad if too many digits, or Next otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SimpleSignedDouble(System.Char[],System.Int32@,System.Double@,System.Boolean,System.Int32,System.Char)">
            <summary>
            parse a double value, i.e., no e-notation
            Always permits sign. "123.4", "+123.4"  or "-123".
            Only permits trailing sign if it is specified as a "range separator".
            </summary>
            <param name="filterString">Text to parse</param>
            <param name="startPos">Index of first char to parse</param>
            <param name="value">Value decoded</param>
            <param name="whiteSpaceOk">True if trailing space is permitted</param>
            <param name="precision">Permitted precision</param>
            <param name="rangeSeperator">Character which may appear between two numbers representing a range</param>
            <returns>Parse state, which can be bad on invalid, Next otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SimpleDoubleAtDouble(System.Char[],System.Int32@,System.Int32@,System.Double@,System.Double@,System.Boolean,System.Boolean)">
            <summary>
            parse a double value range, i.e., no e-notation
            "+123.4@200.34"  or "-123@-345"
            First value is a mass, second is energy.
            </summary>
            <param name="token">
            text to parse
            </param>
            <param name="startPos">
            next char to parse
            </param>
            <param name="separatorPos">
            set if '@; found
            </param>
            <param name="mass">
            Precursor mass
            </param>
            <param name="energy">
            Activation energy
            </param>
            <param name="doubleSignedValuesOk">
            set is '-' '+' permitted
            </param>
            <param name="prefixedByAtDoubleSignedValuesOk">
            Set if number after '@' permitted to be signed
            </param>
            <returns> The updated parse state
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.MassRangeInLimits(System.Int32,System.Int32,System.Double)">
            <summary>
            Test that the mass range in limits.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="highOrLow">
            The high or low. (0 for low, 1 for high)
            </param>
            <param name="mass">
            The mass.
            </param>
            <returns>
            true when valid.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMetaFilters(System.String)">
            <summary>
            Parse meta filters.
            </summary>
            <param name="token">
            The token.
            </param>
            <returns>
            The parse state.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SetSimSourceCidn(System.Int32,System.Double)">
            <summary>
            set SIM source CID for a given index.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseDissociation(System.String@,System.Boolean@,System.String[],System.Action{System.Int32,System.Double})">
            <summary>
            parse dissociation, such as <c>mpd@value</c>
            </summary>
            <param name="token">
            The token.
            </param>
            <param name="setFlag">
            The set flag.
            </param>
            <param name="names">
            The names.
            </param>
            <param name="setMode">
            The set mode.
            </param>
            <returns>
            The parse state
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseSourceFragmentation(System.String@,System.Boolean@,System.String[])">
            <summary>
            Parse source fragmentation (SID)
            </summary>
            <param name="token">
            The token.
            </param>
            <param name="setFlag">
            in: True if this has been set already
            out: set to true when token is found
            </param>
            <param name="names">
            The names.
            </param>
            <returns>
            the parse state
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseCompensationVoltage(System.String@,System.Boolean@,System.String[])">
            <summary>
            parse compensation voltage.
            </summary>
            <param name="token">
            The token.
            </param>
            <param name="setFlag">
            True if this item has already been parsed
            </param>
            <param name="names">
            The names.
            </param>
            <returns>
            The parse result
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SimpleDoubleRange(System.Char[],System.Int32@,System.Int32@,System.Double@,System.Double@,System.Boolean,System.Int32)">
            <summary>
            parse a simplified double value range, i.e., no e-notation.
            "+123.4-200.34"  or "-123--345"
            </summary>
            <param name="token">text to parse</param>
            <param name="startPos">start of text to parse (updated to next unparsed char)</param>
            <param name="separator">index into text of separator</param>
            <param name="rangeLow">Low value found in range</param>
            <param name="rangeHigh">High value found in range (same as low, when no second value)</param>
            <param name="whiteSpaceOk">True if trailing spaces are valid</param>
            <param name="precision">Decimal precision</param>
            <returns>Parse state. Will be Bad on parse error, Next on valid parse</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseScanMode(System.String@,System.Boolean@,System.String[])">
            <summary>
            convert the scan mode
            in the syntax most of these are followed by an MS order, some not
            for example: Q1MS is always MS1
            </summary>
            <param name="token">
            The token.
            </param>
            <param name="setFlag">
            The set flag.
            </param>
            <param name="names">
            The names.
            </param>
            <returns>
            The parse state
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SetMsOrderAndNumPrecMasses(System.Int32,System.Int32)">
            <summary>
            set MS order and number of precursor masses.
            </summary>
            <param name="order">
            The order.
            </param>
            <param name="masses">
            The masses.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMultiplex(System.String@,System.String[])">
            <summary>
            Parse multiplex.
            </summary>
            <param name="token">
            The token.
            </param>
            <param name="names">
            The possible names.
            </param>
            <returns>
            The parse state
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseMsOrder(System.String@)">
            <summary>
            Parse the MS order <c>(ms, ms2 etc.)</c>
            </summary>
            <param name="token">
            The token.
            </param>
            <returns>
            The parse state.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParseDetector(System.String@,System.String[])">
            <summary>
            Parse detector. <c>det=</c>
            </summary>
            <param name="token">
            The token.
            </param>
            <param name="names">
            The names.
            </param>
            <returns>
            The parse state
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.ParsePrecursorMass(System.String@)">
            <summary>
            Look for a precursor mass, plus activation codes
            </summary>
            <param name="token">token like <c>"1234.56@ecd35.6@hcd44.4"</c></param>
            <returns>Parse private state</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SetPrecursorMassN(System.Int32,System.Double)">
            <summary>
            Set a precursor mass.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="mass">
            The mass.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.SetPrecursorEnergy(System.Int32,System.Double)">
            <summary>
            Set precursor energy at a given index.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="energy">
            The energy.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.UpdateMassRanges2">
            <summary>
            The update mass ranges 2.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.GetPrecursorEnergyEx(System.Int32,System.Double@)">
            <summary>
            Get precursor energy ex.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="energy">
            The activation energy
            </param>
            <returns>
            The 'valid' bit plus the activation mode <see cref="T:System.UInt32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.MultipleActivationsForMsnOrder(System.Int32)">
            <summary>
            The multiple activations for MS n order.
            </summary>
            <param name="i">
            The i.
            </param>
            <returns>
            The number of MA in the extra array for this MS n Order
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.NextMultipleActivationForOrder(System.Int32,System.Int32)">
            <summary>
            given the previous MA for this MS/MS Order, find the next
            </summary>
            <param name="order">
            The order.
            </param>
            <param name="lastMultiActivation">
            The last multi activation.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.GetPrecursorEnergyExtra(System.Int32,System.Double@)">
            <summary>
            get precursor energy extra.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="energy">
            The energy.
            </param>
            <returns>
            The energy code
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation">
            <summary>
            The precursor activation.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation.IsMultiple">
            <summary>
            Gets or sets a value indicating whether it is a multiple activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation.Activation">
            <summary>
            Gets or sets the mode of activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation.PrecursorEnergyIsValid">
            <summary>
            Gets or sets a value indicating whether the precursor energy is valid.
            If it is valid, it is shown as "@energy"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation.PrecursorEnergy">
            <summary>
            Gets or sets the precursor energy.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation.MsOrder">
            <summary>
            Gets or sets the MS order.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringParser.PrecursorActivation.ToEnergyEx">
            <summary>
            Convert to energy ex.
            </summary>
            <returns>
            The converted value
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens">
            <summary>
            The filter string tokens, as used by filer parser.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MetaFilterTokenValues">
            <summary>
            Gets the meta filter token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MetaFilterTokenNames">
            <summary>
            Gets the meta filter token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.IonizationModeTokenNames">
            <summary>
            Gets the ionization mode token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.IonizationModeTokenValues">
            <summary>
            Gets the ionization mode token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MassAnalyzerTokenNames">
            <summary>
            Gets the mass analyzer token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MassAnalyzerTokenValues">
            <summary>
            Gets the mass analyzer token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.SectorScanTokenNames">
            <summary>
            Gets the sector scan token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.SectorScanTokenValues">
            <summary>
            Gets the sector scan token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.LockTokenNames">
            <summary>
            Gets the lock token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.LockTokenValues">
            <summary>
            Gets the lock token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.FreeRegionTokenNames">
            <summary>
            Gets the free region token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.FreeRegionTokenValues">
            <summary>
            Gets the free region token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.UltraTokenNames">
            <summary>
            Gets the ultra token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.UltraTokenValues">
            <summary>
            Gets the ultra token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.EnhancedTokenNames">
            <summary>
            Gets the enhanced token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.EnhancedTokenValues">
            <summary>
            Gets the enhanced token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamATokenNames">
            <summary>
            Gets the parameter a token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamATokenValues">
            <summary>
            Gets the parameter a token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamBTokenNames">
            <summary>
            Gets the parameter b token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamBTokenValues">
            <summary>
            Gets the parameter b token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamFTokenNames">
            <summary>
            Gets the parameter f token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamFTokenValues">
            <summary>
            Gets the parameter f token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.SpsMultiNotchTokenNames">
            <summary>
            Gets the SPS multi notch token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.SpsMultiNotchTokenValues">
            <summary>
            Gets the SPS multi notch token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamRTokenNames">
            <summary>
            Gets the parameter r token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamRTokenValues">
            <summary>
            Gets the parameter r token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamVTokenNames">
            <summary>
            Gets the parameter v token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ParamVTokenValues">
            <summary>
            Gets the parameter v token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MultiPhotonDissociationTokenNames">
            <summary>
            Gets the multi photon dissociation token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MultiPhotonDissociationTokenValues">
            <summary>
            Gets the multi photon dissociation token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ElectronCaptureDissociationTokenNames">
            <summary>
            Gets the electron capture dissociation token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ElectronCaptureDissociationTokenValues">
            <summary>
            Gets the electron capture dissociation token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.PhotoIonizationTokenNames">
            <summary>
            Gets the photo ionization token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.PhotoIonizationTokenValues">
            <summary>
            Gets the photo ionization token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.PolarityTokenNames">
            <summary>
            Gets the polarity token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.PolarityTokenValues">
            <summary>
            Gets the polarity token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ScanDataTypeTokenNames">
            <summary>
            Gets the scan data type token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ScanDataTypeTokenValues">
            <summary>
            Gets the scan data type token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.CoronaTokenNames">
            <summary>
            Gets the corona token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.CoronaTokenValues">
            <summary>
            Gets the corona token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.SourceFragmentationTokenNames">
            <summary>
            Gets the source fragmentation token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.SourceFragmentationTokenValues">
            <summary>
            Gets the source fragmentation token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.CompensationVoltageTokenNames">
            <summary>
            Gets the compensation voltage token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.CompensationVoltageTokenValues">
            <summary>
            Gets the compensation voltage token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.DataDependentTokenNames">
            <summary>
            Gets the data dependent token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.DataDependentTokenValues">
            <summary>
            Gets the data dependent token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.WideBandTokenNames">
            <summary>
            Gets the wide band token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.WideBandTokenValues">
            <summary>
            Gets the wide band token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.SupplementalActivationTokenNames">
            <summary>
            Gets the supplemental activation token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.SupplementalActivationTokenValues">
            <summary>
            Gets the supplemental activation token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MultiStateActivationTokenNames">
            <summary>
            Gets the multi state activation token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MultiStateActivationTokenValues">
            <summary>
            Gets the multi state activation token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.AccurateMassTokenNames">
            <summary>
            Gets the accurate mass token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.AccurateMassTokenValues">
            <summary>
            Gets the accurate mass token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.TurboScanTokenNames">
            <summary>
            Gets the turbo scan token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.TurboScanTokenValues">
            <summary>
            Gets the turbo scan token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ScanModeTokenNames">
            <summary>
            Gets the scan mode token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.ScanModeTokenValues">
            <summary>
            Gets the scan mode token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MultiplexTokenNames">
            <summary>
            Gets the multiplex token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.MultiplexTokenValues">
            <summary>
            Gets the multiplex token values.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.DetectorTokenNames">
            <summary>
            Gets the detector token names.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.DetectorTokenValues">
            <summary>
            Gets the detector token values.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterStringTokens"/> class.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.LegacyFilterSorter">
            <summary>
            Filter sorting, designed to match same ordering as previous Xcalibur code.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.LegacyFilterSorter.Qsort(System.Collections.Generic.IList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent})">
            <summary>
            Sort a list of events, using the <c>qsort</c> algorithm.
            This code is needed to precisely match results from legacy <c>fileio</c>.
            </summary>
            <param name="values">scan events to sort</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.LegacyFilterSorter.QsortSlice(System.Collections.Generic.IList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent},System.Int32,System.Int32)">
            <summary>
            Sort a slice of a list of events, using the <c>qsort</c> algorithm.
            This code is needed to precisely match results from legacy <c>fileio</c>.
            </summary>
            <param name="values">scan events to sort</param>
            <param name="firstIndex">first element to sort</param>
            <param name="lastIndex">last element to sort</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.LegacyFilterSorter.ShortSort(System.Int32,System.Int32,System.Collections.Generic.IList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent})">
            <summary>
            Sort a small list of filters in a simple manner (about 8 items)
            </summary>
            <param name="low">Low index to sort from</param>
            <param name="high">High index to sort to</param>
            <param name="values">Data array to sort</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.LegacyFilterSorter.Swap(System.Int32,System.Int32,System.Collections.Generic.IList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.FilterScanEvent})">
            <summary>
            Exchange two array elements
            </summary>
            <param name="a">First to exchange</param>
            <param name="b">Second to exchange</param>
            <param name="values">Array of data</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction">
            <summary>
                The reaction class defines one reaction in a chain of MS/MS reactions.
            A reaction descibes which ion was acted on, with what methods, to produce the
            next level MS/MS fragments.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.#ctor(System.Double,System.Double,System.Double,System.UInt32,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction"/> class.
            </summary>
            <param name="precursorMass">
            The precursor mass.
            </param>
            <param name="isolationWidth">
            The isolation width.
            </param>
            <param name="collisionEnergy">
            The collision energy.
            </param>
            <param name="collisionEnergyValid">
            The collision energy valid.
            </param>
            <param name="rangeIsValid">
            The range is valid.
            </param>
            <param name="firstPrecursorMass">
            The first precursor mass.
            </param>
            <param name="lastPrecursorMass">
            The last precursor mass.
            </param>
            <param name="isolationWidthOffset">
            The isolation width offset.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.#ctor(ThermoFisher.CommonCore.Data.Business.IReaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction"/> class.
            </summary>
            <param name="from">
            Clone from interface.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.MultipleActivation">
            <summary>
            Gets a value indicating whether is multiple activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.CollisionEnergyValidEx">
            <summary>
                Gets the collision energy valid value from the structure.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.CollisionEnergyValid">
            <summary>
                Gets a value indicating whether the collision energy is valid. this is set to true
                to use in scan filtering.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.IsPrecursorEnergiesValid">
            <summary>
            Gets a value indicating whether is precursor energies valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.UseNamedActivation">
            <summary>
            Gets a value indicating whether use named activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.ActivationType">
            <summary>
            Gets the named activation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.CollisionEnergy">
            <summary>
                Gets the collision energy.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.FirstPrecursorMass">
            <summary>
                Gets the first precursor mass. If <see cref="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.PrecursorRangeIsValid" /> == TRUE, this value defines the start of the
                precursor isolation range.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.PrecursorRangeIsValid">
            <summary>
                Gets a value indicating whether is range valid. If TRUE, <see cref="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.PrecursorMass" /> is still the center mass but the
                <see cref="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.FirstPrecursorMass" /> and <see cref="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.LastPrecursorMass" />
                are also valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.IsolationWidth">
            <summary>
                Gets the isolation width.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.IsolationWidthOffset">
            <summary>
                Gets the isolation width offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.LastPrecursorMass">
            <summary>
                Gets the last precursor mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.PrecursorMass">
            <summary>
                Gets the precursor mass.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.CompareDetails(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction)">
            <summary>
            compare details (excludes parent mass).
            </summary>
            <param name="y">
            The y.
            </param>
            <returns>
            less than zero if before, zero if same, positive if after.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.CompareTo(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction)">
            <summary>
            The comparison implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="other">
            The object to compare.
            </param>
            <returns>
            Return an <see cref="T:System.Int32"/> that has one of three values:
                <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <term>Less than zero</term>
            <description>The current instance precedes the object specified by the CompareTo method in the sort order.</description>
            <term>Zero</term>
            <description>This current instance occurs in the same position in the sort order as the object specified by the CompareTo method.</description>
            <term>Greater than zero</term>
            <description>This current instance follows the object specified by the CompareTo method in the sort order.</description>
            </list>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.Equals(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction)">
            <summary>
            The comparison implementation of <see cref="T:System.IEquatable`1"/>.
            </summary>
            <param name="other">
            The object to compare.
            </param>
            <returns>
            True if the objects are equal.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.DeepClone">
            <summary>
            Deeps the clone.
            </summary>
            <returns>copy of this object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.InitialFields(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MSReaction.MsReactionStruct)">
            <summary>
            initial fields from a reaction.
            </summary>
            <param name="reaction">
            The reaction to copy from.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction.InitialValidFlags">
            <summary>
            initialize valid flags.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent">
            <summary>
                The scan event.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent)">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent" /> class.
            </summary>
            <param name="scanEvent">
                The scan event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent" /> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent" /> class.
            </summary>
            <param name="header">The header.</param>
            <param name="uniqueScanEventIndex">Index of the unique scan event.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent" /> class.
            </summary>
            <param name="filterMassPrecision">The filter mass precision.</param>
            <param name="uniqueScanEventIndex">Index of the unique scan event.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.DependentDataAsByte">
            <summary>
                Sets the dependent data as byte.
                (Used in conversion of legacy LCQ files)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.HeaderFilterMassPrecision">
            <summary>
                Gets the header filter mass precision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ScanDataTypeAsByte">
            <summary>
                Sets the scan data type. Internal method for converting old file revisions
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ScanEventInfo">
            <summary>
                Gets or sets the scan event info.
                Note that this is a struct, so code which needs
                to modify needs to follow a get, modify, set pattern
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.UniqueScanEventIndex">
            <summary>
                Gets or sets the index of the unique scan event.
            </summary>
            <value>
                The index of the unique scan event.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ScanTypeLocation">
            <summary>
                Gets or sets the scan type Location.
                This determines where the scan was found within the
                segment and event table.
                This is similar data to "ScanTypeIndex"
                but not shown in "ToString"
                HIWORD == segment, LOWORD == event number
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CompareTo(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent)">
            <summary>
                compare to.
            </summary>
            <param name="other">
                The other.
            </param>
            <returns>
                A 32-bit signed integer that indicates the relative order of the objects being compared.
                The return value has the following meanings:
                Value              Meaning
                Less than zero     This object is less than the <paramref name="other" /> parameter.
                Zero               This object is equal to <paramref name="other" />.
                Greater than zero  This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Equals(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent)">
            <summary>
                The method compares two <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent" />objects.
            </summary>
            <param name="other">
                The other <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent" /> object.
            </param>
            <returns>
                True if equal.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.AccurateMassType">
            <summary>
                Gets the accurate mass type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CompensationVoltage">
            <summary>
                Gets the compensation voltage.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CompensationVoltageType">
            <summary>
                Gets the compensation voltage type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Corona">
            <summary>
                Gets the corona value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.DependentDataFlag">
            <summary>
                Gets the dependent data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Detector">
            <summary>
                Gets the Detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.DetectorValue">
            <summary>
                Gets the detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ElectronCaptureDissociation">
            <summary>
                Gets the electron capture dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ElectronCaptureDissociationType">
            <summary>
                Gets the electron capture dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ElectronTransferDissociation">
            <summary>
                Gets the electron transfer dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ElectronTransferDissociationType">
            <summary>
                Gets the electron transfer dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Enhanced">
            <summary>
                Gets the enhanced.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FreeRegion">
            <summary>
                Gets the free region.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.HigherEnergyCid">
            <summary>
                Gets the higher energy CID.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.HigherEnergyCidType">
            <summary>
                Gets the higher energy CID type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.IonizationMode">
            <summary>
                Gets the ionization mode.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.IsCustom">
            <summary>
                Gets a value indicating whether the scan event is custom - true if trailer
                scan event should be used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.IsValid">
            <summary>
                Gets a value indicating whether the scan event is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Lock">
            <summary>
                Gets the lock.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.MassAnalyzerType">
            <summary>
                Gets the mass analyzer type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.MassCalibrators">
            <summary>
                Gets the mass calibrators.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.MassRanges">
            <summary>
                Gets or sets the mass ranges.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.MsOrder">
            <summary>
                Gets the MS order.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.MultiPhotonDissociation">
            <summary>
                Gets the multi photon dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.MultiPhotonDissociationType">
            <summary>
                Gets the multi photon dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Multiplex">
            <summary>
                Gets the multiplex.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.MultiStateActivation">
            <summary>
                Gets the multi state activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Name">
            <summary>
                Gets or sets the name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ParamA">
            <summary>
                Gets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ParamB">
            <summary>
                Gets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ParamF">
            <summary>
                Gets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ParamR">
            <summary>
                Gets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ParamV">
            <summary>
                Gets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.PhotoIonization">
            <summary>
                Gets the photo ionization.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Polarity">
            <summary>
                Gets the polarity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.PulsedQDissociation">
            <summary>
                Gets the pulsed q dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.PulsedQDissociationType">
            <summary>
                Gets the pulsed q dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Reactions">
            <summary>
                Gets or sets the reactions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ScanDataType">
            <summary>
                Gets the scan data type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ScanType">
            <summary>
                Gets the scan type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ScanTypeIndex">
            <summary>
                Gets the scan type index.
                When specified, it will show as {segment,event} in a filter string.
                Scan Type Index indicates the segment/scan event for this
                scan event.
                HIWORD == segment, LOWORD == scan type
                -1 for "not in fixed table"
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.SectorScan">
            <summary>
                Gets the sector scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.SourceFragmentation">
            <summary>
                Gets the source fragmentation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.SourceFragmentationMassRanges">
            <summary>
                Gets the source fragmentation mass ranges.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.SourceFragmentations">
            <summary>
                Gets or sets the source fragmentations.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.SourceFragmentationType">
            <summary>
                Gets value to indicate how source fragmentation values are interpreted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.SpsMultiNotch">
            <summary>
                Gets the parameter k.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.SupplementalActivation">
            <summary>
                Gets the supplemental activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.TurboScan">
            <summary>
                Gets the turbo scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Ultra">
            <summary>
                Gets the ultra.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Wideband">
            <summary>
                Gets the wideband.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.GetRunHeaderFilterMassPrecision">
            <summary>
                get run header filter mass precision.
            </summary>
            <returns>
                The mass precision
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ToAutoFilterString(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.Int32,System.Int32,System.Int32)">
            <summary>
                Convert to auto filter string.
            </summary>
            <param name="scanEvent">
                The scan event.
            </param>
            <param name="massPrecision">
                The mass precision.
            </param>
            <param name="charsMax">
                The chars max.
            </param>
            <param name="energyPrecision">
                The energy precision.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
                Load (from file).
            </summary>
            <param name="viewer">The viewer (memory map into file).</param>
            <param name="dataOffset">The data offset (into the memory map).</param>
            <param name="fileRevision">The file revision.</param>
            <returns>
                The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEvent#AccurateMass">
            <summary>
                Gets the accurate mass setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#CompensationVoltage">
            <summary>
                Gets Compensation Voltage Option setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#CompensationVoltType">
            <summary>
                Gets Compensation Voltage type setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.CompensationVoltageType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Corona">
            <summary>
                Gets the corona scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Dependent">
            <summary>
                Gets the dependent scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Detector">
            <summary>
                Gets the detector scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.DetectorType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#DetectorValue">
            <summary>
                Gets the detector value.
            </summary>
            <value>Floating point detector value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ElectronCaptureDissociation">
            <summary>
                Gets the electron capture dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ElectronCaptureDissociationValue">
            <summary>
                Gets the electron capture dissociation value.
            </summary>
            <value>Floating point electron capture dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ElectronTransferDissociation">
            <summary>
                Gets the electron transfer dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ElectronTransferDissociationValue">
            <summary>
                Gets the electron transfer dissociation value.
            </summary>
            <value>Floating point electron transfer dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Enhanced">
            <summary>
                Gets the enhanced scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#FieldFreeRegion">
            <summary>
                Gets the field free region setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.FieldFreeRegionType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#HigherEnergyCiD">
            <summary>
                Gets the higher energy cid setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#HigherEnergyCiDValue">
            <summary>
                Gets the higher energy cid value.
            </summary>
            <value>Floating point higher energy cid value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#IonizationMode">
            <summary>
                Gets the ionization mode scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.IonizationModeType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEvent#IsCustom">
            <summary>
                Gets a value indicating whether this is a custom event.
                A custom event implies that any scan derived from this event could be different.
                The scan type must be inspected to determine the scanning mode, and not the event.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEvent#IsValid">
            <summary>
                Gets a value indicating whether this event is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Lock">
            <summary>
                Gets the lock scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#MassAnalyzer">
            <summary>
                Gets the mass analyzer scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.MassAnalyzerType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEvent#MassCalibratorCount">
            <summary>
                Gets the mass calibrator count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#MassCount">
            <summary>
                Gets number of masses
            </summary>
            <value>The size of mass array</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#MassRangeCount">
            <summary>
                Gets the number of mass ranges for final scan
            </summary>
            <value>The size of mass range array</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#MSOrder">
            <summary>
                Gets the scan power setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.MSOrderType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#MultiNotch">
            <summary>
                Gets the Multi notch (Synchronous Precursor Selection) type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#MultiplePhotonDissociation">
            <summary>
                Gets the multi-photon dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#MultiplePhotonDissociationValue">
            <summary>
                Gets the multi-photon dissociation value.
            </summary>
            <value>Floating point multi-photon dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Multiplex">
            <summary>
                Gets the Multiplex type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#MultiStateActivation">
            <summary>
                Gets MultiStateActivation type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Name">
            <summary>
                Gets the event Name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ParamA">
            <summary>
                Gets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ParamB">
            <summary>
                Gets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ParamF">
            <summary>
                Gets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ParamR">
            <summary>
                Gets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ParamV">
            <summary>
                Gets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#PhotoIonization">
            <summary>
                Gets the photo ionization setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Polarity">
            <summary>
                Gets the polarity scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.PolarityType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#PulsedQDissociation">
            <summary>
                Gets pulsed dissociation setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#PulsedQDissociationValue">
            <summary>
                Gets the pulsed dissociation value.
            </summary>
            <value>Floating point pulsed dissociation value</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ScanData">
            <summary>
                Gets the scan data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ScanMode">
            <summary>
                Gets the scan type setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.ScanModeType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#ScanTypeIndex">
            <summary>
                Gets encoded form of segment and scan event number.
            </summary>
            <value>HIWORD == segment, LOWORD == scan type</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#SectorScan">
            <summary>
                Gets the sector scan setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SectorScanType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#SourceFragmentation">
            <summary>
                Gets source fragmentation scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#SourceFragmentationInfoCount">
            <summary>
                Gets the number of source fragmentation info values
            </summary>
            <value>The size of source fragmentation info array</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEvent#SourceFragmentationMassRangeCount">
            <summary>
                Gets the source fragmentation mass range count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#SourceFragmentationType">
            <summary>
                Gets the source fragmentation type setting.
            </summary>
            <value>See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.SourceFragmentationValueType" /> for possible values</value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#SupplementalActivation">
            <summary>
                Gets supplemental activation type setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#TurboScan">
            <summary>
                Gets the turbo scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Ultra">
            <summary>
                Gets the ultra scan setting.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#Wideband">
            <summary>
                Gets the wideband scan setting.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetActivation(System.Int32)">
            <summary>
                Retrieves activation type at 0-based index.
            </summary>
            <remarks>
                Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount" /> to get the count of activations.
            </remarks>
            <param name="index">
                Index of activation to be retrieved
            </param>
            <returns>
                activation of MS step;
                See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.ActivationType" /> for possible values
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetEnergy(System.Int32)">
            <summary>
                Retrieves precursor(collision) energy value for MS step at 0-based index.
            </summary>
            <remarks>
                Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount" /> to get the count of energies.
            </remarks>
            <param name="index">
                Index of precursor(collision) energy to be retrieved
            </param>
            <returns>
                precursor(collision) energy of MS step
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetEnergyValid(System.Int32)">
            <summary>
                Retrieves precursor(collision) energy validation flag at 0-based index.
            </summary>
            <remarks>
                Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount" /> to get the count of precursor(collision) energy validations.
            </remarks>
            <param name="index">
                Index of precursor(collision) energy validation to be retrieved
            </param>
            <returns>
                precursor(collision) energy validation of MS step;
                See <see cref="T:ThermoFisher.CommonCore.Data.FilterEnums.EnergyType" /> for possible values
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetFirstPrecursorMass(System.Int32)">
            <summary>
                Gets the first precursor mass.
            </summary>
            <param name="index">
                The index.
            </param>
            <returns>
                The first mass
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetIsMultipleActivation(System.Int32)">
            <summary>
                Retrieves multiple activations flag at 0-based index of masses.
            </summary>
            <remarks>
                Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount" /> to get the count of masses.
            </remarks>
            <param name="index">
                Index of flag to be retrieved
            </param>
            <returns>
                true if mass at given index has multiple activations;  false otherwise
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetIsolationWidth(System.Int32)">
            <summary>
                Get the isolation width.
            </summary>
            <param name="index">
                The index.
            </param>
            <returns>
                The isolation width
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetIsolationWidthOffset(System.Int32)">
            <summary>
                Get the isolation width offset.
            </summary>
            <param name="index">
                The index.
            </param>
            <returns>
                The isolation width offset
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetLastPrecursorMass(System.Int32)">
            <summary>
                Gets the last precursor mass.
            </summary>
            <param name="index">
                The index.
            </param>
            <returns>
                The last mass
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetMass(System.Int32)">
            <summary>
                Retrieves mass value for MS step at 0-based index.
            </summary>
            <remarks>
                Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassCount" /> to get the count of mass values.
            </remarks>
            <param name="index">
                Index of mass value to be retrieved
            </param>
            <returns>
                Mass value of MS step
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= MassCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEvent#GetMassCalibrator(System.Int32)">
            <summary>
                Get the mass calibrator, at a given index.
            </summary>
            <param name="index">
                The index, which should be from 0 to MassCalibratorCount -1
            </param>
            <returns>
                The mass calibrator.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when requesting calibrator above count</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetMassRange(System.Int32)">
            <summary>
                Retrieves mass range for final scan at 0-based index.
            </summary>
            <remarks>
                Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.MassRangeCount" /> to get the count of mass ranges.
            </remarks>
            <param name="index">
                Index of mass range to be retrieved
            </param>
            <returns>
                Mass range for final scan at 0-based index
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= MassRangeCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetPrecursorRangeValidity(System.Int32)">
            <summary>
                Determine if a precursor range is valid.
            </summary>
            <param name="index">
                The index.
            </param>
            <returns>
                true if valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetReaction(System.Int32)">
            <summary>
                Gets the reaction data for the mass at 0 based index
                Equivalent to calling GetMass, GetEnergy, GetPrecursorRangeValidity, GetFirstPrecursorMass
                GetLastPrecursorMass,GetIsolationWidth,GetIsolationWidthOffset,GetEnergyValid
                GetActivation, GetIsMultipleActivation.
                Depending on the implementation of the interface, this call may be more efficient
                that calling several of the methods listed.
            </summary>
            <param name="index">index of reaction</param>
            <returns>reaction details</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEventBase#GetSourceFragmentationInfo(System.Int32)">
            <summary>
                Retrieves a source fragmentation info value at 0-based index.
            </summary>
            <remarks>
                Use <see cref="P:ThermoFisher.CommonCore.Data.Interfaces.IScanEventBase.SourceFragmentationInfoCount" /> to get the count of source
                fragmentation info values.
            </remarks>
            <param name="index">
                Index of source fragmentation info to be retrieved
            </param>
            <returns>
                Source Fragmentation info value at 0-based index
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= SourceFragmentationInfoCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEvent#GetSourceFragmentationMassRange(System.Int32)">
            <summary>
                Get the source fragmentation mass range, at a give index.
            </summary>
            <param name="index">
                The index.
            </param>
            <returns>
                The mass range.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">Will be thrown when index >= SourceFragmentationMassRangeCount</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ThermoFisher#CommonCore#Data#Interfaces#IScanEvent#ToString">
            <summary>
                Convert to string.
            </summary>
            <returns>
                The converted scanning method.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CreateEventInfo(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
                Pack the "non array" items from an event into
                the "scan event information" structure.
            </summary>
            <param name="scanEvent">
                The scan event.
            </param>
            <returns>
                The <see cref="T:ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanEventInfo.ScanEventInfoStruct" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FromEvent(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
                Construct from event, from an interface.
                This can permit an application to build a scan filter
                Use "ScanEventBuilder" to make an event
                the use an IRawDataPlus method "event to filter"
                which internally calls this, then uses code already done
                to map "ScanEvent" to "WrappedScanFilter"
            </summary>
            <param name="oldEvent">
                The old event.
            </param>
            <returns>
                The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CalculateHash">
            <summary>
                Calculate hash codes, for faster sort
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CopyRangeTable(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct},System.Func{System.Int32,ThermoFisher.CommonCore.Data.Business.Range},System.Int32)">
            <summary>
                table of mass range
            </summary>
            <param name="into">
                The object to copy into.
            </param>
            <param name="fromFunc">
                Function to get item to copy.
            </param>
            <param name="length">
                The length of the table.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ComparePart1(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent)">
            <summary>
                Compares items in this event, up to the reactions tests.
                Reaction tests are done differently by various callers.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>
                A 32-bit signed integer that indicates the relative order of the objects being compared.
                The return value has the following meanings:
                Value              Meaning
                Less than zero     This object is less than the <paramref name="other" /> parameter.
                Zero               This object is equal to <paramref name="other" />.
                Greater than zero  This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ComparePart2(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent,System.Boolean)">
            <summary>
                Compares items in this event, after the reactions tests.
                Reaction tests are done differently by various callers.
            </summary>
            <param name="other">The other.</param>
            <param name="compareNames">compare names as final test (not needed for auto filter)</param>
            <returns>
                A 32-bit signed integer that indicates the relative order of the objects being compared.
                The return value has the following meanings:
                Value              Meaning
                Less than zero     This object is less than the <paramref name="other" /> parameter.
                Zero               This object is equal to <paramref name="other" />.
                Greater than zero  This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ComparePart2Hash3(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent,System.Boolean)">
            <summary>
                Compares items in this event, after the reactions tests.
                Reaction tests are done differently by various callers.
                Skips items which are fouud equal in hash3
            </summary>
            <param name="other">The other.</param>
            <param name="compareNames">compare names as final test (not needed for auto filter)</param>
            <returns>
                A 32-bit signed integer that indicates the relative order of the objects being compared.
                The return value has the following meanings:
                Value              Meaning
                Less than zero     This object is less than the <paramref name="other" /> parameter.
                Zero               This object is equal to <paramref name="other" />.
                Greater than zero  This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ComparePart2Hash3Hash4(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent,System.Boolean)">
            <summary>
                Compares items in this event, after the reactions tests.
                Reaction tests are done differently by various callers.
                Skips items which are fouud equal in hash3 and hash4
            </summary>
            <param name="other">The other.</param>
            <param name="compareNames">compare names as final test (not needed for auto filter)</param>
            <returns>
                A 32-bit signed integer that indicates the relative order of the objects being compared.
                The return value has the following meanings:
                Value              Meaning
                Less than zero     This object is less than the <paramref name="other" /> parameter.
                Zero               This object is equal to <paramref name="other" />.
                Greater than zero  This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CreateEditor">
            <summary>
                create editable (mutable) scan event.
            </summary>
            <returns>
                The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventEditor" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.GetBytesFromScanEventInfo">
            <summary>
                Convert the internal scan event info struct to byte array.
                <para />
                This method is intended to return the internal scan event info struct as "byte array", such that
                we don't have to be encoded from the properties, when exporting to a new file.
            </summary>
            <returns>
                The byte array from the internal scan event info struct
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ToString">
            <summary>
                The method returns the string representation of the scan event object.
            </summary>
            <returns>
                The <see cref="T:System.String" /> representation of the scan event object.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CompareListsOfDoubles(System.Double[],System.Double[],System.Double)">
            <summary>
                The method compares two lists of doubles.
            </summary>
            <param name="list1">
                The first list of doubles.
            </param>
            <param name="list2">
                The second list of doubles.
            </param>
            <param name="tolerance">
                The tolerance for equivalence.
            </param>
            <returns>
                Return an <see cref="T:System.Int32" /> that has one of three values:
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <description>Meaning</description>
                    </listheader>
                    <term>Less than zero</term>
                    <description>The current instance precedes the object specified by the CompareTo method in the sort order.</description>
                    <term>Zero</term>
                    <description>
                        This current instance occurs in the same position in the sort order as the object specified by the
                        CompareTo method.
                    </description>
                    <term>Greater than zero</term>
                    <description>This current instance follows the object specified by the CompareTo method in the sort order.</description>
                </list>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CompareMassRanges(System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct},System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct})">
            <summary>
                The method compares two lists of mass ranges.
                This version uses "default" tolerance
            </summary>
            <param name="list1">
                The first list of mass ranges.
            </param>
            <param name="list2">
                The second list of mass ranges.
            </param>
            <returns>
                Return an <see cref="T:System.Int32" /> that has one of three values:
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <description>Meaning</description>
                    </listheader>
                    <term>Less than zero</term>
                    <description>The current instance precedes the object specified by the CompareTo method in the sort order.</description>
                    <term>Zero</term>
                    <description>
                        This current instance occurs in the same position in the sort order as the object specified by the
                        CompareTo method.
                    </description>
                    <term>Greater than zero</term>
                    <description>This current instance follows the object specified by the CompareTo method in the sort order.</description>
                </list>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CompareMassRanges(System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct},System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct},System.Double)">
            <summary>
                The method compares two lists of mass ranges.
                Tolerance is half of the passed in "filter mass resolution"
            </summary>
            <param name="list1">
                The first list of mass ranges.
            </param>
            <param name="list2">
                The second list of mass ranges.
            </param>
            <param name="filterMassResolution">Resolution (tolerance) for comparison</param>
            <returns>
                Return an <see cref="T:System.Int32" /> that has one of three values:
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <description>Meaning</description>
                    </listheader>
                    <term>Less than zero</term>
                    <description>The current instance precedes the object specified by the CompareTo method in the sort order.</description>
                    <term>Zero</term>
                    <description>
                        This current instance occurs in the same position in the sort order as the object specified by the
                        CompareTo method.
                    </description>
                    <term>Greater than zero</term>
                    <description>This current instance follows the object specified by the CompareTo method in the sort order.</description>
                </list>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CompareReactions(System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction},System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction})">
            <summary>
                The method compares two lists of reactions.
            </summary>
            <param name="reactions">
                The first list of reaction.
            </param>
            <param name="otherReactions">
                The other list of reactions.
            </param>
            <returns>
                Return an <see cref="T:System.Int32" /> that has one of three values:
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <description>Meaning</description>
                    </listheader>
                    <term>Less than zero</term>
                    <description>The current instance precedes the object specified by the CompareTo method in the sort order.</description>
                    <term>Zero</term>
                    <description>
                        This current instance occurs in the same position in the sort order as the object specified by the
                        CompareTo method.
                    </description>
                    <term>Greater than zero</term>
                    <description>This current instance follows the object specified by the CompareTo method in the sort order.</description>
                </list>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormulateAutoFilterString(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                formulate auto filter string.
            </summary>
            <param name="scanEvent">
                The scan event.
            </param>
            <param name="defaultMassPrecisionFormat">
                The default mass precision format.
            </param>
            <param name="massPrecision">
                The mass precision.
            </param>
            <param name="charsMax">
                The max number of chars
            </param>
            <param name="energyPrecision">
                The energy precision.
            </param>
            <returns>
                The filter as a string
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.CopyArrays(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent)">
            <summary>
                copy arrays from this to "copy"
            </summary>
            <param name="copy">
                The copy.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.AppendString(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnOffTypes,System.String)">
            <summary>
                The method appends the specified string to the result.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="parameter">
                The <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnOffTypes" /> parameter.
            </param>
            <param name="append">
                The string to append.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.AppendString(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OffOnTypes,System.String)">
            <summary>
                The method appends the specified string to the result.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="parameter">
                The <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OffOnTypes" /> parameter.
            </param>
            <param name="append">
                The string to append.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.DuplicateMassRangeList(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct})">
            <summary>
                duplicate a list of mass range.
            </summary>
            <param name="from">
                The data to copy.
            </param>
            <returns>
                A new list which is a copy of the old list.
                If the old list is null: a new empty list.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatAccurateMassType(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.AccurateMassTypes)">
            <summary>
                The format accurate mass type.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="accMassType">Type to format</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatCompensationVoltage(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.String)">
            <summary>
                The format compensation voltage.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanEvent">The scan event to format</param>
            <param name="energyPrecisionFmt">Precision for energy values</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatDependentDataFlag(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IsDependent)">
            <summary>
                The method formats the dependent data flag.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="dependent">The value to format</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatDetector(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.String)">
            <summary>
                The method formats the detector string.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanEvent">Scan event to format</param>
            <param name="energyPrecisionFmt">Precision for energy values</param>
            Indicates that the string is for an Auto Filter.
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatElectronCaptureDissociationType(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.String)">
            <summary>
                The method format electron capture dissociation type.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanEvent">event to format</param>
            <param name="energyPrecisionFmt">precision for energy values</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatFreeRegion(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.FreeRegions)">
            <summary>
                The method formats the free region.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="freeRegion">Free region code</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatIonizationMode(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.IonizationModes)">
            <summary>
                The method formats the ionization mode.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="ionizationMode">The ionization mode</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatMassRanges(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.String,System.String)">
            <summary>
                The method formats the mass ranges.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanEvent">The event to format</param>
            <param name="massPrecisionFmt">Precision for precursor mass</param>
            <param name="engeryPrecisionFmt">Precision for energy</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatMsOrder(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.String,System.String)">
            <summary>
                The method formats the MS order.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanEvent">The event to format</param>
            <param name="massPrecisionFmt">Mass precision to use</param>
            <param name="engeryPrecisionFmt">Precision for activation energy</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatMultiPhotonDissociationType(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.String)">
            <summary>
                The method formats the multi photon dissociation type.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanEvent">Event to format</param>
            <param name="energyPrecisionFmt">Precision for energy</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatPolarity(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.PolarityTypes)">
            <summary>
                The method formats the polarity.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="polarity">Polarity to format</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatScanType(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanTypes)">
            <summary>
                The method formats the scan type.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanType">Type to format</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatScanTypeIndex(System.Text.StringBuilder,System.Int32)">
            <summary>
                The method formats the scan type index.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanTypeIndex">Type to format</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatSectorScan(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.SectorScans)">
            <summary>
                The method formats the sector scan.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="sectorScan">Value to format</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatSourceFragmentation(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.String)">
            <summary>
                The method formats the source fragmentation.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanEvent">Event to format</param>
            <param name="energyPrecisionFmt">Format for energy values</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormatVoltageFeature(System.Text.StringBuilder,System.String,System.Collections.Generic.IList{System.Double},System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.OnOffTypes,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.VoltageTypes,System.String)">
            <summary>
                format a voltage feature.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="energyPrecisionFmt">
                The energy precision format.
            </param>
            <param name="srcFrags">
                The source fragmentations.
            </param>
            <param name="framentationsOffset">offet from start of fragmentations array</param>
            <param name="voltEnable">
                The volt enable.
            </param>
            <param name="voltType">
                The volt type.
            </param>
            <param name="code">
                The code.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormulateAutoFilterReaction(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.Reaction,System.String,System.String)">
            <summary>
                The method formulates auto filter reaction.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="reaction">
                The reaction.
            </param>
            <param name="massPrecisionFmt">
                Format for precursor mass
            </param>
            <param name="energyPrecisionFmt">
                Format for collision energy
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FormulateScanDataType(System.Text.StringBuilder,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.ScanDataTypes)">
            <summary>
                The method formats the scan data type.
            </summary>
            <param name="result">
                The result.
            </param>
            <param name="scanDataType">Value to format</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.GetMassAnalyzerTypeFilterString(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.ScanFilterEnums.MassAnalyzerTypes)">
            <summary>
                Gets the mass analyzer type filter string.
            </summary>
            <param name="massAnalyzerTypes">The mass analyzer types.</param>
            <returns>the mass analyzer type filter string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.GetMassRangeString(System.Int32,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.MassRangeStruct,System.Boolean,System.Collections.Generic.IList{System.Double},System.String,System.String)">
            <summary>
                Convert the mass range to string.
            </summary>
            <param name="i">
                The index into the table of ranges.
            </param>
            <param name="range">
                The range.
            </param>
            <param name="isDissociation">
                The is dissociation.
            </param>
            <param name="srcFragVals">
                The source fragmentation values.
            </param>
            <param name="massPrecisionFmt">
                The mass precision format.
            </param>
            <param name="energyPrecisionFmt">
                The energy precision format.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ListSafeCount(System.Collections.IList)">
            <summary>
                Safely Count items in a list. Count is zero for a null list.
            </summary>
            <param name="list">List to count</param>
            <returns>Count of items in the list</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.FixUpDefaults(System.Int32)">
            <summary>
                This method fixes up defaults.
            </summary>
            <param name="fileVersion">
                The file version.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ReadReactionsArray(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
                The method reads the reactions array.
            </summary>
            <param name="viewer">
                The viewer.
            </param>
            <param name="dataOffset">
                Offset into memory map
            </param>
            <param name="fileRevision">
                The file version.
            </param>
            <returns>
                The number of bytes read.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent.ReadStructure(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
                The method reads the structure.
            </summary>
            <param name="viewer">
                The viewer.
            </param>
            <param name="dataOffset">
                Offset into memory map
            </param>
            <param name="fileVersion">
                The file version.
            </param>
            <returns>
                The number of bytes read.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator">
            <summary>
            The scan event decorator.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ReaderScanEvent">
            <summary>
            Gets the (decorated) scan event
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator"/> class.
            </summary>
            <param name="scanEvent">
            The scan event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ToAutoFilterString(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileReaderScanEvent,System.Int32,System.Int32,System.Int32)">
            <summary>
            To the automatic filter string.
            </summary>
            <param name="scanEvent">The scan event.</param>
            <param name="massPrecision">The mass precision.</param>
            <param name="charsMax">The chars maximum.</param>
            <param name="energyPrecision">The energy precision.</param>
            <returns>Auto filter string.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.GetRunHeaderFilterMassPrecision">
            <summary>
            Gets the run header filter mass precision.
            </summary>
            <returns>the run header filter mass precision</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.BaseScanEvent">
            <summary>
            Gets the base scan event.
            </summary>
            <value>
            The base scan event.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.DependentDataFlag">
            <summary>
            Gets or sets the dependent data flag.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Wideband">
            <summary>
            Gets or sets the wide band.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.SupplementalActivation">
            <summary>
            Gets or sets the supplemental activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.MultiStateActivation">
            <summary>
            Gets or sets the multi state activation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.AccurateMassType">
            <summary>
            Gets or sets the accurate mass type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Detector">
            <summary>
            Gets or sets the detector.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.SourceFragmentation">
            <summary>
            Gets or sets the source fragmentation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.SourceFragmentationType">
            <summary>
            Gets or sets a value which indicates how source fragmentation values are interpreted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.CompensationVoltage">
            <summary>
            Gets or sets the compensation voltage.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.CompensationVoltageType">
            <summary>
            Gets or sets the compensation voltage type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.TurboScan">
            <summary>
            Gets or sets the turbo scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Lock">
            <summary>
            Gets or sets the lock.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Multiplex">
            <summary>
            Gets or sets the multiplex.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ParamA">
            <summary>
            Gets or sets the parameter a.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ParamB">
            <summary>
            Gets or sets the parameter b.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ParamF">
            <summary>
            Gets or sets the parameter f.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.SpsMultiNotch">
            <summary>
            Gets or sets SPS Multi notch (Synchronous Precursor Selection)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ParamR">
            <summary>
            Gets or sets the parameter r.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ParamV">
            <summary>
            Gets or sets the parameter v.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Ultra">
            <summary>
            Gets or sets the ultra.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Enhanced">
            <summary>
            Gets or sets the enhanced.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ElectronCaptureDissociationType">
            <summary>
            Gets or sets the electron capture dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.MultiPhotonDissociationType">
            <summary>
            Gets or sets the multi photon dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Corona">
            <summary>
            Gets or sets the corona value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.DetectorValue">
            <summary>
            Gets or sets the detector value.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ElectronCaptureDissociation">
            <summary>
            Gets or sets the electron capture dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ElectronTransferDissociation">
            <summary>
            Gets or sets the electron transfer dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ElectronTransferDissociationType">
            <summary>
            Gets or sets the electron transfer dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.FreeRegion">
            <summary>
            Gets or sets the free region.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.HigherEnergyCid">
            <summary>
            Gets or sets the higher energy CID.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.HigherEnergyCidType">
            <summary>
            Gets or sets the higher energy CID type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.IonizationMode">
            <summary>
            Gets or sets the ionization mode.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.IsCustom">
            <summary>
            Gets or sets a value indicating whether the scan event is custom - true if trailer
                scan event should be used.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.IsValid">
            <summary>
            Gets or sets a value indicating whether the scan event is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.MsOrder">
            <summary>
            Gets or sets the MS order.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.MassAnalyzerType">
            <summary>
            Gets or sets the mass analyzer type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.MassCalibrators">
            <summary>
            Gets or sets the mass calibrators.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.MassRanges">
            <summary>
            Gets or sets the mass ranges.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.MultiPhotonDissociation">
            <summary>
            Gets or sets the multi photon dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.PhotoIonization">
            <summary>
            Gets or sets the photo ionization.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Polarity">
            <summary>
            Gets or sets the Polarity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.PulsedQDissociation">
            <summary>
            Gets or sets the pulsed q dissociation.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.PulsedQDissociationType">
            <summary>
            Gets or sets the pulsed q dissociation type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.Reactions">
            <summary>
            Gets or sets the reactions.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ScanDataType">
            <summary>
            Gets or sets the scan data type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ScanType">
            <summary>
            Gets or sets the scan type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.ScanTypeIndex">
            <summary>
            Gets or sets the scan type index. Scan Type Index indicates the segment/scan event for this filter scan event.
                HIWORD == segment, LOWORD == scan type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.SectorScan">
            <summary>
            Gets or sets the sector scan.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.SourceFragmentationMassRanges">
            <summary>
            Gets or sets the source fragmentation mass ranges.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventDecorator.SourceFragmentations">
            <summary>
            Gets or sets the source fragmentations.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventEditor">
            <summary>
            The scan event editor.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventEditor.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEventEditor"/> class.
            </summary>
            <param name="scanEvent">
            The scan event.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex">
            <summary>
            The scan index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.ScanIndexStructInfo">
            <summary>
            Gets or sets the scan index struct info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64,System.Func{System.Byte[],ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex"/> class.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="size">The size.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.BasePeakIntensity">
            <summary>
            Gets the base peak intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.BasePeakMass">
            <summary>
            Gets the base peak mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.DataOffset">
            <summary>
            Gets the data offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.HighMass">
            <summary>
            Gets the high mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.IsScanTypeIndexSpecified">
            <summary>
            Gets a value indicating whether is scan type index specified.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.LowMass">
            <summary>
            Gets the low mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.NumberPackets">
            <summary>
            Gets the number packets.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.PacketType">
            <summary>
            Gets the packet type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.HighPacketTypeWord">
            <summary>
            Gets meta data about the packet type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.ScanNumber">
            <summary>
            Gets the scan number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.ScanSegment">
            <summary>
            Gets the scan segment.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.ScanTypeIndex">
            <summary>
            Gets the scan type index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.Tic">
            <summary>
            Gets the tic.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.TrailerOffset">
            <summary>
            Gets the trailer offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.ScanTypeRawIndex">
            <summary>
            Gets the raw (unprocessed) value of the scan type index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64,System.Func{System.Byte[],ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct})">
            <summary>
            Loads the specified viewer.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="size">The size.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices">
            <summary>
            Provides methods to read scan indices from raw file.
            Scan index serves as the key to retrieve the scan data packet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices"/> class.
            </summary>
            <param name="size">The number of spectrum.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex"/>.
            </value>
            <param name="index">The index.</param>
            <returns>Scan index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.GetRetentionTime(System.Int32)">
            <summary>
            Gets the retention time from the index, with minimal decoding
            </summary>
            <param name="index"></param>
            <returns>The retention time</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.Count">
            <summary>
            Gets the number of spectrum.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">The viewer (memory map into file).</param>
            <param name="dataOffset">The data offset (into the memory map).</param>
            <param name="fileRevision">The file revision.</param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.GetSizeOfScanIndexStructByFileVersion(System.Int32)">
            <summary>
            Gets the size of scan index structure by file version.
            </summary>
            <param name="fileVersion">The file version.</param>
            <returns>Struct size specified by the file version.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.GetDecoder(System.Int32)">
            <summary>
            Gets the decoder.
            </summary>
            <param name="fileVersion">The file version.</param>
            <returns>A method that will reads the scan index struct from a byte array and convert it back to struct.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.ReadScanIndexStruct(System.Byte[])">
            <summary>
            Reads the scan index structure from a byte array and convert it to struct.
            </summary>
            <param name="bytes">Scan index in byte array.</param>
            <returns>Scan index struct.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.ReadScanIndexStruct2(System.Byte[])">
            <summary>
            Reads the scan index struct2 from a byte array and convert it to struct.
            </summary>
            <param name="bytes">Scan index in byte array.</param>
            <returns>Scan index struct.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.ReadScanIndexStruct1(System.Byte[])">
            <summary>
            Reads the scan index struct1 from a byte array and convert it to struct.
            </summary>
            <param name="bytes">Scan index in byte array.</param>
            <returns>Scan index struct.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndices.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents">
            <summary>
                The trailer scan events.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents"/> class. 
            </summary>
            <param name="loaderId">
            The loader Id.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents"/> class.
            </summary>
            <param name="loaderId">Loader ID</param>
            <param name="runHeader">The run header.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents"/> class.
            </summary>
            <param name="loaderId">The loader ID</param>
            <param name="runHeader">The run header.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.ScanIndexCount">
            <summary>
            Gets the scan index count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.UniqueEventsCount">
            <summary>
            Gets the unique events count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.HeaderFileMapName">
            <summary>
            Gets the header file map name. <para/>
            It's only meaningful in Generic data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.CreateInputQueue(System.Collections.Concurrent.BlockingCollection{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent[]},ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Decode scan events and add to a queue to be sorted
            </summary>
            <param name="inputQueue"></param>
            <param name="viewer"></param>
            <param name="fileRevision"></param>
            <param name="myStartPos"></param>
            <param name="appendFrom"></param>
            <param name="numTse"></param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.GetEvent(System.Int32)">
            <summary>
            The get event.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent"/>.
            </returns>
            <exception cref="T:System.Exception">
            Thrown if the index is out of range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.GetUniqueEventsIndex(System.Int32)">
            <summary>
            Gets the index of the unique events.
            </summary>
            <param name="index">The index.</param>
            <returns>The index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.Load(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent[])">
            <summary>
            load the events
            </summary>
            <param name="scanEvents">
            The scan events.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.Dispose(System.Boolean)">
            <summary>
            dispose of object.
            </summary>
            <param name="disposing">
            true if disposing.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.TrailerScanEvents.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex">
            <summary>
            The UV scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64,System.Func{System.Byte[],ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.UvScanIndexStruct})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex"/> class.
            </summary>
            <param name="viewer">
            The device' memory mapped stream viewer.
            </param>
            <param name="size">Size of the UV scan index struct</param>
            <param name="dataOffset">The data offset.</param>
            <param name="decoder">A method that will reads the UV scan index struct from a byte array and convert it back to struct.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.UvScanIndexStructInfo">
            <summary>
            Gets or sets the UV scan index structure information.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.DataOffset">
            <summary>
                Gets the data offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.Frequency">
            <summary>
            Gets the frequency.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.IsUniformTime">
            <summary>
            Gets a value indicating whether is uniform time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.LongWavelength">
            <summary>
            Gets the long wavelength.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.NumberOfChannels">
            <summary>
            Gets the number of channels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.NumberPackets">
            <summary>
                Gets the number packets.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.PacketType">
            <summary>
                Gets or sets the packet type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.ScanNumber">
            <summary>
                Gets the scan number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.ShortWavelength">
            <summary>
            Gets the short wavelength.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.StartTime">
            <summary>
                Gets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.Tic">
            <summary>
                Gets or sets the TIC.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64,System.Func{System.Byte[],ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.UvScanIndexStruct})">
            <summary>
            Loads the specified viewer.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="size">The size.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices">
            <summary>
            Provides methods to read UV scan indices from raw file.
            UV scan index serves as the key to retrieve the scan data packet.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load UV scan indices from raw file.
            </summary>
            <param name="viewer">The viewer (memory map into file).</param>
            <param name="dataOffset">The data offset (into the memory map).</param>
            <param name="fileRevision">The file revision.</param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>UV scan index</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.Count">
            <summary>
            Gets the number of spectrum.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.GetSizeOfUvScanIndexStructByFileVersion(System.Int32)">
            <summary>
            Gets the size of UV scan index structure by file version.
            </summary>
            <param name="fileVersion">The file version.</param>
            <returns>Struct size specified by the file version</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.GetDecoder(System.Int32)">
            <summary>
            Gets the decoder.
            </summary>
            <param name="fileVersion">The file version.</param>
            <returns>A method that will reads the UV scan index struct from a byte array and convert it back to struct. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.ReadUvScanIndexStruct(System.Byte[])">
            <summary>
            Reads the UV scan index structure old from a byte array and 
            convert it back to struct.
            </summary>
            <param name="bytes">UV Scan index struct in byte array.</param>
            <returns>UV scan index struct.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.ReadUvScanIndexStructOld(System.Byte[])">
            <summary>
            Reads the UV scan index structure old from a byte array and 
            convert it back to struct.
            </summary>
            <param name="bytes">UV Scan index struct in byte array.</param>
            <returns>In struct format</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndices.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow">
            <summary>
            The sequence row.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.NumberOfExtraUserColumns">
            <summary>
            The number of extra user columns.
            added at rev 58...
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.NumberOfUserTexts">
            <summary>
            The number of user texts.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.Barcode">
            <summary>
            Gets or sets the barcode.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.BarcodeStatus">
            <summary>
            Gets or sets the barcode status.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.CalLevel">
            <summary>
                Gets or sets the calibration level
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.CalibFile">
            <summary>
            Gets or sets the calibration file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.Comment">
            <summary>
                Gets or sets the comment
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.ConcentrationDilutionFactor">
            <summary>
                Gets or sets the concentration or dilution factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.ExtraUserColumns">
            <summary>
            Gets the extra user columns.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.InjectionVolume">
            <summary>
                Gets or sets the injection volume
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.Inst">
            <summary>
            Gets or sets the instrument.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.InternalStandardAmount">
            <summary>
                Gets or sets the internal standard amount
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.Method">
            <summary>
            Gets or sets the method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.RawFileName">
            <summary>
            Gets or sets the raw file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.Revision">
            <summary>
                Gets the format revision of this object
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.RowNumber">
            <summary>
                Gets or sets the sequence row number
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.SampleId">
            <summary>
                Gets or sets the sample id
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.SampleName">
            <summary>
                Gets or sets the sample name
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.SampleType">
            <summary>
                Gets or sets the (application specific) sample type
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.SampleVolume">
            <summary>
                Gets or sets the sample volume
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.SampleWeight">
            <summary>
                Gets or sets the sample weight
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.UserTexts">
            <summary>
            Gets the user texts.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.Vial">
            <summary>
                Gets or sets the short vial string (obsolete?)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.SequenceRowStruct">
            <summary>
            Gets the sequence row struct, only needed internally for writing raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The load.
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection">
            <summary>
                The sorted status log collection.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection" /> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.Count">
            <summary>
            Gets the count (of sorted items).
            This may be lower than the number of records in the file
            as duplicate time values are eliminated.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.AddStatusBlob(System.Single,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob,System.Boolean)">
            <summary>
            Add a status blob.
            </summary>
            <param name="retentionTime">
            The retention time.
            </param>
            <param name="statusBlob">
            The status blob to add.
            </param>
            <param name="finalEntry">Set if this is the last log entry</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.GetItem(System.Double)">
            <summary>
            Find the log entry nearest to a given time.
            </summary>
            <param name="retentionTime">
            The retention time.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.GetItemValues(System.Int32)">
            <summary>
            The method gets a list of status log entries based on the index.
            </summary>
            <param name="index">
            The index into the status log entry (i.e. index into a key value pair).
            </param>
            <returns>
            The list of status log entries based on the index.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.GetBlobEntry(System.Int32)">
            <summary>
            get a blob entry, with time stamp.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            A tuple, containing time (float) and LabelValueBlob.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.GetSortedBlobEntry(System.Int32)">
            <summary>
            get a blob entry, with time stamp.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            A tuple, containing time (float) and LabelValueBlob.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.GetBlobEntry(System.Double)">
            <summary>
            get a blob entry, with time stamp.
            </summary>
            <param name="retentionTime">The retention time </param>
            <returns>
            A tuple, containing time (float) and LabelValueBlob.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.GetItem(System.Int32)">
            <summary>
            get item at index
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry"/>.
            </returns>
            <exception cref="T:System.ArgumentException">index out of range
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.SortKeys">
            <summary>
                The sort keys.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.Clear">
            <summary>
            clear the list
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SortedStatusLogCollection.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions">
            <summary>
            The spectrum enhancement options.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.SpecEnhancementInfo">
            <summary>
            Spectrum enhancement binary data.
            Defined a public fields, matching C++ definition
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions"/> class.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">
            The viewer (memory map into file).
            </param>
            <param name="dataOffset">
            The data offset (into the memory map).
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.Enabled">
            <summary>
            Gets a value indicating whether the refine (combine) section enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.SpectrumMethod">
            <summary>
            Gets a value indicating we using refine, combine or threshold
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.RefineWindowSize">
            <summary>
            Gets the refine window size
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.RefineNoiseThreshold">
            <summary>
            Gets he refine noise threshold
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.TopRegionWidth">
            <summary>
            Gets the combine take points across peak top
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.BackgroundScalingFactor">
            <summary>
            Gets the combine background scaling factor
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.LeftRegionMethod">
            <summary>
            Gets the Region 1 method: at peak or use previous
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.PointsBeforePeakTop">
            <summary>
            Gets the start point before the peak top
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.LeftRegionPoints">
            <summary>
            Gets the previous points in background
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.RightRegionMethod">
            <summary>
            Gets Region 2 method: at peak or use next
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.PointsAfterPeakTop">
            <summary>
            Gets Points after peak top
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.RightRegionPoints">
            <summary>
            Gets the next point in background
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SpectrumEnhancementOptions.CutOffThreshold">
            <summary>
            Gets the cut off threshold
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog">
            <summary>
            The status log is a list of label value blobs indexed by retention time.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="runHeader">
            The run header.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.#ctor(System.Guid,System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <param name="runHeader">
            The run header.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.DataDescriptors">
            <summary>
            Gets or sets the data descriptors.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.HeaderFileMapName">
            <summary>
            Gets the header file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.GetItem(System.Double)">
            <summary>
            The method performs a binary search to find the status entry that is closest to the given retention time.
            </summary>
            <param name="retentionTime">
            The retention time.
            </param>
            <returns>
            The status entry containing the <see cref="T:System.Collections.Generic.List`1"/> of label value pairs for the retention time.
            If there are no entries in the log, it will an empty list.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.GetItemValues(System.Int32)">
            <summary>
            The method gets all the log entries' value pair at the specified index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The all the log entries' value pair at the specified index.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.GetStatusLogEntryByIndex(System.Int32)">
            <summary>
            get (raw) status log entry by index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IStatusLogEntry"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.GetSortedStatusLogEntryByIndex(System.Int32)">
            <summary>
            get (raw) status log entry by index into the sorted (data validated) collection
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.Data.Interfaces.IStatusLogEntry"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.GetStatusLogEntryByRetentionTime(System.Double)">
            <summary>
            Gets the (raw) status log entry by retention time.
            </summary>
            <param name="retentionTime">The retention time.</param>
            <returns>The log at the given time.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.LocalLogEntry">
            <summary>
            An internal representation of log entry.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.LocalLogEntry.Time">
            <summary>
            Gets or sets the time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.LocalLogEntry.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.StatusLogPlottableData">
            <summary>
            Gets the labels and index positions of the status log items which may be plotted.
            That is, the numeric items.
            Labels names are returned by "Key" and the index into the log is "Value".
            </summary>
            <returns>
            The items which can be plotted.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load (from file).
            </summary>
            <param name="viewer">The viewer (memory map into file).</param>
            <param name="dataOffset">The data offset (into the memory map).</param>
            <param name="fileRevision">The file revision.</param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.LoadDataDescriptors(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Loads the data descriptors.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="fileRevision">The file revision.</param>
            <returns>True load data succeed, false otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.GetStatusRecordByIndex(System.Int32)">
            <summary>
            Gets the status log for a given index into the set of logs.
            This returns the log and it's time stamp.
            </summary>
            <param name="index">Index into table of logs (from 0 to RunHeader.Number of StatusLog - 1)</param>
            <returns>The log values for the given index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.LoadStatusLogEntries(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The method calls <see cref="T:ThermoFisher.CommonCore.RawFileReader.Readers.MemoryMappedRawFileManager" /> to get an <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor" />
            object for the memory mapped view stream that represents the status log's "blob". It will then
            divide the blob into individual status log entries without actually reading in the status log items.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="fileRevision">The file revision.</param>
            <returns>True load status log entries succeed, false otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>True refresh succeed, false otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLog.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry">
            <summary>
                The status log entry which consists of the retention time and the value pairs.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry.#ctor(System.Double,System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry"/> class.
            </summary>
            <param name="time">
            The time.
            </param>
            <param name="valuePairs">
            The value pairs.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry.RetentionTime">
            <summary>
            Gets the retention time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogEntry.ValuePairs">
            <summary>
            Gets the value pairs.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKey">
            <summary>
                The status log key.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKey.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKey"/> class.
            </summary>
            <param name="rt">
            The retention time.
            </param>
            <param name="index">
            The index.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKey.BlobIndex">
            <summary>
                Gets the blob index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKey.RetentionTime">
            <summary>
                Gets the retention time.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKeyComparer">
            <summary>
                The status log key comparer.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKeyComparer.Compare(ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKey,ThermoFisher.CommonCore.RawFileReader.StructWrappers.StatusLogKey)">
            <summary>
            The compare.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SummaryReport">
            <summary>
            The summary report, as contained in Xcalibur PMD file
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SummaryReport.SummaryReportTemplateInfo">
            <summary>
            The summary report template info.
            Defines the name of a report, and file format type of the report.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SummaryReport.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Load report data
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The length of data loaded
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SummaryReport.ReportName">
            <summary>
            Gets or sets the name of the report
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SummaryReport.Enabled">
            <summary>
            Gets a value indicating whether report is enabled
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.SummaryReport.SaveAsType">
            <summary>
            Gets the file save format of the report
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.UserIdStamp">
            <summary>
            The user id stamp wrapper class wraps the user id structure read from the raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.UserIdStamp.#ctor(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.UserIdStampStruct)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.UserIdStamp"/> class.
            </summary>
            <param name="structure">
            The structure.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.UserIdStamp.DateAndTime">
            <summary>
            Gets or sets the date and time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.UserIdStamp.UserName">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.UserIdStamp.WindowsLogin">
            <summary>
            Gets or sets the windows login.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.UserIdStamp.ConvertDateTime">
            <summary>
            The method converts the raw file time structure to a <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo">
            <summary>
            The wrapper class for the virtual controller information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo.#ctor(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.VirtualControllerInfoStruct)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo"/> class by
            copying from the structure.
            </summary>
            <param name="copyFrom">
            The structure to copy from.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo.Offset">
            <summary>
            Gets the offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo.VirtualDeviceIndex">
            <summary>
            Gets the virtual device index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo.VirtualDeviceType">
            <summary>
            Gets the virtual device type.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase">
            <summary>
            The device base class for all type of devices - UV, PDA, MS, Analog, and Status.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.InAcquisition">
            <summary>
            Gets or sets a value indicating whether this was initialized when the file was in acquisition.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase"/> class.
            </summary>
            <param name="deviceType">Type of the device.</param>
            <param name="registeredIndex">Index of the registered.</param>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase"/> class.
            </summary>
            <param name="loaderId">raw file loader ID</param>
            <param name="deviceInfo">
            The device info.
            </param>
            <param name="rawFileName">
            The main MMF viewer.
            </param>
            <param name="fileRevision">
            The file version.
            </param>
            <param name="isInAcquisition">Flag indicates that it's in acquisition or not</param>
            <param name="oldRev">Flag indicates that the reading data is old LCQ data or not</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.BaseDataInitialization">
            <summary>
            This must be called at the start of any derived class initlaize sequence.
            Minimial construction work is done before this initializrion, incase the device never used by this app instance.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.OffsetOfEndOfDevice">
            <summary>
            Gets or sets the absolute position of the end of this device data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.DeviceType">
            <summary>
            Gets the device type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.ErrorLogEntries">
            <summary>
            Gets the error log entries.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.InstrumentId">
            <summary>
                Gets the instrument id.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.RunHeader">
            <summary>
            Gets or sets the run header.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.StatusLogEntries">
            <summary>
            Gets or sets the status log entries.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.HeaderFileMapName">
            <summary>
            Gets the header file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.RawFileInformation">
            <summary>
            Gets the raw file information.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.LoaderId">
            <summary>
            Gets the loader id.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.RawDataViewer">
            <summary>
            Gets the raw data viewer.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.OffsetOfTheEndOfDeviceCommonInfo">
            <summary>
            Gets the offset of the end of device common info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.GetScanIndex(System.Int32)">
            <summary>
            The method gets the scan index for the spectrum.
            </summary>
            <param name="spectrum">The spectrum. </param>
            <returns>Scan index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.GetRetentionTime(System.Int32)">
            <summary>
            The method gets the retention time for the scan number.
            </summary>
            <param name="spectrum">
            The scan number.
            </param>
            <returns>
            The retention time for the scan number.
            </returns>
            <exception cref="T:System.Exception">
            If the scan number is not in range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.Initialize">
            <summary>
            Initalize device after construction, for use by Lazy pattern.
            Must be implemented in derived devices.
            </summary>
            <returns>The initialized device</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.GetSegmentPeaks(System.Int32,System.Int32@,System.Int32@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket@,System.Boolean)">
            <summary>
            Gets the segment peaks.
            </summary>
            <param name="scanNum">
            The scan number.
            </param>
            <param name="numSegments">
            The number segments.
            </param>
            <param name="numAllPeaks">
            The number all peaks.
            </param>
            <param name="packet">
            The packet.
            </param>
            <param name="includeReferenceAndExceptionData">
            Flag to indicate the returning peak data should include reference and exception data or not.
            </param>
            <returns>
            Segment data
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.GetPacket(System.Int32,System.Boolean,System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            Gets the packet.
            </summary>
            <param name="scanNumber">The scan number.</param>
            <param name="includeReferenceAndExceptionData">Flag to indicate the returning peak data should include reference and exception data or not.</param>
            <param name="channelNumber">For UV device only, negative one (-1) for getting all the channel data by the given scan number</param>
            <param name="packetScanDataFeatures">True if noise and baseline data is required</param>
            <returns>Return the peak data packet</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The method loads the common device data structures from MMF view stream.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="fileRevision">The file revision.</param>
            <returns>The number of read bytes</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.InAcquisitionInitializer(System.String,System.Int32)">
            <summary>
            Initialize the internal fields in acquisition mode.
            </summary>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.NonAcquisitionInitializer(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32)">
            <summary>
            Initials the non acquisition.
            </summary>
            <param name="deviceInfo">The device information.</param>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.OldLcqXcalFileInitializer">
            <summary>
            Initials the old LCQ XCALIBUR file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.InitializeBufferInfo">
            <summary>
            Initializes the buffer information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.DisposeBufferInfoAndTempFile">
            <summary>
            Disposes the buffer information and temporary file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceBase.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>True refresh succeed, false otherwise. </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceFactory">
            <summary>
            Provide method to create device objects
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.DeviceFactory.GetDevice(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the device.
            </summary>
            <param name="loaderId">raw file loader ID</param>
            <param name="deviceInfo">The device information.</param>
            <param name="rawFileName">The viewer.</param>
            <param name="fileVersion">The file version.</param>
            <param name="isInAcquisition">if set to <c>true</c> [is in acquisition].</param>
            <returns>Device object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId">
            <summary>
            The instrument id.
            This records data about an instrument (such as data units).
            It does not contain any scans.
            There is one record, written before data acquisition starts.
            It never changes.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.#ctor(System.Guid,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="mapName">
            The map name.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.AbsorbanceUnit">
            <summary>
            Gets or sets the absorbance unit.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.ChannelLabels">
            <summary>
            Gets the channel labels.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.Flags">
            <summary>
            Gets the flags.
            The purpose of this field is to contain flags separated by ';' that
            denote experiment information, etc. For example, if a file is acquired
            under instrument control based on an experiment protocol like an ion
            mapping experiment, an appropriate flag can be set here.
            Legacy flags (from LCQ system)
                1. TIM  - total ion map
                2. NLM  - neutral loss map
                3. PIM  - parent ion map
                4. DDZMAP - data dependent zoom map
            Newer flags proposed:
            high_res_precursors - MS has accurate mass precursors
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.HardwareVersion">
            <summary>
            Gets the hardware rev.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.IsValid">
            <summary>
            Gets a value indicating whether the ID is valid.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.SoftwareVersion">
            <summary>
            Gets the software rev.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.AxisLabelX">
            <summary>
            Gets the x axis.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.AxisLabelY">
            <summary>
            Gets the y axis.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.IsTsqQuantumFile">
            <summary>
            Gets a value indicating whether this is a TSQ quantum file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.HeaderFileMapName">
            <summary>
            Gets the header file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            load (from file)
            </summary>
            <param name="viewer">
            The viewer.
            </param>
            <param name="dataOffset">
            The data offset.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <returns>
            The number of bytes loaded.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>True refresh succeed, false otherwise </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.InstrumentId.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice">
            <summary>
            The mass spectrometer device.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice"/> class.
            </summary>
            <param name="loaderId">raw file loader ID</param>
            <param name="deviceInfo">
            The device info.
            </param>
            <param name="rawFileName">
            The viewer.
            </param>
            <param name="fileRevision">
            The file version.
            </param>
            <param name="isInAcquisition">Set if this file is being created</param>
            <param name="oldRev">Set if this file version is from a legacy data system</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.Initialize">
            <summary>
            Initializer, desigened for use by Lazy load pattern.
            Base object can be created to perform version checks.
            When device needs to be used for the first time, Initialize is called.
            </summary>
            <returns>The initialized device</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.NumScanEvents">
            <summary>
            Gets the number scan events.
            </summary>
            <value>
            The number scan events.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.NumScanEventSegments">
            <summary>
            Gets the number scan event segments.
            </summary>
            <value>
            The number scan event segments.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ScanEventSegments">
            <summary>
            Sets the scan event segments.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.TrailerExtras">
            <summary>
            Gets or sets the trailer extras.
            </summary>
            <value>
            The trailer extras.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.TrailerExtrasDataDescriptors">
            <summary>
            Gets the trailer extras data descriptors.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.TrailerScanEvents">
            <summary>
            Gets or sets the trailer scan events.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.TuneData">
            <summary>
            Gets or sets the tune data.
            </summary>
            <value>
            The tune data.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.TuneMethodDataDescriptors">
            <summary>
            Gets the tune method data descriptors.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.PacketViewer">
            <summary>
            Gets or sets the packet viewer.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.SetPrecursorIonTolerance(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent,System.Boolean,System.Int32)">
            <summary>
            Sets the precursor ion tolerance.
            </summary>
            <param name="filterScanEvent">The scan event.</param>
            <param name="isQuantum">if set to <c>true</c> [b quantum].</param>
            <param name="filterMassPrecision">The filter mass precision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetAdvancedPacketData(System.Int32,System.Boolean)">
            <summary>
            This method get the noise, baselines and frequencies data.
            This will typically used by the application when exporting mass spec data to a raw file.<para/>
            The advanced packet data is for LT/FT formats only.<para/>
            </summary>
            <param name="scanNumber">The scan number.</param>
            <param name="includeReferenceAndExceptionData">Set if centroid data should include the reference and exception peaks</param>
            <returns>Returns the IAdvancedPacketData object.</returns>
            <exception cref="T:System.Exception">Thrown if encountered an error while retrieving LT/FT's data, i.e. noise data and frequencies.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetAutoFilters">
            <summary>
            The method gets the auto filters.
            </summary>
            <returns>
            The collection of auto filters.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetCompoundNameByScanFilter(System.String)">
            <summary>
            Gets the compound name by scan filter.
            </summary>
            <param name="scanFilterstring">The scan filter string.</param>
            <returns>The compound names</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetCompoundNames">
            <summary>
            Gets the compound names.
            </summary>
            <returns>The compound names</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AddNamesInScanRangeToSet(System.Collections.Generic.SortedSet{System.String},System.Int32,System.Int32)">
            <summary>
            Add the names of all compounds within a scan number range to a set.
            </summary>
            <param name="sortedCompoundNamesSet">Set to update</param>
            <param name="firstSpec">First scan to examine</param>
            <param name="lastSpec">Last scan to examine</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetFilters(System.Int32,System.Int32)">
            <summary>
            Gets the filters.
            </summary>
            <param name="firstSpectrum">The first spectrum.</param>
            <param name="lastSpectrum">The last spectrum.</param>
            <returns>The list of filters for the given scan range</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetLabelPeaks(System.Int32,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex)">
            <summary>
            The method gets the label peaks.
            Caller may have already obtained some items (scan index and event)
            If not: these are passed as null, and will be obtained within this
            call as needed.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="includeReferenceAndExceptionPeaks">set if calibration reference and exception peaks should be returned</param>
            <param name="packetScanDataFeatures">True if noise and baseline data is required</param>
            <param name="scanEvent">optional: scan event (to save reading twice)</param>
            <param name="scanIndex">optional: data about this scan</param>
            <returns>
            The collection of <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.LabelPeak"/>s.
            </returns>
            <exception cref="T:System.Exception">
            Thrown if encountered an error while retrieving label peaks.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetMsPacket(System.Int32,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent)">
            <summary>
            get scan data from mass spec.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="includeReferenceAndExceptionData">
            The include reference and exception data.
            </param>
            <param name="packetScanDataFeatures">
            The additional scan data features.
            </param>
            <param name="scanIndex">
            The scan index.
            </param>
            <param name="scanEvent">
            The scan event.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IMsPacket"/>.
            </returns>
            <exception cref="T:System.NotImplementedException">For data types which we cannot decode
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetNextScanIndex(System.Int32,ThermoFisher.CommonCore.Data.Business.ScanFilterHelper)">
            <summary>
            Find the next scan matching a filter
            </summary>
            <param name="currentPosition">start to start from</param>
            <param name="scanFilterHelper">Scan must pass this filter</param>
            <returns>the next scan matching the filter criteria from the data file.
            If the number of filters passed in is zero, it simply returns the next scan
            after position. The search for the next scan always starts at scan position + 1.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetPacket(System.Int32,System.Boolean,System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            The method gets the object that implements <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket"/> for the scan number.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="includeReferenceAndExceptionData">true if (calibration) ref and exception peaks should be included</param>
            <param name="channelNumber">For UV device only, negative one (-1) for getting all the channel data by the given scan number</param>
            <param name="packetScanDataFeatures">True if noise and baseline data is required</param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket"/> implementation.
            </returns>
            <exception cref="T:System.NotImplementedException">
            Thrown if the packet type is not implemented.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetPreviousScanIndex(System.Int32,ThermoFisher.CommonCore.Data.Business.ScanFilterHelper)">
            <summary>
            Get the previous scan index.
            </summary>
            <param name="currentPosition">
            The cur position (scan).
            </param>
            <param name="scanFilterHelper">
            The scan filter helper.
            </param>
            <returns>
            The previous scan matching filter. -1 if no matching scans.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetScanDependents(System.Int32,System.Int32)">
            <summary>
            Gets the scan dependents for the specified scan number and filter precision
            </summary>
            <param name="scanNumber">The scan number.</param>
            <param name="filterPrecision">The filter precision.</param>
            <returns><see cref="T:ThermoFisher.CommonCore.RawFileReader.ScanDependents"/> containing master scan dependents information</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetScanEvent(System.Int32)">
            <summary>
            The method gets the scan event for the scan number.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent"/> object for the scan number.
            </returns>
            <exception cref="T:System.Exception">
            If there are issues retrieving the scan event (e.g. the scan number is out of range).
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetScanEvents(System.Int32)">
            <summary>
            The method gets the scan events for a segment.
            </summary>
            <param name="segment">
            The segment.
            </param>
            <returns>
            The list of scan events.
            </returns>
            <exception cref="T:System.Exception">
            Specified segment is out of range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetScanFiltersFromCompoundName(System.String)">
            <summary>
            Gets the scan filters from compound names.
            </summary>
            <param name="compoundName">Name of the compound.</param>
            <returns>The filters for the given compound</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetScanIndex(System.Int32)">
            <summary>
            The method gets the scan index for the scan number.
            </summary>
            <param name="spectrum">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex"/> for the scan number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the scan number is not in range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetRetentionTime(System.Int32)">
            <summary>
            The method gets the retention time for the scan number.
            </summary>
            <param name="spectrum">
            The scan number.
            </param>
            <returns>
            The retention time for the scan number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the scan number is not in range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetSimplifiedLabels(System.Int32,System.Boolean,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex)">
            <summary>
            Get simplified labels.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="includeRefPeaks">
            The include ref peaks.
            </param>
            <param name="internalEvent">
            The internal event.
            </param>
            <param name="scanIndex">
            The scan index.
            </param>
            <returns>
            The simplified (mass/intensity) data.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetExtendedScanData(System.Int32)">
            <summary>
            Gets the extended scan data for a scan
            </summary>
            <param name="scanNumber">scan number who's data is needed</param>
            <returns>The extended data</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetTrailerExtra(System.Int32)">
            <summary>
            The method gets trailer extra for the scan number (1 relative)
            </summary>
            <param name="scanNumber">
            The scan number - one relative.
            </param>
            <returns>
            The label value pairs for the trailer extra at the scan number.
            </returns>
            <exception cref="T:System.Exception">
            If the scan number is not in range or no data was found.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetTrailerExtraValue(System.Int32,System.Int32)">
            <summary>
            This method gets one field from trailer extra for the scan number (1 relative)
            </summary>
            <param name="scanNumber">
            The scan number - one relative.
            </param>
            <param name="item">index into available items (as per trailer extra header)</param>
            <returns>
            The value pairs for the trailer extra item at the scan number.
            </returns>
            <exception cref="T:System.Exception">
            If the scan number is not in range or no data was found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when item is not an available filed</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetTrailerExtraValues(System.Int32)">
            <summary>
            This method gets all fields from trailer extra for the scan number
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <returns>
            The values for the trailer extra at the scan number.
            </returns>
            <exception cref="T:System.Exception">
            If the scan number is not in range or no data was found.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetTuneData(System.Int32)">
            <summary>
            The method gets the tune data at the index (0 relative).
            </summary>
            <param name="index">
            The index - 0 relative.
            </param>
            <returns>
            The list of <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair"/>s for the tune data.
            </returns>
            <exception cref="T:System.Exception">
            If the index is out of range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetTuneDataValues(System.Int32)">
            <summary>
            The method gets the tune data at the index (0 relative).
            </summary>
            <param name="index">
            The index - 0 relative.
            </param>
            <returns>
            The list of <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValuePair"/>s for the tune data.
            </returns>
            <exception cref="T:System.Exception">
            If the index is out of range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>
            True if refreshed
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ScanEventWithValidScanNumber(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex)">
            <summary>
            Get scan event with valid scan number.
            </summary>
            <param name="scanIndex">
            The scan index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent"/>.
            </returns>
            <exception cref="T:System.Exception">Thrown if event cannot be read
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ScanNumberIsValid(System.Int32)">
            <summary>
            Test if a scan number is valid.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <returns>
            True if valid.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.CreateChromatograms(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],ThermoFisher.CommonCore.Data.Business.Range,ThermoFisher.CommonCore.Data.Business.MassOptions,System.Boolean)">
            <summary>
            create chromatograms.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="timeRange">
            The time range.
            </param>
            <param name="toleranceOptions">
            The tolerance options.
            </param>
            <param name="includeReferenceAndExceptionData">
            set if reference and exception peaks should be included
            </param>
            <returns>
            The generated data.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.CreateChromatograms(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[],ThermoFisher.CommonCore.Data.Business.Range,System.Boolean)">
            <summary>
            create chromatograms.
            </summary>
            <param name="settings">
            The settings.
            </param>
            <param name="timeRange">
            The time range.
            </param>
            <param name="includeReferenceAndExceptionData">
            set if reference and exception peaks should be included
            </param>
            <returns>
            The generated data.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.CreateChromatograms(System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx},ThermoFisher.CommonCore.Data.Business.Range,ThermoFisher.CommonCore.Data.Business.MassOptions,System.Boolean,System.Boolean)">
            <summary>
            Create legacy format chromatograms, where all chromatograms share the same time range
            </summary>
            <param name="settings">Settings for each chromatogram</param>
            <param name="timeRange">Common start and end time</param>
            <param name="toleranceOptions">Mass tolerance settings</param>
            <param name="addBasePeaks">When true: Include base peak masses for all scans</param>
            <param name="includeReferenceAndExceptionData">Set if reference peaks are included in the chromatogram</param>
            <returns>Definition of chromatograms to build</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.CreateFlatChromatogramList(ThermoFisher.CommonCore.RawFileReader.ChromatogramDelivery[][])">
            <summary>
            create a flat (1D array) chromatogram list, out of the collections per trace
            </summary>
            <param name="deliveries">
            The deliveries.
            </param>
            <returns>
            The flat list
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetCompoundNamesForScanRange(System.Int32,System.Int32)">
            <summary>
            Gets the compound names, for all scans within range.
            </summary>
            <param name="startScan">first scan to test</param>
            <param name="endScan">last scan to test</param>
            <returns>The compound names</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ReadScanIndices(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The method reads the scan index collection.
            </summary>
            <param name="viewer">
            Memory map of file
            </param>
            <param name="dataOffset">
            Offset into memory map
            </param>
            <param name="fileRevision">
            The file version.
            </param>
            <exception cref="T:System.Exception">
            Thrown if the number of scan index records is less than the number of spectra.
            </exception>
            <returns>
            The number of bytes decoded
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.UpdateRunHeaderStruct(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Updates the run header structure.
            </summary>
            <param name="runHeader">The run header.</param>
            <returns>The updated header</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AddCompoundName(System.Collections.Generic.SortedSet{System.String},ThermoFisher.CommonCore.Data.Business.ScanFilterHelper,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent)">
            <summary>
            Add a compound name.
            </summary>
            <param name="sortedCompoundNamesSet">
            The sorted compound names set.
            </param>
            <param name="scanFilterHelper">
            The scan filter helper.
            </param>
            <param name="scanEvent">
            The scan event.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetFrequencies(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IMsPacket)">
            <summary>
            get frequencies.
            </summary>
            <param name="packet">
            The packet.
            </param>
            <returns>
            The (FT) frequency data
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AddBasePeakMasses(ThermoFisher.CommonCore.Data.Business.ChromatogramSignal,ThermoFisher.CommonCore.Data.Business.ChromatogramSignal)">
            <summary>
            Base peak data has the base peak mass recorded as the "intensity" for each scan
            Find the matching scans, and fill in this for the data
            </summary>
            <param name="data">filtered chromatogram, needing base peaks</param>
            <param name="basePeakData">Base peak masses</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ConfigureChromatogramGenerator(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramBatchGenerator,System.Boolean,System.Boolean,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter,System.Boolean)">
            <summary>
            Configure the generator to get data from the current file's MS data.
            </summary>
            <param name="generator">Generator to configure</param>
            <param name="scansNeeded">True if this kind of chromatogram will need scan data (for example XIC).
                Tic chromatograms do not need the scan data.</param>
            <param name="allFiltersSame">All scan filters are the same</param>
            <param name="commonFilter">The filter used for all chromatograms</param>
            <param name="includeReferenceAndExceptionData">true if (calibration) ref and exception peaks should be included</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.CreateChromatogramJobs(System.Collections.Generic.IList{ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettingsEx},System.Int32,System.Double,System.Double,ThermoFisher.CommonCore.Data.Business.MassOptions,System.Boolean,System.Boolean@,ThermoFisher.CommonCore.Data.Interfaces.IScanFilter@)">
            <summary>
            Create a set of jobs for legacy chromatogram generation,
            where all chromatograms share the same start and end time.
            </summary>
            <param name="settings">Definition of chromatograms needed</param>
            <param name="totalChros">Number of chromatograms to create</param>
            <param name="startTime">Start time of chromatograms</param>
            <param name="endTime">End time of chromatograms</param>
            <param name="toleranceOptions">Defines how mass tolerance is applied to mass ranges,
            where start and end mass are identical (within 1.0E-6):
            Default: null, range is +/- 0.5 from the low mass.
            If not null, delta mass value is calculated from low mass and tolerance, and
            a range is created as low mass +/- delta.
            When low and high mass are different, this parameter is unused.</param>
            <param name="addBasePeaks">If true: add a job to get base peak masses</param>
            <param name="allFiltersSame">Set if all chromatograms are using the same scan filter</param>
            <param name="commonFilter">When not null (when all filter are same), this is the common filter
            used by all chromatograms.</param>
            <returns>Configured list of chromatograms to be generated</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.CreateInstrumentBasePeakMassChromatogram(System.Double,System.Double)">
            <summary>
            Design a chromatogram point builder which just gets the Tic value from each scan header.
            </summary>
            <param name="startTime">Start time of chromatogram.</param>
            <param name="endTime">End time of chromatogram.</param>
            <returns>Tic chromatogram generator</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.DisposeBufferInfoAndTempFiles">
            <summary>
            Dispose of the buffer info and temp files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ExtendChromatogramSettings(ThermoFisher.CommonCore.Data.Interfaces.IChromatogramSettings[])">
            <summary>
            extend chromatogram settings (to larger interface).
            </summary>
            <param name="settings">
            The settings.
            </param>
            <returns>
            The settings
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.FixUpEventCodes(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent},System.Int32)">
            <summary>
            fix up event codes.
            </summary>
            <param name="eventsForSegment">
            The events for segment.
            </param>
            <param name="segment">
            The segment.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetScanEventWithValidScanNumber(System.Int32)">
            <summary>
            The method get scans event with a validated index to the scan index array.
            </summary>
            <param name="index">
            The index to the scan index array.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanEvent"/>.
            </returns>
            <exception cref="T:System.Exception">
            Thrown if we cannot get the event.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetValidatedTrailerExtraBlob(System.Int32)">
            <summary>
            The get validated trailer extra blob.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.LabelValueBlob"/>.
            </returns>
            <exception cref="T:System.Exception">Thrown on null trailer blob
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetValidIndexIntoScanIndices(System.Int32)">
            <summary>
            Validates a scan number
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <returns>
            The validated scan number
            </returns>
            <exception cref="T:System.Exception">
            If the scan number is out of range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.InAcquisitionInitializer(System.Int32)">
            <summary>
            Initials the in acquisition.
            </summary>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.InitializeBufferInfo">
            <summary>
            Initializes the buffer information.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.CreateBufferInfo(System.String)">
            <summary>
            create a buffer info, for a part of this file.
            </summary>
            <param name="name">
            The name of the buffer
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The method loads the MS device from file.
            </summary>
            <param name="viewer">Memory map of file</param>
            <param name="dataOffset">Offset within map</param>
            <param name="fileRevision">The file version.</param>
            <exception cref="T:System.Exception">
            If the run header is null.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.MsScanList">
            <summary>
            Create the list of all MS scans.
            </summary>
            <returns>
            The list of scan headers.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.NonAcquisitionInitializer(System.String,System.Int32)">
            <summary>
            Initials the non acquisition.
            </summary>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ReadScanEvents(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@,System.Int32)">
            <summary>
            Reads the scan events.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="fileRevision">The file version.</param>
            <returns>The scan events</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ReadSegments(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The method reads the segments.
            </summary>
            <param name="viewer">Memory map of file
            </param>
            <param name="dataOffset">Offset into memory map
            </param>
            <param name="fileVersion">
            The file version.
            </param>
            <returns>
            The number of bytes read
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ThrowScanNumberRangeException">
            <summary>
            throw scan number range exception.
            </summary>
            <exception cref="T:System.Exception">Always throw scan number range exception.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.ValidateCount(System.Int32,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericDataCollection,System.String)">
            <summary>
            validate count.
            </summary>
            <param name="expected">
            The expected count.
            </param>
            <param name="collection">
            The collection.
            </param>
            <param name="message">
            The message.
            </param>
            <exception cref="T:System.Exception">Thrown if cunt not as expected
            </exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AdvancedPacketData">
            <summary>
            Advanced LT/FT formats only.
            </summary>
            <seealso cref="T:ThermoFisher.CommonCore.Data.Interfaces.IAdvancedPacketData" />
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AdvancedPacketData.#ctor(System.Lazy{ThermoFisher.CommonCore.Data.Business.CentroidStream},System.Lazy{System.Double[]})">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AdvancedPacketData"/> class.
            </summary>
            <param name="centroidReader">
            The centroid reader.
            </param>
            <param name="frequencies">
            The frequencies.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AdvancedPacketData.CentroidData">
            <summary>
            Gets the centroid data information.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AdvancedPacketData.Frequencies">
            <summary>
            Gets the frequencies
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.AdvancedPacketData.NoiseData">
            <summary>
            Gets or sets the noise data - noise and baseline.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.EventConvert">
            <summary>
            Class to permit parallel conversion of scan events.
            (For resaerch: Can be made to implement IExecute to compare pefformance of
            paralell small tasks)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.EventConvert.TheEvent">
            <summary>
            Gets or sets the event to be converted.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.EventConvert.TheFilter">
            <summary>
            Gets or sets the converted filter.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.FilterConvert">
            <summary>
            Class to convert filters into strings.
            Designed to permit parallel conversions.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.FilterConvert.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IFilterScanEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.FilterConvert"/> class.
            </summary>
            <param name="toConvert">
            The event to convert.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.FilterConvert.ConvertedFilter">
            <summary>
            Gets the converted filter.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.FilterConvert.Execute">
            <summary>
            execute the conversion
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.MassSpecDevice.GetScanFiltersFromCompoundNames(System.String[])">
            <summary>
            Get the scan filters for each of the compound names.
            </summary>
            <param name="compoundNames">
            The compound names.
            </param>
            <returns>
            The set of filters for each name.
            result [n] is the array of filters for compound name [n]
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader">
            <summary>
            The run header.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader"/> class.
            </summary>
            <param name="loaderId">Loader instance Id. </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader"/> class.
            </summary>
            <param name="loaderId">Loader instance Id</param>
            <param name="runHeader">The run header.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.#ctor(System.Guid,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RunHeader class for real time reading.
            </summary>
            <param name="loaderId">Loader instance Id</param>
            <param name="mapName">Name of the map.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="inCreation">True if it's in device writer creation, otherwise false</param>
            <param name="readOnly">True if it's in reading mode, otherwise false</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.Revision">
            <summary>
            Gets the software revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.FirstSpectrum">
            <summary>
            Gets the first spectrum.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.LastSpectrum">
            <summary>
            Gets the last spectrum.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.LowMass">
            <summary>
            Gets or sets the low mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.HighMass">
            <summary>
            Gets or sets the high mass.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.MaxIntensity">
            <summary>
            Gets the maximum intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.MaxIntegratedIntensity">
            <summary>
            Gets or sets the max integrated intensity.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.DeviceFileOffset">
            <summary>
            Gets or sets the device file offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.DeviceIndex">
            <summary>
            Gets or sets the device index.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.DeviceType">
            <summary>
            Gets or sets the device type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.ErrorLogFilename">
            <summary>
            Gets the error log filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.ErrorLogPos">
            <summary>
            Gets or sets the error log position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.ExpectedRunTime">
            <summary>
            Gets or sets the expected run time.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.FilterMassPrecision">
            <summary>
            Gets or sets the filter mass precision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.InstIdFilename">
            <summary>
            Gets the instrument id file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.InstScanEventsFilename">
            <summary>
            Gets the instrument scan events file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.IsInAcquisition">
            <summary>
            Gets or sets a value indicating whether is in acquisition.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.MassResolution">
            <summary>
            Gets or sets the mass resolution.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.NumErrorLog">
            <summary>
            Gets the number of error log entries.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.NumSpectra">
            <summary>
            Gets or sets the number of spectra.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.NumStatusLog">
            <summary>
            Gets the number of status log entries.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.NumTrailerExtra">
            <summary>
            Gets or sets the number of trailer extras.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.NumTrailerScanEvents">
            <summary>
            Gets or sets the number of trailer scan events.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.NumTuneData">
            <summary>
            Gets or sets the number of tune data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.PacketPos">
            <summary>
            Gets or sets the packet position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.RunHeaderPos">
            <summary>
            Gets the run header position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.ScanEventsFilename">
            <summary>
            Gets the scan events filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.SpectFilename">
            <summary>
            Gets the spectra filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.SpectrumPos">
            <summary>
            Gets or sets the spectrum position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.StatusLogFilename">
            <summary>
            Gets the status log filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.StatusLogHeaderFilename">
            <summary>
            Gets the status log header filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.StatusLogPos">
            <summary>
            Gets or sets the status log position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.ToleranceUnit">
            <summary>
            Gets the tolerance unit.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.TrailerExtraFilename">
            <summary>
            Gets the trailer extra filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.TrailerExtraPos">
            <summary>
            Gets or sets the trailer extra position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.TrailerHeaderFilename">
            <summary>
            Gets the trailer header filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.TrailerScanEventsFilename">
            <summary>
            Gets the trailer scan events filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.TrailerScanEventsPos">
            <summary>
            Gets or sets the trailer scan events position.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.TuneDataFilename">
            <summary>
            Gets the tune data filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.TuneDataHeaderFilename">
            <summary>
            Gets the tune data header filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.Comment1">
            <summary>
            Gets or sets the comment 1.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.InstrumentDescription">
            <summary>
            Gets the (internal) description tag.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.Comment2">
            <summary>
            Gets or sets the comment 2.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.DataPktFilename">
            <summary>
            Gets the data packet filename.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.HeaderFileMapName">
            <summary>
            Gets the header file map name. <para />
            It's only meaningful in Generic data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.RunHeaderStruct">
            <summary>
            Gets the internal run header structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            Loads the specified viewer.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="dataOffset">The data offset.</param>
            <param name="fileRevision">The file revision.</param>
            <returns>The number of read bytes </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.Copy(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRunHeader)">
            <summary>
            Copies the specified source.
            </summary>
            <param name="src">The source.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.CopyRunHeaderStruct(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct@)">
            <summary>
            Copies the run header structure.
            </summary>
            <param name="runHeaderStruct">The run header structure.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.Initialize(System.Int16)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="revision">sets the revision of the device data format</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.IncrementNumStatusLog">
            <summary>
            Increments the number of status log.
            </summary>
            <returns>The incremented value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.IncrementNumErrorLog">
            <summary>
            Increments the number of error log.
            </summary>
            <returns>The incremented value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.IncrementNumTrailerExtra">
            <summary>
            Increments the number of trailer extra.
            </summary>
            <returns>The incremented value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.IncrementNumTuneData">
            <summary>
            Increments the number of tune data.
            </summary>
            <returns>The incremented value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.IncrementTrailerScanEvents">
            <summary>
            Increments the trailer scan events.
            </summary>
            <returns>The incremented value</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>True all in-acquisition data are remapped successfully; false otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.Refresh">
            <summary>
            Refresh data from existing map
            </summary>
            <returns>true if OK</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.StatusDevice">
            <summary>
            The status device.
            This device only has status logs.
            Use implementation of status logs within base class (UVDevice)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.StatusDevice.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.StatusDevice"/> class.
            </summary>
            <param name="loaderId">raw file loader ID</param>
            <param name="deviceInfo">The device information.</param>
            <param name="rawFileName">The viewer.</param>
            <param name="fileRevision">The file version.</param>
            <param name="isInAcquisition">if set to <c>true</c> [is in acquisition].</param>
            <param name="oldRev">Set if legacy file format</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice">
            <summary>
                The UV device.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice"/> class.
            </summary>
            <param name="loaderId">raw file loader ID</param>
            <param name="deviceInfo">
            The device info.
            </param>
            <param name="rawFileName">Raw file name</param>
            <param name="fileVersion">The file version. </param>
            <param name="isInAcquisition">Flag indicates that it's in acquisition or not</param>
            <param name="oldRev">Flag indicates that it is an old LCQ data</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.UvPacketViewer">
            <summary>
            Gets or sets the _packet viewer.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.GetScanIndex(System.Int32)">
            <summary>
            get the scan index.
            </summary>
            <param name="spectrum">
            The spectrum.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.GetRetentionTime(System.Int32)">
            <summary>
            The method gets the retention time for the scan number.
            </summary>
            <param name="spectrum">
            The scan number.
            </param>
            <returns>
            The retention time for the scan number.
            </returns>
            <exception cref="T:System.Exception">
            If the scan number is not in range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.GetUvIndex(System.Int32)">
            <summary>
            get the UV index.
            </summary>
            <param name="spectrum">
            The spectrum number.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.GetPacket(System.Int32,System.Boolean,System.Int32,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.PacketFeatures)">
            <summary>
            The method gets the packet.
            </summary>
            <param name="scanNumber">
            The scan number.
            </param>
            <param name="includeReferenceAndExceptionData">Flag indicates that it should include reference and exception data or not</param>
            <param name="channelNumber">For UV device only, negative one (-1) for getting all the channel data by the given scan number</param>
            <param name="packetScanDataFeatures">True if noise and baseline data is required. Not used for UV types</param>
            <returns>Peak data packet </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.Load(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64,System.Int32)">
            <summary>
            The method loads the UV device information.
            </summary>
            <param name="viewer">Memory map accessor</param>
            <param name="dataOffset">Data offset</param>
            <param name="fileRevision">Raw file version</param>
            <returns>The number of read bytes </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.GetChannelPacket(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex,System.Int32)">
            <summary>
            Gets the channel scan packet.
            </summary>
            <param name="scanIndex">Index of the scan.</param>
            <param name="channelNum">The channel number.</param>
            <returns>Data from the channel</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.GetPdaPacket(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex)">
            <summary>
            The method gets a scan of PDA data.
            Intensities are scaled (to micro AU) depending on logged units of the device.
            The Tic value is also adjusted in the index.
            </summary>
            <param name="viewer">Memory map into file</param>
            <param name="scanIndex">
            The scan index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.Packets.IPacket"/> Scaled PDA scan data.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.GetValidIndexIntoScanIndices(System.Int32)">
            <summary>
            The method gets a valid index into scan indices.
            </summary>
            <param name="spectrum">
            The spectrum.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
            <exception cref="T:System.Exception">
            Thrown if the spectrum is out of range.
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.FixUpUnkonwnAbsorbanceUnit(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex)">
            <summary>
            Fixes up unknown absorbance unit.
            </summary>
            <param name="scanIndex">Index of the scan.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.FixUpUnknownAbsorbanceUnitForChannel">
            <summary>
            Fixes up unknown absorbance unit for channel.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.FixUpUnknownAbsorbanceUnitForPda">
            <summary>
            Fixes up unknown absorbance unit for PDA.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.InitializeBufferInfo(System.Guid)">
            <summary>
            Initializes the buffer information.
            </summary>
            <param name="loaderId">The loader identifier.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.DisposeBufferInfoAndTempFiles">
            <summary>
            Disposes the buffer information and temporary files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.Dispose">
            <summary>
            The method disposes all the memory mapped files still being tracked (i.e. still open).
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.RefreshViewOfFile">
            <summary>
            Re-read the current file, to get the latest data.
            Only meaningful if the object has an implied backing file (such as IO.DLL and .raw files)
            No-op otherwise
            </summary>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.EmptyPacket">
            <summary>
            The empty packet.
            For cases where there is no matching data in the file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.EmptyPacket.SegmentPeaks">
            <summary>
            Gets the segmented peaks.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.EmptyPacket.Index">
            <summary>
            Gets the scan index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.EmptyPacket.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IScanIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.UvDevice.EmptyPacket"/> class.
            </summary>
            <param name="index">
            The index.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.ThreadManager">
            <summary>
            Generates low overhead objects, which multiple threads
            can use to read from the same raw file in parallel.
            Access is typically lockless for 64 bit code, with completed files.
            Lock will occur for files which are in acquisition.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ThreadManager.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.ThreadManager"/> class from being created.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ThreadManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.ThreadManager"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <exception cref="T:System.ArgumentException">Error empty null file name.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ThreadManager.CreateThreadAccessor">
            <summary>
            This interface method creates a thread safe access to raw data, for use by a single thread.
            Each time a new thread (async call etc.) is made for accessing raw data, this method must be used to
            create a private object for that thread to use.
            This interface does not require that the application performs any locking.
            In some implementations this may have internal locking (such as when based on a real time file, which is continually changing in size),
            and in some implementations it may be lockless.
            </summary>
            <returns>
            An interface which can be used by a thread to access raw data
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.ThreadManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Utilities">
            <summary>
            Provides commonly used functions for raw file reader and writer.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Utilities.StructSizeLookup">
            <summary>
            The struct size lookup.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.CompareDoubles(System.Double,System.Double,System.Double)">
            <summary>
            Compares the doubles.
            </summary>
            <param name="valA">value A</param>
            <param name="valB">value B</param>
            <param name="tolerance">The tolerance.</param>
            <returns>
                Return an <see cref="T:System.Int32" /> that has one of three values:
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <description>Meaning</description>
                    </listheader>
                    <term>Less than zero</term>
                    <description>The current instance precedes the object specified by the CompareTo method in the sort order.</description>
                    <term>Zero</term>
                    <description>
                        This current instance occurs in the same position in the sort order as the object specified by the
                        CompareTo method.
                    </description>
                    <term>Greater than zero</term>
                    <description>This current instance follows the object specified by the CompareTo method in the sort order.</description>
                </list>
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.LoadBytesFromFile(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int32,System.Int64@,System.Int32,System.Int32[0:,0:])">
            <summary>
            Loads the bytes from file.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="startPos">The start position.</param>
            <param name="sizeOfObject">The size of object.</param>
            <param name="sizes">The sizes.</param>
            <returns>results in byte array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.ReadStructure``1(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Int64@,System.Int32,System.Int32[0:,0:])">
            <summary>
            Reads the structure.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <param name="viewer">The viewer.</param>
            <param name="startPos">The start position.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="sizes">The sizes.</param>
            <returns>The type of the return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.IsAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this instance is any.
            </summary>
            <typeparam name="T">The type of objects to enumerate</typeparam>
            <param name="data">The data.</param>
            <returns>True has data, otherwise False.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.GetEnumValues``1(System.Type,System.String[]@,System.String)">
            <summary>
            Gets the enumeration values.
            </summary>
            <typeparam name="T">Type of the enumeration</typeparam>
            <param name="enumType">System type of the enumeration.</param>
            <param name="descriptions">The descriptions.</param>
            <param name="preFix">The pre fix.</param>
            <returns>Array of enumeration descriptions</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.GetFileMapName(System.String,System.Boolean)">
            <summary>
            Gets the name of the file map.
            </summary>
            <param name="fileName">The filename.</param>
            <param name="embeddedFile">if set to <c>true</c> [b embedded file].</param>
            <returns>A memory mapped file name without slashes.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.MapName(System.String,System.String)">
            <summary>
            Create a shared memory mapped object name
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="mappedObjName">Name of the mapped object.</param>
            <returns>Memory mapped file name without slashes</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.RemoveSlashes(System.String)">
            <summary>
            Removes the slashes.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>A new string without any slashes</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.BuildUniqueVirtualDeviceFileMapName(ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes,System.Int32,System.String)">
            <summary>
            Builds the name of the unique virtual device file map.
            </summary>
            <param name="virtualDeviceType">Type of the virtual device.</param>
            <param name="registeredIndex">Index of the registered.</param>
            <param name="fileMapName">Name of the file map.</param>
            <returns>A unique memory mapped file name</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.CreateNoNameMutex">
            <summary>
            Creates the no name mutex.
            <para/>
            The mutex class enforces thread identity, so a mutex can be released only by the thread that acquired it.
            Mutex are of two types: local mutex, which are unnamed, and named system mutex.
            <para/>
            A local mutex exists only within your process. It can be used by any thread in your process that has a reference 
            to the mutex object that represents the mutex. 
            <para/>
            Each unnamed mutex object represents a separate local mutex.
            <para/>
            On a server that is running Terminal Services, a named system mutex can have two levels of visibility. If its name 
            begins with the prefix "Global\", the mutex is visible in all terminal server sessions. If its name begins with the 
            prefix "Local\", the mutex is visible only in the terminal server session where it was created. In that case, a separate 
            mutex with the same name can exist in each of the other terminal server sessions on the server. If you do not specify a prefix 
            when you create a named mutex, it takes the prefix "Local\". Within a terminal server session, two mutex whose names differ 
            only by their prefixes are separate mutex, and both are visible to all processes in the terminal server session. That is, 
            the prefix names "Global\" and "Local\" describe the scope of the mutex name relative to terminal server sessions, 
            not relative to processes.
            </summary>
            <returns>A new instance of Mutex object.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.CreateNamedMutexAndWait(System.String,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Creates a named mutex then waits on it if it is busy.<para/>
            Since we have an multithreading issue here (see OpenFileMapping and RunHeader bNewMapObject),<para/>
            a Mutex is introduced here to ensure that only one thread gets access at a time.<para/>
            This will create a mutex name based on the file that is being used and not just a global<para/>
            mutex for all files
            </summary>
            <param name="fileName">Filename of the file.</param>
            <param name="useGlobalNamespace">True add Global prefix to the file name; otherwise no.</param>
            <param name="errors">Store errors information</param>
            <returns>
            The handle of the mutex or NULL if an error occurs.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.ReleaseMutex(System.Threading.Mutex@)">
            <summary>
            Releases the mutex.
            </summary>
            <param name="mutex">The mutex.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.RetryMethod``1(System.Func{System.String[],``0},System.String[],System.Int32,System.Int32)">
            <summary>
            Retries the method if it fails.
            </summary>
            <typeparam name="T">The type of the return parameter of the method that this delegate encapsulates.</typeparam>
            <param name="method">The method.</param>
            <param name="name">Memory mapped file name</param>
            <param name="numRetries">The number retries.</param>
            <param name="msToWaitBeforeRetry">The millisecond to wait before retry.</param>
            <returns>True the method get executed, false otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.RetryMethod``1(System.Func{``0},System.Int32,System.Int32)">
            <summary>
            Retries the method.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <param name="method">The method.</param>
            <param name="numRetries">The number retries.</param>
            <param name="timeToWaitBeforeRetry">The millisecond to wait before retry.</param>
            <returns>The type of the return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.MakeLong(System.Int16,System.Int16)">
            <summary>
            Makes the long.
            </summary>
            <param name="lowPart">The low part.</param>
            <param name="highPart">The high part.</param>
            <returns>Combine the low and high part to an integer</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.ValidateFileName(System.String,System.String@)">
            <summary>
            Validates the name of the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="errors">Error message</param>
            <returns>True if file is existed; otherwise false.</returns>
            <exception cref="T:System.ArgumentException">
            File doesn't exist:  + fileName
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.Validate64Bit">
            <summary>
            Validate64s the bit.
            </summary>
            <exception cref="T:System.ApplicationException">Only 64 bit applications are supported by this project</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.IsAdministrator">
            <summary>
            Determines whether the current windows user is Administrator.
            </summary>
            <returns>True the current user has Administrator access</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.ToMessageAndCompleteStacktrace(System.Exception)">
            <summary>
            To the message and complete stack trace.
            </summary>
            <param name="exception">The exception.</param>
            <returns>Exception message, including the stack trace.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.UpdateErrors(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.String,System.Int32)">
            <summary>
            Updates the errors.
            </summary>
            <param name="errors">The errors.</param>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.CorrectNameForEnvironment(System.String)">
            <summary>
            Corrects the raw file name for environment. 
            If the application is running on Unix environment, don't adjust the file name. 
            File and directory names are case sensitive in Unix.  Convert it to lowercase when on 
            Windows OS. 
            </summary>
            <param name="name">Name of the raw file.</param>
            <returns>In Windows OS, convert the raw file name to lowercase; otherwise, no changes need.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.StructSizeLookupInitializer">
            <summary>
            Structures the size lookup initializer.
            </summary>
            <returns>An array of internal structures size</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.ShowSecurity(System.Security.AccessControl.MutexSecurity,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Show mutex security.
            </summary>
            <param name="security"> The mutex security. </param>
            <param name="errors"> The errors. </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Utilities.RetryOpenMutex(System.String,System.Boolean@,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            The try reopen mutex.
             </summary>
            <param name="mutexName"> The mutex name.
            </param>
            <param name="granted">Grant access to the named mutex.</param>
            <param name="errors"> The errors. </param>
            <returns> The <see cref="T:System.Threading.Mutex"/>. </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.AsrProfileIndexExtension">
            <summary>
            Provides extension methods for Adjustable Scan Rate Profile index data
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.AsrProfileIndexExtension.AsrProfileIndexDataPktsToByteArray(ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex,System.Int32)">
            <summary>
            Convert PDA Profiles index data to byte array.
            </summary>
            <param name="pdaScanIndex">The packets.</param>
            <param name="numData">The number of scan data</param>
            <returns>Byte array of ASRProfileIndexStruct</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.AuditTrailExtension">
            <summary>
            The audit trail extension.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.AuditTrailExtension.Save(ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditTrail,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            The save.
            </summary>
            <param name="auditTrail">
            The audit Trail.
            </param>
            <param name="binaryWriter">
            The binary writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.AuditTrailExtension.Save(ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditTrail,ThermoFisher.CommonCore.RawFileReader.IOleStream,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the audit trailer to IOleStream.
            </summary>
            <param name="auditTrail">The audit trail.</param>
            <param name="streamer">The IOleStream object.</param>
            <param name="errors">The errors.</param>
            <returns>True if audit trail saved to file; otherwise false.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.AutoSamplerConfigExtension">
            <summary>
            The auto sampler config extension.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.AutoSamplerConfigExtension.Save(ThermoFisher.CommonCore.RawFileReader.StructWrappers.AutoSamplerConfig,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            The save.
            </summary>
            <param name="autoSampleConfig">
            The auto sample config.
            </param>
            <param name="binaryWriter">
            The binary writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter">
            <summary>
            Provides methods to write common device information<para/>
            1. Instrument information<para/>
            2. Instrument expected run time<para/>
            3. Status log header<para/>
            4. Status log<para/>
            5. Error log
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter._statusLogHeader">
            <summary>
            Generic type headers.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.HasWarning">
            <summary>
            Gets a value indicating whether this file has detected a warning.
            If this is false: Other warning properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.ErrorCode">
            <summary>
            Gets the error code number.
            Typically this is a windows system error number.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WarningMessage">
            <summary>
            Gets the warning message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.FileRevision">
            <summary>
            Gets the file revision.
            </summary>
            <value>
            The file revision.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.DeviceType">
            <summary>
            Gets the device type.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.DataStreamWriters">
            <summary>
            Gets the data stream writers.
            Used for writing device data, each stream responsible for different data set,
            i.e. instrument ID, status log, error log, etc.
            </summary>
            <value>
            The stream writers.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.DeviceRunHeader">
            <summary>
            Gets the device run header.
            </summary>
            <value>
            The device run header.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.DataFileMapName">
            <summary>
            Gets the data file map name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.InCreation">
            <summary>
            Gets a value indicating whether [in creation].
            </summary>
            <value>
              <c>true</c> if [in creation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.RunHeaderMemMapAccessor">
            <summary>
            Gets the run header memory map accessor.
            </summary>
            <value>
            The run header memory map accessor.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WrittenGenericHeadersFlags">
            <summary>
            Gets or sets the written generic headers flags.
            Flag so we know if a generic header has been written
            There are 3 types of generic header - Status log, Trailer extra and Tune
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.#ctor(ThermoFisher.CommonCore.Data.Business.Device,System.Int32,System.String,System.Int32,System.Boolean,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter"/> class.
            </summary>
            <param name="deviceType">Type of the device.</param>
            <param name="deviceIndex">Index of the device.</param>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="inAcquisition">if set to <c>true</c> [in acquisition].</param>
            <param name="runHeaderRevision">Revision code for the device (set in run header). Default 1</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteInstrumentInfo(ThermoFisher.CommonCore.Data.IInstrumentDataAccess)">
            <summary>
            Write the Instrument ID info to the raw data file. The
            Instrument ID must be written to the raw file before any data can be
            acquired.
            </summary>
            <param name="instId">The instrument identifier.</param>
            <returns>True written instrument information to disk file; otherwise False.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteInstExpectedRunTime(System.Double)">
            <summary>
            Wrapper to write the expected run time. All devices MUST do this so
            that the real-time update can display a sensible Axis.
            </summary>
            <param name="runTime">The expected Run Time.</param>
            <returns> True if data valid. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.UpdateReady">
            <summary>
            update to ready state, if all prerequisites have been met
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteInstComments(System.String,System.String)">
            <summary>
            Writes the instrument comments.<para/>
            These are device run header fields - comment1 and comment2.  They are part of the Chromatogram view title (Sample Name and Comment).<para/>
            These fields can be set only once. 
            </summary>
            <param name="comment1">The comment1 for "Sample Name" in Chromatogram view title (max 39 chars).</param>
            <param name="comment2">The comment2 for "Comment" in Chromatogram view title (max 63 chars).</param>
            <returns>True if comment1 and comment2 are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteStatusLogHeader(ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem[])">
            <summary>
            Writes the status log header.
            </summary>
            <param name="headerItems">The header items.</param>
            <returns>true written status log header to the disk file; otherwise False.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteStatusLog(System.Single,System.Byte[])">
            <summary>
            If any Status Log details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="data">The status data.</param>
            <returns>true written status log entry to the disk file; otherwise false.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteStatusLog(System.Single,System.Object[])">
            <summary>
            If any Status Log details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="data">The data.</param>
            <returns>true written status log entry to the disk file; otherwise false.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteErrorLog(System.Single,System.String)">
            <summary>
            Write an error log to the raw data file.
            </summary>
            <param name="retentionTime">The retention time.</param>
            <param name="errorLog">The error log.</param>
            <returns>True error log write to the disk file, otherwise False.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteGenericHeader(ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem[],ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderWrittenFlag,ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType,ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo@,ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo@,ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors@)">
            <summary>
            Writes the generic header to a file.
            </summary>
            <param name="headerItems">The header items.</param>
            <param name="writtenFlag">The written flag, i.e. status log header.</param>
            <param name="writerType">Binary writer id</param>
            <param name="headerBufferInfo">The shared memory for header buffer information.</param>
            <param name="dataBufferInfo">The shared memory for data buffer information.</param>
            <param name="headerDescriptors">return a header descriptors object.</param>
            <returns>True if the generic header is written to the file; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.CannotAcquire(System.String)">
            <summary>
            if the file is in error or not ready to acquire yet, fail.
            </summary>
            <param name="message">The error message. </param>
            <returns>True if it cannot be acquired due to an error.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.InitializeDeviceIndex(System.Guid,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes the index of the device.
            </summary>
            <param name="loaderId">The loader identifier.</param>
            <param name="registeredIndex">Index of the registered.</param>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="fileRevision">The file revision.</param>
            <param name="inAcquisition">if set to <c>true</c> [in acquisition].</param>
            <returns>True obtained a validate control index; otherwise False.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.InitializeRunHeader(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.Int32,System.Int16)">
            <summary>
            Initializes the run header.
            </summary>
            <param name="deviceInfo">The device information.</param>
            <param name="registeredDeviceIndex">Index of the registered device.</param>
            <returns>true if OK</returns>
            <param name="revision">Revision code</param>
            <returns>true if OK</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.WriteStatusLog(System.IO.BinaryWriter,System.Single,System.Byte[])">
            <summary>
            This method will use the binary stream object to writes the status log entry to the file.
            </summary>
            <param name="writer">The writer.</param>
            <param name="retentionTime">The retention time.</param>
            <param name="data">The data.</param>
            <returns>True the data write to the disk file; otherwise False.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BaseDeviceWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo">
            <summary>
            Defines the BufferInfo type for backward compatibility with FileIO.<para/>
            Ex. HomePage real time plot checks the Number Element field in scan index buffer info,<para/>
            to determine whether the scans data is available for display and <para/>
            raw file stitching is also using it. 
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.#ctor(System.Guid,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo"/> class.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="fileName">Name of the file.</param>
            <param name="objectName">Name of the object.</param>
            <param name="creatable">True open an existing shared memory map otherwise create. False only open an existing shared memory map file.</param>        
            <param name="elementSize">Size of the element.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.HasReference">
            <summary>
            Determines whether this instance has reference.
            </summary>
            <returns>True if there's other objects referencing it, otherwise False.</returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.HasError">
            <summary>
            Gets a value indicating whether this instance has error.
            </summary>
            <value>
              <c>true</c> if this instance has error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.Size">
            <summary>
            Gets the size of the data written to the buffer.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.IncrementNumElements">
            <summary>
            Increment the number of elements by 1 and then updates to the shared memory map.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.IncrementReferenceCount">
            <summary>
            Increments the reference count and update.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.DecrementReferenceCount">
            <summary>
            Decrements the reference count and update.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.SetDataBlockSize(System.Int32)">
            <summary>
            Set the size of a data element, i.e. Status Log Header, this will be the total size of the header items in bytes.
            </summary>
            <param name="dataBlockSize"> The data Block Size. </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo.Refresh">
            <summary>
            Refresh local data from the memory maps.
            </summary>
            <returns>
            True if OK
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus">
            <summary>
            The device acquire status.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus._deviceStatus">
            <summary>
            The _device status.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus.DeviceStatus">
            <summary>
            Sets the device status.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus.IsDeviceSetup">
            <summary>
            Gets a value indicating whether is device setup.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus.IsDeviceReady">
            <summary>
            Gets a value indicating whether is device ready.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus.CanDeviceBeSetup">
            <summary>
            Gets a value indicating whether can device be setup.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus.CanDeviceAcquireData">
            <summary>
            Gets a value indicating whether can device acquire data.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.StructType">
            <summary>
            The structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.GenericDataItemStructType">
            <summary>
            The generic data item structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.RawFileInfoStructType">
            <summary>
            The raw file info structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.RunHeaderStructType">
            <summary>
            The run header structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.FileHeaderStructType">
            <summary>
            The file header structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.SeqRowInfoStructType">
            <summary>
            The sequence row info structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.UvScanIndexStructType">
            <summary>
            The UV scan index structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.InstIdInfoStructType">
            <summary>
            The instrument id info structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.AutoSamplerConfigStructType">
            <summary>
            The auto sampler config structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.AsrProfileIndexStructType">
            <summary>
            The ASR profile index structure type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.ProfileDataPacket64Type">
            <summary>
            The profile data packet 64 type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.MsReactionStructType">
            <summary>
            The mass spec reaction structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.MsReactionStruct01Type">
            <summary>
            The mass spec reaction struct01 type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.MsReactionStruct02Type">
            <summary>
            The mass spec reaction struct02 type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.MsReactionStruct03Type">
            <summary>
            The mass spec reaction struct03 type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.HighResSpTypeStructType">
            <summary>
            The high resource spec type structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.LowResSpTypeStructType">
            <summary>
            The low resource spec type structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.BufferInfoStructType">
            <summary>
            The buffer information structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.SequenceInfoType">
            <summary>
            The sequence information type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.ScanEventInfoStructType">
            <summary>
            The scan event information structure
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.ScanIndexStructType">
            <summary>
            The scan index structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.NoiseInfoPacketStructType">
            <summary>
            The noise information packet structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.PacketHeaderStructType">
            <summary>
            The packet header structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.ProfileSegmentStructType">
            <summary>
            The profile segment structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.AuditDataStructType">
            <summary>
            The audit data structure type
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.StandardAccuracyStructType">
            <summary>
            The standard accuracy struct type.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.VirtualControllerInfoStruct">
            <summary>
            The virtual controller information structure
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.StructType.EndOfType">
            <summary>
            The end of type.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.AsrProfileIndexFieldOffset">
            <summary>
            ASR profile index
            The offset where the field begins
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.AsrProfileIndexFieldOffset.DataPosition">
            <summary>
            The data position.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.ProfileDataPacket64Offset">
            <summary>
            Profile data packet 64
            The offset where the field begins
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.ProfileDataPacket64Offset.DataPosOffSet">
            <summary>
            The data position off set
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset">
            <summary>
            RunHeader structure
            The offset where the field begins
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.LastSpectrum">
            <summary>
            The last spectrum.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.NumStatusLog">
            <summary>
            The number status log.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.NumErrorLog">
            <summary>
            The number error log.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.Comment1">
            <summary>
            The comment1       
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.IsInAcquisition">
            <summary>
            Is in acquisition flag
            c# bool is an alias for System.Boolean just as integer
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.MassResolution">
            <summary>
            The mass resolution.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.ExpectedRunTime">
            <summary>
            The expected run time.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.NumTrailerScanEvents">
            <summary>
            The number trailer scan events
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.NumTrailerExtra">
            <summary>
            The number trailer extra
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.NumTuneData">
            <summary>
            The number tune data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderFieldOffset.FilterMassPrecision">
            <summary>
            The filter mass precision
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfoFieldOffset">
            <summary>
            Buffer Info structure
            The offset where the field begins
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfoFieldOffset.NumElements">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfoFieldOffset.Size">
            <summary>
            The size of the data block
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfoFieldOffset.ReferenceCount">
            <summary>
            The reference count.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType">
            <summary>
            Enumeration of possible data streams during acquisition.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.InstrumentIdFile">
            <summary>
            The instrument id file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.StatusLogHeaderFile">
            <summary>
            The status log header file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.StatusLogFile">
            <summary>
            The status log file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.ErrorLogFile">
            <summary>
            The error log file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.DataPacketFile">
            <summary>
            The data (peak) packet file.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.SpectrumFile">
            <summary>
            The spectrum file (scan index file).
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.ScanEventsFile">
            <summary>
            The scan events file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.TrailerExtraHeaderFile">
            <summary>
            The trailer header file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.TrailerExtraDataFile">
            <summary>
            The trailer extra file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.TuneDataHeaderFile">
            <summary>
            The tune data header file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.TuneDataFile">
            <summary>
            The tune data file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.TrailerScanEventsFile">
            <summary>
            The trailer scan events file
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.DataStreamType.EndOfType">
            <summary>
            The end of type.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderWrittenFlag">
            <summary>
            Enumeration of generic header.
            The flag indicates which generic header has been written
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderWrittenFlag.WrittenStatusLogHeader">
            <summary>
            The written status log header
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderWrittenFlag.WrittenTrailerExtraHeader">
            <summary>
            The written trailer extra header
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderWrittenFlag.WrittenTuneHeader">
            <summary>
            The written tune header
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.VirtualDeviceAcquireStatus">
            <summary>
            Enumeration of possible Virtual Device Acquire Status
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.VirtualDeviceAcquireStatus.DeviceStatusNew">
            <summary>Device Status New</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.VirtualDeviceAcquireStatus.DeviceStatusSetup">
            <summary>Device Status Setup</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.VirtualDeviceAcquireStatus.DeviceStatusReady">
            <summary>Device Status Ready</summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.VirtualDeviceAcquireStatus.DeviceStatusAcquiring">
            <summary>Device Status Acquiring</summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInfoFieldOffset">
            <summary>
            Raw File Info structure
            The offset where the field begins
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors">
            <summary>
            Defines the DeviceErrors type.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.ErrorCode">
            <summary>
            Gets the error code number.
            Typically this is a windows system error number.
            If no number is encoded:
            Returns "1" if the error message is null
            Returns "2" is there is an error message.
            A return of "0" will occur if there has been no error message
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.HasError">
            <summary>
            Gets a value indicating whether has error.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.HasWarning">
            <summary>
            Gets a value indicating whether has warning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.WarningMessage">
            <summary>
            Gets the warning message.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.AppendInformataion(System.String)">
            <summary>
            Adds an Information message.
            Information is added as a line.
            </summary>
            <param name="information">
            The Information.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.AppendWarning(System.String)">
            <summary>
            Adds an Warning message.
            Warning is added as a line.
            </summary>
            <param name="warning">
            The Warning.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.ClearAllErrorsAndWarnings">
            <summary>
            The clear all.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.ClearError">
            <summary>
            The clear error.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.SetInformataion(System.String)">
            <summary>
            Sets an Information message.
            This initializes the warning message to the "Information:" + the message
            but initialize "HasWarning" to false, so callers know there are no warnings
            Information may be used to log progress, and inspected on error.
            Information is added as a line.
            </summary>
            <param name="information">
            The Information.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.UpdateError(System.String,System.Int32)">
            <summary>The update error. </summary>
            <param name="error">The error message. </param>
            <param name="errorCode"> The error code..</param>
            <returns>Always false.</returns>
            <exception cref="T:System.ArgumentException">The zero value is intended for no error and should not be used for clearing error here.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.UpdateError(System.Exception)">
            <summary>update error.</summary>
            <param name="ex">The error exception. </param>
            <exception cref="T:System.ArgumentException">The zero value is intended for no error and should not be used for clearing error here.</exception>
            <returns>Always false.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.AppendError(System.String)">
            <summary>
            append error, plus newline of there was an error before
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.UpdateWarning(System.String,System.Boolean)">
            <summary>
            update warning message and state.
            Clears any previous warnings
            </summary>
            <param name="warning">
            The warning.
            </param>
            <param name="hasWarning">
            true if has warning.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.AppendError(System.Exception)">
            <summary>Append an error message.</summary>
            <param name="ex">The error exception. </param>
            <exception cref="T:System.ArgumentException">The zero value is intended for no error and should not be used for clearing error here.</exception>
            <returns>Always false.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.InformationLine(System.String)">
            <summary>
            Format an information line.
            </summary>
            <param name="information">
            The information.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.WarningLine(System.String)">
            <summary>
            Format a warning line.
            </summary>
            <param name="warning">
            The information.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.AppendError(System.String,System.Int32)">
            <summary>The update error. </summary>
            <param name="error">The error message. </param>
            <param name="errorCode"> The error code..</param>
            <returns>Always false.</returns>
            <exception cref="T:System.ArgumentException">The zero value is intended for no error and should not be used for clearing error here.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.AppendMessage(System.String)">
            <summary>
            Append a message, as a line.
            </summary>
            <param name="text">
            The text.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors.ClearWarning">
            <summary>
            Clear all warnings.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceMethod">
            <summary>
            Provides functions to create/update a device method. 
            The device methods are for each configured instrument and store in instrument method file. 
            Each device method contains two or more streams.  
                One calls "Data", stores a private representation of the method, in a binary or XML format.
                Second calls "Text, stores an Unicode text description of the method.
                Other streams may also be created, that are private to the device, i.e. TNG-Calcium has "Header" stream.
            Format:
                TNG-Calcium    (IDeviceMethod)
                    Data            (Method stream - byte array)
                    Text            (string)
                    Header          (Method stream - byte array)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceMethod"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">name;@Device method name cannot be empty.</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceMethod.StreamBytes">
            <summary>
            Gets all streams for this instrument, 
            Typically an instrument has a stream called "Data" containing the method in binary or XML,
            and "Text" contains the plain text form of the method.
            Other streams (private to the instrument) may also be created.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceMethod.MethodText">
            <summary>
            Gets or sets the "Text" plain text (unicode) form of an device method.
            This property provides a quick way to access the "Text" stream. <para/>
            Accessing the property, returns empty string if the "Text" stream does not exist; otherwise, it will retrieve the stream
            from the StreamBytes list.<para/>
            Updating the property, overwrite the existing content of the "Text stream if it already exists; otherwise, it
            will add the "Text" stream to the StreamBytes list.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceMethod.GetStreamBytes">
            <summary>
            Gets all stream data names for this device storage.
            Typically an instrument has a stream called "Data" containing the method in binary or XML 
            and "Text" contains the plain text form of the method.
            Other streams (private to the instrument) may also be created.
            ---
            In order to add/update the stream, caller should first call this to get the list of streams.<para/>
            Once you've the list, you can start adding a new stream or editing/removing an existing method stream.
            ---
            If the stream is set to null, during the save operation, it'll save as zero length stream.
            </summary>
            <returns>List of device streams.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceMethodAdapter">
            <summary>
            It's used internally to create a device method builder object for instrument method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceMethodAdapter.CreateDeviceMethod">
            <summary>
            Creates the device method object.
            </summary>
            <returns>IDeviceMethod object.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceWriterAdapter">
            <summary>
            This static class contains factories to create device writers.
            UV Device, PDA Device, MS Device and Status Device writers.
            Marked internal, as this factory is only available
            to internal company or partner code, via public key.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceWriterAdapter.CreateUvDeviceWriter(System.String,ThermoFisher.CommonCore.Data.Business.Device)">
            <summary>
            Creates the UV type device writer to write UV data.
            </summary>
            <param name="fileName">Connect to a "in-acquisition" raw file</param>
            <param name="deviceType">Type of the device to be created.</param>
            <returns>A UV type of device write to write UV, Analog and MS Analog data to the disk file</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceWriterAdapter.CreateAnalogDeviceWriter(System.String,ThermoFisher.CommonCore.Data.Business.Device)">
            <summary>
            Creates Analog device writer to write analog data.
            </summary>
            <param name="fileName">Connect to a "in-acquisition" raw file</param>
            <param name="deviceType">Type of the device to be created.</param>
            <returns>A device writer to write analog data to the disk file</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceWriterAdapter.CreatePdaDeviceWriter(System.String)">
            <summary>
            Creates the PDA device writer.
            </summary>
            <param name="fileName">Connect to a "in-acquisition" raw file</param>
            <returns>A device writer to write PDA data to the disk file</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceWriterAdapter.CreateMassSpecDeviceWriter(System.String,ThermoFisher.CommonCore.Data.Business.SpectrumPacketType)">
            <summary>
            Creates the mass spec device writer.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="highestTypeUsed">If > 1: Defines the highest packet type that this device may use.
            By default this is 1, as that was the value used in original "version 66" raw files.
            All apps linked to any version of this dll can decode such files.
            New devices may have new data types, which can only be decoded by (matching) newer versions of this code.</param>
            <returns>A device writer to write mass spec data to the disk file</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceWriterAdapter.CreateOtherDeviceWriter(System.String)">
            <summary>
            Creates an "other" device writer.
            These devices may also be called "status devices"
            or "diagnostic devices" as they have logs only, and 
            cannot record scan data.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>A device writer to write mass spec data to the disk file</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod">
            <summary>
            The instrument method will be saved in the raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod.#ctor(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Method,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod"/> class.
            </summary>
            <param name="instrumentMethod"> The instrument Method. </param>
            <param name="shouldBeDeleted">
            The should dispose flag indicating whether the embedded instrument method should be removed after the raw file writer is closed.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod.InstrumentMethod">
            <summary>
            Gets the instrument method.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod.EndOffset">
            <summary>
            Gets or sets the end offset.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod.IsPartialSave">
            <summary>
            Gets a value indicating whether this is partial save or full save.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod.SaveMethod(System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Boolean)">
            <summary>
            The save method.
            </summary>
            <param name="binaryWriter"> The binary writer. </param>
            <param name="errors"> The errors. </param>
            <param name="partialSave"> The partial save. </param>
            <returns>True is successful</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.ErrorLogExtension">
            <summary>
            Provides methods to write error log item to disk file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.ErrorLogExtension.SaveErrorLogItem(System.IO.BinaryWriter,System.Single,System.String,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the error log item.
            </summary>
            <param name="writer">The writer.</param>
            <param name="retentionTime">The retention time.</param>
            <param name="errorLog">The error log</param>
            <param name="errors">Store errors information.</param>
            <returns>True if error log item is written to disk successfully, False otherwise</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.FileHeaderExtension">
            <summary>
            The file header extension.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.FileHeaderExtension.Save(ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Extension method to save file header.
            </summary>
            <param name="fileHeader">
            The file header to save.
            </param>
            <param name="binaryWriter">
            The binary writer used to write data.
            </param>
            <param name="errors">
            The errors.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.FileHeaderExtension.CalcChecksum(ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.UInt32@,System.String@)">
            <summary>
            Calculates the instrument method file checksum. It's duplicating exactly the Xcalibur checksum for compound doc file.
            </summary>
            <param name="rootStorage">The instrument method file (root storage).</param>
            <param name="checksum">The calculated checksum value.</param>
            <param name="errorMessage">The error message if error occurs.</param>
            <returns>True if the calculation is successfully; otherwise false. </returns>
            <exception cref="T:System.ArgumentNullException">rootStorage;@Instrument method file storage cannot be NULL.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.FileHeaderExtension.CheckIsWhoModifiedChanged(ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader,ThermoFisher.CommonCore.Data.Interfaces.IFileHeader)">
            <summary>
            Checks if the who modified has changed.
            </summary>
            <param name="fileHeader">The file header.</param>
            <param name="newFileHeader">The new file header.</param>
            <returns>True if who modified has changed; otherwise false.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.GenericDataItemExtension">
            <summary>
            The generic data item extension.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.GenericDataItemExtension.SaveGenericDataItem(System.IO.BinaryWriter,System.Single,System.Byte[],ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the generic data item.
            </summary>
            <param name="writer">The writer.</param>
            <param name="retentionTime">The retention time.</param>
            <param name="data">The data.</param>
            <param name="errors">The errors.</param>
            <returns>True if generic data item is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.GenericDataItemExtension.SaveGenericDataItem(System.IO.BinaryWriter,System.Byte[],ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the generic data item.
            </summary>
            <param name="writer">The writer.</param>        
            <param name="data">The data.</param>
            <param name="errors">The errors.</param>
            <returns>True if generic data item is written to disk successfully, False otherwise</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderExtension">
            <summary>
            Provides save extension methods for generic header
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderExtension.SaveGenericHeader(ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors,System.IO.BinaryWriter,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Write generic header item to the file.
            </summary>
            <param name="headerItems">Generic header definitions</param>
            <param name="writer">The binary writer.</param>
            <param name="numHeaderItems">Number of the header items.</param>
            <param name="errors">The errors object for storing error information.</param>
            <returns>True generic header saved to the disk, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderExtension.ConvertHeaderItemsToGenericHeader(ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem[],ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors@)">
            <summary>
            Converts the header items to data descriptors.
            </summary>
            <param name="headerItems">The header items.</param>
            <param name="dataDescriptors">The data descriptors.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderItemExtension">
            <summary>
            Provides methods to write generic header item to disk file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.GenericHeaderItemExtension.SaveGenericHeaderItem(ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptor,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the generic header item.
            </summary>
            <param name="dataItem">The generic header item.</param>
            <param name="writer">The writer.</param>
            <param name="errors">store errors information.</param>
            <returns>True if the generic data item is written to disk, otherwise False</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentIdExtension">
            <summary>
            Save the instrument data information to the disk file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentIdExtension.Save(ThermoFisher.CommonCore.Data.IInstrumentDataAccess,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the instrument information.
            </summary>
            <param name="instId">The instrument identifier.</param>
            <param name="writer">The writer.</param>
            <param name="errors">The errors.</param>
            <returns>True instrument ID saved to the disk, false otherwise.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodExporterAdapter">
            <summary>
            It's used internally to create an instrument methods exporter object.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodExporterAdapter.OpenRawFile(System.String)">
            <summary>
            Create an IInstrumentMethodExporter interface to
            read instrument method from a raw (.raw) file and able
            to write it to an instrument method (.meth) file.
            </summary>
            <param name="fileName">Raw file to open</param>
            <returns>Interface to read instrument method from file</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter">
            <summary>
            Provides methods to create/open existing instrument method file for editing, 
            such as creating device method and saving method data.
             ----
            Existing layout of an instrument method file.
            Instrument Method File
                Audit Data
                LCQ Header
            ---
            --- Device Methods
            ---
                SIIXcalibur     (IDeviceMethod)
                    Data            (Method stream - byte array)
                    Text            (string)
                SimulationMS    (IDeviceMethod)
                    Data            (Method stream - byte array)
                    Text            (string)
                TNG-Calcium    (IDeviceMethod)
                    Data            (Method stream - byte array)
                    Text            (string)
                    Header          (Method stream - byte array)
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.#ctor(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IInstrumentMethodBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter"/> class.
            The instrument method writer should open a file if it exists; otherwise, a new method file should be created.
            </summary>
            <param name="instrumentMethodsBuilder">
            The instrument methods builder.<para/>
            The factory creates an IInstrumentMethodBuilder object and passes it to 
            the writer constructor using dependency injection pattern, and the writer uses it to 
            open/create/add/update a file, without any knowledge of actual implementation of this 
            builder is, i.e. it can be a compound document builder or XML builder.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.FileName">
            <summary>
            Gets the instrument method file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.FileHeader">
            <summary>
            Gets the file header for the instrument method file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.UpdateFileHeaderDescription(System.String)">
            <summary>
            Updates the file header field - "Description".
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.UpdateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.IFileHeader)">
            <summary>
            Update the instrument method file header with the file header values passed in.  
            Only updates object values in memory, does not write to disk.
            </summary>
            <param name="fileHeader">The file header.</param>
            <exception cref="T:System.ArgumentNullException">File header cannot be null.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.GetDevices">
            <summary>
            Get the list of device methods which are currently defined in this instrument method.<para/>
            Returns an empty list, if this is a newly created instrument method.<para/>
            ---
            In order to add/update device method, caller should first call this to get the list of devices.<para/>
            Once you've the list, you can start adding a new device method or editing/removing an existing device method.
            </summary>
            <returns> The list of device methods. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.Save">
            <summary>
            Saves the instrument methods to the file.
            If this is an "Unnamed" instrument method writer, caller should use "SaveAs" method with the output 
            file name; otherwise ArgumentNullException will be thrown.
            </summary>
            <returns>
            True if save successfully; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">name;@The instrument methods file name cannot be empty.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriter.SaveAs(System.String)">
            <summary>
            Save this instrument methods to a file.<para/>
            It should overwrite the instrument methods file if the file exists; otherwise, a 
            new file should be created.
            </summary>
            <param name="fileName">File name of the instrument method.</param>
            <returns>True if save successfully; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">name;@The instrument methods file name cannot be empty.</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriterAdapter">
            <summary>
            It's used internally to create an instrument methods writer object.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.InstrumentMethodWriterAdapter.CreateInstrumentMethodWriter(System.String)">
            <summary>
            Creates the instrument method writer.
            The instrument method writer should open a file if it exists; otherwise, a in-memory method file should be created.
            If the input file name is empty, a in-memory method file should be created. When trying to save the "Unnamed" in-memory
            method file, caller should use "SaveAs( fileName )" method with a specified file name.
            </summary>
            <param name="fileName">Name of the instrument method file.</param>
            <returns>Instrument method writer object.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter">
            <summary>
            Provides methods to write mass spec device data.<para/>
            The "PrepareForRun" method should be called during the prepare for run state, before the data acquisition begins. <para/>
            The rest of the methods will be used for data logging.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter._dataInitialOffset">
            <summary>
            The data initial offset
            Mass spec data is written directly to the raw file after the meta-data sections.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter._trailerExtraHeader">
            <summary>
            Generic type headers.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.#ctor(ThermoFisher.CommonCore.Data.Business.Device,System.Int32,System.String,System.Boolean,System.Int32,ThermoFisher.CommonCore.Data.Business.SpectrumPacketType)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter"/> class.
            </summary>
            <param name="deviceType">Type of the device.</param>
            <param name="deviceIndex">Index of the device.</param>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="inAcquisition">if set to <c>true</c> [in acquisition].</param>
            <param name="fileRevision">The file revision.</param>
            <param name="finalPacketType">The final known packet type (at the time of writing). 
            For example: If the MS is compiled against a newer raw file DLL, needed for it's new format,
            then the value saved in a file could be a higher value than that compiled into some data processing application
            built 2 years earlier. On opening the MS data, the raw file reader returns an Error to that application.
            The application should then issue a message telling the customer to upgrade.
            An instrument may set this to a lower value (the highest format required for the current acquisition method),
            to signal that older format data is in the file, even if the device was compiled against a newer DLL.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.IsPreparedForRun">
            <summary>
            Gets a value indicating whether the PrepareForRun method has been called.
            </summary>
            <value>
            True if the PrepareForRun method has been called; otherwise, false.
            </value>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.PrepareForRun(ThermoFisher.CommonCore.Data.IInstrumentDataAccess,ThermoFisher.CommonCore.Data.Interfaces.IMassSpecGenericHeaders,ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo,ThermoFisher.CommonCore.Data.Interfaces.IScanEvents)">
            <summary>
            This method should be called (when creating an acquisition file) during the "Prepare for run" state.<para/>
            It may not be called multiple times for one device. It may not be called after any of the data logging calls have been made.<para/>
            It will perform the following operations:
            1. Write instrument information<para/>
            2. Write run header information
            3. Write status log header <para/>
            4. Write trailer extra header <para/>
            5. Write tune data header <para/>     
            6. Write run header information - expected run time, comments, mass resolution and precision.<para/>
            7. Write method scan events.
            </summary>
            <param name="instrumentId">The instrument ID.</param>
            <param name="headers">The generic data headers.</param>
            <param name="runHeaderInfo">The run header information.</param>
            <param name="methodScanEvents">Method scan events</param>
            <returns>True if all the values are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteInstData(ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData)">
            <summary>
            This method is designed for exporting mass spec scanned data to a file (mostly used by the Application). <para/>
            It converts the input scanned data into the compressed packet format and also generates a profile index 
             if needed by the specified packet type. <para/>
            Overall, it writes the mass spec data packets, scan index (scan header) and trailer scan event if it is provided,
            to a file. <para/>
            This method will branch to the appropriate packet methods to compress the data block before being written to disk.
            </summary>       
            <param name="instData">The transferring data that are going to be saved to a file.</param>
            <returns>True if mass spec data packets are written to disk successfully; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Instrument data cannot be null.</exception>
            <exception cref="T:System.NotImplementedException">The packet type is not yet implement.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteInstData(System.Byte[],ThermoFisher.CommonCore.Data.Business.SpectrumPacketType)">
            <summary>
            This method is designed for mass spec device data writing. <para/>
            To provide fast data writing, this method writes the mass spec data packets directly to file (without performing <para/>
            any data validation and data compression) by the specified packet type. <para/>
            All data validation and data compression currently are done in the device driver code. <para/>
            </summary>
            <param name="dataBlock">The binary block of data to write.</param>
            <param name="packetType">Type of the packet.</param>
            <returns>True if mass spec data packets are written to disk successfully, false otherwise.</returns>
            <exception cref="T:System.NotSupportedException">Not Supported Exception</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteInstScanIndex(ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess,ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            This method is designed for mass spec device data writing. <para/>
            It writes the mass spec scan index (a.k.a scan header) and trailer scan event (if it's available) to the disk.
            </summary>
            <param name="scanStatistics">Index of the mass spec scan.</param>
            <param name="trailerScanEvent">The trailer scan event [optional].</param>
            <returns>True if scan index and trailer scan event (if it's available) are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteTrailerExtraData(System.Object[])">
            <summary>
            If any trailer extra details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para />
            The order and types of the data elements in the object array parameter
            to the method needs to be the same as the order and types that are defined in the header.
            </summary>
            <param name="data">The trailer extra data stores in object array.</param>
            <returns> True if trailer extra data is written to disk successfully, False otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteTrailerExtraData(System.Byte[])">
            <summary>
            If any Trailer Extra details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para />
            The order and types of the data elements in the byte array parameter
            to the method needs to be the same as the order and types that are defined in the header.
            </summary>
            <param name="data">The trailer extra data stores in byte array.</param>
            <returns>True if trailer extra entry is written to disk successfully, False otherwise </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteTuneData(System.Object[])">
            <summary>
            If any tune details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para />
            The order and types of the data elements in the object array parameter
            to the method needs to be the same as the order and types that are defined in the header.
            </summary>
            <param name="data">The tune data stores in object array.</param>
            <returns>True if tune data is written to disk successfully, False otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteTuneData(System.Byte[])">
            <summary>
            If any tune data details are to be written to the raw data file
            then the format this data will take must be written to the file while
            setting up i.e. prior to acquiring any data.<para />
            The order and types of the data elements in the byte array parameter
            to the method needs to be the same as the order and types that are defined in the header.
            </summary>
            <param name="data">The tune data stores in byte array.</param>
            <returns>True if tune data entry is written to disk successfully, False otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteGenericData(System.IO.BinaryWriter,System.Byte[],System.UInt32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Writes the generic data.
            </summary>
            <param name="writer">The writer.</param>
            <param name="data">The data.</param>
            <param name="headerSize">Size of the header.</param>
            <param name="errors">The error object which stores errors information.</param>
            <returns>True if generic data (trailer extra data and tune data) is written to disk; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteRunHeaderInformation(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceAcquireStatus,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Int32@,System.Func{ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Boolean})">
            <summary>
            Writes the run header information.
            </summary>
            <param name="deviceAcquireStatus">The device acquire status.</param>
            <param name="errors">The errors object which stores errors information.</param>
            <param name="writtenFlag">The written flag.</param>
            <param name="method">The method.</param>
            <returns> True if the run header information is written to disk successfully, False otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.AttachMassSpecPacketStreamToRawFile(System.String,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct@)">
            <summary>
            Attaches the mass spec packet stream to raw file.
            </summary>
            <param name="rawFileName">Name of the in-acquisition raw file.</param>
            <param name="runHeaderStruct">The mass spec device run header structure.</param>
            <returns>True if mass spec packet stream is attached to in-acquisition raw file; false otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.InitializeBufferInfo">
            <summary>
            Initializes the buffer information shared memory objects.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.InitializeTemporaryFiles(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Device.RunHeaders.RunHeaderStruct@)">
            <summary>
            Initializes the temporary files.
            </summary>
            <param name="runHeaderStruct">The run header structure.</param>
            <returns>True if all temporary files are created successfully; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteInstDataPackets(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes the instrument data packets to the file.
            </summary>
            <param name="data">The block of data to write.</param>
            <param name="dataSize">Size of the data block.</param>
            <param name="packetSize">Size of each packet in the data block.</param>
            <param name="updateNumPackets">if set to true to update the number of packets; false to not update.</param>
            <returns>True if packets are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteInstMassResolution(System.Double)">
            <summary>
            Writes the mass resolution for the mass spec device to file.<para />
            This field can be set only once. The default mass resolution value is 0.5<para/>
            </summary>
            <param name="halfPeakWidth">Width of the half peak.</param>
            <returns> True if mass resolution is written to disk successfully, False otherwise </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteInstScanIndex(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.ScanIndex)">
            <summary>
            Writes the mass spec scan index (header) to disk
            </summary>
            <param name="scanIndex">Index of the mass spec scan.</param>
            <returns>True if the scan index is written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteMethodScanEvents(ThermoFisher.CommonCore.Data.Interfaces.IScanEvents)">
            <summary>
            Writes the mass spec scan events table.
            </summary>
            <param name="massSpecScanEvents">The mass spec scan events table.</param>
            <returns>
            True if mass scan events table is written to disk successfully; false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">mass Spec Scan Events</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriterInstFilterMassPrecision(System.Int32)">
            <summary>
            Writers the filter mass precision for the mass spec device to file.<para />
            This field can be set only once. The default precision value is 2.
            </summary>
            <param name="precision">The precision.</param>
            <returns>
            True if filter mass precision is written to disk successfully, False otherwise
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteTrailerExtraHeader(ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem[])">
            <summary>
            Write the Trailer Extra Header (format) info to the raw data file. <para />
            If caller is not intended to use the trailer extra data, pass a null argument or zero length array.<para />
            ex. WriteTrailerExtraHeader(null) or WriteTrailerExtraHeader(new IHeaderItem[0])
            </summary>
            <param name="headerItems">The trailer extra header.</param>
            <returns>
            True if trailer extra header is written to disk successfully, False otherwise
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteTrailerScanEvent(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            Writes the trailer scan event to disk.
            </summary>
            <param name="trailerScanEvent">The trailer scan event.</param>
            <returns>True if trailer scan event is written to disk, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MassSpecDeviceWriter.WriteTuneHeader(ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem[])">
            <summary>
            Write the Tune Header (format) info to the raw data file. <para />
            If caller is not intended to use the tune data, pass a null argument or zero length array.<para />
            ex. WriteTuneHeader(null) or WriteTuneHeader(new IHeaderItem[0])
            </summary>
            <param name="headerItems">The tune header.</param>
            <returns>
            True if tune header is written to disk successfully, False otherwise
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.MethodExtension">
            <summary>
            The method extension.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MethodExtension.Save(ThermoFisher.CommonCore.RawFileReader.Writers.EmbeddedMethod,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the instrument method to the provided binary writer.
            </summary>
            <param name="embeddedMethod">Method data to save</param>
            <param name="binaryWriter">Writer to use to save</param>
            <param name="errors">Any error information that occurred</param>
            <returns>True is successful</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker">
            <summary>
            This class includes static methods which turn C# objects from the MS writer interface
            into byte arrays, such that they a be transported with any protocols that can transport binary data.
            The data packing is intended to match the binary format of a raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Pack(ThermoFisher.CommonCore.Data.IInstrumentDataAccess)">
            <summary>
            Packs IInstrumentDataAccess into a byte array
            </summary>
            <param name="instrumentData">Data to be packed</param>
            <returns>the packed data, or an empty array if there is an issue packing the data</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.UnpackInstrumentData(System.Byte[])">
            <summary>
            Unpacks a byte array into IInstrumentDataAccess 
            </summary>
            <param name="bytes">Data to be unpacked</param>
            <returns>the unpacked data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.MassSpecGenericHeadersData">
            <summary>
            Binary (byte array) data from the generic headers of a mass spectrometer.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.MassSpecGenericHeadersData.TrailerExtraHeader">
            <summary>
            Packed trailer extra headers
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.MassSpecGenericHeadersData.StatusLogHeader">
            <summary>
             Packed status log headers
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.MassSpecGenericHeadersData.TuneHeader">
            <summary>
             Packed tune headers
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.MassSpecGenericHeadersData.TrailerExtraDescriptors">
            <summary>
            Gets or sets a tool which can format "trailer" log entries as bytes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.MassSpecGenericHeadersData.StatusLogDescriptors">
            <summary>
            Gets or sets a tool which can format "status" log entries as bytes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.MassSpecGenericHeadersData.TuneDescriptors">
            <summary>
            Gets or sets a tool which can format "tune" log entries as bytes.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Pack(ThermoFisher.CommonCore.Data.Interfaces.IMassSpecGenericHeaders)">
            <summary>
            Convert all mass spec generic headers into byte arrays
            </summary>
            <param name="massSpecGenericHeaders">Headers to pack</param>
            <returns>The headers packed into byte arrays</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Pack(ThermoFisher.CommonCore.Data.Interfaces.IPackedMassSpecHeaders)">
            <summary>
            pack headers into a single byte array
            </summary>
            <param name="headers"></param>
            <returns>byte array with all headers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.InsertArray(System.Byte[],System.Byte[],System.Int32@)">
            <summary>
            Insery an array within another, prceeded by the array length
            </summary>
            <param name="data">data to inseret</param>
            <param name="target">array to copy into</param>
            <param name="offset">offset of tqrget array, updated by inserted data</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.SplitHeaders">
            <summary>
            Headers for all logs as byte arrays
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.HeadersFromBytes(System.Byte[])">
            <summary>
            Separates out Trailer, Status and Tune headers from a byte array.
            </summary>
            <param name="packedHeaders"></param>
            <returns>Inteface to retrieve separate log headers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Unpack(ThermoFisher.CommonCore.Data.Interfaces.IPackedMassSpecHeaders)">
            <summary>
            Unpack all mass spec generic headers from byte arrays
            </summary>
            <param name="packedMassSpecGenericHeaders">Headers to unpack</param>
            <returns>The headers packed into byte arrays</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.UnpackHeaderItem(System.Byte[])">
            <summary>
            Unpack bytes into a Generic header
            </summary>
            <param name="headers">Bytes for the header</param>
            <returns>The table of headers for this generic format</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackHeaderItem(ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem[])">
            <summary>
            Pack a set of header items into a byte array
            </summary>
            <param name="headers">The items to be packed</param>
            <returns>A byte array for the headers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackHeaderItems(ThermoFisher.CommonCore.Data.Interfaces.IHeaderItem[])">
            <summary>
            Pack a set of header items into a byte array
            </summary>
            <param name="headers">The items to be packed</param>
            <returns>A byte array for the headers</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.SaveGenericHeaderToMemoryStream(ThermoFisher.CommonCore.RawFileReader.StructWrappers.GenericMaps.DataDescriptors,System.IO.MemoryStream,System.Int32)">
            <summary>
            Write generic header item to the memory stream for data packer.
            The implementation of the header packing is based on the header unpacking item code (UnpackHeaderItem)
            </summary>
            <param name="headerItems">Generic header definitions</param>
            <param name="writer">The memory stream writer.</param>
            <param name="numHeaderItems">Number of the header items.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Pack(ThermoFisher.CommonCore.Data.Interfaces.IMassSpecRunHeaderInfo)">
            <summary>
            Convert a mass spec run header to a byte array
            </summary>
            <param name="massSpecRunHeader"></param>
            <returns>An array representing the header</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.UnpackRunHeader(System.Byte[])">
            <summary>
            Convert a byte array to a mass spec run header
            </summary>
            <param name="data"></param>
            <returns>An array representing the header</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.UnpackString(System.Byte[],System.Int32@)">
            <summary>
            Unpacks a string, which is preceded by it's length
            </summary>
            <param name="data">message</param>
            <param name="index">the start index</param>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Pack(ThermoFisher.CommonCore.Data.Interfaces.IScanEvents)">
            <summary>
            Convert the scans events to a byte array
            </summary>
            <param name="scanEvents">the events</param>
            <returns>data packed as a byte array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.SaveScanEvents(ThermoFisher.CommonCore.Data.Interfaces.IScanEvents,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Write scan events to a stream
            </summary>
            <param name="massSpecScanEvents">events to encode</param>
            <param name="writer">stream to save bytes</param>
            <param name="devErrors">error messages</param>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Pack(ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess)">
            <summary>
            Convert the scans statistics to a byte array
            </summary>
            <param name="scanStatistics">the stats</param>
            <returns>data packed as a byte array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.UnpackScanStatistics(System.Byte[])">
            <summary>
            Convert the scans statistics to a byte array
            </summary>
            <param name="packedScanStatistics">the stats</param>
            <returns>data packed as a byte array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Pack(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            Convert a scan event into a byte array
            </summary>
            <param name="scanEvent">the event to convert</param>
            <returns>the data as a byte array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.GetBytesWithLength(System.String)">
            <summary>
            Converts a string tp a byte array, with the string length also encoded
            </summary>
            <param name="str">String to encode</param>
            <returns>Byte array of the length prefixed string</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.GetString(System.Byte[])">
            <summary>
            Convert a byte array to a string
            </summary>
            <param name="bytes">bytes of string</param>
            <returns>the converted string</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData">
            <summary>
            Data for a scan, converted into byte arrays
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData.PackedScanEvent">
            <summary>
            Gets or sets the converted scan event
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData.PackedScanStats">
            <summary>
            Gets or sets the converted scan stats
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData.ScanData">
            <summary>
            Gets or sets the converted scan data
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData.ProfilePaketCount">
            <inheritdoc/>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData.ProfileArray">
            <inheritdoc/>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData.ToByteArray">
            <summary>
            Convert this object to a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData.#ctor(System.Byte[])">
            <summary>
            Create Packed Data from a byte array
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.PackedMsInstrumentData.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Pack(ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData)">
            <summary>
            Pack data from an MS scan to byte arrays.
            </summary>
            <param name="instData">Data to be packed</param>
            <returns>Packed data</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.MsDataPacker.Unpack(ThermoFisher.CommonCore.Data.Interfaces.IPackedMsInstrumentData)">
            <summary>
            Unpack data from an MS scan from byte arrays.
            </summary>
            <param name="instData">Data to be packed</param>
            <returns>Packed data</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.NamespaceDoc">
            <summary>
            Contains code for writing various Xcalibur data system files
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder">
            <summary>
            Instrument method file is a compound document file (contains a ROOT Storage) which are organized in a 
            hierarchy of storages. The names of all device storages and streams that are
            direct members of a storage must be different (unique).  Names of device streams or
            storages that are members of different storages may be equal.
            Example.
            Instrument method file 
                Root storage
                    |-stream0
                    |-storage1 
                        |-stream1
                        |-stream2
                    |-storage2
                        |-stream1
            ----
            </summary>
            <seealso cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors" />
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder"/> class.<para/>
            Opens the instrument method file for editing if the file exists; otherwise, creates an in-memory
            file. After you've finished editing, calls the "Save" or "SaveAs" method to persist the data to the file.
            </summary>
            <param name="fileName">The instrument method file Name. </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.Name">
            <summary>
            Gets the name of the instrument method file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.FileHeader">
            <summary>
            Gets the file header for the instrument method file
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.CreateDeviceMethodStorage(ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.String,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Creates a device method storage.
            </summary>
            <param name="storage"> The storage (root storage). </param>
            <param name="methodName"> Name of the device method storage. </param>
            <param name="errors">Stores the error information if error occurs.</param>
            <returns>Device method storage. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.SaveAuditTrail(ThermoFisher.CommonCore.RawFileReader.IOleStorage,ThermoFisher.CommonCore.RawFileReader.StructWrappers.OldLCQ.AuditTrail,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the audit trail. 
            </summary>
            <param name="storage">The storage (root storage).</param>
            <param name="auditTrail">The audit trail.</param>
            <param name="errors">Stores the error information if error occurs.</param>
            <returns>True if audit trail is saved successfully; otherwise false. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.SaveFileHeader(ThermoFisher.CommonCore.RawFileReader.IOleStorage,ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader,System.DateTime,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the file header to stream.
            </summary>
            <param name="storage">The storage.</param>
            <param name="fileHeader">The file header.</param>
            <param name="dt">The current date time.</param>
            <param name="errors">Stores the error information if error occurs.</param>
            <returns>True if file header saved successfully; otherwise false. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.SaveDeviceMethod(ThermoFisher.CommonCore.Data.Interfaces.IDeviceMethod,ThermoFisher.CommonCore.RawFileReader.IOleStorage,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the device method to stream.
            </summary>
            <param name="deviceMethod">The device method.</param>
            <param name="storage">The storage.</param>
            <param name="errors">Stores the error information if error occurs.</param>
            <returns>True if the device method saved successfully; otherwise false.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.SaveMethodStreams(ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.Collections.Generic.Dictionary{System.String,System.Byte[]},ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the device method streams, i.e. "Text", "Data, etc. <para/>
            If the stream value is NULL, it will save an empty stream.
            </summary>
            <param name="storage">The storage.</param>
            <param name="streamBytes">The list of streams which are going to save. </param>
            <param name="errors">Stores the error information if error occurs.</param>
            <returns>True if method streams are saved successfully; otherwise false. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.UpdateFileHeaderDescription(System.String)">
            <summary>
            Updates the file header field - "Description".
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.UpdateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.IFileHeader)">
            <summary>
            Update the instrument method file header with the file header values passed in.  
            Only updates object values in memory, does not write to disk.
            </summary>
            <param name="fileHeader">The file header.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.GetDevices">
            <summary>
            Get the list of device methods which are currently defined in this instrument method.<para/>
            Returns an empty list, if this is a newly created instrument method.<para/>
            ---
            In order to add/update device method, caller should first call this to get the list of devices.<para/>
            Once you've the list, you can start adding a new device method or editing/removing an existing device method.
            </summary>
            <returns>The list of device methods.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.SaveAs(System.String)">
            <summary>
            Save this instrument methods to a file.<para/>
            It should overwrite the instrument methods file if the file exists; otherwise, a 
            new file should be created.
            </summary>
            <param name="fileName">File name of the instrument method.</param>
            <returns>True if save successfully; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">name;@The name cannot be empty.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodBuilder.OpenInstrumentMethodFile(System.String)">
            <summary>
            Opens an existing compound file (instrument method).
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper">
            <summary>
            Provides common methods to deal with IOleStorage and IOleStream.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.OpenDocFile(System.String,ThermoFisher.CommonCore.RawFileReader.StgMode)">
            <summary>
            Opens an existing compound document file (instrument method file).
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="accessModes">Specifies the access mode to use when opening the compound document file. </param>
            <returns>The root storage object. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.CreateDocFile(System.String)">
            <summary>
            Creates the compound document file (instrument method file) with a specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>The root storage object (IOleStorage).</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.CreateStorage(ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.String)">
            <summary>
            Creates a storage (Device method).
            </summary>
            <param name="storage"> The storage. </param>
            <param name="storageName"> Name of the device storage. </param>
            <returns>IOleStorage object (Device method). </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.OpenStorage(ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.String,ThermoFisher.CommonCore.RawFileReader.StgMode)">
            <summary>
            Opens an existing storage (Device method).
            </summary>
            <param name="storage">The storage.</param>
            <param name="storageName">Name of the storage.</param>
            <param name="accessModes">Specifies the access mode to use when opening the storage object. </param>
            <returns>Device storage.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.TryCatchSaveStreamData(System.Func{ThermoFisher.CommonCore.RawFileReader.IOleStream,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Boolean},ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.String,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the device stream data to the compound storage.
            </summary>
            <param name="method">The method.</param>
            <param name="storage">The storage (either the root storage or device method).</param>
            <param name="streamName">Name of the stream data.</param>
            <param name="error">Stores the last error information.</param>
            <returns>True if data saved successfully; otherwise false. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.TryCatchReadStreamData(ThermoFisher.CommonCore.RawFileReader.IOleStorage,System.String,System.Byte[]@,System.String@)">
            <summary>
            Reads the device stream data from the storage.
            </summary>
            <param name="storage">The storage (either the root storage or device method).</param>
            <param name="streamName">Name of the stream data.</param>
            <param name="bytes">Returns the stream data in byte array.</param>
            <param name="errorMessage">Returns the error information if error occurs.</param>
            <returns>True if data saved successfully; otherwise false. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.WriteInt(ThermoFisher.CommonCore.RawFileReader.IOleStream,System.Int32)">
            <summary>
            Writes the integer 4-byte value to stream.
            </summary>
            <param name="stream">The data stream.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.WriteBytes(ThermoFisher.CommonCore.RawFileReader.IOleStream,System.Byte[])">
            <summary>
            Writes the bytes to the stream.
            </summary>
            <param name="stream">The data stream.</param>
            <param name="value">The value in byte array.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.Save(ThermoFisher.CommonCore.RawFileReader.StructWrappers.FileHeader,ThermoFisher.CommonCore.RawFileReader.IOleStream,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the file header to the IOleStream.
            </summary>
            <param name="fileHeader">The file header object.</param>
            <param name="streamer">The IOleStream object.</param>
            <param name="errors">Stores the error information if error occurs.</param>
            <returns>True if the file header saved successfully; otherwise false. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.Release(ThermoFisher.CommonCore.RawFileReader.IOleStorage)">
            <summary>
            Releases the specified storage.
            </summary>
            <param name="storage">The storage.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.Release(ThermoFisher.CommonCore.RawFileReader.IOleStream)">
            <summary>
            Releases the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.OleInstrumentMethodHelper.Release(ThermoFisher.CommonCore.RawFileReader.IEnumSTATSTG)">
            <summary>
            Releases the specified enumerator for STATSTG structures.
            </summary>
            <param name="en">The enumerator.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.PdaDeviceWriter">
            <summary>
            Defines the PDA Device Writer type.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PdaDeviceWriter.#ctor(ThermoFisher.CommonCore.Data.Business.Device,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.PdaDeviceWriter" /> class.
            </summary>
            <param name="deviceType">Type of the device.</param>
            <param name="deviceIndex">Index of the device.</param>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="inAcquisition">if set to <c>true</c> [in acquisition].</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PdaDeviceWriter.WriteInstData(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex)">
            <summary>
            Writes both the PDA instrument data and index into the disk. This is the
            simplest format of data we write to a raw file.
            </summary>
            <param name="instData">The PDA UV instrument data.</param>
            <param name="instDataIndex">Index of the PDA instrument scan.</param>
            <returns>
            True if scan data and index are written to disk successfully, False otherwise
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Instrument Data
            or
            PDA Scan Index
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PdaDeviceWriter.WriteInstData(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex)">
            <summary>
            PDA writer doesn't support this method.
            This method is intended for UV type of device writers
            </summary>
            <param name="instData">The UV type of the scan data.</param>
            <param name="scanIndex">The UV type of the scan index.</param>
            <returns>
            Not supported exception will be thrown.
            </returns>
            <exception cref="T:System.NotSupportedException">PDA writer doesn't support.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PdaDeviceWriter.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData">
            <summary>
            The peak data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData._endOfPosition">
            <summary>
            The _end of position.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData._currentStartOfData">
            <summary>
            The _current start of data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData._nextStartOfData">
            <summary>
            The _next start of data.
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData._currentIndex">
            <summary>
            The _current index.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData"/> class.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.PacketType">
            <summary>
            Gets or sets the packet type.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.ConvertRawScanIntoPackets(ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData,ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.ProfileDataPacket64[]@)">
            <summary>
            Converts the raw scan into packets.
            </summary>
            <param name="instData">The mass spec data.</param>
            <param name="profileDataPacket">Mass spec profile data packets.</param>
            <returns>The converted packets in compressed form</returns>
            <exception cref="T:System.NotSupportedException">Not Supported Exception</exception>
            <exception cref="T:System.ArgumentException">The instrument scan data cannot be null.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.IsSupportedPacketTypes(ThermoFisher.CommonCore.Data.Business.SpectrumPacketType)">
            <summary>
            The below packet types are not supported for exporting.
            </summary>
            <param name="packetType">Type of the packet.</param>
            <returns>True if the packet type is supported, otherwise, throw not implemented exception.</returns>
            <exception cref="T:System.NotImplementedException">The packet type is supported.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.WriteInstData(System.IO.BinaryWriter,System.Byte[],ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Writes the instrument data.
            </summary>
            <param name="writer">The writer.</param>
            <param name="data">The data.</param>
            <param name="errors">The errors.</param>
            <returns>True instrument data saved to the disk, false otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.WriteInstIndex(System.Byte[],System.Int32)">
            <summary>
            Writes the profile index information to disk
            </summary>
            <param name="data">The data.</param>
            <param name="dataSize">Size of the data.</param>
            <returns>True the indexes stored to disk, false otherwise.</returns>
            <exception cref="T:System.NotSupportedException">This format type does not support.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.WriteIndices(System.IO.BinaryWriter)">
            <summary>
            Writes the indices.
            </summary>
            <param name="writer">The writer.</param>
            <returns>The number of profile indexes </returns>
            <exception cref="T:System.NotSupportedException">This format type does not support.</exception>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.CurrentStartOfData">
            <summary>
            Gets or sets the current start of data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.NextStartOfData">
            <summary>
            Gets the next start of data.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.DataInitialOffset">
            <summary>
            Gets or sets the data initial offset.
            </summary>
            <value>
            The data initial offset.
            </value>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.PeakData.GenerateProfileIndexDataPackets(ThermoFisher.CommonCore.Data.Interfaces.IMsInstrumentData,System.Int32)">
            <summary>
            Generates the profile index data packets.
            </summary>
            <param name="instData">The instrument data.</param>
            <param name="dataSize">Size of the data.</param>
            <returns>ProfileDataPacket64 array object.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.ProfileIndexDataPacketsExtension">
            <summary>
            Provides extension methods for Profile Index Data Packets
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.ProfileIndexDataPacketsExtension.MassSpecProfileIndexDataPktsToByteArray(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.Packets.ExtraScanInfo.ProfileDataPacket64[])">
            <summary>
            Convert the profile index data packets structure to a byte array.
            </summary>
            <param name="profileDataPackets">The profile data packets.</param>
            <returns>Profile index data packets in byte array form.</returns>
            <exception cref="T:System.ArgumentNullException">profile Data Packets</exception>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter">
            <summary>
            The device temp file writer.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter.RunHeader">
            <summary>
            Gets the run header.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter"/> class.
            Creates objects which are used for all device types
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="deviceInfo">
            The device info.
            </param>
            <param name="rawFileName">
            The raw file name.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <param name="errors">
            The device errors.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter.Save(System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Int64)">
            <summary>
            The save.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <param name="packetDataOffset">
            The packet data offset.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter.WriteTempFileData(System.String,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.String,System.Int32)">
            <summary>
            The write temp file data.
            </summary>
            <param name="purpose">Meaning of this file</param>
            <param name="writer">
            The writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <param name="fileName">
            The file name.
            </param>
            <param name="maxBytesCopy">
            The max Bytes Copy.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter.GetBufferDataSize(System.Int32,System.Int32,System.String)">
            <summary>
            Gets the size of the data from the buffer and compares to size of the temp file.  Only copy minimum bytes.
            Used by some temp files that write garbage data to temp file.
            </summary>
            <param name="size">
            The size.
            </param>
            <param name="numberEntries">
            The number Entries.
            </param>
            <param name="tempFileName">
            The temp file name.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter.Dispose">
            <summary>
            Disposes the shared memory resources used by the device.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileBaseDeviceWriter.RefreshMaps">
            <summary>
            Refresh all objects from data in memory maps.
            Do not create new maps.
            </summary>
            <returns>
            True if OK
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInfoExtension">
            <summary>
            Provides extension methods to write raw file info to the shared memory mapped buffer
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInfoExtension.AddControllerInfo(System.Guid,ThermoFisher.CommonCore.RawFileReader.Facade.Constants.VirtualDeviceTypes,System.Int32,System.String,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Adds the controller information.
            we are being created by the virtual controller so we need to register ourselves with the global
            storage so other instantiations of this file will be able to read this controller information
            </summary>
            <param name="deviceId">Device Identifier</param>
            <param name="deviceType">Type of the device.</param>
            <param name="deviceIndex">Index of the device.</param>
            <param name="mapName">Shared memory mapped file name</param>
            <param name="errors">Store errors information</param>
            <returns>True if controller information is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInfoExtension.GetAvailableControllerIndex(System.Guid,System.String,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Gets the index of the available controller.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="mapName">Name of the map.</param>
            <param name="errors">The errors.</param>
            <returns>True able to obtain a controller index; otherwise False.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor">
            <summary>
            Provide method to export an instrument method from a raw file
            </summary>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.IErrors" />
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor"/> class.
            </summary>
            <param name="rawFileName">Name of the raw file.</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor.HasInstrumentMethod">
            <summary>
            Gets a value indicating whether the underlying raw file has instrument method.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor.ExportInstrumentMethod(System.String,System.Boolean)">
            <summary>
            Export the instrument method to a file.
            Because of the many potential issues with this, use with care, especially if
            adding to a customer workflow.
            Try catch should be used with this method.
            Not all implementations may support this (some may throw NotImplementedException).
            .Net exceptions may be thrown, for example if the path is not valid.
            Not all instrument methods can be exported, depending on raw file version, and how
            the file was acquired. If the "instrument method file name" is not present in the sample information,
            then the exported data may not be a complete method file.
            Not all exported files can be read by an instrument method editor.
            Instrument method editors may only be able to open methods when the exact same list
            of instruments is configured.
            Code using this feature should handle all cases.
            </summary>
            <param name="methodFilePath">The output instrument method file path.</param>
            <param name="forceOverwrite">Force over write. If true, and file already exists, attempt to delete existing file first.
            If false: UnauthorizedAccessException will occur if there is an existing read only file.</param>
            <returns>
            True if the file was saved. False, if no file was saved, for example,
            because there is no instrument method saved in this raw file.
            </returns>
            <exception cref="T:System.Exception">No open raw file.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor.GetAllInstrumentNamesFromInstrumentMethod">
            <summary>
            Gets names of all instruments, which have a method stored in the raw file's copy of the instrument method file.
            These names are "Device internal names" which map to storage names within
            an instrument method, and other instrument data (such as registry keys).
            Use "GetAllInstrumentFriendlyNamesFromInstrumentMethod" (in IRawDataPlus) to get display names
            for instruments.
            </summary>
            <returns>
            The instrument names.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor.LoadInstrumentMethod(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapReader,System.Guid,System.String,System.Int64)">
            <summary>
            load the instrument method.
            </summary>
            <param name="viewer">View into file</param>
            <param name="id">RawFileLoader instance ID</param>
            <param name="dataFileMapName">Memory mapped file name for Raw file information.</param>
            <param name="startPos">offset into view</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileInstrumentMethodAccessor.IsMemoryMappedAccessorValid(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.String,System.Guid)">
            <summary>
            Validates the memory mapped accessor.
            </summary>
            <param name="accessor">Memory mapped file accessor</param>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="id">The identifier.</param>
            <returns>True is </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileMsDeviceWriter">
            <summary>
            The writer for saving MS device data into raw files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileMsDeviceWriter.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileMsDeviceWriter"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="deviceInfo">
            The device info.
            </param>
            <param name="rawFileName">
            The raw file name.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <param name="errors">
            The device errors.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileMsDeviceWriter.Save(System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Int64,System.Int64@)">
            <summary>
            The save.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <param name="packetDataOffset">
            The packet data offset.
            </param>
            <param name="controllerHeaderOffset">
            The controller header offset.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileMsDeviceWriter.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileMsDeviceWriter.Refresh">
            <summary>
            Refresh data from maps
            </summary>
            <returns>
            True if OK
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileUvDeviceWriter">
            <summary>
            The writer for saving UV device data into raw files.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileUvDeviceWriter.#ctor(System.Guid,ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo,System.String,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileUvDeviceWriter"/> class.
            </summary>
            <param name="loaderId">
            The loader id.
            </param>
            <param name="deviceInfo">
            The device info.
            </param>
            <param name="rawFileName">
            The raw file name.
            </param>
            <param name="fileRevision">
            The file revision.
            </param>
            <param name="errors">
            The device errors.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileUvDeviceWriter.Save(System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Int64,System.Int64@)">
            <summary>
            The save.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <param name="packetDataOffset">
            The packet data offset.
            </param>
            <param name="controllerHeaderOffset">
            The controller header offset.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileUvDeviceWriter.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileUvDeviceWriter.Refresh">
            <summary>
            Refresh data from maps
            </summary>
            <returns>
            True if OK
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter">
            <summary>
            The file writer.
            This type controls creation of a raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.CreateFullFileAccess">
            <summary>
            create full file access.
            </summary>
            <returns>
            The <see cref="T:System.Security.AccessControl.FileSystemAccessRule"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.FixVirtualDeviceIndex">
            <summary>
            Fixes the invalid index of the virtual device and updates the shared memory mapped RawFileInfo object
             if the device index is out of range.
            </summary>
            <returns>RawFileInfoStruct object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.#ctor(System.String,System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter"/> class.
            This uses a mutex on the file name to prevent multiple instances trying to create the same raw file at 1 time.
            Subsequent instances will get a unique time stamp file name.
            </summary>
            <param name="path">
            The path.
            </param>
            <param name="writerId">
            The writer Id.
            </param>
            <param name="permitRenaming">[Optional] it has a default value of true.<para/>
            True to specify that the raw file writer should create a raw file if the file isn't exist; however, if the file already exists, 
            the writer should create a raw file with the time stamp appended to the end of the file name.<para/>
            False to specify that the raw file writer should not create a file and throw an IO exception if the file already exists.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.Dispose">
            <summary>
            Disposes the raw file for writing.  Flushes all streams to disk and closes them.  Releases all shared memory objects.
            If last reference for temporary device files, those temp files will be deleted.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.InternalDispose">
            <summary>
            The internal dispose.
            Does not clear the log
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.DisposeBinaryFileWriter(System.IO.BinaryWriter)">
            <summary>
            Disposes the binary file writer.
            </summary>
            <param name="binFileBinaryWriter">
            The bin File Binary Writer.
            </param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.HasError">
            <summary>
            Gets a value indicating whether this file has detected an error.
            If this is false: Other error properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.HasWarning">
            <summary>
            Gets a value indicating whether this file has detected a warning.
            If this is false: Other warning properties in this interface have no meaning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.IsError">
            <summary>
            Gets a value indicating whether an error occurred.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.ErrorCode">
            <summary>
            Gets the error code, 0 if no error has occurred. A non 0 value is an error. Can not set to 0 and can not overwrite existing error code. 
            The acquisition service might set an error code due to errors in other libraries/devices.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.WarningMessage">
            <summary>
            Gets the warning message if warning has occurred. Empty string if no warning.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.ShouldSaveChanges">
            <summary>
            Gets or sets a value indicating whether should save changes.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.RawFileName">
            <summary>
            Gets the raw file name.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.CheckSum">
            <summary>
            Gets the calculated checksum for this raw file. Only calculated after a save has occurred.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.IFileHeaderUpdate)">
            <summary>
            Update the raw file header with the file header values passed in.  
            Only updates object values in memory, does not write to disk.
            A default FileHeader is created with every new writer instance.
            </summary>
            <param name="fileHeader">
            The file header object with values to use.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateAutoSampler(ThermoFisher.CommonCore.Data.Interfaces.IAutoSamplerInformation)">
            <summary>
            The update auto sampler.
            </summary>
            <param name="autoSamplerInformation">
            The auto sampler information.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.PublicMethodSuccess(System.String)">
            <summary>
            Format a log message for public method success.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            Always true (success)
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.PublicMethodEntry(System.String)">
            <summary>
            validate a public method entry.
            Entry is not valid if object is disposed.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            True if method can proceed
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateSequenceRow(ThermoFisher.CommonCore.Data.Interfaces.ISampleInformation)">
            <summary>
            The update sequence row.
            </summary>
            <param name="sequenceRowSampleInfo">
            The sequence row sample info.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.PublicFieldUpdate(System.String,System.Action)">
            <summary>
            Helper for small methods which perform a field update.
            Validates that the object has not been disposed.
            </summary>
            <param name="method">
            The method.
            </param>
            <param name="act">
            The act.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateCreatorLogon(System.String)">
            <summary>
            update the creator logon.
            </summary>
            <param name="creatorLogon">
            The creator logon.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateCreatorId(System.String)">
            <summary>
             update the creator id.
            </summary>
            <param name="creatorId">
            The creator id.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateUserLabels(System.String[])">
            <summary>
            The update user label.
            </summary>
            <param name="userLabels">
            The user label.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateUserLabel(System.String,System.Int32)">
            <summary>
            The update user label.
            </summary>
            <param name="userLabel">
            The user label.
            </param>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateCreationDate(System.DateTime)">
            <summary>
            update the creation date.
            </summary>
            <param name="creationDate">
            The creation date.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.AddAuditEntry(System.DateTime,System.Int64,System.String)">
            <summary>
            Adds an audit data entry to the audit trail list of the raw file.
            </summary>
            <param name="timeChanged">
            The time changed.
            </param>
            <param name="whatChanged">
            What changed by integer value.
            </param>
            <param name="comment">
            The comment.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            True if successfully updated value.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.PerformSaving(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            perform saving.
            </summary>
            <param name="errors">
            The errors.
            </param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.PerformPartialSave(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Perform partial save.
            Saves information into the raw file,
            but leaves the raw file open for creation (as several temp files).
            </summary>
            <param name="errors">
            The errors.
            </param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.StitchFiles(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            stitch temp files (end of acquisition).
            </summary>
            <param name="errors">
            The errors.
            </param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.SaveUpdatedFileHeader(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            save the updated file header.
            </summary>
            <param name="errors">
            The errors.
            </param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.FinalizeRawFileSecurity(System.String,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Finalizes the raw file security.
            Begin create a temporary file to get its FileSecurity object instead of the one from the raw file.
            Add an access rule to remove the WellKnownSidType.WorldSid into this FileSecurity object.
            Apply the modified ACL to the raw file.
            </summary>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.MarkAcquisitionComplete">
            <summary>
            mark acquisition complete.
            </summary>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.SaveAuditTrail">
            <summary>
            save the audit trail.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.SaveAllControllers(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            save data from all controllers.
            </summary>
            <param name="errors">
            The errors.
            </param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.CanSaveAllControllers">
            <summary>
            Test if we can save all controllers.
            </summary>
            <returns>
            true if we can save
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.SaveControllerData(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Int32)">
            <summary>
            save data from on "controller" (device).
            </summary>
            <param name="errors">
            The errors.
            </param>
            <param name="i">
            The index to the controller.
            </param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.FindDataOffset(System.Int32)">
            <summary>
            find data offset for the current controller.
            Determines where the scan data begins in the final file, for this detector.
            </summary>
            <param name="i">
            The i.
            </param>
            <returns>
            The offset into the raw file for this controller (detector)
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateSharedMemoryOfRawFileInfo">
            <summary>
            update shared memory of raw file info.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.SaveRawFileInfo(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            save raw file info.
            </summary>
            <param name="errors">
            The errors.
            </param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.SaveHeader(ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            save header.
            </summary>
            <param name="errors">
            The errors.
            </param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.SaveRawFile(System.Boolean)">
            <summary>
            Save the raw file.
            The raw file name is guaranteed to be unique at this point, create a mutex to prevent multiple save calls interfering.
            </summary>
            <param name="partialSave">
            True only if saving part of the raw file for the acquisition raw file.  
            On partial save, only raw file header, auto sampler information, sequence row information, and raw file info are written.  No scan data written.
            </param>
            <returns>
            True if file successfully written to disk.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.StoreInstrumentMethod(System.String,System.String[],System.String[],System.Boolean)">
            <summary>
            Saves the instrument method into the raw file
            </summary>
            <param name="instrumentMethodPath">The instrument method file path.</param>
            <param name="storageNames">List of virtual instrument storage names.</param>
            <param name="descriptions">List of virtual instrument descriptions.</param>
            <param name="shouldBeDeleted">
            [Optional] it has a default value of true.<para/>
            The should be deleted flag indicating whether the temporary instrument method should be removed after the raw file writer is closed.</param>
            <returns>True instrument method saved to the disk, false otherwise.</returns>
            <exception cref="T:System.IO.FileNotFoundException">invalid instrument method path.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.RefreshViewOfFile">
            <summary>
            Refreshes view of the raw file.  Reloads the RawFileInfo object and the virtual controllers run headers from shared memory.  
            Does not read actual data from any temporary files.
            </summary>
            <returns>
            True if successfully reloaded internal memory buffers.
            </returns>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.MemoryMappedRawFileName">
            <summary>
            Gets the memory mapped raw file name.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.InitializeWriter">
            <summary>
            The initialize writer.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.RemapViewOfFile">
            <summary>
            Remaps/refreshes the device list from the shared memory raw file info object.
            Instantiates new objects based on the data from the shared memory raw file info.
            </summary>
            <returns>
            The true if file/device list successfully remapped.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.CreateDeviceList(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo})">
            <summary>
            Create device list.
            Attaches to memory maps of all known devices
            Needed to add a reference count to all temp files, and to get latest data about device.
            </summary>
            <param name="virtualControllerInfoList">
            The virtual controller info list.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.UpdateExisitingDeviceList(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo})">
            <summary>
            Update the previously found list
            Device list me be already populated by previous refresh calls
            Because this list is made based on shared memory, there can be issues
            with
            1: Items not being ready for use
            2: Items being added
            In these cases, attempt to keep what we have, and add or fix as needed
            Avoid regenerating "known good" devices, and just refresh data for these.
            In any cases where device data cannot be initialized completely, dispose of that data
            and set the device to null, to be fixed by a future refresh.
            </summary>
            <param name="virtualControllerInfoList">data for all device</param>
            <returns>true if list is valid</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.RegenerateDeviceList(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo})">
            <summary>
            make a new list, and completely replace any existing list.
            </summary>
            <param name="virtualControllerInfoList">
            The virtual controller info list.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.AppendToExistingDeviceList(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo})">
            <summary>
            append to existing device list.
            </summary>
            <param name="virtualControllerInfoList">
            The virtual controller info list.
            </param>
            <returns>
            true if list is valid
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.ValidateExistingDeviceList(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo})">
            <summary>
            validate the existing device list.
            </summary>
            <param name="virtualControllerInfoList">
            The virtual controller info list.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.RawFileDeviceWriter(System.Collections.Generic.List{ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo},System.Int32)">
            <summary>
            Generate a raw file device writer.
            </summary>
            <param name="virtualControllerInfoList">
            The virtual controller info list.
            </param>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileDeviceWriter"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.ApplySecuritySettingsToRawFile">
            <summary>
            The apply security settings to raw file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.GetRawFileDeviceWriter(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualControllerInfo)">
            <summary>
            Get raw file device writer.
            </summary>
            <param name="controllerInfo">
            The controller info.
            </param>
            <returns>
            The <see cref="T:ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IRawFileDeviceWriter"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.RenameCorruptFile">
            <summary>
            Handles a corrupt file by closing writers and renaming file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriter.GetConnectedDevices">
            <inheritdoc />
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriterAdapter">
            <summary>
            The raw file writer adapter. Used internally to get a raw file writer.
            Publicly can use factory which calls down to here.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RawFileWriterAdapter.GetRawFileWriter(System.String,System.Boolean)">
            <summary>
            The get raw file writer.
            </summary>
            <param name="rawFilePath">
            The raw file path.
            </param>
            <param name="permitRenaming">[Optional] it has a default value of true.<para/>
            True to specify that the raw file writer should create a raw file if the file isn't exist; however, if the file already exists, 
            the writer should create a raw file with the timestamp appends to the end of the file name.<para/>
            False to specify that the raw file writer should not create a file and throw an System.IO exception if the file already exists.
            </param>
            <returns>Raw file writer object. </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension">
            <summary>
            Provides methods to update the run header shared memory buffer
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveExpectedRunime(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Double,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Wrapper to write the expected run time. All devices MUST do this so
            that the real-time update can display a sensible Axis.
            </summary>
            <param name="runheader">Device's run header object</param>
            <param name="writer">Shared memory mapped file accessor</param>
            <param name="runTime">The expected Run Time.</param>
            <param name="errors">Store error information</param>
            <returns>True if expected run time is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveMassResolution(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Double,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Write the mass resolution for the mass spec device to disk.
            Used by the scan processing routines.
            </summary>
            <param name="runHeader">Device's run header object</param>
            <param name="writer">Shared memory mapped file accessor</param>
            <param name="halfPeakWidth">Width of the half peak.</param>
            <param name="errors">Store errors information</param>
            <returns>True if mass resolution is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.TryWriteInt(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int64,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            try write integer to memory map.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="offset">
            The offset into the map.
            </param>
            <param name="value">
            The value to write.
            </param>
            <param name="errors">
            The errors.
            </param>
            <returns>
            True if value is written to disk successfully.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveFilterMassPrecision(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the filter mass precision.
            </summary>
            <param name="runHeader">
            The run Header.
            </param>
            <param name="writer">
            The writer.
            </param>
            <param name="precision">
            The precision.
            </param>
            <param name="errors">
            Store errors information
            </param>
            <returns>
            True if filer mass precision is written to disk successfully, False otherwise
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveNumStatusLog(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Writes the number of status log to disk.
            </summary>
            <param name="writer">Shared memory mapped file accessor.</param>
            <param name="numStatusLong">The number of status log entries.</param>
            <param name="errors">Store the errors information.</param>
            <returns>True if number of status log entries is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveNumErrorLog(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Writes the number of error log to disk.
            </summary>
            <param name="writer">Shared memory mapped file accessor.</param>
            <param name="numErrorLog">The number error log.</param>
            <param name="errors">Store errors information.</param>
            <returns>True if number of error long entries is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveScanNum(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the last scan number.
            </summary>
            <param name="writer">Shared memory mapped file accessor.</param>
            <param name="lastSpec">The last spec.</param>
            <param name="errors">The errors.</param>
            <returns>True if the last spectrum number is written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveNumTrailerExtra(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Writes the total number of trailer extra data to disk.
            </summary>
            <param name="writer">The Shared memory mapped file accessor for RunHeader.</param>
            <param name="numLogs">The number of trailer extra entries.</param>
            <param name="errors">Store the errors information.</param>
            <returns>True if number of trailer extra entries is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveNumTuneData(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Writes the total number of tune data entries to disk.
            </summary>
            <param name="writer">The Shared memory mapped file accessor for RunHeader.</param>
            <param name="numLogs">The number of data entries.</param>
            <param name="errors">Store the errors information.</param>
            <returns>True if number of tune data entries is written to disk successfully, false otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveNumTrailerScanEvents(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Int32,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Writes the total number of trailer scan events to disk.
            </summary>
            <param name="writer">The Shared memory mapped file accessor for RunHeader.</param>
            <param name="numScanEvents">The number of trailer scan event entries.</param>
            <param name="errors">Store the errors information.</param>
            <returns>True if number of trailer scan event entries is written to disk successfully, false otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveIsInAcquisition(ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Write the state of the IsInAcquisition flag to indicate that the data acquiring is in progress or completed.
            </summary>
            <param name="writer">The Shared memory mapped file accessor for RunHeader.</param>
            <param name="isInAcq">True is still acquiring, otherwise False .</param>
            <param name="errors">Store the errors information.</param>
            <returns>True if the state of the data acquiring is written to disk successfully, false otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveComment1AndComment2(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,System.String,System.String,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the device run header fields - comment1 and comment2.
            </summary>
            <param name="runHeader">The device run header.</param>
            <param name="writer">The writer.</param>
            <param name="comment1">The comment1.</param>
            <param name="comment2">The comment2.</param>
            <param name="errors">Store the errors information.</param>
            <returns>True if these fields are written to disk successfully, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveRunHeader(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader,ThermoFisher.CommonCore.RawFileReader.Facade.Interfaces.IMemMapAccessor,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Updates the run header shared memory mapped buffer.
            </summary>
            <param name="runHeader">
            The run Header.
            </param>
            <param name="writer">
            The writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <returns>True the run header save to the shared memory map object, otherwise False.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.RunHeaderExtension.SaveToRawFile(ThermoFisher.CommonCore.RawFileReader.StructWrappers.VirtualDevices.RunHeader,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the device run header to the raw file using the  provided binary writer.
            </summary>
            <param name="runHeader">
            The run header.
            </param>
            <param name="writer">
            The writer.
            </param>
            <param name="errors">
            The errors.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.ScanEventExtension">
            <summary>
            Provides save extension methods for writing scan event object to disk.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.ScanEventExtension.SaveScanEvent(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves a scan event.
            </summary>
            <param name="scanEvent">The scan event.</param>
            <param name="writer">The writer.</param>
            <param name="errors">The errors.</param>
            <returns>True if a scan event saved to disk; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">mass Spec Scan Events</exception>
            <exception cref="T:System.ArgumentNullException">mass Spec Scan Events</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.ScanEventExtension.CreateBytesFromEvent(ThermoFisher.CommonCore.Data.Interfaces.IScanEvent)">
            <summary>
            Create byte array from event.
            Formats a "ScanEventInfoStruct" from the supplied data, and returns as a byte array.
            </summary>
            <param name="scanEvent">
            The scan event.
            </param>
            <returns>
            The byte array
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.ScanEventExtension.WriteMassRanges(System.Func{System.Int32,ThermoFisher.CommonCore.Data.Business.Range},System.IO.BinaryWriter,System.Int32)">
            <summary>
            write a table of mass ranges.
            </summary>
            <param name="getRange">
            The method to get a range.
            </param>
            <param name="writer">
            The writer.
            </param>
            <param name="numRanges">
            The number of ranges.
            </param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.ScanEventExtension.WriteDoubles(System.Func{System.Int32,System.Double},System.IO.BinaryWriter,System.Int32)">
            <summary>
            write a table of doubles.
            </summary>
            <param name="getValue">
            The method to get a value to write.
            </param>
            <param name="writer">
            The writer.
            </param>
            <param name="numValues">
            The number of values.
            </param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileInfoExtension">
            <summary>
            Provides custom extension methods for sequence file info, such as Save().
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileInfoExtension.Save(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.SequenceFileInfoStruct,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the sequence file information struct to file.
            </summary>
            <param name="info">The information.</param>
            <param name="writer">The writer.</param>
            <param name="errors">The errors.</param>
            <returns>True sequence file info saved to sequence file; false otherwise.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter">
            <summary>
            Provides methods to create, update and write samples to sequence file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="openExisting">True open an existing sequence file with read/write privilege; false to create a new unique sequence file</param>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.FileHeader">
            <summary>
            Gets the file header for the sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.Info">
            <summary>
            Gets or sets additional information about a sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.Samples">
            <summary>
            Gets the set of samples in the sequence
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.FileError">
            <summary>
            Gets the file error state.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.IsError">
            <summary>
            Gets a value indicating whether the last file operation caused an error
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.FileName">
            <summary>
            Gets the name of the sequence file.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.Bracket">
            <summary>
            Gets or sets the sequence bracket type.
            This determines which groups of samples use the same calibration curve.
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.TrayConfiguration">
            <summary>
            Gets or sets a description of the auto sampler tray
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.GetUserColumnLabel(System.Int32)">
            <summary>
            Retrieves the user label at given 0-based label index.
            </summary>
            <param name="index">Index of user label to be retrieved</param>
            <returns>String containing the user label at given index</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.SetUserColumnLabel(System.Int32,System.String)">
            <summary>
            Sets the user label at given 0-based label index.
            </summary>
            <param name="index">Index of user label to be set</param>
            <param name="label">New string value for user label to be set</param>
            <returns>true if successful;  false otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.UpdateFileHeader(ThermoFisher.CommonCore.Data.Interfaces.IFileHeaderUpdate)">
            <summary>
            Update the instrument method file header with the file header values passed in.  
            Only updates object values in memory, does not write to disk.
            </summary>
            <param name="fileHeader">The file header.</param>
            <exception cref="T:System.ArgumentNullException">File header cannot be null.</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.Save">
            <summary>
            Saves Sequence data to file.
            </summary>
            <returns>True saved to file; false otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.InitialWriter(System.String)">
            <summary>
            Initials the writer.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>True sequence file writer created; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.InitialSequenceInfo">
            <summary>
            Initials the sequence file.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriter.CopySeqInfo(ThermoFisher.CommonCore.Data.Interfaces.ISequenceInfo)">
            <summary>
            Copies the sequence information data.
            </summary>
            <param name="srcSeqInfo">The source sequence information.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriterAdapter">
            <summary>
            This static class contains factory to create sequence file writer adapter.  
            It's used internally to get a sequence file writer object.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceFileWriterAdapter.CreateSequenceFileWriter(System.String,System.Boolean)">
            <summary>
            Creates the sequence file writer.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="openExisting">True open an existing sequence file with read/write privilege; false to create a new unique sequence file</param>
            <returns>Sequence file writer object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceRowExtension">
            <summary>
            The sequence row extension.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceRowExtension.Save(ThermoFisher.CommonCore.RawFileReader.StructWrappers.SequenceRow,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Extension method to save file header.
            </summary>
            <param name="sequenceRow">
            The sequence Row.
            </param>
            <param name="binaryWriter">
            The binary writer used to write data.
            </param>
            <param name="errors">
            The errors.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SequenceRowExtension.Save(System.Collections.Generic.IReadOnlyList{ThermoFisher.CommonCore.Data.Business.SampleInformation},System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the specified binary writer.
            </summary>
            <param name="samples">The samples.</param>
            <param name="binaryWriter">The binary writer.</param>
            <param name="errors">The errors.</param>
            <returns>True samples saved to file; false otherwise.</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.SharedMemHelper">
            <summary>
            SharedBuffer is a class that utilize memory mapped file for sharing data between processes.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SharedMemHelper.CreateSharedBufferAccessor(System.Guid,System.String,System.Int64,System.Boolean,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Creates the shared buffer accessor.
            </summary>
            <param name="deviceId">device id</param>
            <param name="mapName">Name of the map.</param>
            <param name="size">The size.</param>
            <param name="creatable">if set to <c>true</c> [creatable].</param>
            <param name="errors">device errors object</param>
            <returns>True created shared memory map object successfully; otherwise False</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.SharedMemHelper.ValidateMemMapAccessor(ThermoFisher.CommonCore.RawFileReader.Readers.MemMapAccessor,System.String,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Validates the memory map accessor.
            </summary>
            <param name="accessor">The shared memory map accessor.</param>
            <param name="streamId">Stream data ID</param>
            <param name="errors">Device errors object that store errors information.</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.TempFileHelper">
            <summary>
            Provides methods to create temporary file for writing instrument data
            </summary>
        </member>
        <member name="F:ThermoFisher.CommonCore.RawFileReader.Writers.TempFileHelper.TempFileFolder">
            <summary>
            The _temp file folder
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.TempFileHelper.CreateTempFile(System.IO.BinaryWriter@,System.String@,System.Boolean,System.Boolean)">
            <summary>
            The create temp file name for device data.
            </summary>
            <param name="writer">Instrument stream writer</param>
            <param name="tempFileName">Output of the temporary file name</param>
            <param name="addZeroValueLengthField"> The add zero value length field. </param>
            <param name="restStreamPosition">Reset the stream position back to the start. This requires addZeroValueLengthField is set True</param>
            <returns>True if a temporary file was created successfully; false otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.TempFileHelper.TempFileFolderPath">
            <summary>
            Get the temporary the file folder path.
            </summary>
            <returns>The file folder path for keeping the temporary files</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Temporary file path length is greater than 260 chars :  + temporary data folder path</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.TempFileHelper.DeleteTempFile(System.String,System.String)">
            <summary>
            Deletes the temporary file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileExtension">Specified the file extension</param>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.UnpackedMsInstrumentData">
            <summary>
            This class partially unpacks MS instruments data after being transmitted (usually by binary message protocol)
            </summary>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.UnpackedMsInstrumentData.PackedScanEvent">
            <inheritdoc/>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.UnpackedMsInstrumentData.StatisticsData">
            <inheritdoc/>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.UnpackedMsInstrumentData.ScanData">
            <inheritdoc/>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.UnpackedMsInstrumentData.ProfileIndexCount">
            <inheritdoc/>
        </member>
        <member name="P:ThermoFisher.CommonCore.RawFileReader.Writers.UnpackedMsInstrumentData.ProfileData">
            <inheritdoc/>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter">
            <summary>
            Provides methods to write UV Device data.<para/>
            Note: The following functions should be called before acquisition begins:<para/>
            1. Write Instrument Information<para/>
            2. Write Instrument Expected Run Time<para/>
            3. Write Status Log Header
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.#ctor(ThermoFisher.CommonCore.Data.Business.Device,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter"/> class.
            </summary>
            <param name="deviceType">Type of the device.</param>
            <param name="deviceIndex">Index of the device.</param>
            <param name="rawFileName">Name of the raw file.</param>
            <param name="inAcquisition">if set to <c>true</c> [in acquisition].</param>
            <param name="fileRevision">The file revision.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.WriteInstData(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IAnalogScanIndex)">
            <summary>
            Writes the analog instrument data.
            </summary>
            <param name="instData">The analog instrument data.</param>
            <param name="instDataIndex">Index of the analog instrument data.</param>
            <returns>True instrument data write to the disk file; otherwise False.</returns>
            <exception cref="T:System.ArgumentNullException">
            Instrument Data
            or
            Analog Scan Index
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.WriteInstData(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex)">
            <summary>
            Writes the UV instrument data.
            </summary>
            <param name="instData">The UV instrument data.</param>
            <param name="instDataIndex">Index of the UV instrument data.</param>
            <returns>True instrument data write to the disk file; otherwise False.</returns>
            <exception cref="T:System.ArgumentNullException">
            Instrument Data
            or
            UV Scan Index
            </exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.WriteInstDataToFile(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex)">
            <summary>
            Writes the instrument data to file.
            </summary>
            <param name="instData">The instrument data.</param>
            <param name="instDataIndex">Index of the instrument data.</param>
            <returns>True instrument data write to the disk file; otherwise False.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.ValidateInstData(System.Double[],ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex)">
            <summary>
            Validates the UV and Analog instrument data.
            </summary>
            <param name="instData">The instrument data.</param>
            <param name="instDataIndex">Index of the UV instrument data.</param>
            <returns>True if the input data has the correct format; otherwise false.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.WriteInstData(System.Byte[],System.Int32,ThermoFisher.CommonCore.Data.Business.SpectrumPacketType,System.Int32,System.Boolean)">
            <summary>
            Writes the instrument data packets to the file.<para/>
            This routine will branch to the appropriate packet routines.
            </summary>
            <param name="data">Block of a formatted data to write.</param>
            <param name="dataSize">Size of the data block.</param>
            <param name="packetType">Type of the packet.</param>
            <param name="numChannels">The number channels.</param>
            <param name="isUniformTime">if set to <c>true</c> [is uniform time].</param>
            <returns> True if packets are written to disk successfully, False otherwise.</returns>
            <exception cref="T:System.NotSupportedException">Not Supported Exception</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.WriteInstDataPackets(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Write instrument data packets to the file.
            This routine will branch to the appropriate packet routines to compress the data block before being written to disk.
            </summary>
            <param name="data">The data to write to file.</param>
            <param name="dataSize">The data size.</param>
            <param name="packetSize">Size of each packet in the data block.</param>
            <param name="updateNumPackets">The update number of packets.</param>
            <returns>TRUE if packets are written to disk successfully, FALSE otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.WriteInstScanIndex(ThermoFisher.CommonCore.RawFileReader.StructWrappers.Scan.UvScanIndex)">
            <summary>
            Writes instrument scan index (header) to a file.
            </summary>
            <param name="scanIndex">Index of the UV scan.</param>
            <returns>True if scan index is written to disk successfully, False otherwise</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvDeviceWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.UvScanIndexExtension">
            <summary>
            The UV scan index extension.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvScanIndexExtension.Save(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.UvScanIndexStruct,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the UV scan index structure information to disk.
            </summary>
            <param name="uvScanIndexStructInfo">The UV scan index structure information.</param>
            <param name="writer">The stream writer.</param>
            <param name="errors">The errors.</param>
            <returns>True if UV scan index saved to disk, false otherwise. </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvScanIndexExtension.Save(ThermoFisher.CommonCore.RawFileReader.FileIoStructs.ScanIndex.ScanIndexStruct,System.IO.BinaryWriter,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Saves the mass spec scan index structure to disk.
            </summary>
            <param name="scanIndex">The mass spec scan index structure.</param>
            <param name="writer">The stream writer.</param>
            <param name="errors">Stack trace on errors.</param>
            <returns>True if mass spec scan index saved to disk, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvScanIndexExtension.ConvertToUvScanIndex(ThermoFisher.CommonCore.Data.Interfaces.IUvScanIndex)">
            <summary>
            Copy all the fields of the current CommonCore UV ScanIndex object to the new internal UV ScanIndex object.
            </summary>
            <param name="uvDataIndex">Index of the UV instrument scan.</param>
            <returns>Create a copy of the UV ScanIndex object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvScanIndexExtension.ConvertToUvScanIndex(ThermoFisher.CommonCore.Data.Interfaces.IPdaScanIndex)">
            <summary>
            Copy all the fields of the current CommonCore PDA ScanIndex object to the new internal UV ScanIndex object.
            </summary>
            <param name="pdaDataIndex">Index of the PDA data.</param>
            <returns>Create a copy of the UV ScanIndex object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.UvScanIndexExtension.ConvertToScanIndex(ThermoFisher.CommonCore.Data.Interfaces.IScanStatisticsAccess)">
            <summary>
            Converts all the fields of the current ScanStatistics objet to a new internal scan index object
            </summary>
            <param name="scanStatistics">The scan statistics.</param>
            <returns>Create a copy of the mass spec scan index object</returns>
        </member>
        <member name="T:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper">
            <summary>
            Provides some commonly used functions for writing device stream data.
            </summary>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.CritSec``1(System.Func{ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,``0},ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.String,System.Boolean)">
            <summary>
            Use mutex to create a "critical section" region of code that executes in isolation. 
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <param name="method">The method.</param>
            <param name="errors">The errors information.</param>
            <param name="mutexName">Name of the mutex.</param>
            <param name="useGlobalNamespace">True add Global prefix to the file name; otherwise no.</param>
            <returns>True if the operation succeed; otherwise False</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.CritSec(System.Func{ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Boolean},ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Threading.Mutex)">
            <summary>
            Use mutex to create a "critical section" region of code that executes in isolation. 
            </summary>
            <param name="method">The method.</param>
            <param name="errors">The errors.</param>
            <param name="mutex">The mutex.</param>
            <returns>True if the operation succeed, otherwise False</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.TryCatch(System.Func{ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors,System.Boolean},ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            A wrapper method of a try catch.
            </summary>
            <param name="method">The method.</param>
            <param name="error">The error.</param>
            <returns>True the method execute successfully; otherwise false</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.StructToByteArray``1(``0,System.Int32)">
            <summary>
            Convert a structure to byte array.
            </summary>
            <typeparam name="T">Such as file header, sequence row, etc.</typeparam>
            <param name="objStruct">The object structure.</param>
            <param name="size">The size.</param>
            <returns>results in byte array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.StringWrite(System.IO.BinaryWriter,System.String,System.Boolean)">
            <summary>
            Write string data to the file.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="isWideChar">True if it's wide/unicode char, False otherwise.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.ToIntArray(System.Double[])">
            <summary>
            Convert double array to the integer array.
            </summary>
            <param name="values">The values.</param>
            <returns>results in integer array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.ToByteArray(System.Int32[])">
            <summary>
            Convert the integer array to the byte array.
            </summary>
            <param name="values">The values.</param>
            <returns>result in byte array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.ToByteArray(System.Double[])">
            <summary>
            Convert double array to byte array.
            </summary>
            <param name="values">
            The values.
            </param>
            <returns>Byte array</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.UpdateErrorsException(System.Exception,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Updates the errors exception.
            </summary>
            <param name="value">The value.</param>
            <param name="errors">The errors.</param>
            <returns>Store the error information to the error object and return back the original exception object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.UpdateErrors(ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo,ThermoFisher.CommonCore.RawFileReader.Writers.DeviceErrors)">
            <summary>
            Updates the errors from the shared memory map Buffer Info.
            </summary>
            <param name="bufferInfo"> The buffer information. </param>
            <param name="errors"> Storing the errors information. </param>
            <returns>The shared memory map buffer info object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.DisposeBufferInfo(ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo)">
            <summary>
            Disposes the buffer information object.
            </summary>
            <param name="bufferInfo">The buffer information.</param>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.GetTimeStampFileName(System.String)">
            <summary>
            Creates a unique file name based on the time and date along with the file passed in.
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.DeleteTempFileOnlyIfNoReference(ThermoFisher.CommonCore.RawFileReader.Writers.BufferInfo,System.String,System.Boolean)">
            <summary>
            Deletes the temporary file (with .TMP extension) only if no reference
            </summary>
            <param name="bufferInfo">The buffer information.</param>
            <param name="tempFileName">Name of the temporary file.</param>
            <param name="deletePermitted">True if permitted to delete temp files</param>
            <returns>return back the buffer info object</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.IsWrittenGenericHeaderDone(System.Int32[])">
            <summary>
            Determines whether [is generic header ready].
            </summary>
            <param name="writtenFlags">The written flags.</param>
            <returns>True if all generic headers have been written; false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.HasNoScan(ThermoFisher.CommonCore.Data.Interfaces.ISegmentedScanAccess)">
            <summary>
            Determines whether the specified segmented scan has scan.
            </summary>
            <param name="segmentedScan">The segmented scan.</param>
            <returns>True if the segmented scan has scan, false otherwise.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.ValidateName(System.String,System.String)">
            <summary>
            Validates the string name.
            </summary>
            <param name="name">The string name.</param>
            <param name="message">Error message</param>
            <exception cref="T:System.ArgumentNullException">name;@Error message</exception>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.ValidInstrumentMethodFileExtension(System.String)">
            <summary>
            Valid the instrument method file extension.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Instrument method file name with correct file extension.</returns>
        </member>
        <member name="M:ThermoFisher.CommonCore.RawFileReader.Writers.WriterHelper.ValidateArrayArgument``1(``0[],System.String)">
            <summary>
            Validates the array argument.
            </summary>
            <typeparam name="T">array of integer and double</typeparam>
            <param name="data">The data.</param>
            <param name="argName">Name of the argument.</param>
            <exception cref="T:System.ArgumentNullException">name of the input argument</exception>
        </member>
    </members>
</doc>
